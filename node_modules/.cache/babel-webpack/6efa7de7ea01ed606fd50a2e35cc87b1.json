{"ast":null,"code":"var async = require('./async.js'),\n    abort = require('./abort.js'); // API\n\n\nmodule.exports = iterate;\n/**\n * Iterates over each job object\n *\n * @param {array|object} list - array or object (named list) to iterate over\n * @param {function} iterator - iterator to run\n * @param {object} state - current job status\n * @param {function} callback - invoked when all elements processed\n */\n\nfunction iterate(list, iterator, state, callback) {\n  // store current index\n  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n  state.jobs[key] = runJob(iterator, key, list[key], function (error, output) {\n    // don't repeat yourself\n    // skip secondary callbacks\n    if (!(key in state.jobs)) {\n      return;\n    } // clean up jobs\n\n\n    delete state.jobs[key];\n\n    if (error) {\n      // don't process rest of the results\n      // stop still active jobs\n      // and reset the list\n      abort(state);\n    } else {\n      state.results[key] = output;\n    } // return salvaged results\n\n\n    callback(error, state.results);\n  });\n}\n/**\n * Runs iterator over provided job element\n *\n * @param   {function} iterator - iterator to invoke\n * @param   {string|number} key - key/index of the element in the list of jobs\n * @param   {mixed} item - job description\n * @param   {function} callback - invoked after iterator is done with the job\n * @returns {function|mixed} - job abort function or something else\n */\n\n\nfunction runJob(iterator, key, item, callback) {\n  var aborter; // allow shortcut if iterator expects only two arguments\n\n  if (iterator.length == 2) {\n    aborter = iterator(item, async(callback));\n  } // otherwise go with full three arguments\n  else {\n      aborter = iterator(item, key, async(callback));\n    }\n\n  return aborter;\n}","map":null,"metadata":{},"sourceType":"script"}