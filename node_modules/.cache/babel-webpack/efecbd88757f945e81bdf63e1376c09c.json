{"ast":null,"code":"import _asyncToGenerator from \"/Users/artakoroushnia/Desktop/thred-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"ngx-image-cropper\";\nexport class CropperComponent {\n  constructor(modalService, activeModal) {\n    this.modalService = modalService;\n    this.activeModal = activeModal;\n    this.imageChangedEvent = '';\n    this.croppedImage = '';\n    this.ratio = 1;\n    this.width = 200;\n    this.height = 200;\n  }\n\n  ngOnInit() {}\n\n  imageCropped(event) {\n    this.croppedImage = event.base64;\n  }\n\n  imageLoaded() {// show cropper\n  }\n\n  compressImage(src) {\n    return new Promise((res, rej) => {\n      const img = new Image();\n      img.src = src;\n\n      img.onload = () => {\n        const elem = document.createElement('canvas');\n        elem.width = this.width;\n        elem.height = this.height;\n        const ctx = elem.getContext('2d');\n        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(img, 0, 0, this.width, this.height);\n        const data = ctx === null || ctx === void 0 ? void 0 : ctx.canvas.toDataURL(\"image/jpg\");\n        res(data);\n      };\n\n      img.onerror = error => rej(error);\n    });\n  }\n\n  useImage() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"ok\");\n      let res = yield _this.compressImage(_this.croppedImage);\n\n      _this.modalService.dismissAll(res);\n    })();\n  }\n\n  cropperReady() {// cropper ready\n  }\n\n  loadImageFailed() {// show message\n  }\n\n}\n\nCropperComponent.ɵfac = function CropperComponent_Factory(t) {\n  return new (t || CropperComponent)(i0.ɵɵdirectiveInject(i1.NgbModal), i0.ɵɵdirectiveInject(i1.NgbActiveModal));\n};\n\nCropperComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CropperComponent,\n  selectors: [[\"app-cropper\"]],\n  decls: 4,\n  vars: 3,\n  consts: [[\"format\", \"png\", 3, \"imageChangedEvent\", \"maintainAspectRatio\", \"aspectRatio\", \"imageCropped\", \"imageLoaded\", \"cropperReady\", \"loadImageFailed\"], [\"role\", \"button\", 1, \"btn\", \"btn-dark\", \"mt-auto\", \"d-flex\", \"justify-content-center\", \"text-center\", \"fw-bold\", 3, \"click\"]],\n  template: function CropperComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelementStart(1, \"image-cropper\", 0);\n      i0.ɵɵlistener(\"imageCropped\", function CropperComponent_Template_image_cropper_imageCropped_1_listener($event) {\n        return ctx.imageCropped($event);\n      })(\"imageLoaded\", function CropperComponent_Template_image_cropper_imageLoaded_1_listener() {\n        return ctx.imageLoaded();\n      })(\"cropperReady\", function CropperComponent_Template_image_cropper_cropperReady_1_listener() {\n        return ctx.cropperReady();\n      })(\"loadImageFailed\", function CropperComponent_Template_image_cropper_loadImageFailed_1_listener() {\n        return ctx.loadImageFailed();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"a\", 1);\n      i0.ɵɵlistener(\"click\", function CropperComponent_Template_a_click_2_listener() {\n        return ctx.useImage();\n      });\n      i0.ɵɵtext(3, \" USE PHOTO \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"imageChangedEvent\", ctx.imageChangedEvent)(\"maintainAspectRatio\", true)(\"aspectRatio\", ctx.ratio);\n    }\n  },\n  directives: [i2.ImageCropperComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjcm9wcGVyLmNvbXBvbmVudC5jc3MifQ== */\"]\n});","map":{"version":3,"sources":["/Users/artakoroushnia/Desktop/thred-web/src/app/cropper/cropper.component.ts","/Users/artakoroushnia/Desktop/thred-web/src/app/cropper/cropper.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ImageCroppedEvent, LoadedImage } from 'ngx-image-cropper';\nimport { NgbModal, NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'app-cropper',\n  templateUrl: './cropper.component.html',\n  styleUrls: ['./cropper.component.css']\n})\nexport class CropperComponent implements OnInit {\n\n  imageChangedEvent: any = '';\n  croppedImage: any = '';\n  ratio = 1;\n  width = 200\n  height = 200\n\n  constructor(\n    private modalService: NgbModal,\n    private activeModal: NgbActiveModal,\n  ) { }\n\n  ngOnInit(): void {\n    \n  }\n  imageCropped(event: ImageCroppedEvent) {\n    this.croppedImage = event.base64;\n}\nimageLoaded() {\n  // show cropper\n}\n\ncompressImage(src: string) {\n  return new Promise((res, rej) => {\n    const img = new Image();\n    img.src = src;\n    img.onload = () => {\n      const elem = document.createElement('canvas');\n      elem.width = this.width;\n      elem.height = this.height;\n      const ctx = elem.getContext('2d');\n      ctx?.drawImage(img, 0, 0, this.width, this.height);\n      const data = ctx?.canvas.toDataURL(\"image/jpg\")\n      res(data);\n    }\n    img.onerror = error => rej(error);\n  })\n}\n\nasync useImage(){\n  console.log(\"ok\")\n  let res = await this.compressImage(this.croppedImage)\n  this.modalService.dismissAll(res)\n}\n\ncropperReady() {\n    // cropper ready\n}\nloadImageFailed() {\n    // show message\n}\n\n\n\n}\n","\n<div>\n\n    <image-cropper\n        [imageChangedEvent]=\"imageChangedEvent\"\n        [maintainAspectRatio]=\"true\"\n        [aspectRatio]=\"ratio\"\n        format=\"png\"\n        (imageCropped)=\"imageCropped($event)\"\n        (imageLoaded)=\"imageLoaded()\"\n        (cropperReady)=\"cropperReady()\"\n        (loadImageFailed)=\"loadImageFailed()\"\n    ></image-cropper>\n    <a role=\"button\" class=\"btn btn-dark mt-auto d-flex justify-content-center text-center fw-bold\"  (click)=\"useImage()\">\n        USE PHOTO\n    </a>\n</div>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}