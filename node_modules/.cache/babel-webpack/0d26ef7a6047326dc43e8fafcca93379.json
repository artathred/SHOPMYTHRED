{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar _asyncToGenerator = require(\"/Users/artakoroushnia/Desktop/thred-web/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MaxMessageSizeFilterFactory = exports.MaxMessageSizeFilter = void 0;\n\nconst filter_1 = require(\"./filter\");\n\nconst constants_1 = require(\"./constants\");\n\nclass MaxMessageSizeFilter extends filter_1.BaseFilter {\n  constructor(options, callStream) {\n    super();\n    this.options = options;\n    this.callStream = callStream;\n    this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n    this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n\n    if ('grpc.max_send_message_length' in options) {\n      this.maxSendMessageSize = options['grpc.max_send_message_length'];\n    }\n\n    if ('grpc.max_receive_message_length' in options) {\n      this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];\n    }\n  }\n\n  sendMessage(message) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      /* A configured size of -1 means that there is no limit, so skip the check\n       * entirely */\n      if (_this.maxSendMessageSize === -1) {\n        return message;\n      } else {\n        const concreteMessage = yield message;\n\n        if (concreteMessage.message.length > _this.maxSendMessageSize) {\n          _this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Sent message larger than max (${concreteMessage.message.length} vs. ${_this.maxSendMessageSize})`);\n\n          return Promise.reject('Message too large');\n        } else {\n          return concreteMessage;\n        }\n      }\n    })();\n  }\n\n  receiveMessage(message) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      /* A configured size of -1 means that there is no limit, so skip the check\n       * entirely */\n      if (_this2.maxReceiveMessageSize === -1) {\n        return message;\n      } else {\n        const concreteMessage = yield message;\n\n        if (concreteMessage.length > _this2.maxReceiveMessageSize) {\n          _this2.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Received message larger than max (${concreteMessage.length} vs. ${_this2.maxReceiveMessageSize})`);\n\n          return Promise.reject('Message too large');\n        } else {\n          return concreteMessage;\n        }\n      }\n    })();\n  }\n\n}\n\nexports.MaxMessageSizeFilter = MaxMessageSizeFilter;\n\nclass MaxMessageSizeFilterFactory {\n  constructor(options) {\n    this.options = options;\n  }\n\n  createFilter(callStream) {\n    return new MaxMessageSizeFilter(this.options, callStream);\n  }\n\n}\n\nexports.MaxMessageSizeFilterFactory = MaxMessageSizeFilterFactory; //# sourceMappingURL=max-message-size-filter.js.map","map":{"version":3,"sources":["/Users/artakoroushnia/Desktop/thred-web/node_modules/@grpc/grpc-js/build/src/max-message-size-filter.js"],"names":["Object","defineProperty","exports","value","MaxMessageSizeFilterFactory","MaxMessageSizeFilter","filter_1","require","constants_1","BaseFilter","constructor","options","callStream","maxSendMessageSize","DEFAULT_MAX_SEND_MESSAGE_LENGTH","maxReceiveMessageSize","DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH","sendMessage","message","concreteMessage","length","cancelWithStatus","Status","RESOURCE_EXHAUSTED","Promise","reject","receiveMessage","createFilter"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,2BAAR,GAAsCF,OAAO,CAACG,oBAAR,GAA+B,KAAK,CAA1E;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMF,oBAAN,SAAmCC,QAAQ,CAACG,UAA5C,CAAuD;AACnDC,EAAAA,WAAW,CAACC,OAAD,EAAUC,UAAV,EAAsB;AAC7B;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,kBAAL,GAA0BL,WAAW,CAACM,+BAAtC;AACA,SAAKC,qBAAL,GAA6BP,WAAW,CAACQ,kCAAzC;;AACA,QAAI,kCAAkCL,OAAtC,EAA+C;AAC3C,WAAKE,kBAAL,GAA0BF,OAAO,CAAC,8BAAD,CAAjC;AACH;;AACD,QAAI,qCAAqCA,OAAzC,EAAkD;AAC9C,WAAKI,qBAAL,GAA6BJ,OAAO,CAAC,iCAAD,CAApC;AACH;AACJ;;AACKM,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA;;AAAA;AACvB;AACR;AACQ,UAAI,KAAI,CAACL,kBAAL,KAA4B,CAAC,CAAjC,EAAoC;AAChC,eAAOK,OAAP;AACH,OAFD,MAGK;AACD,cAAMC,eAAe,SAASD,OAA9B;;AACA,YAAIC,eAAe,CAACD,OAAhB,CAAwBE,MAAxB,GAAiC,KAAI,CAACP,kBAA1C,EAA8D;AAC1D,UAAA,KAAI,CAACD,UAAL,CAAgBS,gBAAhB,CAAiCb,WAAW,CAACc,MAAZ,CAAmBC,kBAApD,EAAyE,iCAAgCJ,eAAe,CAACD,OAAhB,CAAwBE,MAAO,QAAO,KAAI,CAACP,kBAAmB,GAAvK;;AACA,iBAAOW,OAAO,CAACC,MAAR,CAAe,mBAAf,CAAP;AACH,SAHD,MAIK;AACD,iBAAON,eAAP;AACH;AACJ;AAfsB;AAgB1B;;AACKO,EAAAA,cAAc,CAACR,OAAD,EAAU;AAAA;;AAAA;AAC1B;AACR;AACQ,UAAI,MAAI,CAACH,qBAAL,KAA+B,CAAC,CAApC,EAAuC;AACnC,eAAOG,OAAP;AACH,OAFD,MAGK;AACD,cAAMC,eAAe,SAASD,OAA9B;;AACA,YAAIC,eAAe,CAACC,MAAhB,GAAyB,MAAI,CAACL,qBAAlC,EAAyD;AACrD,UAAA,MAAI,CAACH,UAAL,CAAgBS,gBAAhB,CAAiCb,WAAW,CAACc,MAAZ,CAAmBC,kBAApD,EAAyE,qCAAoCJ,eAAe,CAACC,MAAO,QAAO,MAAI,CAACL,qBAAsB,GAAtK;;AACA,iBAAOS,OAAO,CAACC,MAAR,CAAe,mBAAf,CAAP;AACH,SAHD,MAIK;AACD,iBAAON,eAAP;AACH;AACJ;AAfyB;AAgB7B;;AA/CkD;;AAiDvDjB,OAAO,CAACG,oBAAR,GAA+BA,oBAA/B;;AACA,MAAMD,2BAAN,CAAkC;AAC9BM,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACH;;AACDgB,EAAAA,YAAY,CAACf,UAAD,EAAa;AACrB,WAAO,IAAIP,oBAAJ,CAAyB,KAAKM,OAA9B,EAAuCC,UAAvC,CAAP;AACH;;AAN6B;;AAQlCV,OAAO,CAACE,2BAAR,GAAsCA,2BAAtC,C,CACA","sourcesContent":["\"use strict\";\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MaxMessageSizeFilterFactory = exports.MaxMessageSizeFilter = void 0;\nconst filter_1 = require(\"./filter\");\nconst constants_1 = require(\"./constants\");\nclass MaxMessageSizeFilter extends filter_1.BaseFilter {\n    constructor(options, callStream) {\n        super();\n        this.options = options;\n        this.callStream = callStream;\n        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n        if ('grpc.max_send_message_length' in options) {\n            this.maxSendMessageSize = options['grpc.max_send_message_length'];\n        }\n        if ('grpc.max_receive_message_length' in options) {\n            this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];\n        }\n    }\n    async sendMessage(message) {\n        /* A configured size of -1 means that there is no limit, so skip the check\n         * entirely */\n        if (this.maxSendMessageSize === -1) {\n            return message;\n        }\n        else {\n            const concreteMessage = await message;\n            if (concreteMessage.message.length > this.maxSendMessageSize) {\n                this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Sent message larger than max (${concreteMessage.message.length} vs. ${this.maxSendMessageSize})`);\n                return Promise.reject('Message too large');\n            }\n            else {\n                return concreteMessage;\n            }\n        }\n    }\n    async receiveMessage(message) {\n        /* A configured size of -1 means that there is no limit, so skip the check\n         * entirely */\n        if (this.maxReceiveMessageSize === -1) {\n            return message;\n        }\n        else {\n            const concreteMessage = await message;\n            if (concreteMessage.length > this.maxReceiveMessageSize) {\n                this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Received message larger than max (${concreteMessage.length} vs. ${this.maxReceiveMessageSize})`);\n                return Promise.reject('Message too large');\n            }\n            else {\n                return concreteMessage;\n            }\n        }\n    }\n}\nexports.MaxMessageSizeFilter = MaxMessageSizeFilter;\nclass MaxMessageSizeFilterFactory {\n    constructor(options) {\n        this.options = options;\n    }\n    createFilter(callStream) {\n        return new MaxMessageSizeFilter(this.options, callStream);\n    }\n}\nexports.MaxMessageSizeFilterFactory = MaxMessageSizeFilterFactory;\n//# sourceMappingURL=max-message-size-filter.js.map"]},"metadata":{},"sourceType":"script"}