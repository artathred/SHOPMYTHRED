{"ast":null,"code":"'use strict';\n\nvar tslib = require('tslib');\n\nvar util = require('@firebase/util');\n\nvar logger = require('@firebase/logger');\n\nvar util$1 = require('util');\n\nvar crypto = require('crypto');\n\nvar grpcJs = require('@grpc/grpc-js');\n\nvar package_json = require('@grpc/grpc-js/package.json');\n\nvar path = require('path');\n\nvar protoLoader = require('@grpc/proto-loader');\n\nvar version = \"8.8.1\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar SDK_VERSION = version;\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to\r\n * exceed. All subsequent calls to next will return increasing values. If provided with a\r\n * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as\r\n * well as write out sequence numbers that it produces via `next()`.\r\n */\n\nvar ListenSequence =\n/** @class */\nfunction () {\n  function ListenSequence(previousValue, sequenceNumberSyncer) {\n    var _this = this;\n\n    this.previousValue = previousValue;\n\n    if (sequenceNumberSyncer) {\n      sequenceNumberSyncer.sequenceNumberHandler = function (sequenceNumber) {\n        return _this.setPreviousValue(sequenceNumber);\n      };\n\n      this.writeNewSequenceNumber = function (sequenceNumber) {\n        return sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);\n      };\n    }\n  }\n\n  ListenSequence.prototype.setPreviousValue = function (externalPreviousValue) {\n    this.previousValue = Math.max(externalPreviousValue, this.previousValue);\n    return this.previousValue;\n  };\n\n  ListenSequence.prototype.next = function () {\n    var nextValue = ++this.previousValue;\n\n    if (this.writeNewSequenceNumber) {\n      this.writeNewSequenceNumber(nextValue);\n    }\n\n    return nextValue;\n  };\n\n  return ListenSequence;\n}();\n\nListenSequence.INVALID = -1;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Formats an object as a JSON string, suitable for logging. */\n\nfunction formatJSON(value) {\n  // util.inspect() results in much more readable output than JSON.stringify()\n  return util$1.inspect(value, {\n    depth: 100\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar logClient = new logger.Logger('@firebase/firestore'); // Helper methods are needed because variables can't be exported as read/write\n\nfunction getLogLevel() {\n  return logClient.logLevel;\n}\n/**\r\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\r\n *\r\n * @param logLevel - The verbosity you set for activity and error logging. Can\r\n *   be any of the following values:\r\n *\r\n *   <ul>\r\n *     <li>`debug` for the most verbose logging level, primarily for\r\n *     debugging.</li>\r\n *     <li>`error` to log errors only.</li>\r\n *     <li><code>`silent` to turn off logging.</li>\r\n *   </ul>\r\n */\n\n\nfunction setLogLevel$1(logLevel) {\n  logClient.setLogLevel(logLevel);\n}\n\nfunction logDebug(msg) {\n  var obj = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    obj[_i - 1] = arguments[_i];\n  }\n\n  if (logClient.logLevel <= logger.LogLevel.DEBUG) {\n    var args = obj.map(argToString);\n    logClient.debug.apply(logClient, tslib.__spreadArray([\"Firestore (\" + SDK_VERSION + \"): \" + msg], args));\n  }\n}\n\nfunction logError(msg) {\n  var obj = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    obj[_i - 1] = arguments[_i];\n  }\n\n  if (logClient.logLevel <= logger.LogLevel.ERROR) {\n    var args = obj.map(argToString);\n    logClient.error.apply(logClient, tslib.__spreadArray([\"Firestore (\" + SDK_VERSION + \"): \" + msg], args));\n  }\n}\n\nfunction logWarn(msg) {\n  var obj = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    obj[_i - 1] = arguments[_i];\n  }\n\n  if (logClient.logLevel <= logger.LogLevel.WARN) {\n    var args = obj.map(argToString);\n    logClient.warn.apply(logClient, tslib.__spreadArray([\"Firestore (\" + SDK_VERSION + \"): \" + msg], args));\n  }\n}\n/**\r\n * Converts an additional log parameter to a string representation.\r\n */\n\n\nfunction argToString(obj) {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Unconditionally fails, throwing an Error with the given message.\r\n * Messages are stripped in production builds.\r\n *\r\n * Returns `never` and can be used in expressions:\r\n * @example\r\n * let futureVar = fail('not implemented yet');\r\n */\n\n\nfunction fail(failure) {\n  if (failure === void 0) {\n    failure = 'Unexpected state';\n  } // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n\n\n  var message = \"FIRESTORE (\" + SDK_VERSION + \") INTERNAL ASSERTION FAILED: \" + failure;\n  logError(message); // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n\n  throw new Error(message);\n}\n/**\r\n * Fails if the given assertion condition is false, throwing an Error with the\r\n * given message if it did.\r\n *\r\n * Messages are stripped in production builds.\r\n */\n\n\nfunction hardAssert(assertion, message) {\n  if (!assertion) {\n    fail();\n  }\n}\n/**\r\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\r\n * instance of `T` before casting.\r\n */\n\n\nfunction debugCast(obj, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconstructor) {\n  return obj;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n\n  /** Not an error; returned on success. */\n  OK: 'ok',\n\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled',\n\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown',\n\n  /**\r\n   * Client specified an invalid argument. Note that this differs from\r\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\r\n   * problematic regardless of the state of the system (e.g., a malformed file\r\n   * name).\r\n   */\n  INVALID_ARGUMENT: 'invalid-argument',\n\n  /**\r\n   * Deadline expired before operation could complete. For operations that\r\n   * change the state of the system, this error may be returned even if the\r\n   * operation has completed successfully. For example, a successful response\r\n   * from a server could have been delayed long enough for the deadline to\r\n   * expire.\r\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found',\n\n  /**\r\n   * Some entity that we attempted to create (e.g., file or directory) already\r\n   * exists.\r\n   */\n  ALREADY_EXISTS: 'already-exists',\n\n  /**\r\n   * The caller does not have permission to execute the specified operation.\r\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\r\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\r\n   * PERMISSION_DENIED must not be used if the caller can not be identified\r\n   * (use UNAUTHENTICATED instead for those errors).\r\n   */\n  PERMISSION_DENIED: 'permission-denied',\n\n  /**\r\n   * The request does not have valid authentication credentials for the\r\n   * operation.\r\n   */\n  UNAUTHENTICATED: 'unauthenticated',\n\n  /**\r\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\r\n   * entire file system is out of space.\r\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n\n  /**\r\n   * Operation was rejected because the system is not in a state required for\r\n   * the operation's execution. For example, directory to be deleted may be\r\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\r\n   *\r\n   * A litmus test that may help a service implementor in deciding\r\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\r\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\r\n   *  (b) Use ABORTED if the client should retry at a higher-level\r\n   *      (e.g., restarting a read-modify-write sequence).\r\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\r\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\r\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\r\n   *      should be returned since the client should not retry unless\r\n   *      they have first fixed up the directory by deleting files from it.\r\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\r\n   *      REST Get/Update/Delete on a resource and the resource on the\r\n   *      server does not match the condition. E.g., conflicting\r\n   *      read-modify-write on the same resource.\r\n   */\n  FAILED_PRECONDITION: 'failed-precondition',\n\n  /**\r\n   * The operation was aborted, typically due to a concurrency issue like\r\n   * sequencer check failures, transaction aborts, etc.\r\n   *\r\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\r\n   * and UNAVAILABLE.\r\n   */\n  ABORTED: 'aborted',\n\n  /**\r\n   * Operation was attempted past the valid range. E.g., seeking or reading\r\n   * past end of file.\r\n   *\r\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\r\n   * if the system state changes. For example, a 32-bit file system will\r\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\r\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\r\n   * an offset past the current file size.\r\n   *\r\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\r\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\r\n   * when it applies so that callers who are iterating through a space can\r\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\r\n   */\n  OUT_OF_RANGE: 'out-of-range',\n\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented',\n\n  /**\r\n   * Internal errors. Means some invariants expected by underlying System has\r\n   * been broken. If you see one of these errors, Something is very broken.\r\n   */\n  INTERNAL: 'internal',\n\n  /**\r\n   * The service is currently unavailable. This is a most likely a transient\r\n   * condition and may be corrected by retrying with a backoff.\r\n   *\r\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\r\n   * and UNAVAILABLE.\r\n   */\n  UNAVAILABLE: 'unavailable',\n\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss'\n};\n/** An error returned by a Firestore operation. */\n\nvar FirestoreError =\n/** @class */\nfunction (_super) {\n  tslib.__extends(FirestoreError, _super);\n  /** @hideconstructor */\n\n\n  function FirestoreError(\n  /**\r\n   * The backend error code associated with this error.\r\n   */\n  code,\n  /**\r\n   * A custom error description.\r\n   */\n  message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.code = code;\n    _this.message = message;\n    /** The custom name for all FirestoreErrors. */\n\n    _this.name = 'FirebaseError'; // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n\n    _this.toString = function () {\n      return _this.name + \": [code=\" + _this.code + \"]: \" + _this.message;\n    };\n\n    return _this;\n  }\n\n  return FirestoreError;\n}(Error);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DOCUMENT_KEY_NAME = '__name__';\n/**\r\n * Path represents an ordered sequence of string segments.\r\n */\n\nvar BasePath =\n/** @class */\nfunction () {\n  function BasePath(segments, offset, length) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail();\n    }\n\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail();\n    }\n\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n\n  Object.defineProperty(BasePath.prototype, \"length\", {\n    get: function () {\n      return this.len;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BasePath.prototype.isEqual = function (other) {\n    return BasePath.comparator(this, other) === 0;\n  };\n\n  BasePath.prototype.child = function (nameOrPath) {\n    var segments = this.segments.slice(this.offset, this.limit());\n\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(function (segment) {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n\n    return this.construct(segments);\n  };\n  /** The index of one past the last segment of the path. */\n\n\n  BasePath.prototype.limit = function () {\n    return this.offset + this.length;\n  };\n\n  BasePath.prototype.popFirst = function (size) {\n    size = size === undefined ? 1 : size;\n    return this.construct(this.segments, this.offset + size, this.length - size);\n  };\n\n  BasePath.prototype.popLast = function () {\n    return this.construct(this.segments, this.offset, this.length - 1);\n  };\n\n  BasePath.prototype.firstSegment = function () {\n    return this.segments[this.offset];\n  };\n\n  BasePath.prototype.lastSegment = function () {\n    return this.get(this.length - 1);\n  };\n\n  BasePath.prototype.get = function (index) {\n    return this.segments[this.offset + index];\n  };\n\n  BasePath.prototype.isEmpty = function () {\n    return this.length === 0;\n  };\n\n  BasePath.prototype.isPrefixOf = function (other) {\n    if (other.length < this.length) {\n      return false;\n    }\n\n    for (var i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  BasePath.prototype.isImmediateParentOf = function (potentialChild) {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n\n    for (var i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  BasePath.prototype.forEach = function (fn) {\n    for (var i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  };\n\n  BasePath.prototype.toArray = function () {\n    return this.segments.slice(this.offset, this.limit());\n  };\n\n  BasePath.comparator = function (p1, p2) {\n    var len = Math.min(p1.length, p2.length);\n\n    for (var i = 0; i < len; i++) {\n      var left = p1.get(i);\n      var right = p2.get(i);\n\n      if (left < right) {\n        return -1;\n      }\n\n      if (left > right) {\n        return 1;\n      }\n    }\n\n    if (p1.length < p2.length) {\n      return -1;\n    }\n\n    if (p1.length > p2.length) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  return BasePath;\n}();\n/**\r\n * A slash-separated path for navigating resources (documents and collections)\r\n * within Firestore.\r\n */\n\n\nvar ResourcePath =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ResourcePath, _super);\n\n  function ResourcePath() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ResourcePath.prototype.construct = function (segments, offset, length) {\n    return new ResourcePath(segments, offset, length);\n  };\n\n  ResourcePath.prototype.canonicalString = function () {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    return this.toArray().join('/');\n  };\n\n  ResourcePath.prototype.toString = function () {\n    return this.canonicalString();\n  };\n  /**\r\n   * Creates a resource path from the given slash-delimited string. If multiple\r\n   * arguments are provided, all components are combined. Leading and trailing\r\n   * slashes from all components are ignored.\r\n   */\n\n\n  ResourcePath.fromString = function () {\n    var pathComponents = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      pathComponents[_i] = arguments[_i];\n    } // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n\n\n    var segments = [];\n\n    for (var _d = 0, pathComponents_1 = pathComponents; _d < pathComponents_1.length; _d++) {\n      var path = pathComponents_1[_d];\n\n      if (path.indexOf('//') >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid segment (\" + path + \"). Paths must not contain // in them.\");\n      } // Strip leading and traling slashed.\n\n\n      segments.push.apply(segments, path.split('/').filter(function (segment) {\n        return segment.length > 0;\n      }));\n    }\n\n    return new ResourcePath(segments);\n  };\n\n  ResourcePath.emptyPath = function () {\n    return new ResourcePath([]);\n  };\n\n  return ResourcePath;\n}(BasePath);\n\nvar identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/** A dot-separated path for navigating sub-objects within a document. */\n\nvar FieldPath$1 =\n/** @class */\nfunction (_super) {\n  tslib.__extends(FieldPath$1, _super);\n\n  function FieldPath$1() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FieldPath$1.prototype.construct = function (segments, offset, length) {\n    return new FieldPath$1(segments, offset, length);\n  };\n  /**\r\n   * Returns true if the string could be used as a segment in a field path\r\n   * without escaping.\r\n   */\n\n\n  FieldPath$1.isValidIdentifier = function (segment) {\n    return identifierRegExp.test(segment);\n  };\n\n  FieldPath$1.prototype.canonicalString = function () {\n    return this.toArray().map(function (str) {\n      str = str.replace(/\\\\/g, '\\\\\\\\').replace(/`/g, '\\\\`');\n\n      if (!FieldPath$1.isValidIdentifier(str)) {\n        str = '`' + str + '`';\n      }\n\n      return str;\n    }).join('.');\n  };\n\n  FieldPath$1.prototype.toString = function () {\n    return this.canonicalString();\n  };\n  /**\r\n   * Returns true if this field references the key of a document.\r\n   */\n\n\n  FieldPath$1.prototype.isKeyField = function () {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  };\n  /**\r\n   * The field designating the key of a document.\r\n   */\n\n\n  FieldPath$1.keyField = function () {\n    return new FieldPath$1([DOCUMENT_KEY_NAME]);\n  };\n  /**\r\n   * Parses a field string from the given server-formatted string.\r\n   *\r\n   * - Splitting the empty string is not allowed (for now at least).\r\n   * - Empty segments within the string (e.g. if there are two consecutive\r\n   *   separators) are not allowed.\r\n   *\r\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\r\n   * non-identifier path components, even if they aren't escaped.\r\n   */\n\n\n  FieldPath$1.fromServerFormat = function (path) {\n    var segments = [];\n    var current = '';\n    var i = 0;\n\n    var addCurrentSegment = function () {\n      if (current.length === 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, begin \" + \"with '.', end with '.', or contain '..'\");\n      }\n\n      segments.push(current);\n      current = '';\n    };\n\n    var inBackticks = false;\n\n    while (i < path.length) {\n      var c = path[i];\n\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n        }\n\n        var next = path[i + 1];\n\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n        }\n\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n\n    addCurrentSegment();\n\n    if (inBackticks) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n    }\n\n    return new FieldPath$1(segments);\n  };\n\n  FieldPath$1.emptyPath = function () {\n    return new FieldPath$1([]);\n  };\n\n  return FieldPath$1;\n}(BasePath);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar escapeChar = '\\u0001';\nvar encodedSeparatorChar = '\\u0001';\nvar encodedNul = '\\u0010';\nvar encodedEscape = '\\u0011';\n/**\r\n * Encodes a resource path into a IndexedDb-compatible string form.\r\n */\n\nfunction encodeResourcePath(path) {\n  var result = '';\n\n  for (var i = 0; i < path.length; i++) {\n    if (result.length > 0) {\n      result = encodeSeparator(result);\n    }\n\n    result = encodeSegment(path.get(i), result);\n  }\n\n  return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\n\n\nfunction encodeSegment(segment, resultBuf) {\n  var result = resultBuf;\n  var length = segment.length;\n\n  for (var i = 0; i < length; i++) {\n    var c = segment.charAt(i);\n\n    switch (c) {\n      case '\\0':\n        result += escapeChar + encodedNul;\n        break;\n\n      case escapeChar:\n        result += escapeChar + encodedEscape;\n        break;\n\n      default:\n        result += c;\n    }\n  }\n\n  return result;\n}\n/** Encodes a path separator into the given result */\n\n\nfunction encodeSeparator(result) {\n  return result + escapeChar + encodedSeparatorChar;\n}\n/**\r\n * Decodes the given IndexedDb-compatible string form of a resource path into\r\n * a ResourcePath instance. Note that this method is not suitable for use with\r\n * decoding resource names from the server; those are One Platform format\r\n * strings.\r\n */\n\n\nfunction decodeResourcePath(path) {\n  // Event the empty path must encode as a path of at least length 2. A path\n  // with exactly 2 must be the empty path.\n  var length = path.length;\n  hardAssert(length >= 2);\n\n  if (length === 2) {\n    hardAssert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar);\n    return ResourcePath.emptyPath();\n  } // Escape characters cannot exist past the second-to-last position in the\n  // source value.\n\n\n  var lastReasonableEscapeIndex = length - 2;\n  var segments = [];\n  var segmentBuilder = '';\n\n  for (var start = 0; start < length;) {\n    // The last two characters of a valid encoded path must be a separator, so\n    // there must be an end to this segment.\n    var end = path.indexOf(escapeChar, start);\n\n    if (end < 0 || end > lastReasonableEscapeIndex) {\n      fail();\n    }\n\n    var next = path.charAt(end + 1);\n\n    switch (next) {\n      case encodedSeparatorChar:\n        var currentPiece = path.substring(start, end);\n        var segment = void 0;\n\n        if (segmentBuilder.length === 0) {\n          // Avoid copying for the common case of a segment that excludes \\0\n          // and \\001\n          segment = currentPiece;\n        } else {\n          segmentBuilder += currentPiece;\n          segment = segmentBuilder;\n          segmentBuilder = '';\n        }\n\n        segments.push(segment);\n        break;\n\n      case encodedNul:\n        segmentBuilder += path.substring(start, end);\n        segmentBuilder += '\\0';\n        break;\n\n      case encodedEscape:\n        // The escape character can be used in the output to encode itself.\n        segmentBuilder += path.substring(start, end + 1);\n        break;\n\n      default:\n        fail();\n    }\n\n    start = end + 2;\n  }\n\n  return new ResourcePath(segments);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Schema Version for the Web client:\r\n * 1.  Initial version including Mutation Queue, Query Cache, and Remote\r\n *     Document Cache\r\n * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No\r\n *     longer required because migration 3 unconditionally clears it.\r\n * 3.  Dropped and re-created Query Cache to deal with cache corruption related\r\n *     to limbo resolution. Addresses\r\n *     https://github.com/firebase/firebase-ios-sdk/issues/1548\r\n * 4.  Multi-Tab Support.\r\n * 5.  Removal of held write acks.\r\n * 6.  Create document global for tracking document cache size.\r\n * 7.  Ensure every cached document has a sentinel row with a sequence number.\r\n * 8.  Add collection-parent index for Collection Group queries.\r\n * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than\r\n *     an auto-incrementing ID. This is required for Index-Free queries.\r\n * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.\r\n * 11. Add bundles and named_queries for bundle support.\r\n */\n\n\nvar SCHEMA_VERSION = 11;\n/**\r\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\r\n */\n\nvar DbTimestamp =\n/** @class */\nfunction () {\n  function DbTimestamp(seconds, nanoseconds) {\n    this.seconds = seconds;\n    this.nanoseconds = nanoseconds;\n  }\n\n  return DbTimestamp;\n}();\n/**\r\n * A singleton object to be stored in the 'owner' store in IndexedDb.\r\n *\r\n * A given database can have a single primary tab assigned at a given time. That\r\n * tab must validate that it is still holding the primary lease before every\r\n * operation that requires locked access. The primary tab should regularly\r\n * write an updated timestamp to this lease to prevent other tabs from\r\n * \"stealing\" the primary lease\r\n */\n\n\nvar DbPrimaryClient =\n/** @class */\nfunction () {\n  function DbPrimaryClient(ownerId,\n  /** Whether to allow shared access from multiple tabs. */\n  allowTabSynchronization, leaseTimestampMs) {\n    this.ownerId = ownerId;\n    this.allowTabSynchronization = allowTabSynchronization;\n    this.leaseTimestampMs = leaseTimestampMs;\n  }\n\n  return DbPrimaryClient;\n}();\n/**\r\n * Name of the IndexedDb object store.\r\n *\r\n * Note that the name 'owner' is chosen to ensure backwards compatibility with\r\n * older clients that only supported single locked access to the persistence\r\n * layer.\r\n */\n\n\nDbPrimaryClient.store = 'owner';\n/**\r\n * The key string used for the single object that exists in the\r\n * DbPrimaryClient store.\r\n */\n\nDbPrimaryClient.key = 'owner';\n/**\r\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\r\n *\r\n * Each user gets a single queue of MutationBatches to apply to the server.\r\n * DbMutationQueue tracks the metadata about the queue.\r\n */\n\nvar DbMutationQueue =\n/** @class */\nfunction () {\n  function DbMutationQueue(\n  /**\r\n   * The normalized user ID to which this queue belongs.\r\n   */\n  userId,\n  /**\r\n   * An identifier for the highest numbered batch that has been acknowledged\r\n   * by the server. All MutationBatches in this queue with batchIds less\r\n   * than or equal to this value are considered to have been acknowledged by\r\n   * the server.\r\n   *\r\n   * NOTE: this is deprecated and no longer used by the code.\r\n   */\n  lastAcknowledgedBatchId,\n  /**\r\n   * A stream token that was previously sent by the server.\r\n   *\r\n   * See StreamingWriteRequest in datastore.proto for more details about\r\n   * usage.\r\n   *\r\n   * After sending this token, earlier tokens may not be used anymore so\r\n   * only a single stream token is retained.\r\n   *\r\n   * NOTE: this is deprecated and no longer used by the code.\r\n   */\n  lastStreamToken) {\n    this.userId = userId;\n    this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;\n    this.lastStreamToken = lastStreamToken;\n  }\n\n  return DbMutationQueue;\n}();\n/** Name of the IndexedDb object store.  */\n\n\nDbMutationQueue.store = 'mutationQueues';\n/** Keys are automatically assigned via the userId property. */\n\nDbMutationQueue.keyPath = 'userId';\n/**\r\n * An object to be stored in the 'mutations' store in IndexedDb.\r\n *\r\n * Represents a batch of user-level mutations intended to be sent to the server\r\n * in a single write. Each user-level batch gets a separate DbMutationBatch\r\n * with a new batchId.\r\n */\n\nvar DbMutationBatch =\n/** @class */\nfunction () {\n  function DbMutationBatch(\n  /**\r\n   * The normalized user ID to which this batch belongs.\r\n   */\n  userId,\n  /**\r\n   * An identifier for this batch, allocated using an auto-generated key.\r\n   */\n  batchId,\n  /**\r\n   * The local write time of the batch, stored as milliseconds since the\r\n   * epoch.\r\n   */\n  localWriteTimeMs,\n  /**\r\n   * A list of \"mutations\" that represent a partial base state from when this\r\n   * write batch was initially created. During local application of the write\r\n   * batch, these baseMutations are applied prior to the real writes in order\r\n   * to override certain document fields from the remote document cache. This\r\n   * is necessary in the case of non-idempotent writes (e.g. `increment()`\r\n   * transforms) to make sure that the local view of the modified documents\r\n   * doesn't flicker if the remote document cache receives the result of the\r\n   * non-idempotent write before the write is removed from the queue.\r\n   *\r\n   * These mutations are never sent to the backend.\r\n   */\n  baseMutations,\n  /**\r\n   * A list of mutations to apply. All mutations will be applied atomically.\r\n   *\r\n   * Mutations are serialized via toMutation().\r\n   */\n  mutations) {\n    this.userId = userId;\n    this.batchId = batchId;\n    this.localWriteTimeMs = localWriteTimeMs;\n    this.baseMutations = baseMutations;\n    this.mutations = mutations;\n  }\n\n  return DbMutationBatch;\n}();\n/** Name of the IndexedDb object store.  */\n\n\nDbMutationBatch.store = 'mutations';\n/** Keys are automatically assigned via the userId, batchId properties. */\n\nDbMutationBatch.keyPath = 'batchId';\n/** The index name for lookup of mutations by user. */\n\nDbMutationBatch.userMutationsIndex = 'userMutationsIndex';\n/** The user mutations index is keyed by [userId, batchId] pairs. */\n\nDbMutationBatch.userMutationsKeyPath = ['userId', 'batchId'];\n/**\r\n * An object to be stored in the 'documentMutations' store in IndexedDb.\r\n *\r\n * A manually maintained index of all the mutation batches that affect a given\r\n * document key. The rows in this table are references based on the contents of\r\n * DbMutationBatch.mutations.\r\n */\n\nvar DbDocumentMutation =\n/** @class */\nfunction () {\n  function DbDocumentMutation() {}\n  /**\r\n   * Creates a [userId] key for use in the DbDocumentMutations index to iterate\r\n   * over all of a user's document mutations.\r\n   */\n\n\n  DbDocumentMutation.prefixForUser = function (userId) {\n    return [userId];\n  };\n  /**\r\n   * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\r\n   * index to iterate over all at document mutations for a given path or lower.\r\n   */\n\n\n  DbDocumentMutation.prefixForPath = function (userId, path) {\n    return [userId, encodeResourcePath(path)];\n  };\n  /**\r\n   * Creates a full index key of [userId, encodedPath, batchId] for inserting\r\n   * and deleting into the DbDocumentMutations index.\r\n   */\n\n\n  DbDocumentMutation.key = function (userId, path, batchId) {\n    return [userId, encodeResourcePath(path), batchId];\n  };\n\n  return DbDocumentMutation;\n}();\n\nDbDocumentMutation.store = 'documentMutations';\n/**\r\n * Because we store all the useful information for this store in the key,\r\n * there is no useful information to store as the value. The raw (unencoded)\r\n * path cannot be stored because IndexedDb doesn't store prototype\r\n * information.\r\n */\n\nDbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();\n/**\r\n * Represents the known absence of a document at a particular version.\r\n * Stored in IndexedDb as part of a DbRemoteDocument object.\r\n */\n\nvar DbNoDocument =\n/** @class */\nfunction () {\n  function DbNoDocument(path, readTime) {\n    this.path = path;\n    this.readTime = readTime;\n  }\n\n  return DbNoDocument;\n}();\n/**\r\n * Represents a document that is known to exist but whose data is unknown.\r\n * Stored in IndexedDb as part of a DbRemoteDocument object.\r\n */\n\n\nvar DbUnknownDocument =\n/** @class */\nfunction () {\n  function DbUnknownDocument(path, version) {\n    this.path = path;\n    this.version = version;\n  }\n\n  return DbUnknownDocument;\n}();\n/**\r\n * An object to be stored in the 'remoteDocuments' store in IndexedDb.\r\n * It represents either:\r\n *\r\n * - A complete document.\r\n * - A \"no document\" representing a document that is known not to exist (at\r\n * some version).\r\n * - An \"unknown document\" representing a document that is known to exist (at\r\n * some version) but whose contents are unknown.\r\n *\r\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\r\n * be made more general if necessary.\r\n */\n\n\nvar DbRemoteDocument =\n/** @class */\nfunction () {\n  // TODO: We are currently storing full document keys almost three times\n  // (once as part of the primary key, once - partly - as `parentPath` and once\n  // inside the encoded documents). During our next migration, we should\n  // rewrite the primary key as parentPath + document ID which would allow us\n  // to drop one value.\n  function DbRemoteDocument(\n  /**\r\n   * Set to an instance of DbUnknownDocument if the data for a document is\r\n   * not known, but it is known that a document exists at the specified\r\n   * version (e.g. it had a successful update applied to it)\r\n   */\n  unknownDocument,\n  /**\r\n   * Set to an instance of a DbNoDocument if it is known that no document\r\n   * exists.\r\n   */\n  noDocument,\n  /**\r\n   * Set to an instance of a Document if there's a cached version of the\r\n   * document.\r\n   */\n  document,\n  /**\r\n   * Documents that were written to the remote document store based on\r\n   * a write acknowledgment are marked with `hasCommittedMutations`. These\r\n   * documents are potentially inconsistent with the backend's copy and use\r\n   * the write's commit version as their document version.\r\n   */\n  hasCommittedMutations,\n  /**\r\n   * When the document was read from the backend. Undefined for data written\r\n   * prior to schema version 9.\r\n   */\n  readTime,\n  /**\r\n   * The path of the collection this document is part of. Undefined for data\r\n   * written prior to schema version 9.\r\n   */\n  parentPath) {\n    this.unknownDocument = unknownDocument;\n    this.noDocument = noDocument;\n    this.document = document;\n    this.hasCommittedMutations = hasCommittedMutations;\n    this.readTime = readTime;\n    this.parentPath = parentPath;\n  }\n\n  return DbRemoteDocument;\n}();\n\nDbRemoteDocument.store = 'remoteDocuments';\n/**\r\n * An index that provides access to all entries sorted by read time (which\r\n * corresponds to the last modification time of each row).\r\n *\r\n * This index is used to provide a changelog for Multi-Tab.\r\n */\n\nDbRemoteDocument.readTimeIndex = 'readTimeIndex';\nDbRemoteDocument.readTimeIndexPath = 'readTime';\n/**\r\n * An index that provides access to documents in a collection sorted by read\r\n * time.\r\n *\r\n * This index is used to allow the RemoteDocumentCache to fetch newly changed\r\n * documents in a collection.\r\n */\n\nDbRemoteDocument.collectionReadTimeIndex = 'collectionReadTimeIndex';\nDbRemoteDocument.collectionReadTimeIndexPath = ['parentPath', 'readTime'];\n/**\r\n * Contains a single entry that has metadata about the remote document cache.\r\n */\n\nvar DbRemoteDocumentGlobal =\n/** @class */\nfunction () {\n  /**\r\n   * @param byteSize - Approximately the total size in bytes of all the\r\n   * documents in the document cache.\r\n   */\n  function DbRemoteDocumentGlobal(byteSize) {\n    this.byteSize = byteSize;\n  }\n\n  return DbRemoteDocumentGlobal;\n}();\n\nDbRemoteDocumentGlobal.store = 'remoteDocumentGlobal';\nDbRemoteDocumentGlobal.key = 'remoteDocumentGlobalKey';\n/**\r\n * An object to be stored in the 'targets' store in IndexedDb.\r\n *\r\n * This is based on and should be kept in sync with the proto used in the iOS\r\n * client.\r\n *\r\n * Each query the client listens to against the server is tracked on disk so\r\n * that the query can be efficiently resumed on restart.\r\n */\n\nvar DbTarget =\n/** @class */\nfunction () {\n  function DbTarget(\n  /**\r\n   * An auto-generated sequential numeric identifier for the query.\r\n   *\r\n   * Queries are stored using their canonicalId as the key, but these\r\n   * canonicalIds can be quite long so we additionally assign a unique\r\n   * queryId which can be used by referenced data structures (e.g.\r\n   * indexes) to minimize the on-disk cost.\r\n   */\n  targetId,\n  /**\r\n   * The canonical string representing this query. This is not unique.\r\n   */\n  canonicalId,\n  /**\r\n   * The last readTime received from the Watch Service for this query.\r\n   *\r\n   * This is the same value as TargetChange.read_time in the protos.\r\n   */\n  readTime,\n  /**\r\n   * An opaque, server-assigned token that allows watching a query to be\r\n   * resumed after disconnecting without retransmitting all the data\r\n   * that matches the query. The resume token essentially identifies a\r\n   * point in time from which the server should resume sending results.\r\n   *\r\n   * This is related to the snapshotVersion in that the resumeToken\r\n   * effectively also encodes that value, but the resumeToken is opaque\r\n   * and sometimes encodes additional information.\r\n   *\r\n   * A consequence of this is that the resumeToken should be used when\r\n   * asking the server to reason about where this client is in the watch\r\n   * stream, but the client should use the snapshotVersion for its own\r\n   * purposes.\r\n   *\r\n   * This is the same value as TargetChange.resume_token in the protos.\r\n   */\n  resumeToken,\n  /**\r\n   * A sequence number representing the last time this query was\r\n   * listened to, used for garbage collection purposes.\r\n   *\r\n   * Conventionally this would be a timestamp value, but device-local\r\n   * clocks are unreliable and they must be able to create new listens\r\n   * even while disconnected. Instead this should be a monotonically\r\n   * increasing number that's incremented on each listen call.\r\n   *\r\n   * This is different from the queryId since the queryId is an\r\n   * immutable identifier assigned to the Query on first use while\r\n   * lastListenSequenceNumber is updated every time the query is\r\n   * listened to.\r\n   */\n  lastListenSequenceNumber,\n  /**\r\n   * Denotes the maximum snapshot version at which the associated query view\r\n   * contained no limbo documents.  Undefined for data written prior to\r\n   * schema version 9.\r\n   */\n  lastLimboFreeSnapshotVersion,\n  /**\r\n   * The query for this target.\r\n   *\r\n   * Because canonical ids are not unique we must store the actual query. We\r\n   * use the proto to have an object we can persist without having to\r\n   * duplicate translation logic to and from a `Query` object.\r\n   */\n  query) {\n    this.targetId = targetId;\n    this.canonicalId = canonicalId;\n    this.readTime = readTime;\n    this.resumeToken = resumeToken;\n    this.lastListenSequenceNumber = lastListenSequenceNumber;\n    this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;\n    this.query = query;\n  }\n\n  return DbTarget;\n}();\n\nDbTarget.store = 'targets';\n/** Keys are automatically assigned via the targetId property. */\n\nDbTarget.keyPath = 'targetId';\n/** The name of the queryTargets index. */\n\nDbTarget.queryTargetsIndexName = 'queryTargetsIndex';\n/**\r\n * The index of all canonicalIds to the targets that they match. This is not\r\n * a unique mapping because canonicalId does not promise a unique name for all\r\n * possible queries, so we append the targetId to make the mapping unique.\r\n */\n\nDbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];\n/**\r\n * An object representing an association between a target and a document, or a\r\n * sentinel row marking the last sequence number at which a document was used.\r\n * Each document cached must have a corresponding sentinel row before lru\r\n * garbage collection is enabled.\r\n *\r\n * The target associations and sentinel rows are co-located so that orphaned\r\n * documents and their sequence numbers can be identified efficiently via a scan\r\n * of this store.\r\n */\n\nvar DbTargetDocument =\n/** @class */\nfunction () {\n  function DbTargetDocument(\n  /**\r\n   * The targetId identifying a target or 0 for a sentinel row.\r\n   */\n  targetId,\n  /**\r\n   * The path to the document, as encoded in the key.\r\n   */\n  path,\n  /**\r\n   * If this is a sentinel row, this should be the sequence number of the last\r\n   * time the document specified by `path` was used. Otherwise, it should be\r\n   * `undefined`.\r\n   */\n  sequenceNumber) {\n    this.targetId = targetId;\n    this.path = path;\n    this.sequenceNumber = sequenceNumber;\n  }\n\n  return DbTargetDocument;\n}();\n/** Name of the IndexedDb object store.  */\n\n\nDbTargetDocument.store = 'targetDocuments';\n/** Keys are automatically assigned via the targetId, path properties. */\n\nDbTargetDocument.keyPath = ['targetId', 'path'];\n/** The index name for the reverse index. */\n\nDbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';\n/** We also need to create the reverse index for these properties. */\n\nDbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];\n/**\r\n * A record of global state tracked across all Targets, tracked separately\r\n * to avoid the need for extra indexes.\r\n *\r\n * This should be kept in-sync with the proto used in the iOS client.\r\n */\n\nvar DbTargetGlobal =\n/** @class */\nfunction () {\n  function DbTargetGlobal(\n  /**\r\n   * The highest numbered target id across all targets.\r\n   *\r\n   * See DbTarget.targetId.\r\n   */\n  highestTargetId,\n  /**\r\n   * The highest numbered lastListenSequenceNumber across all targets.\r\n   *\r\n   * See DbTarget.lastListenSequenceNumber.\r\n   */\n  highestListenSequenceNumber,\n  /**\r\n   * A global snapshot version representing the last consistent snapshot we\r\n   * received from the backend. This is monotonically increasing and any\r\n   * snapshots received from the backend prior to this version (e.g. for\r\n   * targets resumed with a resumeToken) should be suppressed (buffered)\r\n   * until the backend has caught up to this snapshot version again. This\r\n   * prevents our cache from ever going backwards in time.\r\n   */\n  lastRemoteSnapshotVersion,\n  /**\r\n   * The number of targets persisted.\r\n   */\n  targetCount) {\n    this.highestTargetId = highestTargetId;\n    this.highestListenSequenceNumber = highestListenSequenceNumber;\n    this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    this.targetCount = targetCount;\n  }\n\n  return DbTargetGlobal;\n}();\n/**\r\n * The key string used for the single object that exists in the\r\n * DbTargetGlobal store.\r\n */\n\n\nDbTargetGlobal.key = 'targetGlobalKey';\nDbTargetGlobal.store = 'targetGlobal';\n/**\r\n * An object representing an association between a Collection id (e.g. 'messages')\r\n * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.\r\n * This is used to efficiently find all collections to query when performing\r\n * a Collection Group query.\r\n */\n\nvar DbCollectionParent =\n/** @class */\nfunction () {\n  function DbCollectionParent(\n  /**\r\n   * The collectionId (e.g. 'messages')\r\n   */\n  collectionId,\n  /**\r\n   * The path to the parent (either a document location or an empty path for\r\n   * a root-level collection).\r\n   */\n  parent) {\n    this.collectionId = collectionId;\n    this.parent = parent;\n  }\n\n  return DbCollectionParent;\n}();\n/** Name of the IndexedDb object store. */\n\n\nDbCollectionParent.store = 'collectionParents';\n/** Keys are automatically assigned via the collectionId, parent properties. */\n\nDbCollectionParent.keyPath = ['collectionId', 'parent'];\n/**\r\n * A record of the metadata state of each client.\r\n *\r\n * PORTING NOTE: This is used to synchronize multi-tab state and does not need\r\n * to be ported to iOS or Android.\r\n */\n\nvar DbClientMetadata =\n/** @class */\nfunction () {\n  function DbClientMetadata( // Note: Previous schema versions included a field\n  // \"lastProcessedDocumentChangeId\". Don't use anymore.\n\n  /** The auto-generated client id assigned at client startup. */\n  clientId,\n  /** The last time this state was updated. */\n  updateTimeMs,\n  /** Whether the client's network connection is enabled. */\n  networkEnabled,\n  /** Whether this client is running in a foreground tab. */\n  inForeground) {\n    this.clientId = clientId;\n    this.updateTimeMs = updateTimeMs;\n    this.networkEnabled = networkEnabled;\n    this.inForeground = inForeground;\n  }\n\n  return DbClientMetadata;\n}();\n/** Name of the IndexedDb object store. */\n\n\nDbClientMetadata.store = 'clientMetadata';\n/** Keys are automatically assigned via the clientId properties. */\n\nDbClientMetadata.keyPath = 'clientId';\n/**\r\n * A object representing a bundle loaded by the SDK.\r\n */\n\nvar DbBundle =\n/** @class */\nfunction () {\n  function DbBundle(\n  /** The ID of the loaded bundle. */\n  bundleId,\n  /** The create time of the loaded bundle. */\n  createTime,\n  /** The schema version of the loaded bundle. */\n  version) {\n    this.bundleId = bundleId;\n    this.createTime = createTime;\n    this.version = version;\n  }\n\n  return DbBundle;\n}();\n/** Name of the IndexedDb object store. */\n\n\nDbBundle.store = 'bundles';\nDbBundle.keyPath = 'bundleId';\n/**\r\n * A object representing a named query loaded by the SDK via a bundle.\r\n */\n\nvar DbNamedQuery =\n/** @class */\nfunction () {\n  function DbNamedQuery(\n  /** The name of the query. */\n  name,\n  /** The read time of the results saved in the bundle from the named query. */\n  readTime,\n  /** The query saved in the bundle. */\n  bundledQuery) {\n    this.name = name;\n    this.readTime = readTime;\n    this.bundledQuery = bundledQuery;\n  }\n\n  return DbNamedQuery;\n}();\n/** Name of the IndexedDb object store. */\n\n\nDbNamedQuery.store = 'namedQueries';\nDbNamedQuery.keyPath = 'name'; // Visible for testing\n\nvar V1_STORES = [DbMutationQueue.store, DbMutationBatch.store, DbDocumentMutation.store, DbRemoteDocument.store, DbTarget.store, DbPrimaryClient.store, DbTargetGlobal.store, DbTargetDocument.store]; // V2 is no longer usable (see comment at top of file)\n// Visible for testing\n\nvar V3_STORES = V1_STORES; // Visible for testing\n// Note: DbRemoteDocumentChanges is no longer used and dropped with v9.\n\nvar V4_STORES = tslib.__spreadArray(tslib.__spreadArray([], V3_STORES), [DbClientMetadata.store]); // V5 does not change the set of stores.\n\n\nvar V6_STORES = tslib.__spreadArray(tslib.__spreadArray([], V4_STORES), [DbRemoteDocumentGlobal.store]); // V7 does not change the set of stores.\n\n\nvar V8_STORES = tslib.__spreadArray(tslib.__spreadArray([], V6_STORES), [DbCollectionParent.store]); // V9 does not change the set of stores.\n// V10 does not change the set of stores.\n\n\nvar V11_STORES = tslib.__spreadArray(tslib.__spreadArray([], V8_STORES), [DbBundle.store, DbNamedQuery.store]);\n/**\r\n * The list of all default IndexedDB stores used throughout the SDK. This is\r\n * used when creating transactions so that access across all stores is done\r\n * atomically.\r\n */\n\n\nvar ALL_STORES = V11_STORES;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar PRIMARY_LEASE_LOST_ERROR_MSG = 'The current tab is not in the required state to perform this operation. ' + 'It might be necessary to refresh the browser tab.';\n/**\r\n * A base class representing a persistence transaction, encapsulating both the\r\n * transaction's sequence numbers as well as a list of onCommitted listeners.\r\n *\r\n * When you call Persistence.runTransaction(), it will create a transaction and\r\n * pass it to your callback. You then pass it to any method that operates\r\n * on persistence.\r\n */\n\nvar PersistenceTransaction =\n/** @class */\nfunction () {\n  function PersistenceTransaction() {\n    this.onCommittedListeners = [];\n  }\n\n  PersistenceTransaction.prototype.addOnCommittedListener = function (listener) {\n    this.onCommittedListeners.push(listener);\n  };\n\n  PersistenceTransaction.prototype.raiseOnCommittedEvent = function () {\n    this.onCommittedListeners.forEach(function (listener) {\n      return listener();\n    });\n  };\n\n  return PersistenceTransaction;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Deferred =\n/** @class */\nfunction () {\n  function Deferred() {\n    var _this = this;\n\n    this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n  }\n\n  return Deferred;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * PersistencePromise is essentially a re-implementation of Promise except\r\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\r\n * are executed synchronously when a PersistencePromise resolves rather than\r\n * asynchronously (Promise implementations use setImmediate() or similar).\r\n *\r\n * This is necessary to interoperate with IndexedDB which will automatically\r\n * commit transactions if control is returned to the event loop without\r\n * synchronously initiating another operation on the transaction.\r\n *\r\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\r\n * Promises.\r\n */\n\n\nvar PersistencePromise =\n/** @class */\nfunction () {\n  function PersistencePromise(callback) {\n    var _this = this; // NOTE: next/catchCallback will always point to our own wrapper functions,\n    // not the user's raw next() or catch() callbacks.\n\n\n    this.nextCallback = null;\n    this.catchCallback = null; // When the operation resolves, we'll set result or error and mark isDone.\n\n    this.result = undefined;\n    this.error = undefined;\n    this.isDone = false; // Set to true when .then() or .catch() are called and prevents additional\n    // chaining.\n\n    this.callbackAttached = false;\n    callback(function (value) {\n      _this.isDone = true;\n      _this.result = value;\n\n      if (_this.nextCallback) {\n        // value should be defined unless T is Void, but we can't express\n        // that in the type system.\n        _this.nextCallback(value);\n      }\n    }, function (error) {\n      _this.isDone = true;\n      _this.error = error;\n\n      if (_this.catchCallback) {\n        _this.catchCallback(error);\n      }\n    });\n  }\n\n  PersistencePromise.prototype.catch = function (fn) {\n    return this.next(undefined, fn);\n  };\n\n  PersistencePromise.prototype.next = function (nextFn, catchFn) {\n    var _this = this;\n\n    if (this.callbackAttached) {\n      fail();\n    }\n\n    this.callbackAttached = true;\n\n    if (this.isDone) {\n      if (!this.error) {\n        return this.wrapSuccess(nextFn, this.result);\n      } else {\n        return this.wrapFailure(catchFn, this.error);\n      }\n    } else {\n      return new PersistencePromise(function (resolve, reject) {\n        _this.nextCallback = function (value) {\n          _this.wrapSuccess(nextFn, value).next(resolve, reject);\n        };\n\n        _this.catchCallback = function (error) {\n          _this.wrapFailure(catchFn, error).next(resolve, reject);\n        };\n      });\n    }\n  };\n\n  PersistencePromise.prototype.toPromise = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.next(resolve, reject);\n    });\n  };\n\n  PersistencePromise.prototype.wrapUserFunction = function (fn) {\n    try {\n      var result = fn();\n\n      if (result instanceof PersistencePromise) {\n        return result;\n      } else {\n        return PersistencePromise.resolve(result);\n      }\n    } catch (e) {\n      return PersistencePromise.reject(e);\n    }\n  };\n\n  PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {\n    if (nextFn) {\n      return this.wrapUserFunction(function () {\n        return nextFn(value);\n      });\n    } else {\n      // If there's no nextFn, then R must be the same as T\n      return PersistencePromise.resolve(value);\n    }\n  };\n\n  PersistencePromise.prototype.wrapFailure = function (catchFn, error) {\n    if (catchFn) {\n      return this.wrapUserFunction(function () {\n        return catchFn(error);\n      });\n    } else {\n      return PersistencePromise.reject(error);\n    }\n  };\n\n  PersistencePromise.resolve = function (result) {\n    return new PersistencePromise(function (resolve, reject) {\n      resolve(result);\n    });\n  };\n\n  PersistencePromise.reject = function (error) {\n    return new PersistencePromise(function (resolve, reject) {\n      reject(error);\n    });\n  };\n\n  PersistencePromise.waitFor = function ( // Accept all Promise types in waitFor().\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  all) {\n    return new PersistencePromise(function (resolve, reject) {\n      var expectedCount = 0;\n      var resolvedCount = 0;\n      var done = false;\n      all.forEach(function (element) {\n        ++expectedCount;\n        element.next(function () {\n          ++resolvedCount;\n\n          if (done && resolvedCount === expectedCount) {\n            resolve();\n          }\n        }, function (err) {\n          return reject(err);\n        });\n      });\n      done = true;\n\n      if (resolvedCount === expectedCount) {\n        resolve();\n      }\n    });\n  };\n  /**\r\n   * Given an array of predicate functions that asynchronously evaluate to a\r\n   * boolean, implements a short-circuiting `or` between the results. Predicates\r\n   * will be evaluated until one of them returns `true`, then stop. The final\r\n   * result will be whether any of them returned `true`.\r\n   */\n\n\n  PersistencePromise.or = function (predicates) {\n    var p = PersistencePromise.resolve(false);\n\n    var _loop_1 = function (predicate) {\n      p = p.next(function (isTrue) {\n        if (isTrue) {\n          return PersistencePromise.resolve(isTrue);\n        } else {\n          return predicate();\n        }\n      });\n    };\n\n    for (var _i = 0, predicates_1 = predicates; _i < predicates_1.length; _i++) {\n      var predicate = predicates_1[_i];\n\n      _loop_1(predicate);\n    }\n\n    return p;\n  };\n\n  PersistencePromise.forEach = function (collection, f) {\n    var _this = this;\n\n    var promises = [];\n    collection.forEach(function (r, s) {\n      promises.push(f.call(_this, r, s));\n    });\n    return this.waitFor(promises);\n  };\n\n  return PersistencePromise;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// References to `window` are guarded by SimpleDb.isAvailable()\n\n/* eslint-disable no-restricted-globals */\n\n\nvar LOG_TAG$g = 'SimpleDb';\n/**\r\n * The maximum number of retry attempts for an IndexedDb transaction that fails\r\n * with a DOMException.\r\n */\n\nvar TRANSACTION_RETRY_COUNT = 3;\n/**\r\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\r\n * specific object store.\r\n */\n\nvar SimpleDbTransaction =\n/** @class */\nfunction () {\n  function SimpleDbTransaction(action, transaction) {\n    var _this = this;\n\n    this.action = action;\n    this.transaction = transaction;\n    this.aborted = false;\n    /**\r\n     * A promise that resolves with the result of the IndexedDb transaction.\r\n     */\n\n    this.completionDeferred = new Deferred();\n\n    this.transaction.oncomplete = function () {\n      _this.completionDeferred.resolve();\n    };\n\n    this.transaction.onabort = function () {\n      if (transaction.error) {\n        _this.completionDeferred.reject(new IndexedDbTransactionError(action, transaction.error));\n      } else {\n        _this.completionDeferred.resolve();\n      }\n    };\n\n    this.transaction.onerror = function (event) {\n      var error = checkForAndReportiOSError(event.target.error);\n\n      _this.completionDeferred.reject(new IndexedDbTransactionError(action, error));\n    };\n  }\n\n  SimpleDbTransaction.open = function (db, action, mode, objectStoreNames) {\n    try {\n      return new SimpleDbTransaction(action, db.transaction(objectStoreNames, mode));\n    } catch (e) {\n      throw new IndexedDbTransactionError(action, e);\n    }\n  };\n\n  Object.defineProperty(SimpleDbTransaction.prototype, \"completionPromise\", {\n    get: function () {\n      return this.completionDeferred.promise;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SimpleDbTransaction.prototype.abort = function (error) {\n    if (error) {\n      this.completionDeferred.reject(error);\n    }\n\n    if (!this.aborted) {\n      logDebug(LOG_TAG$g, 'Aborting transaction:', error ? error.message : 'Client-initiated abort');\n      this.aborted = true;\n      this.transaction.abort();\n    }\n  };\n  /**\r\n   * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\r\n   * operations performed on the SimpleDbStore happen within the context of this\r\n   * transaction and it cannot be used anymore once the transaction is\r\n   * completed.\r\n   *\r\n   * Note that we can't actually enforce that the KeyType and ValueType are\r\n   * correct, but they allow type safety through the rest of the consuming code.\r\n   */\n\n\n  SimpleDbTransaction.prototype.store = function (storeName) {\n    var store = this.transaction.objectStore(storeName);\n    return new SimpleDbStore(store);\n  };\n\n  return SimpleDbTransaction;\n}();\n/**\r\n * Provides a wrapper around IndexedDb with a simplified interface that uses\r\n * Promise-like return values to chain operations. Real promises cannot be used\r\n * since .then() continuations are executed asynchronously (e.g. via\r\n * .setImmediate), which would cause IndexedDB to end the transaction.\r\n * See PersistencePromise for more details.\r\n */\n\n\nvar SimpleDb =\n/** @class */\nfunction () {\n  /*\r\n   * Creates a new SimpleDb wrapper for IndexedDb database `name`.\r\n   *\r\n   * Note that `version` must not be a downgrade. IndexedDB does not support\r\n   * downgrading the schema version. We currently do not support any way to do\r\n   * versioning outside of IndexedDB's versioning mechanism, as only\r\n   * version-upgrade transactions are allowed to do things like create\r\n   * objectstores.\r\n   */\n  function SimpleDb(name, version, schemaConverter) {\n    this.name = name;\n    this.version = version;\n    this.schemaConverter = schemaConverter;\n    var iOSVersion = SimpleDb.getIOSVersion(util.getUA()); // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the\n    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for\n    // whatever reason it's much harder to hit after 12.2 so we only proactively\n    // log on 12.2.\n\n    if (iOSVersion === 12.2) {\n      logError('Firestore persistence suffers from a bug in iOS 12.2 ' + 'Safari that may cause your app to stop working. See ' + 'https://stackoverflow.com/q/56496296/110915 for details ' + 'and a potential workaround.');\n    }\n  }\n  /** Deletes the specified database. */\n\n\n  SimpleDb.delete = function (name) {\n    logDebug(LOG_TAG$g, 'Removing database:', name);\n    return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n  };\n  /** Returns true if IndexedDB is available in the current environment. */\n\n\n  SimpleDb.isAvailable = function () {\n    if (typeof indexedDB === 'undefined') {\n      return false;\n    }\n\n    if (SimpleDb.isMockPersistence()) {\n      return true;\n    } // We extensively use indexed array values and compound keys,\n    // which IE and Edge do not support. However, they still have indexedDB\n    // defined on the window, so we need to check for them here and make sure\n    // to return that persistence is not enabled for those browsers.\n    // For tracking support of this feature, see here:\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n    // Check the UA string to find out the browser.\n\n\n    var ua = util.getUA(); // IE 10\n    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n    // IE 11\n    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n    // Edge\n    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n    // iOS Safari: Disable for users running iOS version < 10.\n\n    var iOSVersion = SimpleDb.getIOSVersion(ua);\n    var isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10; // Android browser: Disable for userse running version < 4.5.\n\n    var androidVersion = SimpleDb.getAndroidVersion(ua);\n    var isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;\n\n    if (ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0 || isUnsupportedIOS || isUnsupportedAndroid) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\r\n   * Returns true if the backing IndexedDB store is the Node IndexedDBShim\r\n   * (see https://github.com/axemclion/IndexedDBShim).\r\n   */\n\n\n  SimpleDb.isMockPersistence = function () {\n    var _a;\n\n    return typeof process !== 'undefined' && ((_a = process.env) === null || _a === void 0 ? void 0 : _a.USE_MOCK_PERSISTENCE) === 'YES';\n  };\n  /** Helper to get a typed SimpleDbStore from a transaction. */\n\n\n  SimpleDb.getStore = function (txn, store) {\n    return txn.store(store);\n  }; // visible for testing\n\n  /** Parse User Agent to determine iOS version. Returns -1 if not found. */\n\n\n  SimpleDb.getIOSVersion = function (ua) {\n    var iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\\d_]+)/i);\n    var version = iOSVersionRegex ? iOSVersionRegex[1].split('_').slice(0, 2).join('.') : '-1';\n    return Number(version);\n  }; // visible for testing\n\n  /** Parse User Agent to determine Android version. Returns -1 if not found. */\n\n\n  SimpleDb.getAndroidVersion = function (ua) {\n    var androidVersionRegex = ua.match(/Android ([\\d.]+)/i);\n    var version = androidVersionRegex ? androidVersionRegex[1].split('.').slice(0, 2).join('.') : '-1';\n    return Number(version);\n  };\n  /**\r\n   * Opens the specified database, creating or upgrading it if necessary.\r\n   */\n\n\n  SimpleDb.prototype.ensureDb = function (action) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var _d;\n\n      var _this = this;\n\n      return tslib.__generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            if (!!this.db) return [3\n            /*break*/\n            , 2];\n            logDebug(LOG_TAG$g, 'Opening database:', this.name);\n            _d = this;\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              // TODO(mikelehen): Investigate browser compatibility.\n              // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n              // suggests IE9 and older WebKit browsers handle upgrade\n              // differently. They expect setVersion, as described here:\n              // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion\n              var request = indexedDB.open(_this.name, _this.version);\n\n              request.onsuccess = function (event) {\n                var db = event.target.result;\n                resolve(db);\n              };\n\n              request.onblocked = function () {\n                reject(new IndexedDbTransactionError(action, 'Cannot upgrade IndexedDB schema while another tab is open. ' + 'Close all tabs that access Firestore and reload this page to proceed.'));\n              };\n\n              request.onerror = function (event) {\n                var error = event.target.error;\n\n                if (error.name === 'VersionError') {\n                  reject(new FirestoreError(Code.FAILED_PRECONDITION, 'A newer version of the Firestore SDK was previously used and so the persisted ' + 'data is not compatible with the version of the SDK you are now using. The SDK ' + 'will operate with persistence disabled. If you need persistence, please ' + 're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' + 'data for your app to start fresh.'));\n                } else {\n                  reject(new IndexedDbTransactionError(action, error));\n                }\n              };\n\n              request.onupgradeneeded = function (event) {\n                logDebug(LOG_TAG$g, 'Database \"' + _this.name + '\" requires upgrade from version:', event.oldVersion);\n                var db = event.target.result;\n\n                _this.schemaConverter.createOrUpgrade(db, request.transaction, event.oldVersion, _this.version).next(function () {\n                  logDebug(LOG_TAG$g, 'Database upgrade to version ' + _this.version + ' complete');\n                });\n              };\n            })];\n\n          case 1:\n            _d.db = _e.sent();\n            _e.label = 2;\n\n          case 2:\n            if (this.versionchangelistener) {\n              this.db.onversionchange = function (event) {\n                return _this.versionchangelistener(event);\n              };\n            }\n\n            return [2\n            /*return*/\n            , this.db];\n        }\n      });\n    });\n  };\n\n  SimpleDb.prototype.setVersionChangeListener = function (versionChangeListener) {\n    this.versionchangelistener = versionChangeListener;\n\n    if (this.db) {\n      this.db.onversionchange = function (event) {\n        return versionChangeListener(event);\n      };\n    }\n  };\n\n  SimpleDb.prototype.runTransaction = function (action, mode, objectStores, transactionFn) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var readonly, attemptNumber, _loop_2, this_1, state_1;\n\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            readonly = mode === 'readonly';\n            attemptNumber = 0;\n\n            _loop_2 = function () {\n              var transaction_1, transactionFnResult, error_1, retryable;\n              return tslib.__generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    ++attemptNumber;\n                    _e.label = 1;\n\n                  case 1:\n                    _e.trys.push([1, 4,, 5]);\n\n                    return [4\n                    /*yield*/\n                    , this_1.ensureDb(action)];\n\n                  case 2:\n                    this_1.db = _e.sent();\n                    transaction_1 = SimpleDbTransaction.open(this_1.db, action, readonly ? 'readonly' : 'readwrite', objectStores);\n                    transactionFnResult = transactionFn(transaction_1).catch(function (error) {\n                      // Abort the transaction if there was an error.\n                      transaction_1.abort(error); // We cannot actually recover, and calling `abort()` will cause the transaction's\n                      // completion promise to be rejected. This in turn means that we won't use\n                      // `transactionFnResult` below. We return a rejection here so that we don't add the\n                      // possibility of returning `void` to the type of `transactionFnResult`.\n\n                      return PersistencePromise.reject(error);\n                    }).toPromise(); // As noted above, errors are propagated by aborting the transaction. So\n                    // we swallow any error here to avoid the browser logging it as unhandled.\n\n                    transactionFnResult.catch(function () {}); // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n                    // fire), but still return the original transactionFnResult back to the\n                    // caller.\n\n                    return [4\n                    /*yield*/\n                    , transaction_1.completionPromise];\n\n                  case 3:\n                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n                    // fire), but still return the original transactionFnResult back to the\n                    // caller.\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    , {\n                      value: transactionFnResult\n                    }];\n\n                  case 4:\n                    error_1 = _e.sent();\n                    retryable = error_1.name !== 'FirebaseError' && attemptNumber < TRANSACTION_RETRY_COUNT;\n                    logDebug(LOG_TAG$g, 'Transaction failed with error:', error_1.message, 'Retrying:', retryable);\n                    this_1.close();\n\n                    if (!retryable) {\n                      return [2\n                      /*return*/\n                      , {\n                        value: Promise.reject(error_1)\n                      }];\n                    }\n\n                    return [3\n                    /*break*/\n                    , 5];\n\n                  case 5:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _d.label = 1;\n\n          case 1:\n            return [5\n            /*yield**/\n            , _loop_2()];\n\n          case 2:\n            state_1 = _d.sent();\n            if (typeof state_1 === \"object\") return [2\n            /*return*/\n            , state_1.value];\n            return [3\n            /*break*/\n            , 1];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SimpleDb.prototype.close = function () {\n    if (this.db) {\n      this.db.close();\n    }\n\n    this.db = undefined;\n  };\n\n  return SimpleDb;\n}();\n/**\r\n * A controller for iterating over a key range or index. It allows an iterate\r\n * callback to delete the currently-referenced object, or jump to a new key\r\n * within the key range or index.\r\n */\n\n\nvar IterationController =\n/** @class */\nfunction () {\n  function IterationController(dbCursor) {\n    this.dbCursor = dbCursor;\n    this.shouldStop = false;\n    this.nextKey = null;\n  }\n\n  Object.defineProperty(IterationController.prototype, \"isDone\", {\n    get: function () {\n      return this.shouldStop;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IterationController.prototype, \"skipToKey\", {\n    get: function () {\n      return this.nextKey;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IterationController.prototype, \"cursor\", {\n    set: function (value) {\n      this.dbCursor = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * This function can be called to stop iteration at any point.\r\n   */\n\n  IterationController.prototype.done = function () {\n    this.shouldStop = true;\n  };\n  /**\r\n   * This function can be called to skip to that next key, which could be\r\n   * an index or a primary key.\r\n   */\n\n\n  IterationController.prototype.skip = function (key) {\n    this.nextKey = key;\n  };\n  /**\r\n   * Delete the current cursor value from the object store.\r\n   *\r\n   * NOTE: You CANNOT do this with a keysOnly query.\r\n   */\n\n\n  IterationController.prototype.delete = function () {\n    return wrapRequest(this.dbCursor.delete());\n  };\n\n  return IterationController;\n}();\n/** An error that wraps exceptions that thrown during IndexedDB execution. */\n\n\nvar IndexedDbTransactionError =\n/** @class */\nfunction (_super) {\n  tslib.__extends(IndexedDbTransactionError, _super);\n\n  function IndexedDbTransactionError(actionName, cause) {\n    var _this = _super.call(this, Code.UNAVAILABLE, \"IndexedDB transaction '\" + actionName + \"' failed: \" + cause) || this;\n\n    _this.name = 'IndexedDbTransactionError';\n    return _this;\n  }\n\n  return IndexedDbTransactionError;\n}(FirestoreError);\n/** Verifies whether `e` is an IndexedDbTransactionError. */\n\n\nfunction isIndexedDbTransactionError(e) {\n  // Use name equality, as instanceof checks on errors don't work with errors\n  // that wrap other errors.\n  return e.name === 'IndexedDbTransactionError';\n}\n/**\r\n * A wrapper around an IDBObjectStore providing an API that:\r\n *\r\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\r\n * methods for acting against the object store.\r\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\r\n * method return a PersistencePromise instead.\r\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\r\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\r\n */\n\n\nvar SimpleDbStore =\n/** @class */\nfunction () {\n  function SimpleDbStore(store) {\n    this.store = store;\n  }\n\n  SimpleDbStore.prototype.put = function (keyOrValue, value) {\n    var request;\n\n    if (value !== undefined) {\n      logDebug(LOG_TAG$g, 'PUT', this.store.name, keyOrValue, value);\n      request = this.store.put(value, keyOrValue);\n    } else {\n      logDebug(LOG_TAG$g, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n      request = this.store.put(keyOrValue);\n    }\n\n    return wrapRequest(request);\n  };\n  /**\r\n   * Adds a new value into an Object Store and returns the new key. Similar to\r\n   * IndexedDb's `add()`, this method will fail on primary key collisions.\r\n   *\r\n   * @param value - The object to write.\r\n   * @returns The key of the value to add.\r\n   */\n\n\n  SimpleDbStore.prototype.add = function (value) {\n    logDebug(LOG_TAG$g, 'ADD', this.store.name, value, value);\n    var request = this.store.add(value);\n    return wrapRequest(request);\n  };\n  /**\r\n   * Gets the object with the specified key from the specified store, or null\r\n   * if no object exists with the specified key.\r\n   *\r\n   * @key The key of the object to get.\r\n   * @returns The object with the specified key or null if no object exists.\r\n   */\n\n\n  SimpleDbStore.prototype.get = function (key) {\n    var _this = this;\n\n    var request = this.store.get(key); // We're doing an unsafe cast to ValueType.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    return wrapRequest(request).next(function (result) {\n      // Normalize nonexistence to null.\n      if (result === undefined) {\n        result = null;\n      }\n\n      logDebug(LOG_TAG$g, 'GET', _this.store.name, key, result);\n      return result;\n    });\n  };\n\n  SimpleDbStore.prototype.delete = function (key) {\n    logDebug(LOG_TAG$g, 'DELETE', this.store.name, key);\n    var request = this.store.delete(key);\n    return wrapRequest(request);\n  };\n  /**\r\n   * If we ever need more of the count variants, we can add overloads. For now,\r\n   * all we need is to count everything in a store.\r\n   *\r\n   * Returns the number of rows in the store.\r\n   */\n\n\n  SimpleDbStore.prototype.count = function () {\n    logDebug(LOG_TAG$g, 'COUNT', this.store.name);\n    var request = this.store.count();\n    return wrapRequest(request);\n  };\n\n  SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {\n    var cursor = this.cursor(this.options(indexOrRange, range));\n    var results = [];\n    return this.iterateCursor(cursor, function (key, value) {\n      results.push(value);\n    }).next(function () {\n      return results;\n    });\n  };\n\n  SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {\n    logDebug(LOG_TAG$g, 'DELETE ALL', this.store.name);\n    var options = this.options(indexOrRange, range);\n    options.keysOnly = false;\n    var cursor = this.cursor(options);\n    return this.iterateCursor(cursor, function (key, value, control) {\n      // NOTE: Calling delete() on a cursor is documented as more efficient than\n      // calling delete() on an object store with a single key\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n      // however, this requires us *not* to use a keysOnly cursor\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n      // may want to compare the performance of each method.\n      return control.delete();\n    });\n  };\n\n  SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {\n    var options;\n\n    if (!callback) {\n      options = {};\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n\n    var cursor = this.cursor(options);\n    return this.iterateCursor(cursor, callback);\n  };\n  /**\r\n   * Iterates over a store, but waits for the given callback to complete for\r\n   * each entry before iterating the next entry. This allows the callback to do\r\n   * asynchronous work to determine if this iteration should continue.\r\n   *\r\n   * The provided callback should return `true` to continue iteration, and\r\n   * `false` otherwise.\r\n   */\n\n\n  SimpleDbStore.prototype.iterateSerial = function (callback) {\n    var cursorRequest = this.cursor({});\n    return new PersistencePromise(function (resolve, reject) {\n      cursorRequest.onerror = function (event) {\n        var error = checkForAndReportiOSError(event.target.error);\n        reject(error);\n      };\n\n      cursorRequest.onsuccess = function (event) {\n        var cursor = event.target.result;\n\n        if (!cursor) {\n          resolve();\n          return;\n        }\n\n        callback(cursor.primaryKey, cursor.value).next(function (shouldContinue) {\n          if (shouldContinue) {\n            cursor.continue();\n          } else {\n            resolve();\n          }\n        });\n      };\n    });\n  };\n\n  SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {\n    var results = [];\n    return new PersistencePromise(function (resolve, reject) {\n      cursorRequest.onerror = function (event) {\n        reject(event.target.error);\n      };\n\n      cursorRequest.onsuccess = function (event) {\n        var cursor = event.target.result;\n\n        if (!cursor) {\n          resolve();\n          return;\n        }\n\n        var controller = new IterationController(cursor);\n        var userResult = fn(cursor.primaryKey, cursor.value, controller);\n\n        if (userResult instanceof PersistencePromise) {\n          var userPromise = userResult.catch(function (err) {\n            controller.done();\n            return PersistencePromise.reject(err);\n          });\n          results.push(userPromise);\n        }\n\n        if (controller.isDone) {\n          resolve();\n        } else if (controller.skipToKey === null) {\n          cursor.continue();\n        } else {\n          cursor.continue(controller.skipToKey);\n        }\n      };\n    }).next(function () {\n      return PersistencePromise.waitFor(results);\n    });\n  };\n\n  SimpleDbStore.prototype.options = function (indexOrRange, range) {\n    var indexName = undefined;\n\n    if (indexOrRange !== undefined) {\n      if (typeof indexOrRange === 'string') {\n        indexName = indexOrRange;\n      } else {\n        range = indexOrRange;\n      }\n    }\n\n    return {\n      index: indexName,\n      range: range\n    };\n  };\n\n  SimpleDbStore.prototype.cursor = function (options) {\n    var direction = 'next';\n\n    if (options.reverse) {\n      direction = 'prev';\n    }\n\n    if (options.index) {\n      var index = this.store.index(options.index);\n\n      if (options.keysOnly) {\n        return index.openKeyCursor(options.range, direction);\n      } else {\n        return index.openCursor(options.range, direction);\n      }\n    } else {\n      return this.store.openCursor(options.range, direction);\n    }\n  };\n\n  return SimpleDbStore;\n}();\n/**\r\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\r\n * handlers to resolve / reject the PersistencePromise as appropriate.\r\n */\n\n\nfunction wrapRequest(request) {\n  return new PersistencePromise(function (resolve, reject) {\n    request.onsuccess = function (event) {\n      var result = event.target.result;\n      resolve(result);\n    };\n\n    request.onerror = function (event) {\n      var error = checkForAndReportiOSError(event.target.error);\n      reject(error);\n    };\n  });\n} // Guard so we only report the error once.\n\n\nvar reportedIOSError = false;\n\nfunction checkForAndReportiOSError(error) {\n  var iOSVersion = SimpleDb.getIOSVersion(util.getUA());\n\n  if (iOSVersion >= 12.2 && iOSVersion < 13) {\n    var IOS_ERROR = 'An internal error was encountered in the Indexed Database server';\n\n    if (error.message.indexOf(IOS_ERROR) >= 0) {\n      // Wrap error in a more descriptive one.\n      var newError_1 = new FirestoreError('internal', \"IOS_INDEXEDDB_BUG1: IndexedDb has thrown '\" + IOS_ERROR + \"'. This is likely \" + \"due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 \" + \"for details and a potential workaround.\");\n\n      if (!reportedIOSError) {\n        reportedIOSError = true; // Throw a global exception outside of this promise chain, for the user to\n        // potentially catch.\n\n        setTimeout(function () {\n          throw newError_1;\n        }, 0);\n      }\n\n      return newError_1;\n    }\n  }\n\n  return error;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar IndexedDbTransaction =\n/** @class */\nfunction (_super) {\n  tslib.__extends(IndexedDbTransaction, _super);\n\n  function IndexedDbTransaction(simpleDbTransaction, currentSequenceNumber) {\n    var _this = _super.call(this) || this;\n\n    _this.simpleDbTransaction = simpleDbTransaction;\n    _this.currentSequenceNumber = currentSequenceNumber;\n    return _this;\n  }\n\n  return IndexedDbTransaction;\n}(PersistenceTransaction);\n\nfunction getStore(txn, store) {\n  var indexedDbTransaction = debugCast(txn);\n  return SimpleDb.getStore(indexedDbTransaction.simpleDbTransaction, store);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Generates `nBytes` of random bytes.\r\n *\r\n * If `nBytes < 0` , an error will be thrown.\r\n */\n\n\nfunction randomBytes(nBytes) {\n  return crypto.randomBytes(nBytes);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar AutoId =\n/** @class */\nfunction () {\n  function AutoId() {}\n\n  AutoId.newId = function () {\n    // Alphanumeric characters\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; // The largest byte value that is a multiple of `char.length`.\n\n    var maxMultiple = Math.floor(256 / chars.length) * chars.length;\n    var autoId = '';\n    var targetLength = 20;\n\n    while (autoId.length < targetLength) {\n      var bytes = randomBytes(40);\n\n      for (var i = 0; i < bytes.length; ++i) {\n        // Only accept values that are [0, maxMultiple), this ensures they can\n        // be evenly mapped to indices of `chars` via a modulo operation.\n        if (autoId.length < targetLength && bytes[i] < maxMultiple) {\n          autoId += chars.charAt(bytes[i] % chars.length);\n        }\n      }\n    }\n\n    return autoId;\n  };\n\n  return AutoId;\n}();\n\nfunction primitiveComparator(left, right) {\n  if (left < right) {\n    return -1;\n  }\n\n  if (left > right) {\n    return 1;\n  }\n\n  return 0;\n}\n/** Helper to compare arrays using isEqual(). */\n\n\nfunction arrayEquals(left, right, comparator) {\n  if (left.length !== right.length) {\n    return false;\n  }\n\n  return left.every(function (value, index) {\n    return comparator(value, right[index]);\n  });\n}\n/**\r\n * Returns the immediate lexicographically-following string. This is useful to\r\n * construct an inclusive range for indexeddb iterators.\r\n */\n\n\nfunction immediateSuccessor(s) {\n  // Return the input string, with an additional NUL byte appended.\n  return s + '\\0';\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n\n\nvar MIN_SECONDS = -62135596800; // Number of nanoseconds in a millisecond.\n\nvar MS_TO_NANOS = 1e6;\n/**\r\n * A `Timestamp` represents a point in time independent of any time zone or\r\n * calendar, represented as seconds and fractions of seconds at nanosecond\r\n * resolution in UTC Epoch time.\r\n *\r\n * It is encoded using the Proleptic Gregorian Calendar which extends the\r\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\r\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\r\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\r\n * 9999-12-31T23:59:59.999999999Z.\r\n *\r\n * For examples and further specifications, refer to the\r\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\r\n */\n\nvar Timestamp =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new timestamp.\r\n   *\r\n   * @param seconds - The number of seconds of UTC time since Unix epoch\r\n   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\r\n   *     9999-12-31T23:59:59Z inclusive.\r\n   * @param nanoseconds - The non-negative fractions of a second at nanosecond\r\n   *     resolution. Negative second values with fractions must still have\r\n   *     non-negative nanoseconds values that count forward in time. Must be\r\n   *     from 0 to 999,999,999 inclusive.\r\n   */\n  function Timestamp(\n  /**\r\n   * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\r\n   */\n  seconds,\n  /**\r\n   * The fractions of a second at nanosecond resolution.*\r\n   */\n  nanoseconds) {\n    this.seconds = seconds;\n    this.nanoseconds = nanoseconds;\n\n    if (nanoseconds < 0) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);\n    }\n\n    if (seconds < MIN_SECONDS) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);\n    } // This will break in the year 10,000.\n\n\n    if (seconds >= 253402300800) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);\n    }\n  }\n  /**\r\n   * Creates a new timestamp with the current date, with millisecond precision.\r\n   *\r\n   * @returns a new timestamp representing the current date.\r\n   */\n\n\n  Timestamp.now = function () {\n    return Timestamp.fromMillis(Date.now());\n  };\n  /**\r\n   * Creates a new timestamp from the given date.\r\n   *\r\n   * @param date - The date to initialize the `Timestamp` from.\r\n   * @returns A new `Timestamp` representing the same point in time as the given\r\n   *     date.\r\n   */\n\n\n  Timestamp.fromDate = function (date) {\n    return Timestamp.fromMillis(date.getTime());\n  };\n  /**\r\n   * Creates a new timestamp from the given number of milliseconds.\r\n   *\r\n   * @param milliseconds - Number of milliseconds since Unix epoch\r\n   *     1970-01-01T00:00:00Z.\r\n   * @returns A new `Timestamp` representing the same point in time as the given\r\n   *     number of milliseconds.\r\n   */\n\n\n  Timestamp.fromMillis = function (milliseconds) {\n    var seconds = Math.floor(milliseconds / 1000);\n    var nanos = Math.floor((milliseconds - seconds * 1000) * MS_TO_NANOS);\n    return new Timestamp(seconds, nanos);\n  };\n  /**\r\n   * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\r\n   * causes a loss of precision since `Date` objects only support millisecond\r\n   * precision.\r\n   *\r\n   * @returns JavaScript `Date` object representing the same point in time as\r\n   *     this `Timestamp`, with millisecond precision.\r\n   */\n\n\n  Timestamp.prototype.toDate = function () {\n    return new Date(this.toMillis());\n  };\n  /**\r\n   * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\r\n   * epoch). This operation causes a loss of precision.\r\n   *\r\n   * @returns The point in time corresponding to this timestamp, represented as\r\n   *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\r\n   */\n\n\n  Timestamp.prototype.toMillis = function () {\n    return this.seconds * 1000 + this.nanoseconds / MS_TO_NANOS;\n  };\n\n  Timestamp.prototype._compareTo = function (other) {\n    if (this.seconds === other.seconds) {\n      return primitiveComparator(this.nanoseconds, other.nanoseconds);\n    }\n\n    return primitiveComparator(this.seconds, other.seconds);\n  };\n  /**\r\n   * Returns true if this `Timestamp` is equal to the provided one.\r\n   *\r\n   * @param other - The `Timestamp` to compare against.\r\n   * @returns true if this `Timestamp` is equal to the provided one.\r\n   */\n\n\n  Timestamp.prototype.isEqual = function (other) {\n    return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;\n  };\n  /** Returns a textual representation of this Timestamp. */\n\n\n  Timestamp.prototype.toString = function () {\n    return 'Timestamp(seconds=' + this.seconds + ', nanoseconds=' + this.nanoseconds + ')';\n  };\n  /** Returns a JSON-serializable representation of this Timestamp. */\n\n\n  Timestamp.prototype.toJSON = function () {\n    return {\n      seconds: this.seconds,\n      nanoseconds: this.nanoseconds\n    };\n  };\n  /**\r\n   * Converts this object to a primitive string, which allows Timestamp objects\r\n   * to be compared using the `>`, `<=`, `>=` and `>` operators.\r\n   */\n\n\n  Timestamp.prototype.valueOf = function () {\n    // This method returns a string of the form <seconds>.<nanoseconds> where\n    // <seconds> is translated to have a non-negative value and both <seconds>\n    // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n    // Strings with this format then have a lexiographical ordering that matches\n    // the expected ordering. The <seconds> translation is done to avoid having\n    // a leading negative sign (i.e. a leading '-' character) in its string\n    // representation, which would affect its lexiographical ordering.\n    var adjustedSeconds = this.seconds - MIN_SECONDS; // Note: Up to 12 decimal digits are required to represent all valid\n    // 'seconds' values.\n\n    var formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    var formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  };\n\n  return Timestamp;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A version of a document in Firestore. This corresponds to the version\r\n * timestamp, such as update_time or read_time.\r\n */\n\n\nvar SnapshotVersion =\n/** @class */\nfunction () {\n  function SnapshotVersion(timestamp) {\n    this.timestamp = timestamp;\n  }\n\n  SnapshotVersion.fromTimestamp = function (value) {\n    return new SnapshotVersion(value);\n  };\n\n  SnapshotVersion.min = function () {\n    return new SnapshotVersion(new Timestamp(0, 0));\n  };\n\n  SnapshotVersion.prototype.compareTo = function (other) {\n    return this.timestamp._compareTo(other.timestamp);\n  };\n\n  SnapshotVersion.prototype.isEqual = function (other) {\n    return this.timestamp.isEqual(other.timestamp);\n  };\n  /** Returns a number representation of the version for use in spec tests. */\n\n\n  SnapshotVersion.prototype.toMicroseconds = function () {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\n  };\n\n  SnapshotVersion.prototype.toString = function () {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  };\n\n  SnapshotVersion.prototype.toTimestamp = function () {\n    return this.timestamp;\n  };\n\n  return SnapshotVersion;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction objectSize(obj) {\n  var count = 0;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n\n  return count;\n}\n\nfunction forEach(obj, fn) {\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\nfunction isEmpty(obj) {\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides a set of fields that can be used to partially patch a document.\r\n * FieldMask is used in conjunction with ObjectValue.\r\n * Examples:\r\n *   foo - Overwrites foo entirely with the provided value. If foo is not\r\n *         present in the companion ObjectValue, the field is deleted.\r\n *   foo.bar - Overwrites only the field bar of the object foo.\r\n *             If foo is not an object, foo is replaced with an object\r\n *             containing foo\r\n */\n\n\nvar FieldMask =\n/** @class */\nfunction () {\n  function FieldMask(fields) {\n    this.fields = fields; // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n\n    fields.sort(FieldPath$1.comparator);\n  }\n  /**\r\n   * Verifies that `fieldPath` is included by at least one field in this field\r\n   * mask.\r\n   *\r\n   * This is an O(n) operation, where `n` is the size of the field mask.\r\n   */\n\n\n  FieldMask.prototype.covers = function (fieldPath) {\n    for (var _i = 0, _d = this.fields; _i < _d.length; _i++) {\n      var fieldMaskPath = _d[_i];\n\n      if (fieldMaskPath.isPrefixOf(fieldPath)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  FieldMask.prototype.isEqual = function (other) {\n    return arrayEquals(this.fields, other.fields, function (l, r) {\n      return l.isEqual(r);\n    });\n  };\n\n  return FieldMask;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction decodeBase64(encoded) {\n  // Node actually doesn't validate base64 strings.\n  // A quick sanity check that is not a fool-proof validation\n  if (/[^-A-Za-z0-9+/=]/.test(encoded)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Not a valid Base64 string: ' + encoded);\n  }\n\n  return new Buffer(encoded, 'base64').toString('binary');\n}\n/** Converts a binary string to a Base64 encoded string. */\n\n\nfunction encodeBase64(raw) {\n  return new Buffer(raw, 'binary').toString('base64');\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Immutable class that represents a \"proto\" byte string.\r\n *\r\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\r\n * sent on the wire. This class abstracts away this differentiation by holding\r\n * the proto byte string in a common class that must be converted into a string\r\n * before being sent as a proto.\r\n */\n\n\nvar ByteString =\n/** @class */\nfunction () {\n  function ByteString(binaryString) {\n    this.binaryString = binaryString;\n  }\n\n  ByteString.fromBase64String = function (base64) {\n    var binaryString = decodeBase64(base64);\n    return new ByteString(binaryString);\n  };\n\n  ByteString.fromUint8Array = function (array) {\n    var binaryString = binaryStringFromUint8Array(array);\n    return new ByteString(binaryString);\n  };\n\n  ByteString.prototype.toBase64 = function () {\n    return encodeBase64(this.binaryString);\n  };\n\n  ByteString.prototype.toUint8Array = function () {\n    return uint8ArrayFromBinaryString(this.binaryString);\n  };\n\n  ByteString.prototype.approximateByteSize = function () {\n    return this.binaryString.length * 2;\n  };\n\n  ByteString.prototype.compareTo = function (other) {\n    return primitiveComparator(this.binaryString, other.binaryString);\n  };\n\n  ByteString.prototype.isEqual = function (other) {\n    return this.binaryString === other.binaryString;\n  };\n\n  return ByteString;\n}();\n\nByteString.EMPTY_BYTE_STRING = new ByteString('');\n/**\r\n * Helper function to convert an Uint8array to a binary string.\r\n */\n\nfunction binaryStringFromUint8Array(array) {\n  var binaryString = '';\n\n  for (var i = 0; i < array.length; ++i) {\n    binaryString += String.fromCharCode(array[i]);\n  }\n\n  return binaryString;\n}\n/**\r\n * Helper function to convert a binary string to an Uint8Array.\r\n */\n\n\nfunction uint8ArrayFromBinaryString(binaryString) {\n  var buffer = new Uint8Array(binaryString.length);\n\n  for (var i = 0; i < binaryString.length; i++) {\n    buffer[i] = binaryString.charCodeAt(i);\n  }\n\n  return buffer;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n\n\nvar ISO_TIMESTAMP_REG_EXP = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n/**\r\n * Converts the possible Proto values for a timestamp value into a \"seconds and\r\n * nanos\" representation.\r\n */\n\nfunction normalizeTimestamp(date) {\n  hardAssert(!!date); // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n\n  if (typeof date === 'string') {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n    // Parse the nanos right out of the string.\n    var nanos = 0;\n    var fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\n    hardAssert(!!fraction);\n\n    if (fraction[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      var nanoStr = fraction[1];\n      nanoStr = (nanoStr + '000000000').substr(0, 9);\n      nanos = Number(nanoStr);\n    } // Parse the date to get the seconds.\n\n\n    var parsedDate = new Date(date);\n    var seconds = Math.floor(parsedDate.getTime() / 1000);\n    return {\n      seconds: seconds,\n      nanos: nanos\n    };\n  } else {\n    // TODO(b/37282237): Use strings for Proto3 timestamps\n    // assert(!this.options.useProto3Json,\n    //   'The timestamp instance format requires Proto JS.');\n    var seconds = normalizeNumber(date.seconds);\n    var nanos = normalizeNumber(date.nanos);\n    return {\n      seconds: seconds,\n      nanos: nanos\n    };\n  }\n}\n/**\r\n * Converts the possible Proto types for numbers into a JavaScript number.\r\n * Returns 0 if the value is not numeric.\r\n */\n\n\nfunction normalizeNumber(value) {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'string') {\n    return Number(value);\n  } else {\n    return 0;\n  }\n}\n/** Converts the possible Proto types for Blobs into a ByteString. */\n\n\nfunction normalizeByteString(blob) {\n  if (typeof blob === 'string') {\n    return ByteString.fromBase64String(blob);\n  } else {\n    return ByteString.fromUint8Array(blob);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a locally-applied ServerTimestamp.\r\n *\r\n * Server Timestamps are backed by MapValues that contain an internal field\r\n * `__type__` with a value of `server_timestamp`. The previous value and local\r\n * write time are stored in its `__previous_value__` and `__local_write_time__`\r\n * fields respectively.\r\n *\r\n * Notes:\r\n * - ServerTimestampValue instances are created as the result of applying a\r\n *   transform. They can only exist in the local view of a document. Therefore\r\n *   they do not need to be parsed or serialized.\r\n * - When evaluated locally (e.g. for snapshot.data()), they by default\r\n *   evaluate to `null`. This behavior can be configured by passing custom\r\n *   FieldValueOptions to value().\r\n * - With respect to other ServerTimestampValues, they sort by their\r\n *   localWriteTime.\r\n */\n\n\nvar SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\nvar TYPE_KEY = '__type__';\nvar PREVIOUS_VALUE_KEY = '__previous_value__';\nvar LOCAL_WRITE_TIME_KEY = '__local_write_time__';\n\nfunction isServerTimestamp(value) {\n  var _a, _b;\n\n  var type = (_b = (((_a = value === null || value === void 0 ? void 0 : value.mapValue) === null || _a === void 0 ? void 0 : _a.fields) || {})[TYPE_KEY]) === null || _b === void 0 ? void 0 : _b.stringValue;\n  return type === SERVER_TIMESTAMP_SENTINEL;\n}\n/**\r\n * Creates a new ServerTimestamp proto value (using the internal format).\r\n */\n\n\nfunction serverTimestamp(localWriteTime, previousValue) {\n  var _d;\n\n  var mapValue = {\n    fields: (_d = {}, _d[TYPE_KEY] = {\n      stringValue: SERVER_TIMESTAMP_SENTINEL\n    }, _d[LOCAL_WRITE_TIME_KEY] = {\n      timestampValue: {\n        seconds: localWriteTime.seconds,\n        nanos: localWriteTime.nanoseconds\n      }\n    }, _d)\n  };\n\n  if (previousValue) {\n    mapValue.fields[PREVIOUS_VALUE_KEY] = previousValue;\n  }\n\n  return {\n    mapValue: mapValue\n  };\n}\n/**\r\n * Returns the value of the field before this ServerTimestamp was set.\r\n *\r\n * Preserving the previous values allows the user to display the last resoled\r\n * value until the backend responds with the timestamp.\r\n */\n\n\nfunction getPreviousValue(value) {\n  var previousValue = value.mapValue.fields[PREVIOUS_VALUE_KEY];\n\n  if (isServerTimestamp(previousValue)) {\n    return getPreviousValue(previousValue);\n  }\n\n  return previousValue;\n}\n/**\r\n * Returns the local time at which this timestamp was first set.\r\n */\n\n\nfunction getLocalWriteTime(value) {\n  var localWriteTime = normalizeTimestamp(value.mapValue.fields[LOCAL_WRITE_TIME_KEY].timestampValue);\n  return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Sentinel value that sorts before any Mutation Batch ID. */\n\n\nvar BATCHID_UNKNOWN = -1;\n/**\r\n * Returns whether a variable is either undefined or null.\r\n */\n\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\n/** Returns whether the value represents -0. */\n\n\nfunction isNegativeZero(value) {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return value === 0 && 1 / value === 1 / -0;\n}\n/**\r\n * Returns whether a value is an integer and in the safe integer range\r\n * @param value - The value to test for being an integer and in the safe range\r\n */\n\n\nfunction isSafeInteger(value) {\n  return typeof value === 'number' && Number.isInteger(value) && !isNegativeZero(value) && value <= Number.MAX_SAFE_INTEGER && value >= Number.MIN_SAFE_INTEGER;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DocumentKey =\n/** @class */\nfunction () {\n  function DocumentKey(path) {\n    this.path = path;\n  }\n\n  DocumentKey.fromPath = function (path) {\n    return new DocumentKey(ResourcePath.fromString(path));\n  };\n\n  DocumentKey.fromName = function (name) {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  };\n  /** Returns true if the document is in the specified collectionId. */\n\n\n  DocumentKey.prototype.hasCollectionId = function (collectionId) {\n    return this.path.length >= 2 && this.path.get(this.path.length - 2) === collectionId;\n  };\n\n  DocumentKey.prototype.isEqual = function (other) {\n    return other !== null && ResourcePath.comparator(this.path, other.path) === 0;\n  };\n\n  DocumentKey.prototype.toString = function () {\n    return this.path.toString();\n  };\n\n  DocumentKey.comparator = function (k1, k2) {\n    return ResourcePath.comparator(k1.path, k2.path);\n  };\n\n  DocumentKey.isDocumentKey = function (path) {\n    return path.length % 2 === 0;\n  };\n  /**\r\n   * Creates and returns a new document key with the given segments.\r\n   *\r\n   * @param segments - The segments of the path to the document\r\n   * @returns A new instance of DocumentKey\r\n   */\n\n\n  DocumentKey.fromSegments = function (segments) {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  };\n\n  return DocumentKey;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Extracts the backend's type order for the provided value. */\n\n\nfunction typeOrder(value) {\n  if ('nullValue' in value) {\n    return 0\n    /* NullValue */\n    ;\n  } else if ('booleanValue' in value) {\n    return 1\n    /* BooleanValue */\n    ;\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return 2\n    /* NumberValue */\n    ;\n  } else if ('timestampValue' in value) {\n    return 3\n    /* TimestampValue */\n    ;\n  } else if ('stringValue' in value) {\n    return 5\n    /* StringValue */\n    ;\n  } else if ('bytesValue' in value) {\n    return 6\n    /* BlobValue */\n    ;\n  } else if ('referenceValue' in value) {\n    return 7\n    /* RefValue */\n    ;\n  } else if ('geoPointValue' in value) {\n    return 8\n    /* GeoPointValue */\n    ;\n  } else if ('arrayValue' in value) {\n    return 9\n    /* ArrayValue */\n    ;\n  } else if ('mapValue' in value) {\n    if (isServerTimestamp(value)) {\n      return 4\n      /* ServerTimestampValue */\n      ;\n    }\n\n    return 10\n    /* ObjectValue */\n    ;\n  } else {\n    return fail();\n  }\n}\n/** Tests `left` and `right` for equality based on the backend semantics. */\n\n\nfunction valueEquals(left, right) {\n  var leftType = typeOrder(left);\n  var rightType = typeOrder(right);\n\n  if (leftType !== rightType) {\n    return false;\n  }\n\n  switch (leftType) {\n    case 0\n    /* NullValue */\n    :\n      return true;\n\n    case 1\n    /* BooleanValue */\n    :\n      return left.booleanValue === right.booleanValue;\n\n    case 4\n    /* ServerTimestampValue */\n    :\n      return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\n\n    case 3\n    /* TimestampValue */\n    :\n      return timestampEquals(left, right);\n\n    case 5\n    /* StringValue */\n    :\n      return left.stringValue === right.stringValue;\n\n    case 6\n    /* BlobValue */\n    :\n      return blobEquals(left, right);\n\n    case 7\n    /* RefValue */\n    :\n      return left.referenceValue === right.referenceValue;\n\n    case 8\n    /* GeoPointValue */\n    :\n      return geoPointEquals(left, right);\n\n    case 2\n    /* NumberValue */\n    :\n      return numberEquals(left, right);\n\n    case 9\n    /* ArrayValue */\n    :\n      return arrayEquals(left.arrayValue.values || [], right.arrayValue.values || [], valueEquals);\n\n    case 10\n    /* ObjectValue */\n    :\n      return objectEquals(left, right);\n\n    default:\n      return fail();\n  }\n}\n\nfunction timestampEquals(left, right) {\n  if (typeof left.timestampValue === 'string' && typeof right.timestampValue === 'string' && left.timestampValue.length === right.timestampValue.length) {\n    // Use string equality for ISO 8601 timestamps\n    return left.timestampValue === right.timestampValue;\n  }\n\n  var leftTimestamp = normalizeTimestamp(left.timestampValue);\n  var rightTimestamp = normalizeTimestamp(right.timestampValue);\n  return leftTimestamp.seconds === rightTimestamp.seconds && leftTimestamp.nanos === rightTimestamp.nanos;\n}\n\nfunction geoPointEquals(left, right) {\n  return normalizeNumber(left.geoPointValue.latitude) === normalizeNumber(right.geoPointValue.latitude) && normalizeNumber(left.geoPointValue.longitude) === normalizeNumber(right.geoPointValue.longitude);\n}\n\nfunction blobEquals(left, right) {\n  return normalizeByteString(left.bytesValue).isEqual(normalizeByteString(right.bytesValue));\n}\n\nfunction numberEquals(left, right) {\n  if ('integerValue' in left && 'integerValue' in right) {\n    return normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue);\n  } else if ('doubleValue' in left && 'doubleValue' in right) {\n    var n1 = normalizeNumber(left.doubleValue);\n    var n2 = normalizeNumber(right.doubleValue);\n\n    if (n1 === n2) {\n      return isNegativeZero(n1) === isNegativeZero(n2);\n    } else {\n      return isNaN(n1) && isNaN(n2);\n    }\n  }\n\n  return false;\n}\n\nfunction objectEquals(left, right) {\n  var leftMap = left.mapValue.fields || {};\n  var rightMap = right.mapValue.fields || {};\n\n  if (objectSize(leftMap) !== objectSize(rightMap)) {\n    return false;\n  }\n\n  for (var key in leftMap) {\n    if (leftMap.hasOwnProperty(key)) {\n      if (rightMap[key] === undefined || !valueEquals(leftMap[key], rightMap[key])) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/** Returns true if the ArrayValue contains the specified element. */\n\n\nfunction arrayValueContains(haystack, needle) {\n  return (haystack.values || []).find(function (v) {\n    return valueEquals(v, needle);\n  }) !== undefined;\n}\n\nfunction valueCompare(left, right) {\n  var leftType = typeOrder(left);\n  var rightType = typeOrder(right);\n\n  if (leftType !== rightType) {\n    return primitiveComparator(leftType, rightType);\n  }\n\n  switch (leftType) {\n    case 0\n    /* NullValue */\n    :\n      return 0;\n\n    case 1\n    /* BooleanValue */\n    :\n      return primitiveComparator(left.booleanValue, right.booleanValue);\n\n    case 2\n    /* NumberValue */\n    :\n      return compareNumbers(left, right);\n\n    case 3\n    /* TimestampValue */\n    :\n      return compareTimestamps(left.timestampValue, right.timestampValue);\n\n    case 4\n    /* ServerTimestampValue */\n    :\n      return compareTimestamps(getLocalWriteTime(left), getLocalWriteTime(right));\n\n    case 5\n    /* StringValue */\n    :\n      return primitiveComparator(left.stringValue, right.stringValue);\n\n    case 6\n    /* BlobValue */\n    :\n      return compareBlobs(left.bytesValue, right.bytesValue);\n\n    case 7\n    /* RefValue */\n    :\n      return compareReferences(left.referenceValue, right.referenceValue);\n\n    case 8\n    /* GeoPointValue */\n    :\n      return compareGeoPoints(left.geoPointValue, right.geoPointValue);\n\n    case 9\n    /* ArrayValue */\n    :\n      return compareArrays(left.arrayValue, right.arrayValue);\n\n    case 10\n    /* ObjectValue */\n    :\n      return compareMaps(left.mapValue, right.mapValue);\n\n    default:\n      throw fail();\n  }\n}\n\nfunction compareNumbers(left, right) {\n  var leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\n  var rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\n\n  if (leftNumber < rightNumber) {\n    return -1;\n  } else if (leftNumber > rightNumber) {\n    return 1;\n  } else if (leftNumber === rightNumber) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(leftNumber)) {\n      return isNaN(rightNumber) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\nfunction compareTimestamps(left, right) {\n  if (typeof left === 'string' && typeof right === 'string' && left.length === right.length) {\n    return primitiveComparator(left, right);\n  }\n\n  var leftTimestamp = normalizeTimestamp(left);\n  var rightTimestamp = normalizeTimestamp(right);\n  var comparison = primitiveComparator(leftTimestamp.seconds, rightTimestamp.seconds);\n\n  if (comparison !== 0) {\n    return comparison;\n  }\n\n  return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\n}\n\nfunction compareReferences(leftPath, rightPath) {\n  var leftSegments = leftPath.split('/');\n  var rightSegments = rightPath.split('/');\n\n  for (var i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\n    var comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\n\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n\n  return primitiveComparator(leftSegments.length, rightSegments.length);\n}\n\nfunction compareGeoPoints(left, right) {\n  var comparison = primitiveComparator(normalizeNumber(left.latitude), normalizeNumber(right.latitude));\n\n  if (comparison !== 0) {\n    return comparison;\n  }\n\n  return primitiveComparator(normalizeNumber(left.longitude), normalizeNumber(right.longitude));\n}\n\nfunction compareBlobs(left, right) {\n  var leftBytes = normalizeByteString(left);\n  var rightBytes = normalizeByteString(right);\n  return leftBytes.compareTo(rightBytes);\n}\n\nfunction compareArrays(left, right) {\n  var leftArray = left.values || [];\n  var rightArray = right.values || [];\n\n  for (var i = 0; i < leftArray.length && i < rightArray.length; ++i) {\n    var compare = valueCompare(leftArray[i], rightArray[i]);\n\n    if (compare) {\n      return compare;\n    }\n  }\n\n  return primitiveComparator(leftArray.length, rightArray.length);\n}\n\nfunction compareMaps(left, right) {\n  var leftMap = left.fields || {};\n  var leftKeys = Object.keys(leftMap);\n  var rightMap = right.fields || {};\n  var rightKeys = Object.keys(rightMap); // Even though MapValues are likely sorted correctly based on their insertion\n  // order (e.g. when received from the backend), local modifications can bring\n  // elements out of order. We need to re-sort the elements to ensure that\n  // canonical IDs are independent of insertion order.\n\n  leftKeys.sort();\n  rightKeys.sort();\n\n  for (var i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\n    var keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\n\n    if (keyCompare !== 0) {\n      return keyCompare;\n    }\n\n    var compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\n\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n\n  return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n/**\r\n * Generates the canonical ID for the provided field value (as used in Target\r\n * serialization).\r\n */\n\n\nfunction canonicalId(value) {\n  return canonifyValue(value);\n}\n\nfunction canonifyValue(value) {\n  if ('nullValue' in value) {\n    return 'null';\n  } else if ('booleanValue' in value) {\n    return '' + value.booleanValue;\n  } else if ('integerValue' in value) {\n    return '' + value.integerValue;\n  } else if ('doubleValue' in value) {\n    return '' + value.doubleValue;\n  } else if ('timestampValue' in value) {\n    return canonifyTimestamp(value.timestampValue);\n  } else if ('stringValue' in value) {\n    return value.stringValue;\n  } else if ('bytesValue' in value) {\n    return canonifyByteString(value.bytesValue);\n  } else if ('referenceValue' in value) {\n    return canonifyReference(value.referenceValue);\n  } else if ('geoPointValue' in value) {\n    return canonifyGeoPoint(value.geoPointValue);\n  } else if ('arrayValue' in value) {\n    return canonifyArray(value.arrayValue);\n  } else if ('mapValue' in value) {\n    return canonifyMap(value.mapValue);\n  } else {\n    return fail();\n  }\n}\n\nfunction canonifyByteString(byteString) {\n  return normalizeByteString(byteString).toBase64();\n}\n\nfunction canonifyTimestamp(timestamp) {\n  var normalizedTimestamp = normalizeTimestamp(timestamp);\n  return \"time(\" + normalizedTimestamp.seconds + \",\" + normalizedTimestamp.nanos + \")\";\n}\n\nfunction canonifyGeoPoint(geoPoint) {\n  return \"geo(\" + geoPoint.latitude + \",\" + geoPoint.longitude + \")\";\n}\n\nfunction canonifyReference(referenceValue) {\n  return DocumentKey.fromName(referenceValue).toString();\n}\n\nfunction canonifyMap(mapValue) {\n  // Iteration order in JavaScript is not guaranteed. To ensure that we generate\n  // matching canonical IDs for identical maps, we need to sort the keys.\n  var sortedKeys = Object.keys(mapValue.fields || {}).sort();\n  var result = '{';\n  var first = true;\n\n  for (var _i = 0, sortedKeys_1 = sortedKeys; _i < sortedKeys_1.length; _i++) {\n    var key = sortedKeys_1[_i];\n\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n\n    result += key + \":\" + canonifyValue(mapValue.fields[key]);\n  }\n\n  return result + '}';\n}\n\nfunction canonifyArray(arrayValue) {\n  var result = '[';\n  var first = true;\n\n  for (var _i = 0, _d = arrayValue.values || []; _i < _d.length; _i++) {\n    var value = _d[_i];\n\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n\n    result += canonifyValue(value);\n  }\n\n  return result + ']';\n}\n/** Returns a reference value for the provided database and key. */\n\n\nfunction refValue(databaseId, key) {\n  return {\n    referenceValue: \"projects/\" + databaseId.projectId + \"/databases/\" + databaseId.database + \"/documents/\" + key.path.canonicalString()\n  };\n}\n/** Returns true if `value` is an IntegerValue . */\n\n\nfunction isInteger(value) {\n  return !!value && 'integerValue' in value;\n}\n/** Returns true if `value` is a DoubleValue. */\n\n\nfunction isDouble(value) {\n  return !!value && 'doubleValue' in value;\n}\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\n\n\nfunction isNumber(value) {\n  return isInteger(value) || isDouble(value);\n}\n/** Returns true if `value` is an ArrayValue. */\n\n\nfunction isArray(value) {\n  return !!value && 'arrayValue' in value;\n}\n/** Returns true if `value` is a NullValue. */\n\n\nfunction isNullValue(value) {\n  return !!value && 'nullValue' in value;\n}\n/** Returns true if `value` is NaN. */\n\n\nfunction isNanValue(value) {\n  return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\n}\n/** Returns true if `value` is a MapValue. */\n\n\nfunction isMapValue(value) {\n  return !!value && 'mapValue' in value;\n}\n/** Creates a deep copy of `source`. */\n\n\nfunction deepClone(source) {\n  if (source.geoPointValue) {\n    return {\n      geoPointValue: Object.assign({}, source.geoPointValue)\n    };\n  } else if (source.timestampValue && typeof source.timestampValue === 'object') {\n    return {\n      timestampValue: Object.assign({}, source.timestampValue)\n    };\n  } else if (source.mapValue) {\n    var target_1 = {\n      mapValue: {\n        fields: {}\n      }\n    };\n    forEach(source.mapValue.fields, function (key, val) {\n      return target_1.mapValue.fields[key] = deepClone(val);\n    });\n    return target_1;\n  } else if (source.arrayValue) {\n    var target = {\n      arrayValue: {\n        values: []\n      }\n    };\n\n    for (var i = 0; i < (source.arrayValue.values || []).length; ++i) {\n      target.arrayValue.values[i] = deepClone(source.arrayValue.values[i]);\n    }\n\n    return target;\n  } else {\n    return Object.assign({}, source);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\r\n * ability to add and remove fields (via the ObjectValueBuilder).\r\n */\n\n\nvar ObjectValue =\n/** @class */\nfunction () {\n  function ObjectValue(value) {\n    this.value = value;\n  }\n\n  ObjectValue.empty = function () {\n    return new ObjectValue({\n      mapValue: {}\n    });\n  };\n  /**\r\n   * Returns the value at the given path or null.\r\n   *\r\n   * @param path - the path to search\r\n   * @returns The value at the path or null if the path is not set.\r\n   */\n\n\n  ObjectValue.prototype.field = function (path) {\n    if (path.isEmpty()) {\n      return this.value;\n    } else {\n      var currentLevel = this.value;\n\n      for (var i = 0; i < path.length - 1; ++i) {\n        currentLevel = (currentLevel.mapValue.fields || {})[path.get(i)];\n\n        if (!isMapValue(currentLevel)) {\n          return null;\n        }\n      }\n\n      currentLevel = (currentLevel.mapValue.fields || {})[path.lastSegment()];\n      return currentLevel || null;\n    }\n  };\n  /**\r\n   * Sets the field to the provided value.\r\n   *\r\n   * @param path - The field path to set.\r\n   * @param value - The value to set.\r\n   */\n\n\n  ObjectValue.prototype.set = function (path, value) {\n    var fieldsMap = this.getFieldsMap(path.popLast());\n    fieldsMap[path.lastSegment()] = deepClone(value);\n  };\n  /**\r\n   * Sets the provided fields to the provided values.\r\n   *\r\n   * @param data - A map of fields to values (or null for deletes).\r\n   */\n\n\n  ObjectValue.prototype.setAll = function (data) {\n    var _this = this;\n\n    var parent = FieldPath$1.emptyPath();\n    var upserts = {};\n    var deletes = [];\n    data.forEach(function (value, path) {\n      if (!parent.isImmediateParentOf(path)) {\n        // Insert the accumulated changes at this parent location\n        var fieldsMap_1 = _this.getFieldsMap(parent);\n\n        _this.applyChanges(fieldsMap_1, upserts, deletes);\n\n        upserts = {};\n        deletes = [];\n        parent = path.popLast();\n      }\n\n      if (value) {\n        upserts[path.lastSegment()] = deepClone(value);\n      } else {\n        deletes.push(path.lastSegment());\n      }\n    });\n    var fieldsMap = this.getFieldsMap(parent);\n    this.applyChanges(fieldsMap, upserts, deletes);\n  };\n  /**\r\n   * Removes the field at the specified path. If there is no field at the\r\n   * specified path, nothing is changed.\r\n   *\r\n   * @param path - The field path to remove.\r\n   */\n\n\n  ObjectValue.prototype.delete = function (path) {\n    var nestedValue = this.field(path.popLast());\n\n    if (isMapValue(nestedValue) && nestedValue.mapValue.fields) {\n      delete nestedValue.mapValue.fields[path.lastSegment()];\n    }\n  };\n\n  ObjectValue.prototype.isEqual = function (other) {\n    return valueEquals(this.value, other.value);\n  };\n  /**\r\n   * Returns the map that contains the leaf element of `path`. If the parent\r\n   * entry does not yet exist, or if it is not a map, a new map will be created.\r\n   */\n\n\n  ObjectValue.prototype.getFieldsMap = function (path) {\n    var current = this.value;\n\n    if (!current.mapValue.fields) {\n      current.mapValue = {\n        fields: {}\n      };\n    }\n\n    for (var i = 0; i < path.length; ++i) {\n      var next = current.mapValue.fields[path.get(i)];\n\n      if (!isMapValue(next) || !next.mapValue.fields) {\n        next = {\n          mapValue: {\n            fields: {}\n          }\n        };\n        current.mapValue.fields[path.get(i)] = next;\n      }\n\n      current = next;\n    }\n\n    return current.mapValue.fields;\n  };\n  /**\r\n   * Modifies `fieldsMap` by adding, replacing or deleting the specified\r\n   * entries.\r\n   */\n\n\n  ObjectValue.prototype.applyChanges = function (fieldsMap, inserts, deletes) {\n    forEach(inserts, function (key, val) {\n      return fieldsMap[key] = val;\n    });\n\n    for (var _i = 0, deletes_1 = deletes; _i < deletes_1.length; _i++) {\n      var field = deletes_1[_i];\n      delete fieldsMap[field];\n    }\n  };\n\n  ObjectValue.prototype.clone = function () {\n    return new ObjectValue(deepClone(this.value));\n  };\n\n  return ObjectValue;\n}();\n/**\r\n * Returns a FieldMask built from all fields in a MapValue.\r\n */\n\n\nfunction extractFieldMask(value) {\n  var fields = [];\n  forEach(value.fields, function (key, value) {\n    var currentPath = new FieldPath$1([key]);\n\n    if (isMapValue(value)) {\n      var nestedMask = extractFieldMask(value.mapValue);\n      var nestedFields = nestedMask.fields;\n\n      if (nestedFields.length === 0) {\n        // Preserve the empty map by adding it to the FieldMask.\n        fields.push(currentPath);\n      } else {\n        // For nested and non-empty ObjectValues, add the FieldPath of the\n        // leaf nodes.\n        for (var _i = 0, nestedFields_1 = nestedFields; _i < nestedFields_1.length; _i++) {\n          var nestedPath = nestedFields_1[_i];\n          fields.push(currentPath.child(nestedPath));\n        }\n      }\n    } else {\n      // For nested and non-empty ObjectValues, add the FieldPath of the leaf\n      // nodes.\n      fields.push(currentPath);\n    }\n  });\n  return new FieldMask(fields);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a document in Firestore with a key, version, data and whether it\r\n * has local mutations applied to it.\r\n *\r\n * Documents can transition between states via `convertToFoundDocument()`,\r\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\r\n * not transition to one of these states even after all mutations have been\r\n * applied, `isValidDocument()` returns false and the document should be removed\r\n * from all views.\r\n */\n\n\nvar MutableDocument =\n/** @class */\nfunction () {\n  function MutableDocument(key, documentType, version, data, documentState) {\n    this.key = key;\n    this.documentType = documentType;\n    this.version = version;\n    this.data = data;\n    this.documentState = documentState;\n  }\n  /**\r\n   * Creates a document with no known version or data, but which can serve as\r\n   * base document for mutations.\r\n   */\n\n\n  MutableDocument.newInvalidDocument = function (documentKey) {\n    return new MutableDocument(documentKey, 0\n    /* INVALID */\n    , SnapshotVersion.min(), ObjectValue.empty(), 0\n    /* SYNCED */\n    );\n  };\n  /**\r\n   * Creates a new document that is known to exist with the given data at the\r\n   * given version.\r\n   */\n\n\n  MutableDocument.newFoundDocument = function (documentKey, version, value) {\n    return new MutableDocument(documentKey, 1\n    /* FOUND_DOCUMENT */\n    , version, value, 0\n    /* SYNCED */\n    );\n  };\n  /** Creates a new document that is known to not exist at the given version. */\n\n\n  MutableDocument.newNoDocument = function (documentKey, version) {\n    return new MutableDocument(documentKey, 2\n    /* NO_DOCUMENT */\n    , version, ObjectValue.empty(), 0\n    /* SYNCED */\n    );\n  };\n  /**\r\n   * Creates a new document that is known to exist at the given version but\r\n   * whose data is not known (e.g. a document that was updated without a known\r\n   * base document).\r\n   */\n\n\n  MutableDocument.newUnknownDocument = function (documentKey, version) {\n    return new MutableDocument(documentKey, 3\n    /* UNKNOWN_DOCUMENT */\n    , version, ObjectValue.empty(), 2\n    /* HAS_COMMITTED_MUTATIONS */\n    );\n  };\n  /**\r\n   * Changes the document type to indicate that it exists and that its version\r\n   * and data are known.\r\n   */\n\n\n  MutableDocument.prototype.convertToFoundDocument = function (version, value) {\n    this.version = version;\n    this.documentType = 1\n    /* FOUND_DOCUMENT */\n    ;\n    this.data = value;\n    this.documentState = 0\n    /* SYNCED */\n    ;\n    return this;\n  };\n  /**\r\n   * Changes the document type to indicate that it doesn't exist at the given\r\n   * version.\r\n   */\n\n\n  MutableDocument.prototype.convertToNoDocument = function (version) {\n    this.version = version;\n    this.documentType = 2\n    /* NO_DOCUMENT */\n    ;\n    this.data = ObjectValue.empty();\n    this.documentState = 0\n    /* SYNCED */\n    ;\n    return this;\n  };\n  /**\r\n   * Changes the document type to indicate that it exists at a given version but\r\n   * that its data is not known (e.g. a document that was updated without a known\r\n   * base document).\r\n   */\n\n\n  MutableDocument.prototype.convertToUnknownDocument = function (version) {\n    this.version = version;\n    this.documentType = 3\n    /* UNKNOWN_DOCUMENT */\n    ;\n    this.data = ObjectValue.empty();\n    this.documentState = 2\n    /* HAS_COMMITTED_MUTATIONS */\n    ;\n    return this;\n  };\n\n  MutableDocument.prototype.setHasCommittedMutations = function () {\n    this.documentState = 2\n    /* HAS_COMMITTED_MUTATIONS */\n    ;\n    return this;\n  };\n\n  MutableDocument.prototype.setHasLocalMutations = function () {\n    this.documentState = 1\n    /* HAS_LOCAL_MUTATIONS */\n    ;\n    return this;\n  };\n\n  Object.defineProperty(MutableDocument.prototype, \"hasLocalMutations\", {\n    get: function () {\n      return this.documentState === 1\n      /* HAS_LOCAL_MUTATIONS */\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MutableDocument.prototype, \"hasCommittedMutations\", {\n    get: function () {\n      return this.documentState === 2\n      /* HAS_COMMITTED_MUTATIONS */\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MutableDocument.prototype, \"hasPendingWrites\", {\n    get: function () {\n      return this.hasLocalMutations || this.hasCommittedMutations;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MutableDocument.prototype.isValidDocument = function () {\n    return this.documentType !== 0\n    /* INVALID */\n    ;\n  };\n\n  MutableDocument.prototype.isFoundDocument = function () {\n    return this.documentType === 1\n    /* FOUND_DOCUMENT */\n    ;\n  };\n\n  MutableDocument.prototype.isNoDocument = function () {\n    return this.documentType === 2\n    /* NO_DOCUMENT */\n    ;\n  };\n\n  MutableDocument.prototype.isUnknownDocument = function () {\n    return this.documentType === 3\n    /* UNKNOWN_DOCUMENT */\n    ;\n  };\n\n  MutableDocument.prototype.isEqual = function (other) {\n    return other instanceof MutableDocument && this.key.isEqual(other.key) && this.version.isEqual(other.version) && this.documentType === other.documentType && this.documentState === other.documentState && this.data.isEqual(other.data);\n  };\n\n  MutableDocument.prototype.clone = function () {\n    return new MutableDocument(this.key, this.documentType, this.version, this.data.clone(), this.documentState);\n  };\n\n  MutableDocument.prototype.toString = function () {\n    return \"Document(\" + this.key + \", \" + this.version + \", \" + JSON.stringify(this.data.value) + \", \" + (\"{documentType: \" + this.documentType + \"}), \") + (\"{documentState: \" + this.documentState + \"})\");\n  };\n\n  return MutableDocument;\n}();\n/**\r\n * Compares the value for field `field` in the provided documents. Throws if\r\n * the field does not exist in both documents.\r\n */\n\n\nfunction compareDocumentsByField(field, d1, d2) {\n  var v1 = d1.data.field(field);\n  var v2 = d2.data.field(field);\n\n  if (v1 !== null && v2 !== null) {\n    return valueCompare(v1, v2);\n  } else {\n    return fail();\n  }\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Visible for testing\n\n\nvar TargetImpl =\n/** @class */\nfunction () {\n  function TargetImpl(path, collectionGroup, orderBy, filters, limit, startAt, endAt) {\n    if (collectionGroup === void 0) {\n      collectionGroup = null;\n    }\n\n    if (orderBy === void 0) {\n      orderBy = [];\n    }\n\n    if (filters === void 0) {\n      filters = [];\n    }\n\n    if (limit === void 0) {\n      limit = null;\n    }\n\n    if (startAt === void 0) {\n      startAt = null;\n    }\n\n    if (endAt === void 0) {\n      endAt = null;\n    }\n\n    this.path = path;\n    this.collectionGroup = collectionGroup;\n    this.orderBy = orderBy;\n    this.filters = filters;\n    this.limit = limit;\n    this.startAt = startAt;\n    this.endAt = endAt;\n    this.memoizedCanonicalId = null;\n  }\n\n  return TargetImpl;\n}();\n/**\r\n * Initializes a Target with a path and optional additional query constraints.\r\n * Path must currently be empty if this is a collection group query.\r\n *\r\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\r\n * using this factory method, because `Query` provides an implicit `orderBy`\r\n * property.\r\n */\n\n\nfunction newTarget(path, collectionGroup, orderBy, filters, limit, startAt, endAt) {\n  if (collectionGroup === void 0) {\n    collectionGroup = null;\n  }\n\n  if (orderBy === void 0) {\n    orderBy = [];\n  }\n\n  if (filters === void 0) {\n    filters = [];\n  }\n\n  if (limit === void 0) {\n    limit = null;\n  }\n\n  if (startAt === void 0) {\n    startAt = null;\n  }\n\n  if (endAt === void 0) {\n    endAt = null;\n  }\n\n  return new TargetImpl(path, collectionGroup, orderBy, filters, limit, startAt, endAt);\n}\n\nfunction canonifyTarget(target) {\n  var targetImpl = debugCast(target);\n\n  if (targetImpl.memoizedCanonicalId === null) {\n    var canonicalId_1 = targetImpl.path.canonicalString();\n\n    if (targetImpl.collectionGroup !== null) {\n      canonicalId_1 += '|cg:' + targetImpl.collectionGroup;\n    }\n\n    canonicalId_1 += '|f:';\n    canonicalId_1 += targetImpl.filters.map(function (f) {\n      return canonifyFilter(f);\n    }).join(',');\n    canonicalId_1 += '|ob:';\n    canonicalId_1 += targetImpl.orderBy.map(function (o) {\n      return canonifyOrderBy(o);\n    }).join(',');\n\n    if (!isNullOrUndefined(targetImpl.limit)) {\n      canonicalId_1 += '|l:';\n      canonicalId_1 += targetImpl.limit;\n    }\n\n    if (targetImpl.startAt) {\n      canonicalId_1 += '|lb:';\n      canonicalId_1 += canonifyBound(targetImpl.startAt);\n    }\n\n    if (targetImpl.endAt) {\n      canonicalId_1 += '|ub:';\n      canonicalId_1 += canonifyBound(targetImpl.endAt);\n    }\n\n    targetImpl.memoizedCanonicalId = canonicalId_1;\n  }\n\n  return targetImpl.memoizedCanonicalId;\n}\n\nfunction stringifyTarget(target) {\n  var str = target.path.canonicalString();\n\n  if (target.collectionGroup !== null) {\n    str += ' collectionGroup=' + target.collectionGroup;\n  }\n\n  if (target.filters.length > 0) {\n    str += \", filters: [\" + target.filters.map(function (f) {\n      return stringifyFilter(f);\n    }).join(', ') + \"]\";\n  }\n\n  if (!isNullOrUndefined(target.limit)) {\n    str += ', limit: ' + target.limit;\n  }\n\n  if (target.orderBy.length > 0) {\n    str += \", orderBy: [\" + target.orderBy.map(function (o) {\n      return stringifyOrderBy(o);\n    }).join(', ') + \"]\";\n  }\n\n  if (target.startAt) {\n    str += ', startAt: ' + canonifyBound(target.startAt);\n  }\n\n  if (target.endAt) {\n    str += ', endAt: ' + canonifyBound(target.endAt);\n  }\n\n  return \"Target(\" + str + \")\";\n}\n\nfunction targetEquals(left, right) {\n  if (left.limit !== right.limit) {\n    return false;\n  }\n\n  if (left.orderBy.length !== right.orderBy.length) {\n    return false;\n  }\n\n  for (var i = 0; i < left.orderBy.length; i++) {\n    if (!orderByEquals(left.orderBy[i], right.orderBy[i])) {\n      return false;\n    }\n  }\n\n  if (left.filters.length !== right.filters.length) {\n    return false;\n  }\n\n  for (var i = 0; i < left.filters.length; i++) {\n    if (!filterEquals(left.filters[i], right.filters[i])) {\n      return false;\n    }\n  }\n\n  if (left.collectionGroup !== right.collectionGroup) {\n    return false;\n  }\n\n  if (!left.path.isEqual(right.path)) {\n    return false;\n  }\n\n  if (!boundEquals(left.startAt, right.startAt)) {\n    return false;\n  }\n\n  return boundEquals(left.endAt, right.endAt);\n}\n\nfunction isDocumentTarget(target) {\n  return DocumentKey.isDocumentKey(target.path) && target.collectionGroup === null && target.filters.length === 0;\n}\n\nvar Filter =\n/** @class */\nfunction () {\n  function Filter() {}\n\n  return Filter;\n}();\n\nvar FieldFilter =\n/** @class */\nfunction (_super) {\n  tslib.__extends(FieldFilter, _super);\n\n  function FieldFilter(field, op, value) {\n    var _this = _super.call(this) || this;\n\n    _this.field = field;\n    _this.op = op;\n    _this.value = value;\n    return _this;\n  }\n  /**\r\n   * Creates a filter based on the provided arguments.\r\n   */\n\n\n  FieldFilter.create = function (field, op, value) {\n    if (field.isKeyField()) {\n      if (op === \"in\"\n      /* IN */\n      || op === \"not-in\"\n      /* NOT_IN */\n      ) {\n          return this.createKeyFieldInFilter(field, op, value);\n        } else {\n        return new KeyFieldFilter(field, op, value);\n      }\n    } else if (op === \"array-contains\"\n    /* ARRAY_CONTAINS */\n    ) {\n        return new ArrayContainsFilter(field, value);\n      } else if (op === \"in\"\n    /* IN */\n    ) {\n        return new InFilter(field, value);\n      } else if (op === \"not-in\"\n    /* NOT_IN */\n    ) {\n        return new NotInFilter(field, value);\n      } else if (op === \"array-contains-any\"\n    /* ARRAY_CONTAINS_ANY */\n    ) {\n        return new ArrayContainsAnyFilter(field, value);\n      } else {\n      return new FieldFilter(field, op, value);\n    }\n  };\n\n  FieldFilter.createKeyFieldInFilter = function (field, op, value) {\n    return op === \"in\"\n    /* IN */\n    ? new KeyFieldInFilter(field, value) : new KeyFieldNotInFilter(field, value);\n  };\n\n  FieldFilter.prototype.matches = function (doc) {\n    var other = doc.data.field(this.field); // Types do not have to match in NOT_EQUAL filters.\n\n    if (this.op === \"!=\"\n    /* NOT_EQUAL */\n    ) {\n        return other !== null && this.matchesComparison(valueCompare(other, this.value));\n      } // Only compare types with matching backend order (such as double and int).\n\n\n    return other !== null && typeOrder(this.value) === typeOrder(other) && this.matchesComparison(valueCompare(other, this.value));\n  };\n\n  FieldFilter.prototype.matchesComparison = function (comparison) {\n    switch (this.op) {\n      case \"<\"\n      /* LESS_THAN */\n      :\n        return comparison < 0;\n\n      case \"<=\"\n      /* LESS_THAN_OR_EQUAL */\n      :\n        return comparison <= 0;\n\n      case \"==\"\n      /* EQUAL */\n      :\n        return comparison === 0;\n\n      case \"!=\"\n      /* NOT_EQUAL */\n      :\n        return comparison !== 0;\n\n      case \">\"\n      /* GREATER_THAN */\n      :\n        return comparison > 0;\n\n      case \">=\"\n      /* GREATER_THAN_OR_EQUAL */\n      :\n        return comparison >= 0;\n\n      default:\n        return fail();\n    }\n  };\n\n  FieldFilter.prototype.isInequality = function () {\n    return [\"<\"\n    /* LESS_THAN */\n    , \"<=\"\n    /* LESS_THAN_OR_EQUAL */\n    , \">\"\n    /* GREATER_THAN */\n    , \">=\"\n    /* GREATER_THAN_OR_EQUAL */\n    , \"!=\"\n    /* NOT_EQUAL */\n    , \"not-in\"\n    /* NOT_IN */\n    ].indexOf(this.op) >= 0;\n  };\n\n  return FieldFilter;\n}(Filter);\n\nfunction canonifyFilter(filter) {\n  // TODO(b/29183165): Technically, this won't be unique if two values have\n  // the same description, such as the int 3 and the string \"3\". So we should\n  // add the types in here somehow, too.\n  return filter.field.canonicalString() + filter.op.toString() + canonicalId(filter.value);\n}\n\nfunction filterEquals(f1, f2) {\n  return f1.op === f2.op && f1.field.isEqual(f2.field) && valueEquals(f1.value, f2.value);\n}\n/** Returns a debug description for `filter`. */\n\n\nfunction stringifyFilter(filter) {\n  return filter.field.canonicalString() + \" \" + filter.op + \" \" + canonicalId(filter.value);\n}\n/** Filter that matches on key fields (i.e. '__name__'). */\n\n\nvar KeyFieldFilter =\n/** @class */\nfunction (_super) {\n  tslib.__extends(KeyFieldFilter, _super);\n\n  function KeyFieldFilter(field, op, value) {\n    var _this = _super.call(this, field, op, value) || this;\n\n    _this.key = DocumentKey.fromName(value.referenceValue);\n    return _this;\n  }\n\n  KeyFieldFilter.prototype.matches = function (doc) {\n    var comparison = DocumentKey.comparator(doc.key, this.key);\n    return this.matchesComparison(comparison);\n  };\n\n  return KeyFieldFilter;\n}(FieldFilter);\n/** Filter that matches on key fields within an array. */\n\n\nvar KeyFieldInFilter =\n/** @class */\nfunction (_super) {\n  tslib.__extends(KeyFieldInFilter, _super);\n\n  function KeyFieldInFilter(field, value) {\n    var _this = _super.call(this, field, \"in\"\n    /* IN */\n    , value) || this;\n\n    _this.keys = extractDocumentKeysFromArrayValue(\"in\"\n    /* IN */\n    , value);\n    return _this;\n  }\n\n  KeyFieldInFilter.prototype.matches = function (doc) {\n    return this.keys.some(function (key) {\n      return key.isEqual(doc.key);\n    });\n  };\n\n  return KeyFieldInFilter;\n}(FieldFilter);\n/** Filter that matches on key fields not present within an array. */\n\n\nvar KeyFieldNotInFilter =\n/** @class */\nfunction (_super) {\n  tslib.__extends(KeyFieldNotInFilter, _super);\n\n  function KeyFieldNotInFilter(field, value) {\n    var _this = _super.call(this, field, \"not-in\"\n    /* NOT_IN */\n    , value) || this;\n\n    _this.keys = extractDocumentKeysFromArrayValue(\"not-in\"\n    /* NOT_IN */\n    , value);\n    return _this;\n  }\n\n  KeyFieldNotInFilter.prototype.matches = function (doc) {\n    return !this.keys.some(function (key) {\n      return key.isEqual(doc.key);\n    });\n  };\n\n  return KeyFieldNotInFilter;\n}(FieldFilter);\n\nfunction extractDocumentKeysFromArrayValue(op, value) {\n  var _a;\n\n  return (((_a = value.arrayValue) === null || _a === void 0 ? void 0 : _a.values) || []).map(function (v) {\n    return DocumentKey.fromName(v.referenceValue);\n  });\n}\n/** A Filter that implements the array-contains operator. */\n\n\nvar ArrayContainsFilter =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ArrayContainsFilter, _super);\n\n  function ArrayContainsFilter(field, value) {\n    return _super.call(this, field, \"array-contains\"\n    /* ARRAY_CONTAINS */\n    , value) || this;\n  }\n\n  ArrayContainsFilter.prototype.matches = function (doc) {\n    var other = doc.data.field(this.field);\n    return isArray(other) && arrayValueContains(other.arrayValue, this.value);\n  };\n\n  return ArrayContainsFilter;\n}(FieldFilter);\n/** A Filter that implements the IN operator. */\n\n\nvar InFilter =\n/** @class */\nfunction (_super) {\n  tslib.__extends(InFilter, _super);\n\n  function InFilter(field, value) {\n    return _super.call(this, field, \"in\"\n    /* IN */\n    , value) || this;\n  }\n\n  InFilter.prototype.matches = function (doc) {\n    var other = doc.data.field(this.field);\n    return other !== null && arrayValueContains(this.value.arrayValue, other);\n  };\n\n  return InFilter;\n}(FieldFilter);\n/** A Filter that implements the not-in operator. */\n\n\nvar NotInFilter =\n/** @class */\nfunction (_super) {\n  tslib.__extends(NotInFilter, _super);\n\n  function NotInFilter(field, value) {\n    return _super.call(this, field, \"not-in\"\n    /* NOT_IN */\n    , value) || this;\n  }\n\n  NotInFilter.prototype.matches = function (doc) {\n    if (arrayValueContains(this.value.arrayValue, {\n      nullValue: 'NULL_VALUE'\n    })) {\n      return false;\n    }\n\n    var other = doc.data.field(this.field);\n    return other !== null && !arrayValueContains(this.value.arrayValue, other);\n  };\n\n  return NotInFilter;\n}(FieldFilter);\n/** A Filter that implements the array-contains-any operator. */\n\n\nvar ArrayContainsAnyFilter =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ArrayContainsAnyFilter, _super);\n\n  function ArrayContainsAnyFilter(field, value) {\n    return _super.call(this, field, \"array-contains-any\"\n    /* ARRAY_CONTAINS_ANY */\n    , value) || this;\n  }\n\n  ArrayContainsAnyFilter.prototype.matches = function (doc) {\n    var _this = this;\n\n    var other = doc.data.field(this.field);\n\n    if (!isArray(other) || !other.arrayValue.values) {\n      return false;\n    }\n\n    return other.arrayValue.values.some(function (val) {\n      return arrayValueContains(_this.value.arrayValue, val);\n    });\n  };\n\n  return ArrayContainsAnyFilter;\n}(FieldFilter);\n/**\r\n * Represents a bound of a query.\r\n *\r\n * The bound is specified with the given components representing a position and\r\n * whether it's just before or just after the position (relative to whatever the\r\n * query order is).\r\n *\r\n * The position represents a logical index position for a query. It's a prefix\r\n * of values for the (potentially implicit) order by clauses of a query.\r\n *\r\n * Bound provides a function to determine whether a document comes before or\r\n * after a bound. This is influenced by whether the position is just before or\r\n * just after the provided values.\r\n */\n\n\nvar Bound =\n/** @class */\nfunction () {\n  function Bound(position, before) {\n    this.position = position;\n    this.before = before;\n  }\n\n  return Bound;\n}();\n\nfunction canonifyBound(bound) {\n  // TODO(b/29183165): Make this collision robust.\n  return (bound.before ? 'b' : 'a') + \":\" + bound.position.map(function (p) {\n    return canonicalId(p);\n  }).join(',');\n}\n/**\r\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\r\n */\n\n\nvar OrderBy =\n/** @class */\nfunction () {\n  function OrderBy(field, dir\n  /* ASCENDING */\n  ) {\n    if (dir === void 0) {\n      dir = \"asc\";\n    }\n\n    this.field = field;\n    this.dir = dir;\n  }\n\n  return OrderBy;\n}();\n\nfunction canonifyOrderBy(orderBy) {\n  // TODO(b/29183165): Make this collision robust.\n  return orderBy.field.canonicalString() + orderBy.dir;\n}\n\nfunction stringifyOrderBy(orderBy) {\n  return orderBy.field.canonicalString() + \" (\" + orderBy.dir + \")\";\n}\n\nfunction orderByEquals(left, right) {\n  return left.dir === right.dir && left.field.isEqual(right.field);\n}\n/**\r\n * Returns true if a document sorts before a bound using the provided sort\r\n * order.\r\n */\n\n\nfunction sortsBeforeDocument(bound, orderBy, doc) {\n  var comparison = 0;\n\n  for (var i = 0; i < bound.position.length; i++) {\n    var orderByComponent = orderBy[i];\n    var component = bound.position[i];\n\n    if (orderByComponent.field.isKeyField()) {\n      comparison = DocumentKey.comparator(DocumentKey.fromName(component.referenceValue), doc.key);\n    } else {\n      var docValue = doc.data.field(orderByComponent.field);\n      comparison = valueCompare(component, docValue);\n    }\n\n    if (orderByComponent.dir === \"desc\"\n    /* DESCENDING */\n    ) {\n        comparison = comparison * -1;\n      }\n\n    if (comparison !== 0) {\n      break;\n    }\n  }\n\n  return bound.before ? comparison <= 0 : comparison < 0;\n}\n\nfunction boundEquals(left, right) {\n  if (left === null) {\n    return right === null;\n  } else if (right === null) {\n    return false;\n  }\n\n  if (left.before !== right.before || left.position.length !== right.position.length) {\n    return false;\n  }\n\n  for (var i = 0; i < left.position.length; i++) {\n    var leftPosition = left.position[i];\n    var rightPosition = right.position[i];\n\n    if (!valueEquals(leftPosition, rightPosition)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Query encapsulates all the query attributes we support in the SDK. It can\r\n * be run against the LocalStore, as well as be converted to a `Target` to\r\n * query the RemoteStore results.\r\n *\r\n * Visible for testing.\r\n */\n\n\nvar QueryImpl =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes a Query with a path and optional additional query constraints.\r\n   * Path must currently be empty if this is a collection group query.\r\n   */\n  function QueryImpl(path, collectionGroup, explicitOrderBy, filters, limit, limitType\n  /* First */\n  , startAt, endAt) {\n    if (collectionGroup === void 0) {\n      collectionGroup = null;\n    }\n\n    if (explicitOrderBy === void 0) {\n      explicitOrderBy = [];\n    }\n\n    if (filters === void 0) {\n      filters = [];\n    }\n\n    if (limit === void 0) {\n      limit = null;\n    }\n\n    if (limitType === void 0) {\n      limitType = \"F\";\n    }\n\n    if (startAt === void 0) {\n      startAt = null;\n    }\n\n    if (endAt === void 0) {\n      endAt = null;\n    }\n\n    this.path = path;\n    this.collectionGroup = collectionGroup;\n    this.explicitOrderBy = explicitOrderBy;\n    this.filters = filters;\n    this.limit = limit;\n    this.limitType = limitType;\n    this.startAt = startAt;\n    this.endAt = endAt;\n    this.memoizedOrderBy = null; // The corresponding `Target` of this `Query` instance.\n\n    this.memoizedTarget = null;\n    if (this.startAt) ;\n    if (this.endAt) ;\n  }\n\n  return QueryImpl;\n}();\n/** Creates a new Query instance with the options provided. */\n\n\nfunction newQuery(path, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt) {\n  return new QueryImpl(path, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt);\n}\n/** Creates a new Query for a query that matches all documents at `path` */\n\n\nfunction newQueryForPath(path) {\n  return new QueryImpl(path);\n}\n/**\r\n * Helper to convert a collection group query into a collection query at a\r\n * specific path. This is used when executing collection group queries, since\r\n * we have to split the query into a set of collection queries at multiple\r\n * paths.\r\n */\n\n\nfunction asCollectionQueryAtPath(query, path) {\n  return new QueryImpl(path,\n  /*collectionGroup=*/\n  null, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, query.startAt, query.endAt);\n}\n/**\r\n * Returns true if this query does not specify any query constraints that\r\n * could remove results.\r\n */\n\n\nfunction matchesAllDocuments(query) {\n  return query.filters.length === 0 && query.limit === null && query.startAt == null && query.endAt == null && (query.explicitOrderBy.length === 0 || query.explicitOrderBy.length === 1 && query.explicitOrderBy[0].field.isKeyField());\n}\n\nfunction hasLimitToFirst(query) {\n  return !isNullOrUndefined(query.limit) && query.limitType === \"F\"\n  /* First */\n  ;\n}\n\nfunction hasLimitToLast(query) {\n  return !isNullOrUndefined(query.limit) && query.limitType === \"L\"\n  /* Last */\n  ;\n}\n\nfunction getFirstOrderByField(query) {\n  return query.explicitOrderBy.length > 0 ? query.explicitOrderBy[0].field : null;\n}\n\nfunction getInequalityFilterField(query) {\n  for (var _i = 0, _d = query.filters; _i < _d.length; _i++) {\n    var filter = _d[_i];\n\n    if (filter.isInequality()) {\n      return filter.field;\n    }\n  }\n\n  return null;\n}\n/**\r\n * Checks if any of the provided Operators are included in the query and\r\n * returns the first one that is, or null if none are.\r\n */\n\n\nfunction findFilterOperator(query, operators) {\n  for (var _i = 0, _d = query.filters; _i < _d.length; _i++) {\n    var filter = _d[_i];\n\n    if (operators.indexOf(filter.op) >= 0) {\n      return filter.op;\n    }\n  }\n\n  return null;\n}\n/**\r\n * Creates a new Query for a collection group query that matches all documents\r\n * within the provided collection group.\r\n */\n\n\nfunction newQueryForCollectionGroup(collectionId) {\n  return new QueryImpl(ResourcePath.emptyPath(), collectionId);\n}\n/**\r\n * Returns whether the query matches a single document by path (rather than a\r\n * collection).\r\n */\n\n\nfunction isDocumentQuery$1(query) {\n  return DocumentKey.isDocumentKey(query.path) && query.collectionGroup === null && query.filters.length === 0;\n}\n/**\r\n * Returns whether the query matches a collection group rather than a specific\r\n * collection.\r\n */\n\n\nfunction isCollectionGroupQuery(query) {\n  return query.collectionGroup !== null;\n}\n/**\r\n * Returns the implicit order by constraint that is used to execute the Query,\r\n * which can be different from the order by constraints the user provided (e.g.\r\n * the SDK and backend always orders by `__name__`).\r\n */\n\n\nfunction queryOrderBy(query) {\n  var queryImpl = debugCast(query);\n\n  if (queryImpl.memoizedOrderBy === null) {\n    queryImpl.memoizedOrderBy = [];\n    var inequalityField = getInequalityFilterField(queryImpl);\n    var firstOrderByField = getFirstOrderByField(queryImpl);\n\n    if (inequalityField !== null && firstOrderByField === null) {\n      // In order to implicitly add key ordering, we must also add the\n      // inequality filter field for it to be a valid query.\n      // Note that the default inequality field and key ordering is ascending.\n      if (!inequalityField.isKeyField()) {\n        queryImpl.memoizedOrderBy.push(new OrderBy(inequalityField));\n      }\n\n      queryImpl.memoizedOrderBy.push(new OrderBy(FieldPath$1.keyField(), \"asc\"\n      /* ASCENDING */\n      ));\n    } else {\n      var foundKeyOrdering = false;\n\n      for (var _i = 0, _d = queryImpl.explicitOrderBy; _i < _d.length; _i++) {\n        var orderBy_1 = _d[_i];\n        queryImpl.memoizedOrderBy.push(orderBy_1);\n\n        if (orderBy_1.field.isKeyField()) {\n          foundKeyOrdering = true;\n        }\n      }\n\n      if (!foundKeyOrdering) {\n        // The order of the implicit key ordering always matches the last\n        // explicit order by\n        var lastDirection = queryImpl.explicitOrderBy.length > 0 ? queryImpl.explicitOrderBy[queryImpl.explicitOrderBy.length - 1].dir : \"asc\"\n        /* ASCENDING */\n        ;\n        queryImpl.memoizedOrderBy.push(new OrderBy(FieldPath$1.keyField(), lastDirection));\n      }\n    }\n  }\n\n  return queryImpl.memoizedOrderBy;\n}\n/**\r\n * Converts this `Query` instance to it's corresponding `Target` representation.\r\n */\n\n\nfunction queryToTarget(query) {\n  var queryImpl = debugCast(query);\n\n  if (!queryImpl.memoizedTarget) {\n    if (queryImpl.limitType === \"F\"\n    /* First */\n    ) {\n        queryImpl.memoizedTarget = newTarget(queryImpl.path, queryImpl.collectionGroup, queryOrderBy(queryImpl), queryImpl.filters, queryImpl.limit, queryImpl.startAt, queryImpl.endAt);\n      } else {\n      // Flip the orderBy directions since we want the last results\n      var orderBys = [];\n\n      for (var _i = 0, _d = queryOrderBy(queryImpl); _i < _d.length; _i++) {\n        var orderBy_2 = _d[_i];\n        var dir = orderBy_2.dir === \"desc\"\n        /* DESCENDING */\n        ? \"asc\"\n        /* ASCENDING */\n        : \"desc\"\n        /* DESCENDING */\n        ;\n        orderBys.push(new OrderBy(orderBy_2.field, dir));\n      } // We need to swap the cursors to match the now-flipped query ordering.\n\n\n      var startAt_1 = queryImpl.endAt ? new Bound(queryImpl.endAt.position, !queryImpl.endAt.before) : null;\n      var endAt_1 = queryImpl.startAt ? new Bound(queryImpl.startAt.position, !queryImpl.startAt.before) : null; // Now return as a LimitType.First query.\n\n      queryImpl.memoizedTarget = newTarget(queryImpl.path, queryImpl.collectionGroup, orderBys, queryImpl.filters, queryImpl.limit, startAt_1, endAt_1);\n    }\n  }\n\n  return queryImpl.memoizedTarget;\n}\n\nfunction queryWithAddedFilter(query, filter) {\n  var newFilters = query.filters.concat([filter]);\n  return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), newFilters, query.limit, query.limitType, query.startAt, query.endAt);\n}\n\nfunction queryWithAddedOrderBy(query, orderBy) {\n  // TODO(dimond): validate that orderBy does not list the same key twice.\n  var newOrderBy = query.explicitOrderBy.concat([orderBy]);\n  return new QueryImpl(query.path, query.collectionGroup, newOrderBy, query.filters.slice(), query.limit, query.limitType, query.startAt, query.endAt);\n}\n\nfunction queryWithLimit(query, limit, limitType) {\n  return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), limit, limitType, query.startAt, query.endAt);\n}\n\nfunction queryWithStartAt(query, bound) {\n  return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, bound, query.endAt);\n}\n\nfunction queryWithEndAt(query, bound) {\n  return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, query.startAt, bound);\n}\n\nfunction queryEquals(left, right) {\n  return targetEquals(queryToTarget(left), queryToTarget(right)) && left.limitType === right.limitType;\n} // TODO(b/29183165): This is used to get a unique string from a query to, for\n// example, use as a dictionary key, but the implementation is subject to\n// collisions. Make it collision-free.\n\n\nfunction canonifyQuery(query) {\n  return canonifyTarget(queryToTarget(query)) + \"|lt:\" + query.limitType;\n}\n\nfunction stringifyQuery(query) {\n  return \"Query(target=\" + stringifyTarget(queryToTarget(query)) + \"; limitType=\" + query.limitType + \")\";\n}\n/** Returns whether `doc` matches the constraints of `query`. */\n\n\nfunction queryMatches(query, doc) {\n  return doc.isFoundDocument() && queryMatchesPathAndCollectionGroup(query, doc) && queryMatchesOrderBy(query, doc) && queryMatchesFilters(query, doc) && queryMatchesBounds(query, doc);\n}\n\nfunction queryMatchesPathAndCollectionGroup(query, doc) {\n  var docPath = doc.key.path;\n\n  if (query.collectionGroup !== null) {\n    // NOTE: this.path is currently always empty since we don't expose Collection\n    // Group queries rooted at a document path yet.\n    return doc.key.hasCollectionId(query.collectionGroup) && query.path.isPrefixOf(docPath);\n  } else if (DocumentKey.isDocumentKey(query.path)) {\n    // exact match for document queries\n    return query.path.isEqual(docPath);\n  } else {\n    // shallow ancestor queries by default\n    return query.path.isImmediateParentOf(docPath);\n  }\n}\n/**\r\n * A document must have a value for every ordering clause in order to show up\r\n * in the results.\r\n */\n\n\nfunction queryMatchesOrderBy(query, doc) {\n  for (var _i = 0, _d = query.explicitOrderBy; _i < _d.length; _i++) {\n    var orderBy_3 = _d[_i]; // order by key always matches\n\n    if (!orderBy_3.field.isKeyField() && doc.data.field(orderBy_3.field) === null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction queryMatchesFilters(query, doc) {\n  for (var _i = 0, _d = query.filters; _i < _d.length; _i++) {\n    var filter = _d[_i];\n\n    if (!filter.matches(doc)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/** Makes sure a document is within the bounds, if provided. */\n\n\nfunction queryMatchesBounds(query, doc) {\n  if (query.startAt && !sortsBeforeDocument(query.startAt, queryOrderBy(query), doc)) {\n    return false;\n  }\n\n  if (query.endAt && sortsBeforeDocument(query.endAt, queryOrderBy(query), doc)) {\n    return false;\n  }\n\n  return true;\n}\n/**\r\n * Returns a new comparator function that can be used to compare two documents\r\n * based on the Query's ordering constraint.\r\n */\n\n\nfunction newQueryComparator(query) {\n  return function (d1, d2) {\n    var comparedOnKeyField = false;\n\n    for (var _i = 0, _d = queryOrderBy(query); _i < _d.length; _i++) {\n      var orderBy_4 = _d[_i];\n      var comp = compareDocs(orderBy_4, d1, d2);\n\n      if (comp !== 0) {\n        return comp;\n      }\n\n      comparedOnKeyField = comparedOnKeyField || orderBy_4.field.isKeyField();\n    }\n\n    return 0;\n  };\n}\n\nfunction compareDocs(orderBy, d1, d2) {\n  var comparison = orderBy.field.isKeyField() ? DocumentKey.comparator(d1.key, d2.key) : compareDocumentsByField(orderBy.field, d1, d2);\n\n  switch (orderBy.dir) {\n    case \"asc\"\n    /* ASCENDING */\n    :\n      return comparison;\n\n    case \"desc\"\n    /* DESCENDING */\n    :\n      return -1 * comparison;\n\n    default:\n      return fail();\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\n\n\nvar SortedMap =\n/** @class */\nfunction () {\n  function SortedMap(comparator, root) {\n    this.comparator = comparator;\n    this.root = root ? root : LLRBNode.EMPTY;\n  } // Returns a copy of the map, with the specified key/value added or replaced.\n\n\n  SortedMap.prototype.insert = function (key, value) {\n    return new SortedMap(this.comparator, this.root.insert(key, value, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n  }; // Returns a copy of the map, with the specified key removed.\n\n\n  SortedMap.prototype.remove = function (key) {\n    return new SortedMap(this.comparator, this.root.remove(key, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n  }; // Returns the value of the node with the given key, or null.\n\n\n  SortedMap.prototype.get = function (key) {\n    var node = this.root;\n\n    while (!node.isEmpty()) {\n      var cmp = this.comparator(key, node.key);\n\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n\n    return null;\n  }; // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n\n\n  SortedMap.prototype.indexOf = function (key) {\n    // Number of nodes that were pruned when descending right\n    var prunedNodes = 0;\n    var node = this.root;\n\n    while (!node.isEmpty()) {\n      var cmp = this.comparator(key, node.key);\n\n      if (cmp === 0) {\n        return prunedNodes + node.left.size;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        // Count all nodes left of the node plus the node itself\n        prunedNodes += node.left.size + 1;\n        node = node.right;\n      }\n    } // Node not found\n\n\n    return -1;\n  };\n\n  SortedMap.prototype.isEmpty = function () {\n    return this.root.isEmpty();\n  };\n\n  Object.defineProperty(SortedMap.prototype, \"size\", {\n    // Returns the total number of nodes in the map.\n    get: function () {\n      return this.root.size;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Returns the minimum key in the map.\n\n  SortedMap.prototype.minKey = function () {\n    return this.root.minKey();\n  }; // Returns the maximum key in the map.\n\n\n  SortedMap.prototype.maxKey = function () {\n    return this.root.maxKey();\n  }; // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n\n\n  SortedMap.prototype.inorderTraversal = function (action) {\n    return this.root.inorderTraversal(action);\n  };\n\n  SortedMap.prototype.forEach = function (fn) {\n    this.inorderTraversal(function (k, v) {\n      fn(k, v);\n      return false;\n    });\n  };\n\n  SortedMap.prototype.toString = function () {\n    var descriptions = [];\n    this.inorderTraversal(function (k, v) {\n      descriptions.push(k + \":\" + v);\n      return false;\n    });\n    return \"{\" + descriptions.join(', ') + \"}\";\n  }; // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n\n\n  SortedMap.prototype.reverseTraversal = function (action) {\n    return this.root.reverseTraversal(action);\n  }; // Returns an iterator over the SortedMap.\n\n\n  SortedMap.prototype.getIterator = function () {\n    return new SortedMapIterator(this.root, null, this.comparator, false);\n  };\n\n  SortedMap.prototype.getIteratorFrom = function (key) {\n    return new SortedMapIterator(this.root, key, this.comparator, false);\n  };\n\n  SortedMap.prototype.getReverseIterator = function () {\n    return new SortedMapIterator(this.root, null, this.comparator, true);\n  };\n\n  SortedMap.prototype.getReverseIteratorFrom = function (key) {\n    return new SortedMapIterator(this.root, key, this.comparator, true);\n  };\n\n  return SortedMap;\n}(); // end SortedMap\n// An iterator over an LLRBNode.\n\n\nvar SortedMapIterator =\n/** @class */\nfunction () {\n  function SortedMapIterator(node, startKey, comparator, isReverse) {\n    this.isReverse = isReverse;\n    this.nodeStack = [];\n    var cmp = 1;\n\n    while (!node.isEmpty()) {\n      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse\n\n      if (isReverse) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move\n        // to the next one\n        this.nodeStack.push(node);\n\n        if (this.isReverse) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  SortedMapIterator.prototype.getNext = function () {\n    var node = this.nodeStack.pop();\n    var result = {\n      key: node.key,\n      value: node.value\n    };\n\n    if (this.isReverse) {\n      node = node.left;\n\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  };\n\n  SortedMapIterator.prototype.hasNext = function () {\n    return this.nodeStack.length > 0;\n  };\n\n  SortedMapIterator.prototype.peek = function () {\n    if (this.nodeStack.length === 0) {\n      return null;\n    }\n\n    var node = this.nodeStack[this.nodeStack.length - 1];\n    return {\n      key: node.key,\n      value: node.value\n    };\n  };\n\n  return SortedMapIterator;\n}(); // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\n\n\nvar LLRBNode =\n/** @class */\nfunction () {\n  function LLRBNode(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : LLRBNode.EMPTY;\n    this.right = right != null ? right : LLRBNode.EMPTY;\n    this.size = this.left.size + 1 + this.right.size;\n  } // Returns a copy of the current node, optionally replacing pieces of it.\n\n\n  LLRBNode.prototype.copy = function (key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  };\n\n  LLRBNode.prototype.isEmpty = function () {\n    return false;\n  }; // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n\n\n  LLRBNode.prototype.inorderTraversal = function (action) {\n    return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);\n  }; // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n\n\n  LLRBNode.prototype.reverseTraversal = function (action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  }; // Returns the minimum node in the tree.\n\n\n  LLRBNode.prototype.min = function () {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min();\n    }\n  }; // Returns the maximum key in the tree.\n\n\n  LLRBNode.prototype.minKey = function () {\n    return this.min().key;\n  }; // Returns the maximum key in the tree.\n\n\n  LLRBNode.prototype.maxKey = function () {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }; // Returns new tree, with the key/value added.\n\n\n  LLRBNode.prototype.insert = function (key, value, comparator) {\n    var n = this;\n    var cmp = comparator(key, n.key);\n\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n\n    return n.fixUp();\n  };\n\n  LLRBNode.prototype.removeMin = function () {\n    if (this.left.isEmpty()) {\n      return LLRBNode.EMPTY;\n    }\n\n    var n = this;\n\n    if (!n.left.isRed() && !n.left.left.isRed()) {\n      n = n.moveRedLeft();\n    }\n\n    n = n.copy(null, null, null, n.left.removeMin(), null);\n    return n.fixUp();\n  }; // Returns new tree, with the specified item removed.\n\n\n  LLRBNode.prototype.remove = function (key, comparator) {\n    var smallest;\n    var n = this;\n\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n        n = n.moveRedLeft();\n      }\n\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed()) {\n        n = n.rotateRight();\n      }\n\n      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n        n = n.moveRedRight();\n      }\n\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return LLRBNode.EMPTY;\n        } else {\n          smallest = n.right.min();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n        }\n      }\n\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n\n    return n.fixUp();\n  };\n\n  LLRBNode.prototype.isRed = function () {\n    return this.color;\n  }; // Returns new tree after performing any needed rotations.\n\n\n  LLRBNode.prototype.fixUp = function () {\n    var n = this;\n\n    if (n.right.isRed() && !n.left.isRed()) {\n      n = n.rotateLeft();\n    }\n\n    if (n.left.isRed() && n.left.left.isRed()) {\n      n = n.rotateRight();\n    }\n\n    if (n.left.isRed() && n.right.isRed()) {\n      n = n.colorFlip();\n    }\n\n    return n;\n  };\n\n  LLRBNode.prototype.moveRedLeft = function () {\n    var n = this.colorFlip();\n\n    if (n.right.left.isRed()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight());\n      n = n.rotateLeft();\n      n = n.colorFlip();\n    }\n\n    return n;\n  };\n\n  LLRBNode.prototype.moveRedRight = function () {\n    var n = this.colorFlip();\n\n    if (n.left.left.isRed()) {\n      n = n.rotateRight();\n      n = n.colorFlip();\n    }\n\n    return n;\n  };\n\n  LLRBNode.prototype.rotateLeft = function () {\n    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  };\n\n  LLRBNode.prototype.rotateRight = function () {\n    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  };\n\n  LLRBNode.prototype.colorFlip = function () {\n    var left = this.left.copy(null, null, !this.left.color, null, null);\n    var right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }; // For testing.\n\n\n  LLRBNode.prototype.checkMaxDepth = function () {\n    var blackDepth = this.check();\n\n    if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }; // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n\n\n  LLRBNode.prototype.check = function () {\n    if (this.isRed() && this.left.isRed()) {\n      throw fail();\n    }\n\n    if (this.right.isRed()) {\n      throw fail();\n    }\n\n    var blackDepth = this.left.check();\n\n    if (blackDepth !== this.right.check()) {\n      throw fail();\n    } else {\n      return blackDepth + (this.isRed() ? 0 : 1);\n    }\n  };\n\n  return LLRBNode;\n}(); // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nLLRBNode.EMPTY = null;\nLLRBNode.RED = true;\nLLRBNode.BLACK = false; // Represents an empty node (a leaf node in the Red-Black Tree).\n\nvar LLRBEmptyNode =\n/** @class */\nfunction () {\n  function LLRBEmptyNode() {\n    this.size = 0;\n  }\n\n  Object.defineProperty(LLRBEmptyNode.prototype, \"key\", {\n    get: function () {\n      throw fail();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LLRBEmptyNode.prototype, \"value\", {\n    get: function () {\n      throw fail();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LLRBEmptyNode.prototype, \"color\", {\n    get: function () {\n      throw fail();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LLRBEmptyNode.prototype, \"left\", {\n    get: function () {\n      throw fail();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LLRBEmptyNode.prototype, \"right\", {\n    get: function () {\n      throw fail();\n    },\n    enumerable: false,\n    configurable: true\n  }); // Returns a copy of the current node.\n\n  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n    return this;\n  }; // Returns a copy of the tree, with the specified key/value added.\n\n\n  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n    return new LLRBNode(key, value);\n  }; // Returns a copy of the tree, with the specified key removed.\n\n\n  LLRBEmptyNode.prototype.remove = function (key, comparator) {\n    return this;\n  };\n\n  LLRBEmptyNode.prototype.isEmpty = function () {\n    return true;\n  };\n\n  LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n    return false;\n  };\n\n  LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n    return false;\n  };\n\n  LLRBEmptyNode.prototype.minKey = function () {\n    return null;\n  };\n\n  LLRBEmptyNode.prototype.maxKey = function () {\n    return null;\n  };\n\n  LLRBEmptyNode.prototype.isRed = function () {\n    return false;\n  }; // For testing.\n\n\n  LLRBEmptyNode.prototype.checkMaxDepth = function () {\n    return true;\n  };\n\n  LLRBEmptyNode.prototype.check = function () {\n    return 0;\n  };\n\n  return LLRBEmptyNode;\n}(); // end LLRBEmptyNode\n\n\nLLRBNode.EMPTY = new LLRBEmptyNode();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * SortedSet is an immutable (copy-on-write) collection that holds elements\r\n * in order specified by the provided comparator.\r\n *\r\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\r\n * be equal!\r\n */\n\nvar SortedSet =\n/** @class */\nfunction () {\n  function SortedSet(comparator) {\n    this.comparator = comparator;\n    this.data = new SortedMap(this.comparator);\n  }\n\n  SortedSet.prototype.has = function (elem) {\n    return this.data.get(elem) !== null;\n  };\n\n  SortedSet.prototype.first = function () {\n    return this.data.minKey();\n  };\n\n  SortedSet.prototype.last = function () {\n    return this.data.maxKey();\n  };\n\n  Object.defineProperty(SortedSet.prototype, \"size\", {\n    get: function () {\n      return this.data.size;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SortedSet.prototype.indexOf = function (elem) {\n    return this.data.indexOf(elem);\n  };\n  /** Iterates elements in order defined by \"comparator\" */\n\n\n  SortedSet.prototype.forEach = function (cb) {\n    this.data.inorderTraversal(function (k, v) {\n      cb(k);\n      return false;\n    });\n  };\n  /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */\n\n\n  SortedSet.prototype.forEachInRange = function (range, cb) {\n    var iter = this.data.getIteratorFrom(range[0]);\n\n    while (iter.hasNext()) {\n      var elem = iter.getNext();\n\n      if (this.comparator(elem.key, range[1]) >= 0) {\n        return;\n      }\n\n      cb(elem.key);\n    }\n  };\n  /**\r\n   * Iterates over `elem`s such that: start &lt;= elem until false is returned.\r\n   */\n\n\n  SortedSet.prototype.forEachWhile = function (cb, start) {\n    var iter;\n\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n\n    while (iter.hasNext()) {\n      var elem = iter.getNext();\n      var result = cb(elem.key);\n\n      if (!result) {\n        return;\n      }\n    }\n  };\n  /** Finds the least element greater than or equal to `elem`. */\n\n\n  SortedSet.prototype.firstAfterOrEqual = function (elem) {\n    var iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  };\n\n  SortedSet.prototype.getIterator = function () {\n    return new SortedSetIterator(this.data.getIterator());\n  };\n\n  SortedSet.prototype.getIteratorFrom = function (key) {\n    return new SortedSetIterator(this.data.getIteratorFrom(key));\n  };\n  /** Inserts or updates an element */\n\n\n  SortedSet.prototype.add = function (elem) {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  };\n  /** Deletes an element */\n\n\n  SortedSet.prototype.delete = function (elem) {\n    if (!this.has(elem)) {\n      return this;\n    }\n\n    return this.copy(this.data.remove(elem));\n  };\n\n  SortedSet.prototype.isEmpty = function () {\n    return this.data.isEmpty();\n  };\n\n  SortedSet.prototype.unionWith = function (other) {\n    var result = this; // Make sure `result` always refers to the larger one of the two sets.\n\n    if (result.size < other.size) {\n      result = other;\n      other = this;\n    }\n\n    other.forEach(function (elem) {\n      result = result.add(elem);\n    });\n    return result;\n  };\n\n  SortedSet.prototype.isEqual = function (other) {\n    if (!(other instanceof SortedSet)) {\n      return false;\n    }\n\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    var thisIt = this.data.getIterator();\n    var otherIt = other.data.getIterator();\n\n    while (thisIt.hasNext()) {\n      var thisElem = thisIt.getNext().key;\n      var otherElem = otherIt.getNext().key;\n\n      if (this.comparator(thisElem, otherElem) !== 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  SortedSet.prototype.toArray = function () {\n    var res = [];\n    this.forEach(function (targetId) {\n      res.push(targetId);\n    });\n    return res;\n  };\n\n  SortedSet.prototype.toString = function () {\n    var result = [];\n    this.forEach(function (elem) {\n      return result.push(elem);\n    });\n    return 'SortedSet(' + result.toString() + ')';\n  };\n\n  SortedSet.prototype.copy = function (data) {\n    var result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  };\n\n  return SortedSet;\n}();\n\nvar SortedSetIterator =\n/** @class */\nfunction () {\n  function SortedSetIterator(iter) {\n    this.iter = iter;\n  }\n\n  SortedSetIterator.prototype.getNext = function () {\n    return this.iter.getNext().key;\n  };\n\n  SortedSetIterator.prototype.hasNext = function () {\n    return this.iter.hasNext();\n  };\n\n  return SortedSetIterator;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar EMPTY_MUTABLE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\n\nfunction mutableDocumentMap() {\n  return EMPTY_MUTABLE_DOCUMENT_MAP;\n}\n\nvar EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\n\nfunction documentMap() {\n  return EMPTY_DOCUMENT_MAP;\n}\n\nvar EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);\n\nfunction documentVersionMap() {\n  return EMPTY_DOCUMENT_VERSION_MAP;\n}\n\nvar EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\n\nfunction documentKeySet() {\n  var keys = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    keys[_i] = arguments[_i];\n  }\n\n  var set = EMPTY_DOCUMENT_KEY_SET;\n\n  for (var _d = 0, keys_1 = keys; _d < keys_1.length; _d++) {\n    var key = keys_1[_d];\n    set = set.add(key);\n  }\n\n  return set;\n}\n\nvar EMPTY_TARGET_ID_SET = new SortedSet(primitiveComparator);\n\nfunction targetIdSet() {\n  return EMPTY_TARGET_ID_SET;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns an DoubleValue for `value` that is encoded based the serializer's\r\n * `useProto3Json` setting.\r\n */\n\n\nfunction toDouble(serializer, value) {\n  if (serializer.useProto3Json) {\n    if (isNaN(value)) {\n      return {\n        doubleValue: 'NaN'\n      };\n    } else if (value === Infinity) {\n      return {\n        doubleValue: 'Infinity'\n      };\n    } else if (value === -Infinity) {\n      return {\n        doubleValue: '-Infinity'\n      };\n    }\n  }\n\n  return {\n    doubleValue: isNegativeZero(value) ? '-0' : value\n  };\n}\n/**\r\n * Returns an IntegerValue for `value`.\r\n */\n\n\nfunction toInteger(value) {\n  return {\n    integerValue: '' + value\n  };\n}\n/**\r\n * Returns a value for a number that's appropriate to put into a proto.\r\n * The return value is an IntegerValue if it can safely represent the value,\r\n * otherwise a DoubleValue is returned.\r\n */\n\n\nfunction toNumber(serializer, value) {\n  return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);\n}\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Used to represent a field transform on a mutation. */\n\n\nvar TransformOperation =\n/** @class */\nfunction () {\n  function TransformOperation() {\n    // Make sure that the structural type of `TransformOperation` is unique.\n    // See https://github.com/microsoft/TypeScript/issues/5451\n    this._ = undefined;\n  }\n\n  return TransformOperation;\n}();\n/**\r\n * Computes the local transform result against the provided `previousValue`,\r\n * optionally using the provided localWriteTime.\r\n */\n\n\nfunction applyTransformOperationToLocalView(transform, previousValue, localWriteTime) {\n  if (transform instanceof ServerTimestampTransform) {\n    return serverTimestamp(localWriteTime, previousValue);\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  } else {\n    return applyNumericIncrementTransformOperationToLocalView(transform, previousValue);\n  }\n}\n/**\r\n * Computes a final transform result after the transform has been acknowledged\r\n * by the server, potentially using the server-provided transformResult.\r\n */\n\n\nfunction applyTransformOperationToRemoteDocument(transform, previousValue, transformResult) {\n  // The server just sends null as the transform result for array operations,\n  // so we have to calculate a result the same as we do for local\n  // applications.\n  if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  }\n\n  return transformResult;\n}\n/**\r\n * If this transform operation is not idempotent, returns the base value to\r\n * persist for this transform. If a base value is returned, the transform\r\n * operation is always applied to this base value, even if document has\r\n * already been updated.\r\n *\r\n * Base values provide consistent behavior for non-idempotent transforms and\r\n * allow us to return the same latency-compensated value even if the backend\r\n * has already applied the transform operation. The base value is null for\r\n * idempotent transforms, as they can be re-played even if the backend has\r\n * already applied them.\r\n *\r\n * @returns a base value to store along with the mutation, or null for\r\n * idempotent transforms.\r\n */\n\n\nfunction computeTransformOperationBaseValue(transform, previousValue) {\n  if (transform instanceof NumericIncrementTransformOperation) {\n    return isNumber(previousValue) ? previousValue : {\n      integerValue: 0\n    };\n  }\n\n  return null;\n}\n\nfunction transformOperationEquals(left, right) {\n  if (left instanceof ArrayUnionTransformOperation && right instanceof ArrayUnionTransformOperation) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (left instanceof ArrayRemoveTransformOperation && right instanceof ArrayRemoveTransformOperation) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (left instanceof NumericIncrementTransformOperation && right instanceof NumericIncrementTransformOperation) {\n    return valueEquals(left.operand, right.operand);\n  }\n\n  return left instanceof ServerTimestampTransform && right instanceof ServerTimestampTransform;\n}\n/** Transforms a value into a server-generated timestamp. */\n\n\nvar ServerTimestampTransform =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ServerTimestampTransform, _super);\n\n  function ServerTimestampTransform() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return ServerTimestampTransform;\n}(TransformOperation);\n/** Transforms an array value via a union operation. */\n\n\nvar ArrayUnionTransformOperation =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ArrayUnionTransformOperation, _super);\n\n  function ArrayUnionTransformOperation(elements) {\n    var _this = _super.call(this) || this;\n\n    _this.elements = elements;\n    return _this;\n  }\n\n  return ArrayUnionTransformOperation;\n}(TransformOperation);\n\nfunction applyArrayUnionTransformOperation(transform, previousValue) {\n  var values = coercedFieldValuesArray(previousValue);\n\n  var _loop_3 = function (toUnion) {\n    if (!values.some(function (element) {\n      return valueEquals(element, toUnion);\n    })) {\n      values.push(toUnion);\n    }\n  };\n\n  for (var _i = 0, _d = transform.elements; _i < _d.length; _i++) {\n    var toUnion = _d[_i];\n\n    _loop_3(toUnion);\n  }\n\n  return {\n    arrayValue: {\n      values: values\n    }\n  };\n}\n/** Transforms an array value via a remove operation. */\n\n\nvar ArrayRemoveTransformOperation =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ArrayRemoveTransformOperation, _super);\n\n  function ArrayRemoveTransformOperation(elements) {\n    var _this = _super.call(this) || this;\n\n    _this.elements = elements;\n    return _this;\n  }\n\n  return ArrayRemoveTransformOperation;\n}(TransformOperation);\n\nfunction applyArrayRemoveTransformOperation(transform, previousValue) {\n  var values = coercedFieldValuesArray(previousValue);\n\n  var _loop_4 = function (toRemove) {\n    values = values.filter(function (element) {\n      return !valueEquals(element, toRemove);\n    });\n  };\n\n  for (var _i = 0, _d = transform.elements; _i < _d.length; _i++) {\n    var toRemove = _d[_i];\n\n    _loop_4(toRemove);\n  }\n\n  return {\n    arrayValue: {\n      values: values\n    }\n  };\n}\n/**\r\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\r\n * transforms. Converts all field values to integers or doubles, but unlike the\r\n * backend does not cap integer values at 2^63. Instead, JavaScript number\r\n * arithmetic is used and precision loss can occur for values greater than 2^53.\r\n */\n\n\nvar NumericIncrementTransformOperation =\n/** @class */\nfunction (_super) {\n  tslib.__extends(NumericIncrementTransformOperation, _super);\n\n  function NumericIncrementTransformOperation(serializer, operand) {\n    var _this = _super.call(this) || this;\n\n    _this.serializer = serializer;\n    _this.operand = operand;\n    return _this;\n  }\n\n  return NumericIncrementTransformOperation;\n}(TransformOperation);\n\nfunction applyNumericIncrementTransformOperationToLocalView(transform, previousValue) {\n  // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\n  // precision and resolves overflows by reducing precision, we do not\n  // manually cap overflows at 2^63.\n  var baseValue = computeTransformOperationBaseValue(transform, previousValue);\n  var sum = asNumber(baseValue) + asNumber(transform.operand);\n\n  if (isInteger(baseValue) && isInteger(transform.operand)) {\n    return toInteger(sum);\n  } else {\n    return toDouble(transform.serializer, sum);\n  }\n}\n\nfunction asNumber(value) {\n  return normalizeNumber(value.integerValue || value.doubleValue);\n}\n\nfunction coercedFieldValuesArray(value) {\n  return isArray(value) && value.arrayValue.values ? value.arrayValue.values.slice() : [];\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** A field path and the TransformOperation to perform upon it. */\n\n\nvar FieldTransform =\n/** @class */\nfunction () {\n  function FieldTransform(field, transform) {\n    this.field = field;\n    this.transform = transform;\n  }\n\n  return FieldTransform;\n}();\n\nfunction fieldTransformEquals(left, right) {\n  return left.field.isEqual(right.field) && transformOperationEquals(left.transform, right.transform);\n}\n\nfunction fieldTransformsAreEqual(left, right) {\n  if (left === undefined && right === undefined) {\n    return true;\n  }\n\n  if (left && right) {\n    return arrayEquals(left, right, function (l, r) {\n      return fieldTransformEquals(l, r);\n    });\n  }\n\n  return false;\n}\n/** The result of successfully applying a mutation to the backend. */\n\n\nvar MutationResult =\n/** @class */\nfunction () {\n  function MutationResult(\n  /**\r\n   * The version at which the mutation was committed:\r\n   *\r\n   * - For most operations, this is the updateTime in the WriteResult.\r\n   * - For deletes, the commitTime of the WriteResponse (because deletes are\r\n   *   not stored and have no updateTime).\r\n   *\r\n   * Note that these versions can be different: No-op writes will not change\r\n   * the updateTime even though the commitTime advances.\r\n   */\n  version,\n  /**\r\n   * The resulting fields returned from the backend after a mutation\r\n   * containing field transforms has been committed. Contains one FieldValue\r\n   * for each FieldTransform that was in the mutation.\r\n   *\r\n   * Will be empty if the mutation did not contain any field transforms.\r\n   */\n  transformResults) {\n    this.version = version;\n    this.transformResults = transformResults;\n  }\n\n  return MutationResult;\n}();\n/**\r\n * Encodes a precondition for a mutation. This follows the model that the\r\n * backend accepts with the special case of an explicit \"empty\" precondition\r\n * (meaning no precondition).\r\n */\n\n\nvar Precondition =\n/** @class */\nfunction () {\n  function Precondition(updateTime, exists) {\n    this.updateTime = updateTime;\n    this.exists = exists;\n  }\n  /** Creates a new empty Precondition. */\n\n\n  Precondition.none = function () {\n    return new Precondition();\n  };\n  /** Creates a new Precondition with an exists flag. */\n\n\n  Precondition.exists = function (exists) {\n    return new Precondition(undefined, exists);\n  };\n  /** Creates a new Precondition based on a version a document exists at. */\n\n\n  Precondition.updateTime = function (version) {\n    return new Precondition(version);\n  };\n\n  Object.defineProperty(Precondition.prototype, \"isNone\", {\n    /** Returns whether this Precondition is empty. */\n    get: function () {\n      return this.updateTime === undefined && this.exists === undefined;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Precondition.prototype.isEqual = function (other) {\n    return this.exists === other.exists && (this.updateTime ? !!other.updateTime && this.updateTime.isEqual(other.updateTime) : !other.updateTime);\n  };\n\n  return Precondition;\n}();\n/** Returns true if the preconditions is valid for the given document. */\n\n\nfunction preconditionIsValidForDocument(precondition, document) {\n  if (precondition.updateTime !== undefined) {\n    return document.isFoundDocument() && document.version.isEqual(precondition.updateTime);\n  } else if (precondition.exists !== undefined) {\n    return precondition.exists === document.isFoundDocument();\n  } else {\n    return true;\n  }\n}\n/**\r\n * A mutation describes a self-contained change to a document. Mutations can\r\n * create, replace, delete, and update subsets of documents.\r\n *\r\n * Mutations not only act on the value of the document but also its version.\r\n *\r\n * For local mutations (mutations that haven't been committed yet), we preserve\r\n * the existing version for Set and Patch mutations. For Delete mutations, we\r\n * reset the version to 0.\r\n *\r\n * Here's the expected transition table.\r\n *\r\n * MUTATION           APPLIED TO            RESULTS IN\r\n *\r\n * SetMutation        Document(v3)          Document(v3)\r\n * SetMutation        NoDocument(v3)        Document(v0)\r\n * SetMutation        InvalidDocument(v0)   Document(v0)\r\n * PatchMutation      Document(v3)          Document(v3)\r\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\r\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\r\n * DeleteMutation     Document(v3)          NoDocument(v0)\r\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\r\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\r\n *\r\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\r\n * the resulting version for Set and Patch mutations. As deletes have no\r\n * explicit update time, we use the commitTime of the WriteResponse for\r\n * Delete mutations.\r\n *\r\n * If a mutation is acknowledged by the backend but fails the precondition check\r\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\r\n * the updated version.\r\n *\r\n * Field transforms are used only with Patch and Set Mutations. We use the\r\n * `updateTransforms` message to store transforms, rather than the `transforms`s\r\n * messages.\r\n *\r\n * ## Subclassing Notes\r\n *\r\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\r\n * applyToLocalView() to implement the actual behavior of applying the mutation\r\n * to some source document (see `applySetMutationToRemoteDocument()` for an\r\n * example).\r\n */\n\n\nvar Mutation =\n/** @class */\nfunction () {\n  function Mutation() {}\n\n  return Mutation;\n}();\n/**\r\n * Applies this mutation to the given document for the purposes of computing a\r\n * new remote document. If the input document doesn't match the expected state\r\n * (e.g. it is invalid or outdated), the document type may transition to\r\n * unknown.\r\n *\r\n * @param mutation - The mutation to apply.\r\n * @param document - The document to mutate. The input document can be an\r\n *     invalid document if the client has no knowledge of the pre-mutation state\r\n *     of the document.\r\n * @param mutationResult - The result of applying the mutation from the backend.\r\n */\n\n\nfunction applyMutationToRemoteDocument(mutation, document, mutationResult) {\n  if (mutation instanceof SetMutation) {\n    applySetMutationToRemoteDocument(mutation, document, mutationResult);\n  } else if (mutation instanceof PatchMutation) {\n    applyPatchMutationToRemoteDocument(mutation, document, mutationResult);\n  } else {\n    applyDeleteMutationToRemoteDocument(mutation, document, mutationResult);\n  }\n}\n/**\r\n * Applies this mutation to the given document for the purposes of computing\r\n * the new local view of a document. If the input document doesn't match the\r\n * expected state, the document is not modified.\r\n *\r\n * @param mutation - The mutation to apply.\r\n * @param document - The document to mutate. The input document can be an\r\n *     invalid document if the client has no knowledge of the pre-mutation state\r\n *     of the document.\r\n * @param localWriteTime - A timestamp indicating the local write time of the\r\n *     batch this mutation is a part of.\r\n */\n\n\nfunction applyMutationToLocalView(mutation, document, localWriteTime) {\n  if (mutation instanceof SetMutation) {\n    applySetMutationToLocalView(mutation, document, localWriteTime);\n  } else if (mutation instanceof PatchMutation) {\n    applyPatchMutationToLocalView(mutation, document, localWriteTime);\n  } else {\n    applyDeleteMutationToLocalView(mutation, document);\n  }\n}\n/**\r\n * If this mutation is not idempotent, returns the base value to persist with\r\n * this mutation. If a base value is returned, the mutation is always applied\r\n * to this base value, even if document has already been updated.\r\n *\r\n * The base value is a sparse object that consists of only the document\r\n * fields for which this mutation contains a non-idempotent transformation\r\n * (e.g. a numeric increment). The provided value guarantees consistent\r\n * behavior for non-idempotent transforms and allow us to return the same\r\n * latency-compensated value even if the backend has already applied the\r\n * mutation. The base value is null for idempotent mutations, as they can be\r\n * re-played even if the backend has already applied them.\r\n *\r\n * @returns a base value to store along with the mutation, or null for\r\n * idempotent mutations.\r\n */\n\n\nfunction extractMutationBaseValue(mutation, document) {\n  var baseObject = null;\n\n  for (var _i = 0, _d = mutation.fieldTransforms; _i < _d.length; _i++) {\n    var fieldTransform = _d[_i];\n    var existingValue = document.data.field(fieldTransform.field);\n    var coercedValue = computeTransformOperationBaseValue(fieldTransform.transform, existingValue || null);\n\n    if (coercedValue != null) {\n      if (baseObject == null) {\n        baseObject = ObjectValue.empty();\n      }\n\n      baseObject.set(fieldTransform.field, coercedValue);\n    }\n  }\n\n  return baseObject ? baseObject : null;\n}\n\nfunction mutationEquals(left, right) {\n  if (left.type !== right.type) {\n    return false;\n  }\n\n  if (!left.key.isEqual(right.key)) {\n    return false;\n  }\n\n  if (!left.precondition.isEqual(right.precondition)) {\n    return false;\n  }\n\n  if (!fieldTransformsAreEqual(left.fieldTransforms, right.fieldTransforms)) {\n    return false;\n  }\n\n  if (left.type === 0\n  /* Set */\n  ) {\n      return left.value.isEqual(right.value);\n    }\n\n  if (left.type === 1\n  /* Patch */\n  ) {\n      return left.data.isEqual(right.data) && left.fieldMask.isEqual(right.fieldMask);\n    }\n\n  return true;\n}\n/**\r\n * Returns the version from the given document for use as the result of a\r\n * mutation. Mutations are defined to return the version of the base document\r\n * only if it is an existing document. Deleted and unknown documents have a\r\n * post-mutation version of SnapshotVersion.min().\r\n */\n\n\nfunction getPostMutationVersion(document) {\n  return document.isFoundDocument() ? document.version : SnapshotVersion.min();\n}\n/**\r\n * A mutation that creates or replaces the document at the given key with the\r\n * object value contents.\r\n */\n\n\nvar SetMutation =\n/** @class */\nfunction (_super) {\n  tslib.__extends(SetMutation, _super);\n\n  function SetMutation(key, value, precondition, fieldTransforms) {\n    if (fieldTransforms === void 0) {\n      fieldTransforms = [];\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.key = key;\n    _this.value = value;\n    _this.precondition = precondition;\n    _this.fieldTransforms = fieldTransforms;\n    _this.type = 0\n    /* Set */\n    ;\n    return _this;\n  }\n\n  return SetMutation;\n}(Mutation);\n\nfunction applySetMutationToRemoteDocument(mutation, document, mutationResult) {\n  // Unlike applySetMutationToLocalView, if we're applying a mutation to a\n  // remote document the server has accepted the mutation so the precondition\n  // must have held.\n  var newData = mutation.value.clone();\n  var transformResults = serverTransformResults(mutation.fieldTransforms, document, mutationResult.transformResults);\n  newData.setAll(transformResults);\n  document.convertToFoundDocument(mutationResult.version, newData).setHasCommittedMutations();\n}\n\nfunction applySetMutationToLocalView(mutation, document, localWriteTime) {\n  if (!preconditionIsValidForDocument(mutation.precondition, document)) {\n    // The mutation failed to apply (e.g. a document ID created with add()\n    // caused a name collision).\n    return;\n  }\n\n  var newData = mutation.value.clone();\n  var transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document);\n  newData.setAll(transformResults);\n  document.convertToFoundDocument(getPostMutationVersion(document), newData).setHasLocalMutations();\n}\n/**\r\n * A mutation that modifies fields of the document at the given key with the\r\n * given values. The values are applied through a field mask:\r\n *\r\n *  * When a field is in both the mask and the values, the corresponding field\r\n *    is updated.\r\n *  * When a field is in neither the mask nor the values, the corresponding\r\n *    field is unmodified.\r\n *  * When a field is in the mask but not in the values, the corresponding field\r\n *    is deleted.\r\n *  * When a field is not in the mask but is in the values, the values map is\r\n *    ignored.\r\n */\n\n\nvar PatchMutation =\n/** @class */\nfunction (_super) {\n  tslib.__extends(PatchMutation, _super);\n\n  function PatchMutation(key, data, fieldMask, precondition, fieldTransforms) {\n    if (fieldTransforms === void 0) {\n      fieldTransforms = [];\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.key = key;\n    _this.data = data;\n    _this.fieldMask = fieldMask;\n    _this.precondition = precondition;\n    _this.fieldTransforms = fieldTransforms;\n    _this.type = 1\n    /* Patch */\n    ;\n    return _this;\n  }\n\n  return PatchMutation;\n}(Mutation);\n\nfunction applyPatchMutationToRemoteDocument(mutation, document, mutationResult) {\n  if (!preconditionIsValidForDocument(mutation.precondition, document)) {\n    // Since the mutation was not rejected, we know that the precondition\n    // matched on the backend. We therefore must not have the expected version\n    // of the document in our cache and convert to an UnknownDocument with a\n    // known updateTime.\n    document.convertToUnknownDocument(mutationResult.version);\n    return;\n  }\n\n  var transformResults = serverTransformResults(mutation.fieldTransforms, document, mutationResult.transformResults);\n  var newData = document.data;\n  newData.setAll(getPatch(mutation));\n  newData.setAll(transformResults);\n  document.convertToFoundDocument(mutationResult.version, newData).setHasCommittedMutations();\n}\n\nfunction applyPatchMutationToLocalView(mutation, document, localWriteTime) {\n  if (!preconditionIsValidForDocument(mutation.precondition, document)) {\n    return;\n  }\n\n  var transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document);\n  var newData = document.data;\n  newData.setAll(getPatch(mutation));\n  newData.setAll(transformResults);\n  document.convertToFoundDocument(getPostMutationVersion(document), newData).setHasLocalMutations();\n}\n/**\r\n * Returns a FieldPath/Value map with the content of the PatchMutation.\r\n */\n\n\nfunction getPatch(mutation) {\n  var result = new Map();\n  mutation.fieldMask.fields.forEach(function (fieldPath) {\n    if (!fieldPath.isEmpty()) {\n      var newValue = mutation.data.field(fieldPath);\n      result.set(fieldPath, newValue);\n    }\n  });\n  return result;\n}\n/**\r\n * Creates a list of \"transform results\" (a transform result is a field value\r\n * representing the result of applying a transform) for use after a mutation\r\n * containing transforms has been acknowledged by the server.\r\n *\r\n * @param fieldTransforms - The field transforms to apply the result to.\r\n * @param mutableDocument - The current state of the document after applying all\r\n * previous mutations.\r\n * @param serverTransformResults - The transform results received by the server.\r\n * @returns The transform results list.\r\n */\n\n\nfunction serverTransformResults(fieldTransforms, mutableDocument, serverTransformResults) {\n  var transformResults = new Map();\n  hardAssert(fieldTransforms.length === serverTransformResults.length);\n\n  for (var i = 0; i < serverTransformResults.length; i++) {\n    var fieldTransform = fieldTransforms[i];\n    var transform = fieldTransform.transform;\n    var previousValue = mutableDocument.data.field(fieldTransform.field);\n    transformResults.set(fieldTransform.field, applyTransformOperationToRemoteDocument(transform, previousValue, serverTransformResults[i]));\n  }\n\n  return transformResults;\n}\n/**\r\n * Creates a list of \"transform results\" (a transform result is a field value\r\n * representing the result of applying a transform) for use when applying a\r\n * transform locally.\r\n *\r\n * @param fieldTransforms - The field transforms to apply the result to.\r\n * @param localWriteTime - The local time of the mutation (used to\r\n *     generate ServerTimestampValues).\r\n * @param mutableDocument - The current state of the document after applying all\r\n *     previous mutations.\r\n * @returns The transform results list.\r\n */\n\n\nfunction localTransformResults(fieldTransforms, localWriteTime, mutableDocument) {\n  var transformResults = new Map();\n\n  for (var _i = 0, fieldTransforms_1 = fieldTransforms; _i < fieldTransforms_1.length; _i++) {\n    var fieldTransform = fieldTransforms_1[_i];\n    var transform = fieldTransform.transform;\n    var previousValue = mutableDocument.data.field(fieldTransform.field);\n    transformResults.set(fieldTransform.field, applyTransformOperationToLocalView(transform, previousValue, localWriteTime));\n  }\n\n  return transformResults;\n}\n/** A mutation that deletes the document at the given key. */\n\n\nvar DeleteMutation =\n/** @class */\nfunction (_super) {\n  tslib.__extends(DeleteMutation, _super);\n\n  function DeleteMutation(key, precondition) {\n    var _this = _super.call(this) || this;\n\n    _this.key = key;\n    _this.precondition = precondition;\n    _this.type = 2\n    /* Delete */\n    ;\n    _this.fieldTransforms = [];\n    return _this;\n  }\n\n  return DeleteMutation;\n}(Mutation);\n\nfunction applyDeleteMutationToRemoteDocument(mutation, document, mutationResult) {\n  // Unlike applyToLocalView, if we're applying a mutation to a remote\n  // document the server has accepted the mutation so the precondition must\n  // have held.\n  document.convertToNoDocument(mutationResult.version).setHasCommittedMutations();\n}\n\nfunction applyDeleteMutationToLocalView(mutation, document) {\n  if (preconditionIsValidForDocument(mutation.precondition, document)) {\n    // We don't call `setHasLocalMutations()` since we want to be backwards\n    // compatible with the existing SDK behavior.\n    document.convertToNoDocument(SnapshotVersion.min());\n  }\n}\n/**\r\n * A mutation that verifies the existence of the document at the given key with\r\n * the provided precondition.\r\n *\r\n * The `verify` operation is only used in Transactions, and this class serves\r\n * primarily to facilitate serialization into protos.\r\n */\n\n\nvar VerifyMutation =\n/** @class */\nfunction (_super) {\n  tslib.__extends(VerifyMutation, _super);\n\n  function VerifyMutation(key, precondition) {\n    var _this = _super.call(this) || this;\n\n    _this.key = key;\n    _this.precondition = precondition;\n    _this.type = 3\n    /* Verify */\n    ;\n    _this.fieldTransforms = [];\n    return _this;\n  }\n\n  return VerifyMutation;\n}(Mutation);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A batch of mutations that will be sent as one unit to the backend.\r\n */\n\n\nvar MutationBatch =\n/** @class */\nfunction () {\n  /**\r\n   * @param batchId - The unique ID of this mutation batch.\r\n   * @param localWriteTime - The original write time of this mutation.\r\n   * @param baseMutations - Mutations that are used to populate the base\r\n   * values when this mutation is applied locally. This can be used to locally\r\n   * overwrite values that are persisted in the remote document cache. Base\r\n   * mutations are never sent to the backend.\r\n   * @param mutations - The user-provided mutations in this mutation batch.\r\n   * User-provided mutations are applied both locally and remotely on the\r\n   * backend.\r\n   */\n  function MutationBatch(batchId, localWriteTime, baseMutations, mutations) {\n    this.batchId = batchId;\n    this.localWriteTime = localWriteTime;\n    this.baseMutations = baseMutations;\n    this.mutations = mutations;\n  }\n  /**\r\n   * Applies all the mutations in this MutationBatch to the specified document\r\n   * to compute the state of the remote document\r\n   *\r\n   * @param document - The document to apply mutations to.\r\n   * @param batchResult - The result of applying the MutationBatch to the\r\n   * backend.\r\n   */\n\n\n  MutationBatch.prototype.applyToRemoteDocument = function (document, batchResult) {\n    var mutationResults = batchResult.mutationResults;\n\n    for (var i = 0; i < this.mutations.length; i++) {\n      var mutation = this.mutations[i];\n\n      if (mutation.key.isEqual(document.key)) {\n        var mutationResult = mutationResults[i];\n        applyMutationToRemoteDocument(mutation, document, mutationResult);\n      }\n    }\n  };\n  /**\r\n   * Computes the local view of a document given all the mutations in this\r\n   * batch.\r\n   *\r\n   * @param document - The document to apply mutations to.\r\n   */\n\n\n  MutationBatch.prototype.applyToLocalView = function (document) {\n    // First, apply the base state. This allows us to apply non-idempotent\n    // transform against a consistent set of values.\n    for (var _i = 0, _d = this.baseMutations; _i < _d.length; _i++) {\n      var mutation = _d[_i];\n\n      if (mutation.key.isEqual(document.key)) {\n        applyMutationToLocalView(mutation, document, this.localWriteTime);\n      }\n    } // Second, apply all user-provided mutations.\n\n\n    for (var _e = 0, _f = this.mutations; _e < _f.length; _e++) {\n      var mutation = _f[_e];\n\n      if (mutation.key.isEqual(document.key)) {\n        applyMutationToLocalView(mutation, document, this.localWriteTime);\n      }\n    }\n  };\n  /**\r\n   * Computes the local view for all provided documents given the mutations in\r\n   * this batch.\r\n   */\n\n\n  MutationBatch.prototype.applyToLocalDocumentSet = function (documentMap) {\n    var _this = this; // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations\n    // directly (as done in `applyToLocalView()`), we can reduce the complexity\n    // to O(n).\n\n\n    this.mutations.forEach(function (m) {\n      var document = documentMap.get(m.key); // TODO(mutabledocuments): This method should take a MutableDocumentMap\n      // and we should remove this cast.\n\n      var mutableDocument = document;\n\n      _this.applyToLocalView(mutableDocument);\n\n      if (!document.isValidDocument()) {\n        mutableDocument.convertToNoDocument(SnapshotVersion.min());\n      }\n    });\n  };\n\n  MutationBatch.prototype.keys = function () {\n    return this.mutations.reduce(function (keys, m) {\n      return keys.add(m.key);\n    }, documentKeySet());\n  };\n\n  MutationBatch.prototype.isEqual = function (other) {\n    return this.batchId === other.batchId && arrayEquals(this.mutations, other.mutations, function (l, r) {\n      return mutationEquals(l, r);\n    }) && arrayEquals(this.baseMutations, other.baseMutations, function (l, r) {\n      return mutationEquals(l, r);\n    });\n  };\n\n  return MutationBatch;\n}();\n/** The result of applying a mutation batch to the backend. */\n\n\nvar MutationBatchResult =\n/** @class */\nfunction () {\n  function MutationBatchResult(batch, commitVersion, mutationResults,\n  /**\r\n   * A pre-computed mapping from each mutated document to the resulting\r\n   * version.\r\n   */\n  docVersions) {\n    this.batch = batch;\n    this.commitVersion = commitVersion;\n    this.mutationResults = mutationResults;\n    this.docVersions = docVersions;\n  }\n  /**\r\n   * Creates a new MutationBatchResult for the given batch and results. There\r\n   * must be one result for each mutation in the batch. This static factory\r\n   * caches a document=&gt;version mapping (docVersions).\r\n   */\n\n\n  MutationBatchResult.from = function (batch, commitVersion, results) {\n    hardAssert(batch.mutations.length === results.length);\n    var versionMap = documentVersionMap();\n    var mutations = batch.mutations;\n\n    for (var i = 0; i < mutations.length; i++) {\n      versionMap = versionMap.insert(mutations[i].key, results[i].version);\n    }\n\n    return new MutationBatchResult(batch, commitVersion, results, versionMap);\n  };\n\n  return MutationBatchResult;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ExistenceFilter =\n/** @class */\nfunction () {\n  // TODO(b/33078163): just use simplest form of existence filter for now\n  function ExistenceFilter(count) {\n    this.count = count;\n  }\n\n  return ExistenceFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Error Codes describing the different ways GRPC can fail. These are copied\r\n * directly from GRPC's sources here:\r\n *\r\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\r\n *\r\n * Important! The names of these identifiers matter because the string forms\r\n * are used for reverse lookups from the webchannel stream. Do NOT change the\r\n * names of these identifiers or change this into a const enum.\r\n */\n\n\nvar RpcCode;\n\n(function (RpcCode) {\n  RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n  RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n  RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n  RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n  RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n  RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n  RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n  RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n  RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n  RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n  RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n  RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n  RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n  RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n  RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n  RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n  RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\n/**\r\n * Determines whether an error code represents a permanent error when received\r\n * in response to a non-write operation.\r\n *\r\n * See isPermanentWriteError for classifying write errors.\r\n */\n\n\nfunction isPermanentError(code) {\n  switch (code) {\n    case Code.OK:\n      return fail();\n\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE: // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n\n    case Code.UNAUTHENTICATED:\n      return false;\n\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION: // Aborted might be retried in some scenarios, but that is dependant on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n\n    default:\n      return fail();\n  }\n}\n/**\r\n * Determines whether an error code represents a permanent error when received\r\n * in response to a write operation.\r\n *\r\n * Write operations must be handled specially because as of b/119437764, ABORTED\r\n * errors on the write stream should be retried too (even though ABORTED errors\r\n * are not generally retryable).\r\n *\r\n * Note that during the initial handshake on the write stream an ABORTED error\r\n * signals that we should discard our stream token (i.e. it is permanent). This\r\n * means a handshake error should be classified with isPermanentError, above.\r\n */\n\n\nfunction isPermanentWriteError(code) {\n  return isPermanentError(code) && code !== Code.ABORTED;\n}\n/**\r\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\r\n * are not the same as HTTP status codes.\r\n *\r\n * @returns The Code equivalent to the given GRPC status code. Fails if there\r\n *     is no match.\r\n */\n\n\nfunction mapCodeFromRpcCode(code) {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    logError('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n\n    default:\n      return fail();\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An event from the RemoteStore. It is split into targetChanges (changes to the\r\n * state or the set of documents in our watched targets) and documentUpdates\r\n * (changes to the actual documents).\r\n */\n\n\nvar RemoteEvent =\n/** @class */\nfunction () {\n  function RemoteEvent(\n  /**\r\n   * The snapshot version this event brings us up to, or MIN if not set.\r\n   */\n  snapshotVersion,\n  /**\r\n   * A map from target to changes to the target. See TargetChange.\r\n   */\n  targetChanges,\n  /**\r\n   * A set of targets that is known to be inconsistent. Listens for these\r\n   * targets should be re-established without resume tokens.\r\n   */\n  targetMismatches,\n  /**\r\n   * A set of which documents have changed or been deleted, along with the\r\n   * doc's new values (if not deleted).\r\n   */\n  documentUpdates,\n  /**\r\n   * A set of which document updates are due only to limbo resolution targets.\r\n   */\n  resolvedLimboDocuments) {\n    this.snapshotVersion = snapshotVersion;\n    this.targetChanges = targetChanges;\n    this.targetMismatches = targetMismatches;\n    this.documentUpdates = documentUpdates;\n    this.resolvedLimboDocuments = resolvedLimboDocuments;\n  }\n  /**\r\n   * HACK: Views require RemoteEvents in order to determine whether the view is\r\n   * CURRENT, but secondary tabs don't receive remote events. So this method is\r\n   * used to create a synthesized RemoteEvent that can be used to apply a\r\n   * CURRENT status change to a View, for queries executed in a different tab.\r\n   */\n  // PORTING NOTE: Multi-tab only\n\n\n  RemoteEvent.createSynthesizedRemoteEventForCurrentChange = function (targetId, current) {\n    var targetChanges = new Map();\n    targetChanges.set(targetId, TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current));\n    return new RemoteEvent(SnapshotVersion.min(), targetChanges, targetIdSet(), mutableDocumentMap(), documentKeySet());\n  };\n\n  return RemoteEvent;\n}();\n/**\r\n * A TargetChange specifies the set of changes for a specific target as part of\r\n * a RemoteEvent. These changes track which documents are added, modified or\r\n * removed, as well as the target's resume token and whether the target is\r\n * marked CURRENT.\r\n * The actual changes *to* documents are not part of the TargetChange since\r\n * documents may be part of multiple targets.\r\n */\n\n\nvar TargetChange =\n/** @class */\nfunction () {\n  function TargetChange(\n  /**\r\n   * An opaque, server-assigned token that allows watching a query to be resumed\r\n   * after disconnecting without retransmitting all the data that matches the\r\n   * query. The resume token essentially identifies a point in time from which\r\n   * the server should resume sending results.\r\n   */\n  resumeToken,\n  /**\r\n   * The \"current\" (synced) status of this target. Note that \"current\"\r\n   * has special meaning in the RPC protocol that implies that a target is\r\n   * both up-to-date and consistent with the rest of the watch stream.\r\n   */\n  current,\n  /**\r\n   * The set of documents that were newly assigned to this target as part of\r\n   * this remote event.\r\n   */\n  addedDocuments,\n  /**\r\n   * The set of documents that were already assigned to this target but received\r\n   * an update during this remote event.\r\n   */\n  modifiedDocuments,\n  /**\r\n   * The set of documents that were removed from this target as part of this\r\n   * remote event.\r\n   */\n  removedDocuments) {\n    this.resumeToken = resumeToken;\n    this.current = current;\n    this.addedDocuments = addedDocuments;\n    this.modifiedDocuments = modifiedDocuments;\n    this.removedDocuments = removedDocuments;\n  }\n  /**\r\n   * This method is used to create a synthesized TargetChanges that can be used to\r\n   * apply a CURRENT status change to a View (for queries executed in a different\r\n   * tab) or for new queries (to raise snapshots with correct CURRENT status).\r\n   */\n\n\n  TargetChange.createSynthesizedTargetChangeForCurrentChange = function (targetId, current) {\n    return new TargetChange(ByteString.EMPTY_BYTE_STRING, current, documentKeySet(), documentKeySet(), documentKeySet());\n  };\n\n  return TargetChange;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a changed document and a list of target ids to which this change\r\n * applies.\r\n *\r\n * If document has been deleted NoDocument will be provided.\r\n */\n\n\nvar DocumentWatchChange =\n/** @class */\nfunction () {\n  function DocumentWatchChange(\n  /** The new document applies to all of these targets. */\n  updatedTargetIds,\n  /** The new document is removed from all of these targets. */\n  removedTargetIds,\n  /** The key of the document for this change. */\n  key,\n  /**\r\n   * The new document or NoDocument if it was deleted. Is null if the\r\n   * document went out of view without the server sending a new document.\r\n   */\n  newDoc) {\n    this.updatedTargetIds = updatedTargetIds;\n    this.removedTargetIds = removedTargetIds;\n    this.key = key;\n    this.newDoc = newDoc;\n  }\n\n  return DocumentWatchChange;\n}();\n\nvar ExistenceFilterChange =\n/** @class */\nfunction () {\n  function ExistenceFilterChange(targetId, existenceFilter) {\n    this.targetId = targetId;\n    this.existenceFilter = existenceFilter;\n  }\n\n  return ExistenceFilterChange;\n}();\n\nvar WatchTargetChange =\n/** @class */\nfunction () {\n  function WatchTargetChange(\n  /** What kind of change occurred to the watch target. */\n  state,\n  /** The target IDs that were added/removed/set. */\n  targetIds,\n  /**\r\n   * An opaque, server-assigned token that allows watching a target to be\r\n   * resumed after disconnecting without retransmitting all the data that\r\n   * matches the target. The resume token essentially identifies a point in\r\n   * time from which the server should resume sending results.\r\n   */\n  resumeToken,\n  /** An RPC error indicating why the watch failed. */\n  cause) {\n    if (resumeToken === void 0) {\n      resumeToken = ByteString.EMPTY_BYTE_STRING;\n    }\n\n    if (cause === void 0) {\n      cause = null;\n    }\n\n    this.state = state;\n    this.targetIds = targetIds;\n    this.resumeToken = resumeToken;\n    this.cause = cause;\n  }\n\n  return WatchTargetChange;\n}();\n/** Tracks the internal state of a Watch target. */\n\n\nvar TargetState =\n/** @class */\nfunction () {\n  function TargetState() {\n    /**\r\n     * The number of pending responses (adds or removes) that we are waiting on.\r\n     * We only consider targets active that have no pending responses.\r\n     */\n    this.pendingResponses = 0;\n    /**\r\n     * Keeps track of the document changes since the last raised snapshot.\r\n     *\r\n     * These changes are continuously updated as we receive document updates and\r\n     * always reflect the current set of changes against the last issued snapshot.\r\n     */\n\n    this.documentChanges = snapshotChangesMap();\n    /** See public getters for explanations of these fields. */\n\n    this._resumeToken = ByteString.EMPTY_BYTE_STRING;\n    this._current = false;\n    /**\r\n     * Whether this target state should be included in the next snapshot. We\r\n     * initialize to true so that newly-added targets are included in the next\r\n     * RemoteEvent.\r\n     */\n\n    this._hasPendingChanges = true;\n  }\n\n  Object.defineProperty(TargetState.prototype, \"current\", {\n    /**\r\n     * Whether this target has been marked 'current'.\r\n     *\r\n     * 'Current' has special meaning in the RPC protocol: It implies that the\r\n     * Watch backend has sent us all changes up to the point at which the target\r\n     * was added and that the target is consistent with the rest of the watch\r\n     * stream.\r\n     */\n    get: function () {\n      return this._current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TargetState.prototype, \"resumeToken\", {\n    /** The last resume token sent to us for this target. */\n    get: function () {\n      return this._resumeToken;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TargetState.prototype, \"isPending\", {\n    /** Whether this target has pending target adds or target removes. */\n    get: function () {\n      return this.pendingResponses !== 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TargetState.prototype, \"hasPendingChanges\", {\n    /** Whether we have modified any state that should trigger a snapshot. */\n    get: function () {\n      return this._hasPendingChanges;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Applies the resume token to the TargetChange, but only when it has a new\r\n   * value. Empty resumeTokens are discarded.\r\n   */\n\n  TargetState.prototype.updateResumeToken = function (resumeToken) {\n    if (resumeToken.approximateByteSize() > 0) {\n      this._hasPendingChanges = true;\n      this._resumeToken = resumeToken;\n    }\n  };\n  /**\r\n   * Creates a target change from the current set of changes.\r\n   *\r\n   * To reset the document changes after raising this snapshot, call\r\n   * `clearPendingChanges()`.\r\n   */\n\n\n  TargetState.prototype.toTargetChange = function () {\n    var addedDocuments = documentKeySet();\n    var modifiedDocuments = documentKeySet();\n    var removedDocuments = documentKeySet();\n    this.documentChanges.forEach(function (key, changeType) {\n      switch (changeType) {\n        case 0\n        /* Added */\n        :\n          addedDocuments = addedDocuments.add(key);\n          break;\n\n        case 2\n        /* Modified */\n        :\n          modifiedDocuments = modifiedDocuments.add(key);\n          break;\n\n        case 1\n        /* Removed */\n        :\n          removedDocuments = removedDocuments.add(key);\n          break;\n\n        default:\n          fail();\n      }\n    });\n    return new TargetChange(this._resumeToken, this._current, addedDocuments, modifiedDocuments, removedDocuments);\n  };\n  /**\r\n   * Resets the document changes and sets `hasPendingChanges` to false.\r\n   */\n\n\n  TargetState.prototype.clearPendingChanges = function () {\n    this._hasPendingChanges = false;\n    this.documentChanges = snapshotChangesMap();\n  };\n\n  TargetState.prototype.addDocumentChange = function (key, changeType) {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.insert(key, changeType);\n  };\n\n  TargetState.prototype.removeDocumentChange = function (key) {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.remove(key);\n  };\n\n  TargetState.prototype.recordPendingTargetRequest = function () {\n    this.pendingResponses += 1;\n  };\n\n  TargetState.prototype.recordTargetResponse = function () {\n    this.pendingResponses -= 1;\n  };\n\n  TargetState.prototype.markCurrent = function () {\n    this._hasPendingChanges = true;\n    this._current = true;\n  };\n\n  return TargetState;\n}();\n\nvar LOG_TAG$f = 'WatchChangeAggregator';\n/**\r\n * A helper class to accumulate watch changes into a RemoteEvent.\r\n */\n\nvar WatchChangeAggregator =\n/** @class */\nfunction () {\n  function WatchChangeAggregator(metadataProvider) {\n    this.metadataProvider = metadataProvider;\n    /** The internal state of all tracked targets. */\n\n    this.targetStates = new Map();\n    /** Keeps track of the documents to update since the last raised snapshot. */\n\n    this.pendingDocumentUpdates = mutableDocumentMap();\n    /** A mapping of document keys to their set of target IDs. */\n\n    this.pendingDocumentTargetMapping = documentTargetMap();\n    /**\r\n     * A list of targets with existence filter mismatches. These targets are\r\n     * known to be inconsistent and their listens needs to be re-established by\r\n     * RemoteStore.\r\n     */\n\n    this.pendingTargetResets = new SortedSet(primitiveComparator);\n  }\n  /**\r\n   * Processes and adds the DocumentWatchChange to the current set of changes.\r\n   */\n\n\n  WatchChangeAggregator.prototype.handleDocumentChange = function (docChange) {\n    for (var _i = 0, _d = docChange.updatedTargetIds; _i < _d.length; _i++) {\n      var targetId = _d[_i];\n\n      if (docChange.newDoc && docChange.newDoc.isFoundDocument()) {\n        this.addDocumentToTarget(targetId, docChange.newDoc);\n      } else {\n        this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\n      }\n    }\n\n    for (var _e = 0, _f = docChange.removedTargetIds; _e < _f.length; _e++) {\n      var targetId = _f[_e];\n      this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\n    }\n  };\n  /** Processes and adds the WatchTargetChange to the current set of changes. */\n\n\n  WatchChangeAggregator.prototype.handleTargetChange = function (targetChange) {\n    var _this = this;\n\n    this.forEachTarget(targetChange, function (targetId) {\n      var targetState = _this.ensureTargetState(targetId);\n\n      switch (targetChange.state) {\n        case 0\n        /* NoChange */\n        :\n          if (_this.isActiveTarget(targetId)) {\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n\n          break;\n\n        case 1\n        /* Added */\n        :\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n\n          if (!targetState.isPending) {\n            // We have a freshly added target, so we need to reset any state\n            // that we had previously. This can happen e.g. when remove and add\n            // back a target for existence filter mismatches.\n            targetState.clearPendingChanges();\n          }\n\n          targetState.updateResumeToken(targetChange.resumeToken);\n          break;\n\n        case 2\n        /* Removed */\n        :\n          // We need to keep track of removed targets to we can post-filter and\n          // remove any target changes.\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n\n          if (!targetState.isPending) {\n            _this.removeTarget(targetId);\n          }\n\n          break;\n\n        case 3\n        /* Current */\n        :\n          if (_this.isActiveTarget(targetId)) {\n            targetState.markCurrent();\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n\n          break;\n\n        case 4\n        /* Reset */\n        :\n          if (_this.isActiveTarget(targetId)) {\n            // Reset the target and synthesizes removes for all existing\n            // documents. The backend will re-add any documents that still\n            // match the target before it sends the next global snapshot.\n            _this.resetTarget(targetId);\n\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n\n          break;\n\n        default:\n          fail();\n      }\n    });\n  };\n  /**\r\n   * Iterates over all targetIds that the watch change applies to: either the\r\n   * targetIds explicitly listed in the change or the targetIds of all currently\r\n   * active targets.\r\n   */\n\n\n  WatchChangeAggregator.prototype.forEachTarget = function (targetChange, fn) {\n    var _this = this;\n\n    if (targetChange.targetIds.length > 0) {\n      targetChange.targetIds.forEach(fn);\n    } else {\n      this.targetStates.forEach(function (_, targetId) {\n        if (_this.isActiveTarget(targetId)) {\n          fn(targetId);\n        }\n      });\n    }\n  };\n  /**\r\n   * Handles existence filters and synthesizes deletes for filter mismatches.\r\n   * Targets that are invalidated by filter mismatches are added to\r\n   * `pendingTargetResets`.\r\n   */\n\n\n  WatchChangeAggregator.prototype.handleExistenceFilter = function (watchChange) {\n    var targetId = watchChange.targetId;\n    var expectedCount = watchChange.existenceFilter.count;\n    var targetData = this.targetDataForActiveTarget(targetId);\n\n    if (targetData) {\n      var target = targetData.target;\n\n      if (isDocumentTarget(target)) {\n        if (expectedCount === 0) {\n          // The existence filter told us the document does not exist. We deduce\n          // that this document does not exist and apply a deleted document to\n          // our updates. Without applying this deleted document there might be\n          // another query that will raise this document as part of a snapshot\n          // until it is resolved, essentially exposing inconsistency between\n          // queries.\n          var key = new DocumentKey(target.path);\n          this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, SnapshotVersion.min()));\n        } else {\n          hardAssert(expectedCount === 1);\n        }\n      } else {\n        var currentSize = this.getCurrentDocumentCountForTarget(targetId);\n\n        if (currentSize !== expectedCount) {\n          // Existence filter mismatch: We reset the mapping and raise a new\n          // snapshot with `isFromCache:true`.\n          this.resetTarget(targetId);\n          this.pendingTargetResets = this.pendingTargetResets.add(targetId);\n        }\n      }\n    }\n  };\n  /**\r\n   * Converts the currently accumulated state into a remote event at the\r\n   * provided snapshot version. Resets the accumulated changes before returning.\r\n   */\n\n\n  WatchChangeAggregator.prototype.createRemoteEvent = function (snapshotVersion) {\n    var _this = this;\n\n    var targetChanges = new Map();\n    this.targetStates.forEach(function (targetState, targetId) {\n      var targetData = _this.targetDataForActiveTarget(targetId);\n\n      if (targetData) {\n        if (targetState.current && isDocumentTarget(targetData.target)) {\n          // Document queries for document that don't exist can produce an empty\n          // result set. To update our local cache, we synthesize a document\n          // delete if we have not previously received the document. This\n          // resolves the limbo state of the document, removing it from\n          // limboDocumentRefs.\n          //\n          // TODO(dimond): Ideally we would have an explicit lookup target\n          // instead resulting in an explicit delete message and we could\n          // remove this special logic.\n          var key = new DocumentKey(targetData.target.path);\n\n          if (_this.pendingDocumentUpdates.get(key) === null && !_this.targetContainsDocument(targetId, key)) {\n            _this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, snapshotVersion));\n          }\n        }\n\n        if (targetState.hasPendingChanges) {\n          targetChanges.set(targetId, targetState.toTargetChange());\n          targetState.clearPendingChanges();\n        }\n      }\n    });\n    var resolvedLimboDocuments = documentKeySet(); // We extract the set of limbo-only document updates as the GC logic\n    // special-cases documents that do not appear in the target cache.\n    //\n    // TODO(gsoltis): Expand on this comment once GC is available in the JS\n    // client.\n\n    this.pendingDocumentTargetMapping.forEach(function (key, targets) {\n      var isOnlyLimboTarget = true;\n      targets.forEachWhile(function (targetId) {\n        var targetData = _this.targetDataForActiveTarget(targetId);\n\n        if (targetData && targetData.purpose !== 2\n        /* LimboResolution */\n        ) {\n            isOnlyLimboTarget = false;\n            return false;\n          }\n\n        return true;\n      });\n\n      if (isOnlyLimboTarget) {\n        resolvedLimboDocuments = resolvedLimboDocuments.add(key);\n      }\n    });\n    var remoteEvent = new RemoteEvent(snapshotVersion, targetChanges, this.pendingTargetResets, this.pendingDocumentUpdates, resolvedLimboDocuments);\n    this.pendingDocumentUpdates = mutableDocumentMap();\n    this.pendingDocumentTargetMapping = documentTargetMap();\n    this.pendingTargetResets = new SortedSet(primitiveComparator);\n    return remoteEvent;\n  };\n  /**\r\n   * Adds the provided document to the internal list of document updates and\r\n   * its document key to the given target's mapping.\r\n   */\n  // Visible for testing.\n\n\n  WatchChangeAggregator.prototype.addDocumentToTarget = function (targetId, document) {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    var changeType = this.targetContainsDocument(targetId, document.key) ? 2\n    /* Modified */\n    : 0\n    /* Added */\n    ;\n    var targetState = this.ensureTargetState(targetId);\n    targetState.addDocumentChange(document.key, changeType);\n    this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(document.key, document);\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(document.key, this.ensureDocumentTargetMapping(document.key).add(targetId));\n  };\n  /**\r\n   * Removes the provided document from the target mapping. If the\r\n   * document no longer matches the target, but the document's state is still\r\n   * known (e.g. we know that the document was deleted or we received the change\r\n   * that caused the filter mismatch), the new document can be provided\r\n   * to update the remote document cache.\r\n   */\n  // Visible for testing.\n\n\n  WatchChangeAggregator.prototype.removeDocumentFromTarget = function (targetId, key, updatedDocument) {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n\n    var targetState = this.ensureTargetState(targetId);\n\n    if (this.targetContainsDocument(targetId, key)) {\n      targetState.addDocumentChange(key, 1\n      /* Removed */\n      );\n    } else {\n      // The document may have entered and left the target before we raised a\n      // snapshot, so we can just ignore the change.\n      targetState.removeDocumentChange(key);\n    }\n\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, this.ensureDocumentTargetMapping(key).delete(targetId));\n\n    if (updatedDocument) {\n      this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(key, updatedDocument);\n    }\n  };\n\n  WatchChangeAggregator.prototype.removeTarget = function (targetId) {\n    this.targetStates.delete(targetId);\n  };\n  /**\r\n   * Returns the current count of documents in the target. This includes both\r\n   * the number of documents that the LocalStore considers to be part of the\r\n   * target as well as any accumulated changes.\r\n   */\n\n\n  WatchChangeAggregator.prototype.getCurrentDocumentCountForTarget = function (targetId) {\n    var targetState = this.ensureTargetState(targetId);\n    var targetChange = targetState.toTargetChange();\n    return this.metadataProvider.getRemoteKeysForTarget(targetId).size + targetChange.addedDocuments.size - targetChange.removedDocuments.size;\n  };\n  /**\r\n   * Increment the number of acks needed from watch before we can consider the\r\n   * server to be 'in-sync' with the client's active targets.\r\n   */\n\n\n  WatchChangeAggregator.prototype.recordPendingTargetRequest = function (targetId) {\n    // For each request we get we need to record we need a response for it.\n    var targetState = this.ensureTargetState(targetId);\n    targetState.recordPendingTargetRequest();\n  };\n\n  WatchChangeAggregator.prototype.ensureTargetState = function (targetId) {\n    var result = this.targetStates.get(targetId);\n\n    if (!result) {\n      result = new TargetState();\n      this.targetStates.set(targetId, result);\n    }\n\n    return result;\n  };\n\n  WatchChangeAggregator.prototype.ensureDocumentTargetMapping = function (key) {\n    var targetMapping = this.pendingDocumentTargetMapping.get(key);\n\n    if (!targetMapping) {\n      targetMapping = new SortedSet(primitiveComparator);\n      this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, targetMapping);\n    }\n\n    return targetMapping;\n  };\n  /**\r\n   * Verifies that the user is still interested in this target (by calling\r\n   * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs\r\n   * from watch.\r\n   */\n\n\n  WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {\n    var targetActive = this.targetDataForActiveTarget(targetId) !== null;\n\n    if (!targetActive) {\n      logDebug(LOG_TAG$f, 'Detected inactive target', targetId);\n    }\n\n    return targetActive;\n  };\n  /**\r\n   * Returns the TargetData for an active target (i.e. a target that the user\r\n   * is still interested in that has no outstanding target change requests).\r\n   */\n\n\n  WatchChangeAggregator.prototype.targetDataForActiveTarget = function (targetId) {\n    var targetState = this.targetStates.get(targetId);\n    return targetState && targetState.isPending ? null : this.metadataProvider.getTargetDataForTarget(targetId);\n  };\n  /**\r\n   * Resets the state of a Watch target to its initial state (e.g. sets\r\n   * 'current' to false, clears the resume token and removes its target mapping\r\n   * from all documents).\r\n   */\n\n\n  WatchChangeAggregator.prototype.resetTarget = function (targetId) {\n    var _this = this;\n\n    this.targetStates.set(targetId, new TargetState()); // Trigger removal for any documents currently mapped to this target.\n    // These removals will be part of the initial snapshot if Watch does not\n    // resend these documents.\n\n    var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    existingKeys.forEach(function (key) {\n      _this.removeDocumentFromTarget(targetId, key,\n      /*updatedDocument=*/\n      null);\n    });\n  };\n  /**\r\n   * Returns whether the LocalStore considers the document to be part of the\r\n   * specified target.\r\n   */\n\n\n  WatchChangeAggregator.prototype.targetContainsDocument = function (targetId, key) {\n    var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    return existingKeys.has(key);\n  };\n\n  return WatchChangeAggregator;\n}();\n\nfunction documentTargetMap() {\n  return new SortedMap(DocumentKey.comparator);\n}\n\nfunction snapshotChangesMap() {\n  return new SortedMap(DocumentKey.comparator);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DIRECTIONS = function () {\n  var dirs = {};\n  dirs[\"asc\"\n  /* ASCENDING */\n  ] = 'ASCENDING';\n  dirs[\"desc\"\n  /* DESCENDING */\n  ] = 'DESCENDING';\n  return dirs;\n}();\n\nvar OPERATORS = function () {\n  var ops = {};\n  ops[\"<\"\n  /* LESS_THAN */\n  ] = 'LESS_THAN';\n  ops[\"<=\"\n  /* LESS_THAN_OR_EQUAL */\n  ] = 'LESS_THAN_OR_EQUAL';\n  ops[\">\"\n  /* GREATER_THAN */\n  ] = 'GREATER_THAN';\n  ops[\">=\"\n  /* GREATER_THAN_OR_EQUAL */\n  ] = 'GREATER_THAN_OR_EQUAL';\n  ops[\"==\"\n  /* EQUAL */\n  ] = 'EQUAL';\n  ops[\"!=\"\n  /* NOT_EQUAL */\n  ] = 'NOT_EQUAL';\n  ops[\"array-contains\"\n  /* ARRAY_CONTAINS */\n  ] = 'ARRAY_CONTAINS';\n  ops[\"in\"\n  /* IN */\n  ] = 'IN';\n  ops[\"not-in\"\n  /* NOT_IN */\n  ] = 'NOT_IN';\n  ops[\"array-contains-any\"\n  /* ARRAY_CONTAINS_ANY */\n  ] = 'ARRAY_CONTAINS_ANY';\n  return ops;\n}();\n\nfunction assertPresent(value, description) {}\n/**\r\n * This class generates JsonObject values for the Datastore API suitable for\r\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\r\n *\r\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\r\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\r\n * format.\r\n *\r\n * For a description of the Proto3 JSON format check\r\n * https://developers.google.com/protocol-buffers/docs/proto3#json\r\n *\r\n * TODO(klimt): We can remove the databaseId argument if we keep the full\r\n * resource name in documents.\r\n */\n\n\nvar JsonProtoSerializer =\n/** @class */\nfunction () {\n  function JsonProtoSerializer(databaseId, useProto3Json) {\n    this.databaseId = databaseId;\n    this.useProto3Json = useProto3Json;\n  }\n\n  return JsonProtoSerializer;\n}();\n\nfunction fromRpcStatus(status) {\n  var code = status.code === undefined ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);\n  return new FirestoreError(code, status.message || '');\n}\n/**\r\n * Returns a value for a number (or null) that's appropriate to put into\r\n * a google.protobuf.Int32Value proto.\r\n * DO NOT USE THIS FOR ANYTHING ELSE.\r\n * This method cheats. It's typed as returning \"number\" because that's what\r\n * our generated proto interfaces say Int32Value must be. But GRPC actually\r\n * expects a { value: <number> } struct.\r\n */\n\n\nfunction toInt32Proto(serializer, val) {\n  if (serializer.useProto3Json || isNullOrUndefined(val)) {\n    return val;\n  } else {\n    return {\n      value: val\n    };\n  }\n}\n/**\r\n * Returns a number (or null) from a google.protobuf.Int32Value proto.\r\n */\n\n\nfunction fromInt32Proto(val) {\n  var result;\n\n  if (typeof val === 'object') {\n    result = val.value;\n  } else {\n    result = val;\n  }\n\n  return isNullOrUndefined(result) ? null : result;\n}\n/**\r\n * Returns a value for a Date that's appropriate to put into a proto.\r\n */\n\n\nfunction toTimestamp(serializer, timestamp) {\n  if (serializer.useProto3Json) {\n    // Serialize to ISO-8601 date format, but with full nano resolution.\n    // Since JS Date has only millis, let's only use it for the seconds and\n    // then manually add the fractions to the end.\n    var jsDateStr = new Date(timestamp.seconds * 1000).toISOString(); // Remove .xxx frac part and Z in the end.\n\n    var strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', ''); // Pad the fraction out to 9 digits (nanos).\n\n    var nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\n    return strUntilSeconds + \".\" + nanoStr + \"Z\";\n  } else {\n    return {\n      seconds: '' + timestamp.seconds,\n      nanos: timestamp.nanoseconds // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    };\n  }\n}\n\nfunction fromTimestamp(date) {\n  var timestamp = normalizeTimestamp(date);\n  return new Timestamp(timestamp.seconds, timestamp.nanos);\n}\n/**\r\n * Returns a value for bytes that's appropriate to put in a proto.\r\n *\r\n * Visible for testing.\r\n */\n\n\nfunction toBytes(serializer, bytes) {\n  if (serializer.useProto3Json) {\n    return bytes.toBase64();\n  } else {\n    return bytes.toUint8Array();\n  }\n}\n/**\r\n * Returns a ByteString based on the proto string value.\r\n */\n\n\nfunction fromBytes(serializer, value) {\n  if (serializer.useProto3Json) {\n    hardAssert(value === undefined || typeof value === 'string');\n    return ByteString.fromBase64String(value ? value : '');\n  } else {\n    hardAssert(value === undefined || value instanceof Uint8Array);\n    return ByteString.fromUint8Array(value ? value : new Uint8Array());\n  }\n}\n\nfunction toVersion(serializer, version) {\n  return toTimestamp(serializer, version.toTimestamp());\n}\n\nfunction fromVersion(version) {\n  hardAssert(!!version);\n  return SnapshotVersion.fromTimestamp(fromTimestamp(version));\n}\n\nfunction toResourceName(databaseId, path) {\n  return fullyQualifiedPrefixPath(databaseId).child('documents').child(path).canonicalString();\n}\n\nfunction fromResourceName(name) {\n  var resource = ResourcePath.fromString(name);\n  hardAssert(isValidResourceName(resource));\n  return resource;\n}\n\nfunction toName(serializer, key) {\n  return toResourceName(serializer.databaseId, key.path);\n}\n\nfunction fromName(serializer, name) {\n  var resource = fromResourceName(name);\n\n  if (resource.get(1) !== serializer.databaseId.projectId) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Tried to deserialize key from different project: ' + resource.get(1) + ' vs ' + serializer.databaseId.projectId);\n  }\n\n  if (resource.get(3) !== serializer.databaseId.database) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Tried to deserialize key from different database: ' + resource.get(3) + ' vs ' + serializer.databaseId.database);\n  }\n\n  return new DocumentKey(extractLocalPathFromResourceName(resource));\n}\n\nfunction toQueryPath(serializer, path) {\n  return toResourceName(serializer.databaseId, path);\n}\n\nfunction fromQueryPath(name) {\n  var resourceName = fromResourceName(name); // In v1beta1 queries for collections at the root did not have a trailing\n  // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\n  // ability to read the v1beta1 form for compatibility with queries persisted\n  // in the local target cache.\n\n  if (resourceName.length === 4) {\n    return ResourcePath.emptyPath();\n  }\n\n  return extractLocalPathFromResourceName(resourceName);\n}\n\nfunction getEncodedDatabaseId(serializer) {\n  var path = new ResourcePath(['projects', serializer.databaseId.projectId, 'databases', serializer.databaseId.database]);\n  return path.canonicalString();\n}\n\nfunction fullyQualifiedPrefixPath(databaseId) {\n  return new ResourcePath(['projects', databaseId.projectId, 'databases', databaseId.database]);\n}\n\nfunction extractLocalPathFromResourceName(resourceName) {\n  hardAssert(resourceName.length > 4 && resourceName.get(4) === 'documents');\n  return resourceName.popFirst(5);\n}\n/** Creates a Document proto from key and fields (but no create/update time) */\n\n\nfunction toMutationDocument(serializer, key, fields) {\n  return {\n    name: toName(serializer, key),\n    fields: fields.value.mapValue.fields\n  };\n}\n\nfunction toDocument(serializer, document) {\n  return {\n    name: toName(serializer, document.key),\n    fields: document.data.value.mapValue.fields,\n    updateTime: toTimestamp(serializer, document.version.toTimestamp())\n  };\n}\n\nfunction fromDocument(serializer, document, hasCommittedMutations) {\n  var key = fromName(serializer, document.name);\n  var version = fromVersion(document.updateTime);\n  var data = new ObjectValue({\n    mapValue: {\n      fields: document.fields\n    }\n  });\n  var result = MutableDocument.newFoundDocument(key, version, data);\n\n  if (hasCommittedMutations) {\n    result.setHasCommittedMutations();\n  }\n\n  return hasCommittedMutations ? result.setHasCommittedMutations() : result;\n}\n\nfunction fromFound(serializer, doc) {\n  hardAssert(!!doc.found);\n  assertPresent(doc.found.name);\n  assertPresent(doc.found.updateTime);\n  var key = fromName(serializer, doc.found.name);\n  var version = fromVersion(doc.found.updateTime);\n  var data = new ObjectValue({\n    mapValue: {\n      fields: doc.found.fields\n    }\n  });\n  return MutableDocument.newFoundDocument(key, version, data);\n}\n\nfunction fromMissing(serializer, result) {\n  hardAssert(!!result.missing);\n  hardAssert(!!result.readTime);\n  var key = fromName(serializer, result.missing);\n  var version = fromVersion(result.readTime);\n  return MutableDocument.newNoDocument(key, version);\n}\n\nfunction fromBatchGetDocumentsResponse(serializer, result) {\n  if ('found' in result) {\n    return fromFound(serializer, result);\n  } else if ('missing' in result) {\n    return fromMissing(serializer, result);\n  }\n\n  return fail();\n}\n\nfunction fromWatchChange(serializer, change) {\n  var watchChange;\n\n  if ('targetChange' in change) {\n    assertPresent(change.targetChange); // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n    // if unset\n\n    var state = fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n    var targetIds = change.targetChange.targetIds || [];\n    var resumeToken = fromBytes(serializer, change.targetChange.resumeToken);\n    var causeProto = change.targetChange.cause;\n    var cause = causeProto && fromRpcStatus(causeProto);\n    watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);\n  } else if ('documentChange' in change) {\n    assertPresent(change.documentChange);\n    var entityChange = change.documentChange;\n    assertPresent(entityChange.document);\n    assertPresent(entityChange.document.name);\n    assertPresent(entityChange.document.updateTime);\n    var key = fromName(serializer, entityChange.document.name);\n    var version_1 = fromVersion(entityChange.document.updateTime);\n    var data = new ObjectValue({\n      mapValue: {\n        fields: entityChange.document.fields\n      }\n    });\n    var doc_1 = MutableDocument.newFoundDocument(key, version_1, data);\n    var updatedTargetIds = entityChange.targetIds || [];\n    var removedTargetIds = entityChange.removedTargetIds || [];\n    watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc_1.key, doc_1);\n  } else if ('documentDelete' in change) {\n    assertPresent(change.documentDelete);\n    var docDelete = change.documentDelete;\n    assertPresent(docDelete.document);\n    var key = fromName(serializer, docDelete.document);\n    var version_2 = docDelete.readTime ? fromVersion(docDelete.readTime) : SnapshotVersion.min();\n    var doc_2 = MutableDocument.newNoDocument(key, version_2);\n    var removedTargetIds = docDelete.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, doc_2.key, doc_2);\n  } else if ('documentRemove' in change) {\n    assertPresent(change.documentRemove);\n    var docRemove = change.documentRemove;\n    assertPresent(docRemove.document);\n    var key = fromName(serializer, docRemove.document);\n    var removedTargetIds = docRemove.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n  } else if ('filter' in change) {\n    // TODO(dimond): implement existence filter parsing with strategy.\n    assertPresent(change.filter);\n    var filter = change.filter;\n    assertPresent(filter.targetId);\n    var count = filter.count || 0;\n    var existenceFilter = new ExistenceFilter(count);\n    var targetId = filter.targetId;\n    watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n  } else {\n    return fail();\n  }\n\n  return watchChange;\n}\n\nfunction fromWatchTargetChangeState(state) {\n  if (state === 'NO_CHANGE') {\n    return 0\n    /* NoChange */\n    ;\n  } else if (state === 'ADD') {\n    return 1\n    /* Added */\n    ;\n  } else if (state === 'REMOVE') {\n    return 2\n    /* Removed */\n    ;\n  } else if (state === 'CURRENT') {\n    return 3\n    /* Current */\n    ;\n  } else if (state === 'RESET') {\n    return 4\n    /* Reset */\n    ;\n  } else {\n    return fail();\n  }\n}\n\nfunction versionFromListenResponse(change) {\n  // We have only reached a consistent snapshot for the entire stream if there\n  // is a read_time set and it applies to all targets (i.e. the list of\n  // targets is empty). The backend is guaranteed to send such responses.\n  if (!('targetChange' in change)) {\n    return SnapshotVersion.min();\n  }\n\n  var targetChange = change.targetChange;\n\n  if (targetChange.targetIds && targetChange.targetIds.length) {\n    return SnapshotVersion.min();\n  }\n\n  if (!targetChange.readTime) {\n    return SnapshotVersion.min();\n  }\n\n  return fromVersion(targetChange.readTime);\n}\n\nfunction toMutation(serializer, mutation) {\n  var result;\n\n  if (mutation instanceof SetMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.value)\n    };\n  } else if (mutation instanceof DeleteMutation) {\n    result = {\n      delete: toName(serializer, mutation.key)\n    };\n  } else if (mutation instanceof PatchMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.data),\n      updateMask: toDocumentMask(mutation.fieldMask)\n    };\n  } else if (mutation instanceof VerifyMutation) {\n    result = {\n      verify: toName(serializer, mutation.key)\n    };\n  } else {\n    return fail();\n  }\n\n  if (mutation.fieldTransforms.length > 0) {\n    result.updateTransforms = mutation.fieldTransforms.map(function (transform) {\n      return toFieldTransform(serializer, transform);\n    });\n  }\n\n  if (!mutation.precondition.isNone) {\n    result.currentDocument = toPrecondition(serializer, mutation.precondition);\n  }\n\n  return result;\n}\n\nfunction fromMutation(serializer, proto) {\n  var precondition = proto.currentDocument ? fromPrecondition(proto.currentDocument) : Precondition.none();\n  var fieldTransforms = proto.updateTransforms ? proto.updateTransforms.map(function (transform) {\n    return fromFieldTransform(serializer, transform);\n  }) : [];\n\n  if (proto.update) {\n    assertPresent(proto.update.name);\n    var key = fromName(serializer, proto.update.name);\n    var value = new ObjectValue({\n      mapValue: {\n        fields: proto.update.fields\n      }\n    });\n\n    if (proto.updateMask) {\n      var fieldMask = fromDocumentMask(proto.updateMask);\n      return new PatchMutation(key, value, fieldMask, precondition, fieldTransforms);\n    } else {\n      return new SetMutation(key, value, precondition, fieldTransforms);\n    }\n  } else if (proto.delete) {\n    var key = fromName(serializer, proto.delete);\n    return new DeleteMutation(key, precondition);\n  } else if (proto.verify) {\n    var key = fromName(serializer, proto.verify);\n    return new VerifyMutation(key, precondition);\n  } else {\n    return fail();\n  }\n}\n\nfunction toPrecondition(serializer, precondition) {\n  if (precondition.updateTime !== undefined) {\n    return {\n      updateTime: toVersion(serializer, precondition.updateTime)\n    };\n  } else if (precondition.exists !== undefined) {\n    return {\n      exists: precondition.exists\n    };\n  } else {\n    return fail();\n  }\n}\n\nfunction fromPrecondition(precondition) {\n  if (precondition.updateTime !== undefined) {\n    return Precondition.updateTime(fromVersion(precondition.updateTime));\n  } else if (precondition.exists !== undefined) {\n    return Precondition.exists(precondition.exists);\n  } else {\n    return Precondition.none();\n  }\n}\n\nfunction fromWriteResult(proto, commitTime) {\n  // NOTE: Deletes don't have an updateTime.\n  var version = proto.updateTime ? fromVersion(proto.updateTime) : fromVersion(commitTime);\n\n  if (version.isEqual(SnapshotVersion.min())) {\n    // The Firestore Emulator currently returns an update time of 0 for\n    // deletes of non-existing documents (rather than null). This breaks the\n    // test \"get deleted doc while offline with source=cache\" as NoDocuments\n    // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\n    // TODO(#2149): Remove this when Emulator is fixed\n    version = fromVersion(commitTime);\n  }\n\n  return new MutationResult(version, proto.transformResults || []);\n}\n\nfunction fromWriteResults(protos, commitTime) {\n  if (protos && protos.length > 0) {\n    hardAssert(commitTime !== undefined);\n    return protos.map(function (proto) {\n      return fromWriteResult(proto, commitTime);\n    });\n  } else {\n    return [];\n  }\n}\n\nfunction toFieldTransform(serializer, fieldTransform) {\n  var transform = fieldTransform.transform;\n\n  if (transform instanceof ServerTimestampTransform) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      setToServerValue: 'REQUEST_TIME'\n    };\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      appendMissingElements: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      removeAllFromArray: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof NumericIncrementTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      increment: transform.operand\n    };\n  } else {\n    throw fail();\n  }\n}\n\nfunction fromFieldTransform(serializer, proto) {\n  var transform = null;\n\n  if ('setToServerValue' in proto) {\n    hardAssert(proto.setToServerValue === 'REQUEST_TIME');\n    transform = new ServerTimestampTransform();\n  } else if ('appendMissingElements' in proto) {\n    var values = proto.appendMissingElements.values || [];\n    transform = new ArrayUnionTransformOperation(values);\n  } else if ('removeAllFromArray' in proto) {\n    var values = proto.removeAllFromArray.values || [];\n    transform = new ArrayRemoveTransformOperation(values);\n  } else if ('increment' in proto) {\n    transform = new NumericIncrementTransformOperation(serializer, proto.increment);\n  } else {\n    fail();\n  }\n\n  var fieldPath = FieldPath$1.fromServerFormat(proto.fieldPath);\n  return new FieldTransform(fieldPath, transform);\n}\n\nfunction toDocumentsTarget(serializer, target) {\n  return {\n    documents: [toQueryPath(serializer, target.path)]\n  };\n}\n\nfunction fromDocumentsTarget(documentsTarget) {\n  var count = documentsTarget.documents.length;\n  hardAssert(count === 1);\n  var name = documentsTarget.documents[0];\n  return queryToTarget(newQueryForPath(fromQueryPath(name)));\n}\n\nfunction toQueryTarget(serializer, target) {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  var result = {\n    structuredQuery: {}\n  };\n  var path = target.path;\n\n  if (target.collectionGroup !== null) {\n    result.parent = toQueryPath(serializer, path);\n    result.structuredQuery.from = [{\n      collectionId: target.collectionGroup,\n      allDescendants: true\n    }];\n  } else {\n    result.parent = toQueryPath(serializer, path.popLast());\n    result.structuredQuery.from = [{\n      collectionId: path.lastSegment()\n    }];\n  }\n\n  var where = toFilter(target.filters);\n\n  if (where) {\n    result.structuredQuery.where = where;\n  }\n\n  var orderBy = toOrder(target.orderBy);\n\n  if (orderBy) {\n    result.structuredQuery.orderBy = orderBy;\n  }\n\n  var limit = toInt32Proto(serializer, target.limit);\n\n  if (limit !== null) {\n    result.structuredQuery.limit = limit;\n  }\n\n  if (target.startAt) {\n    result.structuredQuery.startAt = toCursor(target.startAt);\n  }\n\n  if (target.endAt) {\n    result.structuredQuery.endAt = toCursor(target.endAt);\n  }\n\n  return result;\n}\n\nfunction convertQueryTargetToQuery(target) {\n  var path = fromQueryPath(target.parent);\n  var query = target.structuredQuery;\n  var fromCount = query.from ? query.from.length : 0;\n  var collectionGroup = null;\n\n  if (fromCount > 0) {\n    hardAssert(fromCount === 1);\n    var from = query.from[0];\n\n    if (from.allDescendants) {\n      collectionGroup = from.collectionId;\n    } else {\n      path = path.child(from.collectionId);\n    }\n  }\n\n  var filterBy = [];\n\n  if (query.where) {\n    filterBy = fromFilter(query.where);\n  }\n\n  var orderBy = [];\n\n  if (query.orderBy) {\n    orderBy = fromOrder(query.orderBy);\n  }\n\n  var limit = null;\n\n  if (query.limit) {\n    limit = fromInt32Proto(query.limit);\n  }\n\n  var startAt = null;\n\n  if (query.startAt) {\n    startAt = fromCursor(query.startAt);\n  }\n\n  var endAt = null;\n\n  if (query.endAt) {\n    endAt = fromCursor(query.endAt);\n  }\n\n  return newQuery(path, collectionGroup, orderBy, filterBy, limit, \"F\"\n  /* First */\n  , startAt, endAt);\n}\n\nfunction fromQueryTarget(target) {\n  return queryToTarget(convertQueryTargetToQuery(target));\n}\n\nfunction toListenRequestLabels(serializer, targetData) {\n  var value = toLabel(serializer, targetData.purpose);\n\n  if (value == null) {\n    return null;\n  } else {\n    return {\n      'goog-listen-tags': value\n    };\n  }\n}\n\nfunction toLabel(serializer, purpose) {\n  switch (purpose) {\n    case 0\n    /* Listen */\n    :\n      return null;\n\n    case 1\n    /* ExistenceFilterMismatch */\n    :\n      return 'existence-filter-mismatch';\n\n    case 2\n    /* LimboResolution */\n    :\n      return 'limbo-document';\n\n    default:\n      return fail();\n  }\n}\n\nfunction toTarget(serializer, targetData) {\n  var result;\n  var target = targetData.target;\n\n  if (isDocumentTarget(target)) {\n    result = {\n      documents: toDocumentsTarget(serializer, target)\n    };\n  } else {\n    result = {\n      query: toQueryTarget(serializer, target)\n    };\n  }\n\n  result.targetId = targetData.targetId;\n\n  if (targetData.resumeToken.approximateByteSize() > 0) {\n    result.resumeToken = toBytes(serializer, targetData.resumeToken);\n  } else if (targetData.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {\n    // TODO(wuandy): Consider removing above check because it is most likely true.\n    // Right now, many tests depend on this behaviour though (leaving min() out\n    // of serialization).\n    result.readTime = toTimestamp(serializer, targetData.snapshotVersion.toTimestamp());\n  }\n\n  return result;\n}\n\nfunction toFilter(filters) {\n  if (filters.length === 0) {\n    return;\n  }\n\n  var protos = filters.map(function (filter) {\n    return toUnaryOrFieldFilter(filter);\n  });\n\n  if (protos.length === 1) {\n    return protos[0];\n  }\n\n  return {\n    compositeFilter: {\n      op: 'AND',\n      filters: protos\n    }\n  };\n}\n\nfunction fromFilter(filter) {\n  if (!filter) {\n    return [];\n  } else if (filter.unaryFilter !== undefined) {\n    return [fromUnaryFilter(filter)];\n  } else if (filter.fieldFilter !== undefined) {\n    return [fromFieldFilter(filter)];\n  } else if (filter.compositeFilter !== undefined) {\n    return filter.compositeFilter.filters.map(function (f) {\n      return fromFilter(f);\n    }).reduce(function (accum, current) {\n      return accum.concat(current);\n    });\n  } else {\n    return fail();\n  }\n}\n\nfunction toOrder(orderBys) {\n  if (orderBys.length === 0) {\n    return;\n  }\n\n  return orderBys.map(function (order) {\n    return toPropertyOrder(order);\n  });\n}\n\nfunction fromOrder(orderBys) {\n  return orderBys.map(function (order) {\n    return fromPropertyOrder(order);\n  });\n}\n\nfunction toCursor(cursor) {\n  return {\n    before: cursor.before,\n    values: cursor.position\n  };\n}\n\nfunction fromCursor(cursor) {\n  var before = !!cursor.before;\n  var position = cursor.values || [];\n  return new Bound(position, before);\n} // visible for testing\n\n\nfunction toDirection(dir) {\n  return DIRECTIONS[dir];\n} // visible for testing\n\n\nfunction fromDirection(dir) {\n  switch (dir) {\n    case 'ASCENDING':\n      return \"asc\"\n      /* ASCENDING */\n      ;\n\n    case 'DESCENDING':\n      return \"desc\"\n      /* DESCENDING */\n      ;\n\n    default:\n      return undefined;\n  }\n} // visible for testing\n\n\nfunction toOperatorName(op) {\n  return OPERATORS[op];\n}\n\nfunction fromOperatorName(op) {\n  switch (op) {\n    case 'EQUAL':\n      return \"==\"\n      /* EQUAL */\n      ;\n\n    case 'NOT_EQUAL':\n      return \"!=\"\n      /* NOT_EQUAL */\n      ;\n\n    case 'GREATER_THAN':\n      return \">\"\n      /* GREATER_THAN */\n      ;\n\n    case 'GREATER_THAN_OR_EQUAL':\n      return \">=\"\n      /* GREATER_THAN_OR_EQUAL */\n      ;\n\n    case 'LESS_THAN':\n      return \"<\"\n      /* LESS_THAN */\n      ;\n\n    case 'LESS_THAN_OR_EQUAL':\n      return \"<=\"\n      /* LESS_THAN_OR_EQUAL */\n      ;\n\n    case 'ARRAY_CONTAINS':\n      return \"array-contains\"\n      /* ARRAY_CONTAINS */\n      ;\n\n    case 'IN':\n      return \"in\"\n      /* IN */\n      ;\n\n    case 'NOT_IN':\n      return \"not-in\"\n      /* NOT_IN */\n      ;\n\n    case 'ARRAY_CONTAINS_ANY':\n      return \"array-contains-any\"\n      /* ARRAY_CONTAINS_ANY */\n      ;\n\n    case 'OPERATOR_UNSPECIFIED':\n      return fail();\n\n    default:\n      return fail();\n  }\n}\n\nfunction toFieldPathReference(path) {\n  return {\n    fieldPath: path.canonicalString()\n  };\n}\n\nfunction fromFieldPathReference(fieldReference) {\n  return FieldPath$1.fromServerFormat(fieldReference.fieldPath);\n} // visible for testing\n\n\nfunction toPropertyOrder(orderBy) {\n  return {\n    field: toFieldPathReference(orderBy.field),\n    direction: toDirection(orderBy.dir)\n  };\n}\n\nfunction fromPropertyOrder(orderBy) {\n  return new OrderBy(fromFieldPathReference(orderBy.field), fromDirection(orderBy.direction));\n}\n\nfunction fromFieldFilter(filter) {\n  return FieldFilter.create(fromFieldPathReference(filter.fieldFilter.field), fromOperatorName(filter.fieldFilter.op), filter.fieldFilter.value);\n} // visible for testing\n\n\nfunction toUnaryOrFieldFilter(filter) {\n  if (filter.op === \"==\"\n  /* EQUAL */\n  ) {\n      if (isNanValue(filter.value)) {\n        return {\n          unaryFilter: {\n            field: toFieldPathReference(filter.field),\n            op: 'IS_NAN'\n          }\n        };\n      } else if (isNullValue(filter.value)) {\n        return {\n          unaryFilter: {\n            field: toFieldPathReference(filter.field),\n            op: 'IS_NULL'\n          }\n        };\n      }\n    } else if (filter.op === \"!=\"\n  /* NOT_EQUAL */\n  ) {\n      if (isNanValue(filter.value)) {\n        return {\n          unaryFilter: {\n            field: toFieldPathReference(filter.field),\n            op: 'IS_NOT_NAN'\n          }\n        };\n      } else if (isNullValue(filter.value)) {\n        return {\n          unaryFilter: {\n            field: toFieldPathReference(filter.field),\n            op: 'IS_NOT_NULL'\n          }\n        };\n      }\n    }\n\n  return {\n    fieldFilter: {\n      field: toFieldPathReference(filter.field),\n      op: toOperatorName(filter.op),\n      value: filter.value\n    }\n  };\n}\n\nfunction fromUnaryFilter(filter) {\n  switch (filter.unaryFilter.op) {\n    case 'IS_NAN':\n      var nanField = fromFieldPathReference(filter.unaryFilter.field);\n      return FieldFilter.create(nanField, \"==\"\n      /* EQUAL */\n      , {\n        doubleValue: NaN\n      });\n\n    case 'IS_NULL':\n      var nullField = fromFieldPathReference(filter.unaryFilter.field);\n      return FieldFilter.create(nullField, \"==\"\n      /* EQUAL */\n      , {\n        nullValue: 'NULL_VALUE'\n      });\n\n    case 'IS_NOT_NAN':\n      var notNanField = fromFieldPathReference(filter.unaryFilter.field);\n      return FieldFilter.create(notNanField, \"!=\"\n      /* NOT_EQUAL */\n      , {\n        doubleValue: NaN\n      });\n\n    case 'IS_NOT_NULL':\n      var notNullField = fromFieldPathReference(filter.unaryFilter.field);\n      return FieldFilter.create(notNullField, \"!=\"\n      /* NOT_EQUAL */\n      , {\n        nullValue: 'NULL_VALUE'\n      });\n\n    case 'OPERATOR_UNSPECIFIED':\n      return fail();\n\n    default:\n      return fail();\n  }\n}\n\nfunction toDocumentMask(fieldMask) {\n  var canonicalFields = [];\n  fieldMask.fields.forEach(function (field) {\n    return canonicalFields.push(field.canonicalString());\n  });\n  return {\n    fieldPaths: canonicalFields\n  };\n}\n\nfunction fromDocumentMask(proto) {\n  var paths = proto.fieldPaths || [];\n  return new FieldMask(paths.map(function (path) {\n    return FieldPath$1.fromServerFormat(path);\n  }));\n}\n\nfunction isValidResourceName(path) {\n  // Resource names have at least 4 components (project ID, database ID)\n  return path.length >= 4 && path.get(0) === 'projects' && path.get(2) === 'databases';\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An immutable set of metadata that the local store tracks for each target.\r\n */\n\n\nvar TargetData =\n/** @class */\nfunction () {\n  function TargetData(\n  /** The target being listened to. */\n  target,\n  /**\r\n   * The target ID to which the target corresponds; Assigned by the\r\n   * LocalStore for user listens and by the SyncEngine for limbo watches.\r\n   */\n  targetId,\n  /** The purpose of the target. */\n  purpose,\n  /**\r\n   * The sequence number of the last transaction during which this target data\r\n   * was modified.\r\n   */\n  sequenceNumber,\n  /** The latest snapshot version seen for this target. */\n  snapshotVersion,\n  /**\r\n   * The maximum snapshot version at which the associated view\r\n   * contained no limbo documents.\r\n   */\n  lastLimboFreeSnapshotVersion,\n  /**\r\n   * An opaque, server-assigned token that allows watching a target to be\r\n   * resumed after disconnecting without retransmitting all the data that\r\n   * matches the target. The resume token essentially identifies a point in\r\n   * time from which the server should resume sending results.\r\n   */\n  resumeToken) {\n    if (snapshotVersion === void 0) {\n      snapshotVersion = SnapshotVersion.min();\n    }\n\n    if (lastLimboFreeSnapshotVersion === void 0) {\n      lastLimboFreeSnapshotVersion = SnapshotVersion.min();\n    }\n\n    if (resumeToken === void 0) {\n      resumeToken = ByteString.EMPTY_BYTE_STRING;\n    }\n\n    this.target = target;\n    this.targetId = targetId;\n    this.purpose = purpose;\n    this.sequenceNumber = sequenceNumber;\n    this.snapshotVersion = snapshotVersion;\n    this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;\n    this.resumeToken = resumeToken;\n  }\n  /** Creates a new target data instance with an updated sequence number. */\n\n\n  TargetData.prototype.withSequenceNumber = function (sequenceNumber) {\n    return new TargetData(this.target, this.targetId, this.purpose, sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);\n  };\n  /**\r\n   * Creates a new target data instance with an updated resume token and\r\n   * snapshot version.\r\n   */\n\n\n  TargetData.prototype.withResumeToken = function (resumeToken, snapshotVersion) {\n    return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, snapshotVersion, this.lastLimboFreeSnapshotVersion, resumeToken);\n  };\n  /**\r\n   * Creates a new target data instance with an updated last limbo free\r\n   * snapshot version number.\r\n   */\n\n\n  TargetData.prototype.withLastLimboFreeSnapshotVersion = function (lastLimboFreeSnapshotVersion) {\n    return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, lastLimboFreeSnapshotVersion, this.resumeToken);\n  };\n\n  return TargetData;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Serializer for values stored in the LocalStore. */\n\n\nvar LocalSerializer =\n/** @class */\nfunction () {\n  function LocalSerializer(remoteSerializer) {\n    this.remoteSerializer = remoteSerializer;\n  }\n\n  return LocalSerializer;\n}();\n/** Decodes a remote document from storage locally to a Document. */\n\n\nfunction fromDbRemoteDocument(localSerializer, remoteDoc) {\n  if (remoteDoc.document) {\n    return fromDocument(localSerializer.remoteSerializer, remoteDoc.document, !!remoteDoc.hasCommittedMutations);\n  } else if (remoteDoc.noDocument) {\n    var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\n    var version_3 = fromDbTimestamp(remoteDoc.noDocument.readTime);\n    var document_1 = MutableDocument.newNoDocument(key, version_3);\n    return remoteDoc.hasCommittedMutations ? document_1.setHasCommittedMutations() : document_1;\n  } else if (remoteDoc.unknownDocument) {\n    var key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);\n    var version_4 = fromDbTimestamp(remoteDoc.unknownDocument.version);\n    return MutableDocument.newUnknownDocument(key, version_4);\n  } else {\n    return fail();\n  }\n}\n/** Encodes a document for storage locally. */\n\n\nfunction toDbRemoteDocument(localSerializer, document, readTime) {\n  var dbReadTime = toDbTimestampKey(readTime);\n  var parentPath = document.key.path.popLast().toArray();\n\n  if (document.isFoundDocument()) {\n    var doc_3 = toDocument(localSerializer.remoteSerializer, document);\n    var hasCommittedMutations = document.hasCommittedMutations;\n    return new DbRemoteDocument(\n    /* unknownDocument= */\n    null,\n    /* noDocument= */\n    null, doc_3, hasCommittedMutations, dbReadTime, parentPath);\n  } else if (document.isNoDocument()) {\n    var path = document.key.path.toArray();\n    var readTime_1 = toDbTimestamp(document.version);\n    var hasCommittedMutations = document.hasCommittedMutations;\n    return new DbRemoteDocument(\n    /* unknownDocument= */\n    null, new DbNoDocument(path, readTime_1),\n    /* document= */\n    null, hasCommittedMutations, dbReadTime, parentPath);\n  } else if (document.isUnknownDocument()) {\n    var path = document.key.path.toArray();\n    var readTime_2 = toDbTimestamp(document.version);\n    return new DbRemoteDocument(new DbUnknownDocument(path, readTime_2),\n    /* noDocument= */\n    null,\n    /* document= */\n    null,\n    /* hasCommittedMutations= */\n    true, dbReadTime, parentPath);\n  } else {\n    return fail();\n  }\n}\n\nfunction toDbTimestampKey(snapshotVersion) {\n  var timestamp = snapshotVersion.toTimestamp();\n  return [timestamp.seconds, timestamp.nanoseconds];\n}\n\nfunction fromDbTimestampKey(dbTimestampKey) {\n  var timestamp = new Timestamp(dbTimestampKey[0], dbTimestampKey[1]);\n  return SnapshotVersion.fromTimestamp(timestamp);\n}\n\nfunction toDbTimestamp(snapshotVersion) {\n  var timestamp = snapshotVersion.toTimestamp();\n  return new DbTimestamp(timestamp.seconds, timestamp.nanoseconds);\n}\n\nfunction fromDbTimestamp(dbTimestamp) {\n  var timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);\n  return SnapshotVersion.fromTimestamp(timestamp);\n}\n/** Encodes a batch of mutations into a DbMutationBatch for local storage. */\n\n\nfunction toDbMutationBatch(localSerializer, userId, batch) {\n  var serializedBaseMutations = batch.baseMutations.map(function (m) {\n    return toMutation(localSerializer.remoteSerializer, m);\n  });\n  var serializedMutations = batch.mutations.map(function (m) {\n    return toMutation(localSerializer.remoteSerializer, m);\n  });\n  return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toMillis(), serializedBaseMutations, serializedMutations);\n}\n/** Decodes a DbMutationBatch into a MutationBatch */\n\n\nfunction fromDbMutationBatch(localSerializer, dbBatch) {\n  var baseMutations = (dbBatch.baseMutations || []).map(function (m) {\n    return fromMutation(localSerializer.remoteSerializer, m);\n  }); // Squash old transform mutations into existing patch or set mutations.\n  // The replacement of representing `transforms` with `update_transforms`\n  // on the SDK means that old `transform` mutations stored in IndexedDB need\n  // to be updated to `update_transforms`.\n  // TODO(b/174608374): Remove this code once we perform a schema migration.\n\n  for (var i = 0; i < dbBatch.mutations.length - 1; ++i) {\n    var currentMutation = dbBatch.mutations[i];\n    var hasTransform = i + 1 < dbBatch.mutations.length && dbBatch.mutations[i + 1].transform !== undefined;\n\n    if (hasTransform) {\n      var transformMutation = dbBatch.mutations[i + 1];\n      currentMutation.updateTransforms = transformMutation.transform.fieldTransforms;\n      dbBatch.mutations.splice(i + 1, 1);\n      ++i;\n    }\n  }\n\n  var mutations = dbBatch.mutations.map(function (m) {\n    return fromMutation(localSerializer.remoteSerializer, m);\n  });\n  var timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);\n  return new MutationBatch(dbBatch.batchId, timestamp, baseMutations, mutations);\n}\n/** Decodes a DbTarget into TargetData */\n\n\nfunction fromDbTarget(dbTarget) {\n  var version = fromDbTimestamp(dbTarget.readTime);\n  var lastLimboFreeSnapshotVersion = dbTarget.lastLimboFreeSnapshotVersion !== undefined ? fromDbTimestamp(dbTarget.lastLimboFreeSnapshotVersion) : SnapshotVersion.min();\n  var target;\n\n  if (isDocumentQuery(dbTarget.query)) {\n    target = fromDocumentsTarget(dbTarget.query);\n  } else {\n    target = fromQueryTarget(dbTarget.query);\n  }\n\n  return new TargetData(target, dbTarget.targetId, 0\n  /* Listen */\n  , dbTarget.lastListenSequenceNumber, version, lastLimboFreeSnapshotVersion, ByteString.fromBase64String(dbTarget.resumeToken));\n}\n/** Encodes TargetData into a DbTarget for storage locally. */\n\n\nfunction toDbTarget(localSerializer, targetData) {\n  var dbTimestamp = toDbTimestamp(targetData.snapshotVersion);\n  var dbLastLimboFreeTimestamp = toDbTimestamp(targetData.lastLimboFreeSnapshotVersion);\n  var queryProto;\n\n  if (isDocumentTarget(targetData.target)) {\n    queryProto = toDocumentsTarget(localSerializer.remoteSerializer, targetData.target);\n  } else {\n    queryProto = toQueryTarget(localSerializer.remoteSerializer, targetData.target);\n  } // We can't store the resumeToken as a ByteString in IndexedDb, so we\n  // convert it to a base64 string for storage.\n\n\n  var resumeToken = targetData.resumeToken.toBase64(); // lastListenSequenceNumber is always 0 until we do real GC.\n\n  return new DbTarget(targetData.targetId, canonifyTarget(targetData.target), dbTimestamp, resumeToken, targetData.sequenceNumber, dbLastLimboFreeTimestamp, queryProto);\n}\n/**\r\n * A helper function for figuring out what kind of query has been stored.\r\n */\n\n\nfunction isDocumentQuery(dbQuery) {\n  return dbQuery.documents !== undefined;\n}\n/** Encodes a DbBundle to a BundleMetadata object. */\n\n\nfunction fromDbBundle(dbBundle) {\n  return {\n    id: dbBundle.bundleId,\n    createTime: fromDbTimestamp(dbBundle.createTime),\n    version: dbBundle.version\n  };\n}\n/** Encodes a BundleMetadata to a DbBundle. */\n\n\nfunction toDbBundle(metadata) {\n  return {\n    bundleId: metadata.id,\n    createTime: toDbTimestamp(fromVersion(metadata.createTime)),\n    version: metadata.version\n  };\n}\n/** Encodes a DbNamedQuery to a NamedQuery. */\n\n\nfunction fromDbNamedQuery(dbNamedQuery) {\n  return {\n    name: dbNamedQuery.name,\n    query: fromBundledQuery(dbNamedQuery.bundledQuery),\n    readTime: fromDbTimestamp(dbNamedQuery.readTime)\n  };\n}\n/** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */\n\n\nfunction toDbNamedQuery(query) {\n  return {\n    name: query.name,\n    readTime: toDbTimestamp(fromVersion(query.readTime)),\n    bundledQuery: query.bundledQuery\n  };\n}\n/**\r\n * Encodes a `BundledQuery` from bundle proto to a Query object.\r\n *\r\n * This reconstructs the original query used to build the bundle being loaded,\r\n * including features exists only in SDKs (for example: limit-to-last).\r\n */\n\n\nfunction fromBundledQuery(bundledQuery) {\n  var query = convertQueryTargetToQuery({\n    parent: bundledQuery.parent,\n    structuredQuery: bundledQuery.structuredQuery\n  });\n\n  if (bundledQuery.limitType === 'LAST') {\n    return queryWithLimit(query, query.limit, \"L\"\n    /* Last */\n    );\n  }\n\n  return query;\n}\n/** Encodes a NamedQuery proto object to a NamedQuery model object. */\n\n\nfunction fromProtoNamedQuery(namedQuery) {\n  return {\n    name: namedQuery.name,\n    query: fromBundledQuery(namedQuery.bundledQuery),\n    readTime: fromVersion(namedQuery.readTime)\n  };\n}\n/** Decodes a BundleMetadata proto into a BundleMetadata object. */\n\n\nfunction fromBundleMetadata(metadata) {\n  return {\n    id: metadata.id,\n    version: metadata.version,\n    createTime: fromVersion(metadata.createTime)\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar IndexedDbBundleCache =\n/** @class */\nfunction () {\n  function IndexedDbBundleCache() {}\n\n  IndexedDbBundleCache.prototype.getBundleMetadata = function (transaction, bundleId) {\n    return bundlesStore(transaction).get(bundleId).next(function (bundle) {\n      if (bundle) {\n        return fromDbBundle(bundle);\n      }\n\n      return undefined;\n    });\n  };\n\n  IndexedDbBundleCache.prototype.saveBundleMetadata = function (transaction, bundleMetadata) {\n    return bundlesStore(transaction).put(toDbBundle(bundleMetadata));\n  };\n\n  IndexedDbBundleCache.prototype.getNamedQuery = function (transaction, queryName) {\n    return namedQueriesStore(transaction).get(queryName).next(function (query) {\n      if (query) {\n        return fromDbNamedQuery(query);\n      }\n\n      return undefined;\n    });\n  };\n\n  IndexedDbBundleCache.prototype.saveNamedQuery = function (transaction, query) {\n    return namedQueriesStore(transaction).put(toDbNamedQuery(query));\n  };\n\n  return IndexedDbBundleCache;\n}();\n/**\r\n * Helper to get a typed SimpleDbStore for the bundles object store.\r\n */\n\n\nfunction bundlesStore(txn) {\n  return getStore(txn, DbBundle.store);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the namedQueries object store.\r\n */\n\n\nfunction namedQueriesStore(txn) {\n  return getStore(txn, DbNamedQuery.store);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An in-memory implementation of IndexManager.\r\n */\n\n\nvar MemoryIndexManager =\n/** @class */\nfunction () {\n  function MemoryIndexManager() {\n    this.collectionParentIndex = new MemoryCollectionParentIndex();\n  }\n\n  MemoryIndexManager.prototype.addToCollectionParentIndex = function (transaction, collectionPath) {\n    this.collectionParentIndex.add(collectionPath);\n    return PersistencePromise.resolve();\n  };\n\n  MemoryIndexManager.prototype.getCollectionParents = function (transaction, collectionId) {\n    return PersistencePromise.resolve(this.collectionParentIndex.getEntries(collectionId));\n  };\n\n  return MemoryIndexManager;\n}();\n/**\r\n * Internal implementation of the collection-parent index exposed by MemoryIndexManager.\r\n * Also used for in-memory caching by IndexedDbIndexManager and initial index population\r\n * in indexeddb_schema.ts\r\n */\n\n\nvar MemoryCollectionParentIndex =\n/** @class */\nfunction () {\n  function MemoryCollectionParentIndex() {\n    this.index = {};\n  } // Returns false if the entry already existed.\n\n\n  MemoryCollectionParentIndex.prototype.add = function (collectionPath) {\n    var collectionId = collectionPath.lastSegment();\n    var parentPath = collectionPath.popLast();\n    var existingParents = this.index[collectionId] || new SortedSet(ResourcePath.comparator);\n    var added = !existingParents.has(parentPath);\n    this.index[collectionId] = existingParents.add(parentPath);\n    return added;\n  };\n\n  MemoryCollectionParentIndex.prototype.has = function (collectionPath) {\n    var collectionId = collectionPath.lastSegment();\n    var parentPath = collectionPath.popLast();\n    var existingParents = this.index[collectionId];\n    return existingParents && existingParents.has(parentPath);\n  };\n\n  MemoryCollectionParentIndex.prototype.getEntries = function (collectionId) {\n    var parentPaths = this.index[collectionId] || new SortedSet(ResourcePath.comparator);\n    return parentPaths.toArray();\n  };\n\n  return MemoryCollectionParentIndex;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A persisted implementation of IndexManager.\r\n */\n\n\nvar IndexedDbIndexManager =\n/** @class */\nfunction () {\n  function IndexedDbIndexManager() {\n    /**\r\n     * An in-memory copy of the index entries we've already written since the SDK\r\n     * launched. Used to avoid re-writing the same entry repeatedly.\r\n     *\r\n     * This is *NOT* a complete cache of what's in persistence and so can never be used to\r\n     * satisfy reads.\r\n     */\n    this.collectionParentsCache = new MemoryCollectionParentIndex();\n  }\n  /**\r\n   * Adds a new entry to the collection parent index.\r\n   *\r\n   * Repeated calls for the same collectionPath should be avoided within a\r\n   * transaction as IndexedDbIndexManager only caches writes once a transaction\r\n   * has been committed.\r\n   */\n\n\n  IndexedDbIndexManager.prototype.addToCollectionParentIndex = function (transaction, collectionPath) {\n    var _this = this;\n\n    if (!this.collectionParentsCache.has(collectionPath)) {\n      var collectionId = collectionPath.lastSegment();\n      var parentPath = collectionPath.popLast();\n      transaction.addOnCommittedListener(function () {\n        // Add the collection to the in memory cache only if the transaction was\n        // successfully committed.\n        _this.collectionParentsCache.add(collectionPath);\n      });\n      var collectionParent = {\n        collectionId: collectionId,\n        parent: encodeResourcePath(parentPath)\n      };\n      return collectionParentsStore(transaction).put(collectionParent);\n    }\n\n    return PersistencePromise.resolve();\n  };\n\n  IndexedDbIndexManager.prototype.getCollectionParents = function (transaction, collectionId) {\n    var parentPaths = [];\n    var range = IDBKeyRange.bound([collectionId, ''], [immediateSuccessor(collectionId), ''],\n    /*lowerOpen=*/\n    false,\n    /*upperOpen=*/\n    true);\n    return collectionParentsStore(transaction).loadAll(range).next(function (entries) {\n      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n        var entry = entries_1[_i]; // This collectionId guard shouldn't be necessary (and isn't as long\n        // as we're running in a real browser), but there's a bug in\n        // indexeddbshim that breaks our range in our tests running in node:\n        // https://github.com/axemclion/IndexedDBShim/issues/334\n\n        if (entry.collectionId !== collectionId) {\n          break;\n        }\n\n        parentPaths.push(decodeResourcePath(entry.parent));\n      }\n\n      return parentPaths;\n    });\n  };\n\n  return IndexedDbIndexManager;\n}();\n/**\r\n * Helper to get a typed SimpleDbStore for the collectionParents\r\n * document store.\r\n */\n\n\nfunction collectionParentsStore(txn) {\n  return getStore(txn, DbCollectionParent.store);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Delete a mutation batch and the associated document mutations.\r\n * @returns A PersistencePromise of the document mutations that were removed.\r\n */\n\n\nfunction removeMutationBatch(txn, userId, batch) {\n  var mutationStore = txn.store(DbMutationBatch.store);\n  var indexTxn = txn.store(DbDocumentMutation.store);\n  var promises = [];\n  var range = IDBKeyRange.only(batch.batchId);\n  var numDeleted = 0;\n  var removePromise = mutationStore.iterate({\n    range: range\n  }, function (key, value, control) {\n    numDeleted++;\n    return control.delete();\n  });\n  promises.push(removePromise.next(function () {\n    hardAssert(numDeleted === 1);\n  }));\n  var removedDocuments = [];\n\n  for (var _i = 0, _d = batch.mutations; _i < _d.length; _i++) {\n    var mutation = _d[_i];\n    var indexKey = DbDocumentMutation.key(userId, mutation.key.path, batch.batchId);\n    promises.push(indexTxn.delete(indexKey));\n    removedDocuments.push(mutation.key);\n  }\n\n  return PersistencePromise.waitFor(promises).next(function () {\n    return removedDocuments;\n  });\n}\n/**\r\n * Returns an approximate size for the given document.\r\n */\n\n\nfunction dbDocumentSize(doc) {\n  if (!doc) {\n    return 0;\n  }\n\n  var value;\n\n  if (doc.document) {\n    value = doc.document;\n  } else if (doc.unknownDocument) {\n    value = doc.unknownDocument;\n  } else if (doc.noDocument) {\n    value = doc.noDocument;\n  } else {\n    throw fail();\n  }\n\n  return JSON.stringify(value).length;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** A mutation queue for a specific user, backed by IndexedDB. */\n\n\nvar IndexedDbMutationQueue =\n/** @class */\nfunction () {\n  function IndexedDbMutationQueue(\n  /**\r\n   * The normalized userId (e.g. null UID => \"\" userId) used to store /\r\n   * retrieve mutations.\r\n   */\n  userId, serializer, indexManager, referenceDelegate) {\n    this.userId = userId;\n    this.serializer = serializer;\n    this.indexManager = indexManager;\n    this.referenceDelegate = referenceDelegate;\n    /**\r\n     * Caches the document keys for pending mutation batches. If the mutation\r\n     * has been removed from IndexedDb, the cached value may continue to\r\n     * be used to retrieve the batch's document keys. To remove a cached value\r\n     * locally, `removeCachedMutationKeys()` should be invoked either directly\r\n     * or through `removeMutationBatches()`.\r\n     *\r\n     * With multi-tab, when the primary client acknowledges or rejects a mutation,\r\n     * this cache is used by secondary clients to invalidate the local\r\n     * view of the documents that were previously affected by the mutation.\r\n     */\n    // PORTING NOTE: Multi-tab only.\n\n    this.documentKeysByBatchId = {};\n  }\n  /**\r\n   * Creates a new mutation queue for the given user.\r\n   * @param user - The user for which to create a mutation queue.\r\n   * @param serializer - The serializer to use when persisting to IndexedDb.\r\n   */\n\n\n  IndexedDbMutationQueue.forUser = function (user, serializer, indexManager, referenceDelegate) {\n    // TODO(mcg): Figure out what constraints there are on userIDs\n    // In particular, are there any reserved characters? are empty ids allowed?\n    // For the moment store these together in the same mutations table assuming\n    // that empty userIDs aren't allowed.\n    hardAssert(user.uid !== '');\n    var userId = user.isAuthenticated() ? user.uid : '';\n    return new IndexedDbMutationQueue(userId, serializer, indexManager, referenceDelegate);\n  };\n\n  IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {\n    var empty = true;\n    var range = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);\n    return mutationsStore(transaction).iterate({\n      index: DbMutationBatch.userMutationsIndex,\n      range: range\n    }, function (key, value, control) {\n      empty = false;\n      control.done();\n    }).next(function () {\n      return empty;\n    });\n  };\n\n  IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, baseMutations, mutations) {\n    var _this = this;\n\n    var documentStore = documentMutationsStore(transaction);\n    var mutationStore = mutationsStore(transaction); // The IndexedDb implementation in Chrome (and Firefox) does not handle\n    // compound indices that include auto-generated keys correctly. To ensure\n    // that the index entry is added correctly in all browsers, we perform two\n    // writes: The first write is used to retrieve the next auto-generated Batch\n    // ID, and the second write populates the index and stores the actual\n    // mutation batch.\n    // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972\n    // We write an empty object to obtain key\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    return mutationStore.add({}).next(function (batchId) {\n      hardAssert(typeof batchId === 'number');\n      var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);\n      var dbBatch = toDbMutationBatch(_this.serializer, _this.userId, batch);\n      var promises = [];\n      var collectionParents = new SortedSet(function (l, r) {\n        return primitiveComparator(l.canonicalString(), r.canonicalString());\n      });\n\n      for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n        var mutation = mutations_1[_i];\n        var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);\n        collectionParents = collectionParents.add(mutation.key.path.popLast());\n        promises.push(mutationStore.put(dbBatch));\n        promises.push(documentStore.put(indexKey, DbDocumentMutation.PLACEHOLDER));\n      }\n\n      collectionParents.forEach(function (parent) {\n        promises.push(_this.indexManager.addToCollectionParentIndex(transaction, parent));\n      });\n      transaction.addOnCommittedListener(function () {\n        _this.documentKeysByBatchId[batchId] = batch.keys();\n      });\n      return PersistencePromise.waitFor(promises).next(function () {\n        return batch;\n      });\n    });\n  };\n\n  IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n    var _this = this;\n\n    return mutationsStore(transaction).get(batchId).next(function (dbBatch) {\n      if (dbBatch) {\n        hardAssert(dbBatch.userId === _this.userId);\n        return fromDbMutationBatch(_this.serializer, dbBatch);\n      }\n\n      return null;\n    });\n  };\n  /**\r\n   * Returns the document keys for the mutation batch with the given batchId.\r\n   * For primary clients, this method returns `null` after\r\n   * `removeMutationBatches()` has been called. Secondary clients return a\r\n   * cached result until `removeCachedMutationKeys()` is invoked.\r\n   */\n  // PORTING NOTE: Multi-tab only.\n\n\n  IndexedDbMutationQueue.prototype.lookupMutationKeys = function (transaction, batchId) {\n    var _this = this;\n\n    if (this.documentKeysByBatchId[batchId]) {\n      return PersistencePromise.resolve(this.documentKeysByBatchId[batchId]);\n    } else {\n      return this.lookupMutationBatch(transaction, batchId).next(function (batch) {\n        if (batch) {\n          var keys = batch.keys();\n          _this.documentKeysByBatchId[batchId] = keys;\n          return keys;\n        } else {\n          return null;\n        }\n      });\n    }\n  };\n\n  IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n    var _this = this;\n\n    var nextBatchId = batchId + 1;\n    var range = IDBKeyRange.lowerBound([this.userId, nextBatchId]);\n    var foundBatch = null;\n    return mutationsStore(transaction).iterate({\n      index: DbMutationBatch.userMutationsIndex,\n      range: range\n    }, function (key, dbBatch, control) {\n      if (dbBatch.userId === _this.userId) {\n        hardAssert(dbBatch.batchId >= nextBatchId);\n        foundBatch = fromDbMutationBatch(_this.serializer, dbBatch);\n      }\n\n      control.done();\n    }).next(function () {\n      return foundBatch;\n    });\n  };\n\n  IndexedDbMutationQueue.prototype.getHighestUnacknowledgedBatchId = function (transaction) {\n    var range = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]);\n    var batchId = BATCHID_UNKNOWN;\n    return mutationsStore(transaction).iterate({\n      index: DbMutationBatch.userMutationsIndex,\n      range: range,\n      reverse: true\n    }, function (key, dbBatch, control) {\n      batchId = dbBatch.batchId;\n      control.done();\n    }).next(function () {\n      return batchId;\n    });\n  };\n\n  IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n    var _this = this;\n\n    var range = IDBKeyRange.bound([this.userId, BATCHID_UNKNOWN], [this.userId, Number.POSITIVE_INFINITY]);\n    return mutationsStore(transaction).loadAll(DbMutationBatch.userMutationsIndex, range).next(function (dbBatches) {\n      return dbBatches.map(function (dbBatch) {\n        return fromDbMutationBatch(_this.serializer, dbBatch);\n      });\n    });\n  };\n\n  IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n    var _this = this; // Scan the document-mutation index starting with a prefix starting with\n    // the given documentKey.\n\n\n    var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);\n    var indexStart = IDBKeyRange.lowerBound(indexPrefix);\n    var results = [];\n    return documentMutationsStore(transaction).iterate({\n      range: indexStart\n    }, function (indexKey, _, control) {\n      var userID = indexKey[0],\n          encodedPath = indexKey[1],\n          batchId = indexKey[2]; // Only consider rows matching exactly the specific key of\n      // interest. Note that because we order by path first, and we\n      // order terminators before path separators, we'll encounter all\n      // the index rows for documentKey contiguously. In particular, all\n      // the rows for documentKey will occur before any rows for\n      // documents nested in a subcollection beneath documentKey so we\n      // can stop as soon as we hit any such row.\n\n      var path = decodeResourcePath(encodedPath);\n\n      if (userID !== _this.userId || !documentKey.path.isEqual(path)) {\n        control.done();\n        return;\n      } // Look up the mutation batch in the store.\n\n\n      return mutationsStore(transaction).get(batchId).next(function (mutation) {\n        if (!mutation) {\n          throw fail();\n        }\n\n        hardAssert(mutation.userId === _this.userId);\n        results.push(fromDbMutationBatch(_this.serializer, mutation));\n      });\n    }).next(function () {\n      return results;\n    });\n  };\n\n  IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKeys = function (transaction, documentKeys) {\n    var _this = this;\n\n    var uniqueBatchIDs = new SortedSet(primitiveComparator);\n    var promises = [];\n    documentKeys.forEach(function (documentKey) {\n      var indexStart = DbDocumentMutation.prefixForPath(_this.userId, documentKey.path);\n      var range = IDBKeyRange.lowerBound(indexStart);\n      var promise = documentMutationsStore(transaction).iterate({\n        range: range\n      }, function (indexKey, _, control) {\n        var userID = indexKey[0],\n            encodedPath = indexKey[1],\n            batchID = indexKey[2]; // Only consider rows matching exactly the specific key of\n        // interest. Note that because we order by path first, and we\n        // order terminators before path separators, we'll encounter all\n        // the index rows for documentKey contiguously. In particular, all\n        // the rows for documentKey will occur before any rows for\n        // documents nested in a subcollection beneath documentKey so we\n        // can stop as soon as we hit any such row.\n\n        var path = decodeResourcePath(encodedPath);\n\n        if (userID !== _this.userId || !documentKey.path.isEqual(path)) {\n          control.done();\n          return;\n        }\n\n        uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n      });\n      promises.push(promise);\n    });\n    return PersistencePromise.waitFor(promises).next(function () {\n      return _this.lookupMutationBatches(transaction, uniqueBatchIDs);\n    });\n  };\n\n  IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n    var _this = this;\n\n    var queryPath = query.path;\n    var immediateChildrenLength = queryPath.length + 1; // TODO(mcg): Actually implement a single-collection query\n    //\n    // This is actually executing an ancestor query, traversing the whole\n    // subtree below the collection which can be horrifically inefficient for\n    // some structures. The right way to solve this is to implement the full\n    // value index, but that's not in the cards in the near future so this is\n    // the best we can do for the moment.\n    //\n    // Since we don't yet index the actual properties in the mutations, our\n    // current approach is to just return all mutation batches that affect\n    // documents in the collection being queried.\n\n    var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);\n    var indexStart = IDBKeyRange.lowerBound(indexPrefix); // Collect up unique batchIDs encountered during a scan of the index. Use a\n    // SortedSet to accumulate batch IDs so they can be traversed in order in a\n    // scan of the main table.\n\n    var uniqueBatchIDs = new SortedSet(primitiveComparator);\n    return documentMutationsStore(transaction).iterate({\n      range: indexStart\n    }, function (indexKey, _, control) {\n      var userID = indexKey[0],\n          encodedPath = indexKey[1],\n          batchID = indexKey[2];\n      var path = decodeResourcePath(encodedPath);\n\n      if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {\n        control.done();\n        return;\n      } // Rows with document keys more than one segment longer than the\n      // query path can't be matches. For example, a query on 'rooms'\n      // can't match the document /rooms/abc/messages/xyx.\n      // TODO(mcg): we'll need a different scanner when we implement\n      // ancestor queries.\n\n\n      if (path.length !== immediateChildrenLength) {\n        return;\n      }\n\n      uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n    }).next(function () {\n      return _this.lookupMutationBatches(transaction, uniqueBatchIDs);\n    });\n  };\n\n  IndexedDbMutationQueue.prototype.lookupMutationBatches = function (transaction, batchIDs) {\n    var _this = this;\n\n    var results = [];\n    var promises = []; // TODO(rockwood): Implement this using iterate.\n\n    batchIDs.forEach(function (batchId) {\n      promises.push(mutationsStore(transaction).get(batchId).next(function (mutation) {\n        if (mutation === null) {\n          throw fail();\n        }\n\n        hardAssert(mutation.userId === _this.userId);\n        results.push(fromDbMutationBatch(_this.serializer, mutation));\n      }));\n    });\n    return PersistencePromise.waitFor(promises).next(function () {\n      return results;\n    });\n  };\n\n  IndexedDbMutationQueue.prototype.removeMutationBatch = function (transaction, batch) {\n    var _this = this;\n\n    return removeMutationBatch(transaction.simpleDbTransaction, this.userId, batch).next(function (removedDocuments) {\n      transaction.addOnCommittedListener(function () {\n        _this.removeCachedMutationKeys(batch.batchId);\n      });\n      return PersistencePromise.forEach(removedDocuments, function (key) {\n        return _this.referenceDelegate.markPotentiallyOrphaned(transaction, key);\n      });\n    });\n  };\n  /**\r\n   * Clears the cached keys for a mutation batch. This method should be\r\n   * called by secondary clients after they process mutation updates.\r\n   *\r\n   * Note that this method does not have to be called from primary clients as\r\n   * the corresponding cache entries are cleared when an acknowledged or\r\n   * rejected batch is removed from the mutation queue.\r\n   */\n  // PORTING NOTE: Multi-tab only\n\n\n  IndexedDbMutationQueue.prototype.removeCachedMutationKeys = function (batchId) {\n    delete this.documentKeysByBatchId[batchId];\n  };\n\n  IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {\n    var _this = this;\n\n    return this.checkEmpty(txn).next(function (empty) {\n      if (!empty) {\n        return PersistencePromise.resolve();\n      } // Verify that there are no entries in the documentMutations index if\n      // the queue is empty.\n\n\n      var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));\n      var danglingMutationReferences = [];\n      return documentMutationsStore(txn).iterate({\n        range: startRange\n      }, function (key, _, control) {\n        var userID = key[0];\n\n        if (userID !== _this.userId) {\n          control.done();\n          return;\n        } else {\n          var path = decodeResourcePath(key[1]);\n          danglingMutationReferences.push(path);\n        }\n      }).next(function () {\n        hardAssert(danglingMutationReferences.length === 0);\n      });\n    });\n  };\n\n  IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {\n    return mutationQueueContainsKey(txn, this.userId, key);\n  }; // PORTING NOTE: Multi-tab only (state is held in memory in other clients).\n\n  /** Returns the mutation queue's metadata from IndexedDb. */\n\n\n  IndexedDbMutationQueue.prototype.getMutationQueueMetadata = function (transaction) {\n    var _this = this;\n\n    return mutationQueuesStore(transaction).get(this.userId).next(function (metadata) {\n      return metadata || new DbMutationQueue(_this.userId, BATCHID_UNKNOWN,\n      /*lastStreamToken=*/\n      '');\n    });\n  };\n\n  return IndexedDbMutationQueue;\n}();\n/**\r\n * @returns true if the mutation queue for the given user contains a pending\r\n *         mutation for the given key.\r\n */\n\n\nfunction mutationQueueContainsKey(txn, userId, key) {\n  var indexKey = DbDocumentMutation.prefixForPath(userId, key.path);\n  var encodedPath = indexKey[1];\n  var startRange = IDBKeyRange.lowerBound(indexKey);\n  var containsKey = false;\n  return documentMutationsStore(txn).iterate({\n    range: startRange,\n    keysOnly: true\n  }, function (key, value, control) {\n    var userID = key[0],\n        keyPath = key[1];\n    /*batchID*/\n\n    key[2];\n\n    if (userID === userId && keyPath === encodedPath) {\n      containsKey = true;\n    }\n\n    control.done();\n  }).next(function () {\n    return containsKey;\n  });\n}\n/** Returns true if any mutation queue contains the given document. */\n\n\nfunction mutationQueuesContainKey(txn, docKey) {\n  var found = false;\n  return mutationQueuesStore(txn).iterateSerial(function (userId) {\n    return mutationQueueContainsKey(txn, userId, docKey).next(function (containsKey) {\n      if (containsKey) {\n        found = true;\n      }\n\n      return PersistencePromise.resolve(!containsKey);\n    });\n  }).next(function () {\n    return found;\n  });\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the mutations object store.\r\n */\n\n\nfunction mutationsStore(txn) {\n  return getStore(txn, DbMutationBatch.store);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\r\n */\n\n\nfunction documentMutationsStore(txn) {\n  return getStore(txn, DbDocumentMutation.store);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\r\n */\n\n\nfunction mutationQueuesStore(txn) {\n  return getStore(txn, DbMutationQueue.store);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Offset to ensure non-overlapping target ids. */\n\n\nvar OFFSET = 2;\n/**\r\n * Generates monotonically increasing target IDs for sending targets to the\r\n * watch stream.\r\n *\r\n * The client constructs two generators, one for the target cache, and one for\r\n * for the sync engine (to generate limbo documents targets). These\r\n * generators produce non-overlapping IDs (by using even and odd IDs\r\n * respectively).\r\n *\r\n * By separating the target ID space, the query cache can generate target IDs\r\n * that persist across client restarts, while sync engine can independently\r\n * generate in-memory target IDs that are transient and can be reused after a\r\n * restart.\r\n */\n\nvar TargetIdGenerator =\n/** @class */\nfunction () {\n  function TargetIdGenerator(lastId) {\n    this.lastId = lastId;\n  }\n\n  TargetIdGenerator.prototype.next = function () {\n    this.lastId += OFFSET;\n    return this.lastId;\n  };\n\n  TargetIdGenerator.forTargetCache = function () {\n    // The target cache generator must return '2' in its first call to `next()`\n    // as there is no differentiation in the protocol layer between an unset\n    // number and the number '0'. If we were to sent a target with target ID\n    // '0', the backend would consider it unset and replace it with its own ID.\n    return new TargetIdGenerator(2 - OFFSET);\n  };\n\n  TargetIdGenerator.forSyncEngine = function () {\n    // Sync engine assigns target IDs for limbo document detection.\n    return new TargetIdGenerator(1 - OFFSET);\n  };\n\n  return TargetIdGenerator;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar IndexedDbTargetCache =\n/** @class */\nfunction () {\n  function IndexedDbTargetCache(referenceDelegate, serializer) {\n    this.referenceDelegate = referenceDelegate;\n    this.serializer = serializer;\n  } // PORTING NOTE: We don't cache global metadata for the target cache, since\n  // some of it (in particular `highestTargetId`) can be modified by secondary\n  // tabs. We could perhaps be more granular (and e.g. still cache\n  // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go\n  // to IndexedDb whenever we need to read metadata. We can revisit if it turns\n  // out to have a meaningful performance impact.\n\n\n  IndexedDbTargetCache.prototype.allocateTargetId = function (transaction) {\n    var _this = this;\n\n    return this.retrieveMetadata(transaction).next(function (metadata) {\n      var targetIdGenerator = new TargetIdGenerator(metadata.highestTargetId);\n      metadata.highestTargetId = targetIdGenerator.next();\n      return _this.saveMetadata(transaction, metadata).next(function () {\n        return metadata.highestTargetId;\n      });\n    });\n  };\n\n  IndexedDbTargetCache.prototype.getLastRemoteSnapshotVersion = function (transaction) {\n    return this.retrieveMetadata(transaction).next(function (metadata) {\n      return SnapshotVersion.fromTimestamp(new Timestamp(metadata.lastRemoteSnapshotVersion.seconds, metadata.lastRemoteSnapshotVersion.nanoseconds));\n    });\n  };\n\n  IndexedDbTargetCache.prototype.getHighestSequenceNumber = function (transaction) {\n    return this.retrieveMetadata(transaction).next(function (targetGlobal) {\n      return targetGlobal.highestListenSequenceNumber;\n    });\n  };\n\n  IndexedDbTargetCache.prototype.setTargetsMetadata = function (transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {\n    var _this = this;\n\n    return this.retrieveMetadata(transaction).next(function (metadata) {\n      metadata.highestListenSequenceNumber = highestListenSequenceNumber;\n\n      if (lastRemoteSnapshotVersion) {\n        metadata.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();\n      }\n\n      if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {\n        metadata.highestListenSequenceNumber = highestListenSequenceNumber;\n      }\n\n      return _this.saveMetadata(transaction, metadata);\n    });\n  };\n\n  IndexedDbTargetCache.prototype.addTargetData = function (transaction, targetData) {\n    var _this = this;\n\n    return this.saveTargetData(transaction, targetData).next(function () {\n      return _this.retrieveMetadata(transaction).next(function (metadata) {\n        metadata.targetCount += 1;\n\n        _this.updateMetadataFromTargetData(targetData, metadata);\n\n        return _this.saveMetadata(transaction, metadata);\n      });\n    });\n  };\n\n  IndexedDbTargetCache.prototype.updateTargetData = function (transaction, targetData) {\n    return this.saveTargetData(transaction, targetData);\n  };\n\n  IndexedDbTargetCache.prototype.removeTargetData = function (transaction, targetData) {\n    var _this = this;\n\n    return this.removeMatchingKeysForTargetId(transaction, targetData.targetId).next(function () {\n      return targetsStore(transaction).delete(targetData.targetId);\n    }).next(function () {\n      return _this.retrieveMetadata(transaction);\n    }).next(function (metadata) {\n      hardAssert(metadata.targetCount > 0);\n      metadata.targetCount -= 1;\n      return _this.saveMetadata(transaction, metadata);\n    });\n  };\n  /**\r\n   * Drops any targets with sequence number less than or equal to the upper bound, excepting those\r\n   * present in `activeTargetIds`. Document associations for the removed targets are also removed.\r\n   * Returns the number of targets removed.\r\n   */\n\n\n  IndexedDbTargetCache.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {\n    var _this = this;\n\n    var count = 0;\n    var promises = [];\n    return targetsStore(txn).iterate(function (key, value) {\n      var targetData = fromDbTarget(value);\n\n      if (targetData.sequenceNumber <= upperBound && activeTargetIds.get(targetData.targetId) === null) {\n        count++;\n        promises.push(_this.removeTargetData(txn, targetData));\n      }\n    }).next(function () {\n      return PersistencePromise.waitFor(promises);\n    }).next(function () {\n      return count;\n    });\n  };\n  /**\r\n   * Call provided function with each `TargetData` that we have cached.\r\n   */\n\n\n  IndexedDbTargetCache.prototype.forEachTarget = function (txn, f) {\n    return targetsStore(txn).iterate(function (key, value) {\n      var targetData = fromDbTarget(value);\n      f(targetData);\n    });\n  };\n\n  IndexedDbTargetCache.prototype.retrieveMetadata = function (transaction) {\n    return globalTargetStore(transaction).get(DbTargetGlobal.key).next(function (metadata) {\n      hardAssert(metadata !== null);\n      return metadata;\n    });\n  };\n\n  IndexedDbTargetCache.prototype.saveMetadata = function (transaction, metadata) {\n    return globalTargetStore(transaction).put(DbTargetGlobal.key, metadata);\n  };\n\n  IndexedDbTargetCache.prototype.saveTargetData = function (transaction, targetData) {\n    return targetsStore(transaction).put(toDbTarget(this.serializer, targetData));\n  };\n  /**\r\n   * In-place updates the provided metadata to account for values in the given\r\n   * TargetData. Saving is done separately. Returns true if there were any\r\n   * changes to the metadata.\r\n   */\n\n\n  IndexedDbTargetCache.prototype.updateMetadataFromTargetData = function (targetData, metadata) {\n    var updated = false;\n\n    if (targetData.targetId > metadata.highestTargetId) {\n      metadata.highestTargetId = targetData.targetId;\n      updated = true;\n    }\n\n    if (targetData.sequenceNumber > metadata.highestListenSequenceNumber) {\n      metadata.highestListenSequenceNumber = targetData.sequenceNumber;\n      updated = true;\n    }\n\n    return updated;\n  };\n\n  IndexedDbTargetCache.prototype.getTargetCount = function (transaction) {\n    return this.retrieveMetadata(transaction).next(function (metadata) {\n      return metadata.targetCount;\n    });\n  };\n\n  IndexedDbTargetCache.prototype.getTargetData = function (transaction, target) {\n    // Iterating by the canonicalId may yield more than one result because\n    // canonicalId values are not required to be unique per target. This query\n    // depends on the queryTargets index to be efficient.\n    var canonicalId = canonifyTarget(target);\n    var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n    var result = null;\n    return targetsStore(transaction).iterate({\n      range: range,\n      index: DbTarget.queryTargetsIndexName\n    }, function (key, value, control) {\n      var found = fromDbTarget(value); // After finding a potential match, check that the target is\n      // actually equal to the requested target.\n\n      if (targetEquals(target, found.target)) {\n        result = found;\n        control.done();\n      }\n    }).next(function () {\n      return result;\n    });\n  };\n\n  IndexedDbTargetCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n    var _this = this; // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n    // IndexedDb.\n\n\n    var promises = [];\n    var store = documentTargetStore(txn);\n    keys.forEach(function (key) {\n      var path = encodeResourcePath(key.path);\n      promises.push(store.put(new DbTargetDocument(targetId, path)));\n      promises.push(_this.referenceDelegate.addReference(txn, targetId, key));\n    });\n    return PersistencePromise.waitFor(promises);\n  };\n\n  IndexedDbTargetCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n    var _this = this; // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n    // IndexedDb.\n\n\n    var store = documentTargetStore(txn);\n    return PersistencePromise.forEach(keys, function (key) {\n      var path = encodeResourcePath(key.path);\n      return PersistencePromise.waitFor([store.delete([targetId, path]), _this.referenceDelegate.removeReference(txn, targetId, key)]);\n    });\n  };\n\n  IndexedDbTargetCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n    var store = documentTargetStore(txn);\n    var range = IDBKeyRange.bound([targetId], [targetId + 1],\n    /*lowerOpen=*/\n    false,\n    /*upperOpen=*/\n    true);\n    return store.delete(range);\n  };\n\n  IndexedDbTargetCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n    var range = IDBKeyRange.bound([targetId], [targetId + 1],\n    /*lowerOpen=*/\n    false,\n    /*upperOpen=*/\n    true);\n    var store = documentTargetStore(txn);\n    var result = documentKeySet();\n    return store.iterate({\n      range: range,\n      keysOnly: true\n    }, function (key, _, control) {\n      var path = decodeResourcePath(key[1]);\n      var docKey = new DocumentKey(path);\n      result = result.add(docKey);\n    }).next(function () {\n      return result;\n    });\n  };\n\n  IndexedDbTargetCache.prototype.containsKey = function (txn, key) {\n    var path = encodeResourcePath(key.path);\n    var range = IDBKeyRange.bound([path], [immediateSuccessor(path)],\n    /*lowerOpen=*/\n    false,\n    /*upperOpen=*/\n    true);\n    var count = 0;\n    return documentTargetStore(txn).iterate({\n      index: DbTargetDocument.documentTargetsIndex,\n      keysOnly: true,\n      range: range\n    }, function (_d, _, control) {\n      var targetId = _d[0];\n      _d[1]; // Having a sentinel row for a document does not count as containing that document;\n      // For the target cache, containing the document means the document is part of some\n      // target.\n\n      if (targetId !== 0) {\n        count++;\n        control.done();\n      }\n    }).next(function () {\n      return count > 0;\n    });\n  };\n  /**\r\n   * Looks up a TargetData entry by target ID.\r\n   *\r\n   * @param targetId - The target ID of the TargetData entry to look up.\r\n   * @returns The cached TargetData entry, or null if the cache has no entry for\r\n   * the target.\r\n   */\n  // PORTING NOTE: Multi-tab only.\n\n\n  IndexedDbTargetCache.prototype.getTargetDataForTarget = function (transaction, targetId) {\n    return targetsStore(transaction).get(targetId).next(function (found) {\n      if (found) {\n        return fromDbTarget(found);\n      } else {\n        return null;\n      }\n    });\n  };\n\n  return IndexedDbTargetCache;\n}();\n/**\r\n * Helper to get a typed SimpleDbStore for the queries object store.\r\n */\n\n\nfunction targetsStore(txn) {\n  return getStore(txn, DbTarget.store);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the target globals object store.\r\n */\n\n\nfunction globalTargetStore(txn) {\n  return getStore(txn, DbTargetGlobal.store);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the document target object store.\r\n */\n\n\nfunction documentTargetStore(txn) {\n  return getStore(txn, DbTargetDocument.store);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Verifies the error thrown by a LocalStore operation. If a LocalStore\r\n * operation fails because the primary lease has been taken by another client,\r\n * we ignore the error (the persistence layer will immediately call\r\n * `applyPrimaryLease` to propagate the primary state change). All other errors\r\n * are re-thrown.\r\n *\r\n * @param err - An error returned by a LocalStore operation.\r\n * @returns A Promise that resolves after we recovered, or the original error.\r\n */\n\n\nfunction ignoreIfPrimaryLeaseLoss(err) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_d) {\n      if (err.code === Code.FAILED_PRECONDITION && err.message === PRIMARY_LEASE_LOST_ERROR_MSG) {\n        logDebug('LocalStore', 'Unexpectedly lost primary lease');\n      } else {\n        throw err;\n      }\n\n      return [2\n      /*return*/\n      ];\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar GC_DID_NOT_RUN = {\n  didRun: false,\n  sequenceNumbersCollected: 0,\n  targetsRemoved: 0,\n  documentsRemoved: 0\n};\nvar LRU_COLLECTION_DISABLED = -1;\nvar LRU_DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;\n\nvar LruParams =\n/** @class */\nfunction () {\n  function LruParams( // When we attempt to collect, we will only do so if the cache size is greater than this\n  // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.\n  cacheSizeCollectionThreshold, // The percentage of sequence numbers that we will attempt to collect\n  percentileToCollect, // A cap on the total number of sequence numbers that will be collected. This prevents\n  // us from collecting a huge number of sequence numbers if the cache has grown very large.\n  maximumSequenceNumbersToCollect) {\n    this.cacheSizeCollectionThreshold = cacheSizeCollectionThreshold;\n    this.percentileToCollect = percentileToCollect;\n    this.maximumSequenceNumbersToCollect = maximumSequenceNumbersToCollect;\n  }\n\n  LruParams.withCacheSize = function (cacheSize) {\n    return new LruParams(cacheSize, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);\n  };\n\n  return LruParams;\n}();\n\nLruParams.DEFAULT_COLLECTION_PERCENTILE = 10;\nLruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;\nLruParams.DEFAULT = new LruParams(LRU_DEFAULT_CACHE_SIZE_BYTES, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);\nLruParams.DISABLED = new LruParams(LRU_COLLECTION_DISABLED, 0, 0);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar LOG_TAG$e = 'LruGarbageCollector';\nvar LRU_MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;\n/** How long we wait to try running LRU GC after SDK initialization. */\n\nvar INITIAL_GC_DELAY_MS = 1 * 60 * 1000;\n/** Minimum amount of time between GC checks, after the first one. */\n\nvar REGULAR_GC_DELAY_MS = 5 * 60 * 1000;\n\nfunction bufferEntryComparator(_d, _e) {\n  var aSequence = _d[0],\n      aIndex = _d[1];\n  var bSequence = _e[0],\n      bIndex = _e[1];\n  var seqCmp = primitiveComparator(aSequence, bSequence);\n\n  if (seqCmp === 0) {\n    // This order doesn't matter, but we can bias against churn by sorting\n    // entries created earlier as less than newer entries.\n    return primitiveComparator(aIndex, bIndex);\n  } else {\n    return seqCmp;\n  }\n}\n/**\r\n * Used to calculate the nth sequence number. Keeps a rolling buffer of the\r\n * lowest n values passed to `addElement`, and finally reports the largest of\r\n * them in `maxValue`.\r\n */\n\n\nvar RollingSequenceNumberBuffer =\n/** @class */\nfunction () {\n  function RollingSequenceNumberBuffer(maxElements) {\n    this.maxElements = maxElements;\n    this.buffer = new SortedSet(bufferEntryComparator);\n    this.previousIndex = 0;\n  }\n\n  RollingSequenceNumberBuffer.prototype.nextIndex = function () {\n    return ++this.previousIndex;\n  };\n\n  RollingSequenceNumberBuffer.prototype.addElement = function (sequenceNumber) {\n    var entry = [sequenceNumber, this.nextIndex()];\n\n    if (this.buffer.size < this.maxElements) {\n      this.buffer = this.buffer.add(entry);\n    } else {\n      var highestValue = this.buffer.last();\n\n      if (bufferEntryComparator(entry, highestValue) < 0) {\n        this.buffer = this.buffer.delete(highestValue).add(entry);\n      }\n    }\n  };\n\n  Object.defineProperty(RollingSequenceNumberBuffer.prototype, \"maxValue\", {\n    get: function () {\n      // Guaranteed to be non-empty. If we decide we are not collecting any\n      // sequence numbers, nthSequenceNumber below short-circuits. If we have\n      // decided that we are collecting n sequence numbers, it's because n is some\n      // percentage of the existing sequence numbers. That means we should never\n      // be in a situation where we are collecting sequence numbers but don't\n      // actually have any.\n      return this.buffer.last()[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return RollingSequenceNumberBuffer;\n}();\n/**\r\n * This class is responsible for the scheduling of LRU garbage collection. It handles checking\r\n * whether or not GC is enabled, as well as which delay to use before the next run.\r\n */\n\n\nvar LruScheduler =\n/** @class */\nfunction () {\n  function LruScheduler(garbageCollector, asyncQueue) {\n    this.garbageCollector = garbageCollector;\n    this.asyncQueue = asyncQueue;\n    this.hasRun = false;\n    this.gcTask = null;\n  }\n\n  LruScheduler.prototype.start = function (localStore) {\n    if (this.garbageCollector.params.cacheSizeCollectionThreshold !== LRU_COLLECTION_DISABLED) {\n      this.scheduleGC(localStore);\n    }\n  };\n\n  LruScheduler.prototype.stop = function () {\n    if (this.gcTask) {\n      this.gcTask.cancel();\n      this.gcTask = null;\n    }\n  };\n\n  Object.defineProperty(LruScheduler.prototype, \"started\", {\n    get: function () {\n      return this.gcTask !== null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  LruScheduler.prototype.scheduleGC = function (localStore) {\n    var _this = this;\n\n    var delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;\n    logDebug('LruGarbageCollector', \"Garbage collection scheduled in \" + delay + \"ms\");\n    this.gcTask = this.asyncQueue.enqueueAfterDelay(\"lru_garbage_collection\"\n    /* LruGarbageCollection */\n    , delay, function () {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        var e_1;\n        return tslib.__generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              this.gcTask = null;\n              this.hasRun = true;\n              _d.label = 1;\n\n            case 1:\n              _d.trys.push([1, 3,, 7]);\n\n              return [4\n              /*yield*/\n              , localStore.collectGarbage(this.garbageCollector)];\n\n            case 2:\n              _d.sent();\n\n              return [3\n              /*break*/\n              , 7];\n\n            case 3:\n              e_1 = _d.sent();\n              if (!isIndexedDbTransactionError(e_1)) return [3\n              /*break*/\n              , 4];\n              logDebug(LOG_TAG$e, 'Ignoring IndexedDB error during garbage collection: ', e_1);\n              return [3\n              /*break*/\n              , 6];\n\n            case 4:\n              return [4\n              /*yield*/\n              , ignoreIfPrimaryLeaseLoss(e_1)];\n\n            case 5:\n              _d.sent();\n\n              _d.label = 6;\n\n            case 6:\n              return [3\n              /*break*/\n              , 7];\n\n            case 7:\n              return [4\n              /*yield*/\n              , this.scheduleGC(localStore)];\n\n            case 8:\n              _d.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  return LruScheduler;\n}();\n/** Implements the steps for LRU garbage collection. */\n\n\nvar LruGarbageCollectorImpl =\n/** @class */\nfunction () {\n  function LruGarbageCollectorImpl(delegate, params) {\n    this.delegate = delegate;\n    this.params = params;\n  }\n\n  LruGarbageCollectorImpl.prototype.calculateTargetCount = function (txn, percentile) {\n    return this.delegate.getSequenceNumberCount(txn).next(function (targetCount) {\n      return Math.floor(percentile / 100.0 * targetCount);\n    });\n  };\n\n  LruGarbageCollectorImpl.prototype.nthSequenceNumber = function (txn, n) {\n    var _this = this;\n\n    if (n === 0) {\n      return PersistencePromise.resolve(ListenSequence.INVALID);\n    }\n\n    var buffer = new RollingSequenceNumberBuffer(n);\n    return this.delegate.forEachTarget(txn, function (target) {\n      return buffer.addElement(target.sequenceNumber);\n    }).next(function () {\n      return _this.delegate.forEachOrphanedDocumentSequenceNumber(txn, function (sequenceNumber) {\n        return buffer.addElement(sequenceNumber);\n      });\n    }).next(function () {\n      return buffer.maxValue;\n    });\n  };\n\n  LruGarbageCollectorImpl.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {\n    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);\n  };\n\n  LruGarbageCollectorImpl.prototype.removeOrphanedDocuments = function (txn, upperBound) {\n    return this.delegate.removeOrphanedDocuments(txn, upperBound);\n  };\n\n  LruGarbageCollectorImpl.prototype.collect = function (txn, activeTargetIds) {\n    var _this = this;\n\n    if (this.params.cacheSizeCollectionThreshold === LRU_COLLECTION_DISABLED) {\n      logDebug('LruGarbageCollector', 'Garbage collection skipped; disabled');\n      return PersistencePromise.resolve(GC_DID_NOT_RUN);\n    }\n\n    return this.getCacheSize(txn).next(function (cacheSize) {\n      if (cacheSize < _this.params.cacheSizeCollectionThreshold) {\n        logDebug('LruGarbageCollector', \"Garbage collection skipped; Cache size \" + cacheSize + \" \" + (\"is lower than threshold \" + _this.params.cacheSizeCollectionThreshold));\n        return GC_DID_NOT_RUN;\n      } else {\n        return _this.runGarbageCollection(txn, activeTargetIds);\n      }\n    });\n  };\n\n  LruGarbageCollectorImpl.prototype.getCacheSize = function (txn) {\n    return this.delegate.getCacheSize(txn);\n  };\n\n  LruGarbageCollectorImpl.prototype.runGarbageCollection = function (txn, activeTargetIds) {\n    var _this = this;\n\n    var upperBoundSequenceNumber;\n    var sequenceNumbersToCollect, targetsRemoved; // Timestamps for various pieces of the process\n\n    var countedTargetsTs, foundUpperBoundTs, removedTargetsTs, removedDocumentsTs;\n    var startTs = Date.now();\n    return this.calculateTargetCount(txn, this.params.percentileToCollect).next(function (sequenceNumbers) {\n      // Cap at the configured max\n      if (sequenceNumbers > _this.params.maximumSequenceNumbersToCollect) {\n        logDebug('LruGarbageCollector', 'Capping sequence numbers to collect down ' + (\"to the maximum of \" + _this.params.maximumSequenceNumbersToCollect + \" \") + (\"from \" + sequenceNumbers));\n        sequenceNumbersToCollect = _this.params.maximumSequenceNumbersToCollect;\n      } else {\n        sequenceNumbersToCollect = sequenceNumbers;\n      }\n\n      countedTargetsTs = Date.now();\n      return _this.nthSequenceNumber(txn, sequenceNumbersToCollect);\n    }).next(function (upperBound) {\n      upperBoundSequenceNumber = upperBound;\n      foundUpperBoundTs = Date.now();\n      return _this.removeTargets(txn, upperBoundSequenceNumber, activeTargetIds);\n    }).next(function (numTargetsRemoved) {\n      targetsRemoved = numTargetsRemoved;\n      removedTargetsTs = Date.now();\n      return _this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);\n    }).next(function (documentsRemoved) {\n      removedDocumentsTs = Date.now();\n\n      if (getLogLevel() <= logger.LogLevel.DEBUG) {\n        var desc = 'LRU Garbage Collection\\n' + (\"\\tCounted targets in \" + (countedTargetsTs - startTs) + \"ms\\n\") + (\"\\tDetermined least recently used \" + sequenceNumbersToCollect + \" in \") + (foundUpperBoundTs - countedTargetsTs + \"ms\\n\") + (\"\\tRemoved \" + targetsRemoved + \" targets in \") + (removedTargetsTs - foundUpperBoundTs + \"ms\\n\") + (\"\\tRemoved \" + documentsRemoved + \" documents in \") + (removedDocumentsTs - removedTargetsTs + \"ms\\n\") + (\"Total Duration: \" + (removedDocumentsTs - startTs) + \"ms\");\n        logDebug('LruGarbageCollector', desc);\n      }\n\n      return PersistencePromise.resolve({\n        didRun: true,\n        sequenceNumbersCollected: sequenceNumbersToCollect,\n        targetsRemoved: targetsRemoved,\n        documentsRemoved: documentsRemoved\n      });\n    });\n  };\n\n  return LruGarbageCollectorImpl;\n}();\n\nfunction newLruGarbageCollector(delegate, params) {\n  return new LruGarbageCollectorImpl(delegate, params);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Provides LRU functionality for IndexedDB persistence. */\n\n\nvar IndexedDbLruDelegateImpl =\n/** @class */\nfunction () {\n  function IndexedDbLruDelegateImpl(db, params) {\n    this.db = db;\n    this.garbageCollector = newLruGarbageCollector(this, params);\n  }\n\n  IndexedDbLruDelegateImpl.prototype.getSequenceNumberCount = function (txn) {\n    var docCountPromise = this.orphanedDocumentCount(txn);\n    var targetCountPromise = this.db.getTargetCache().getTargetCount(txn);\n    return targetCountPromise.next(function (targetCount) {\n      return docCountPromise.next(function (docCount) {\n        return targetCount + docCount;\n      });\n    });\n  };\n\n  IndexedDbLruDelegateImpl.prototype.orphanedDocumentCount = function (txn) {\n    var orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, function (_) {\n      orphanedCount++;\n    }).next(function () {\n      return orphanedCount;\n    });\n  };\n\n  IndexedDbLruDelegateImpl.prototype.forEachTarget = function (txn, f) {\n    return this.db.getTargetCache().forEachTarget(txn, f);\n  };\n\n  IndexedDbLruDelegateImpl.prototype.forEachOrphanedDocumentSequenceNumber = function (txn, f) {\n    return this.forEachOrphanedDocument(txn, function (docKey, sequenceNumber) {\n      return f(sequenceNumber);\n    });\n  };\n\n  IndexedDbLruDelegateImpl.prototype.addReference = function (txn, targetId, key) {\n    return writeSentinelKey(txn, key);\n  };\n\n  IndexedDbLruDelegateImpl.prototype.removeReference = function (txn, targetId, key) {\n    return writeSentinelKey(txn, key);\n  };\n\n  IndexedDbLruDelegateImpl.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {\n    return this.db.getTargetCache().removeTargets(txn, upperBound, activeTargetIds);\n  };\n\n  IndexedDbLruDelegateImpl.prototype.markPotentiallyOrphaned = function (txn, key) {\n    return writeSentinelKey(txn, key);\n  };\n  /**\r\n   * Returns true if anything would prevent this document from being garbage\r\n   * collected, given that the document in question is not present in any\r\n   * targets and has a sequence number less than or equal to the upper bound for\r\n   * the collection run.\r\n   */\n\n\n  IndexedDbLruDelegateImpl.prototype.isPinned = function (txn, docKey) {\n    return mutationQueuesContainKey(txn, docKey);\n  };\n\n  IndexedDbLruDelegateImpl.prototype.removeOrphanedDocuments = function (txn, upperBound) {\n    var _this = this;\n\n    var documentCache = this.db.getRemoteDocumentCache();\n    var changeBuffer = documentCache.newChangeBuffer();\n    var promises = [];\n    var documentCount = 0;\n    var iteration = this.forEachOrphanedDocument(txn, function (docKey, sequenceNumber) {\n      if (sequenceNumber <= upperBound) {\n        var p = _this.isPinned(txn, docKey).next(function (isPinned) {\n          if (!isPinned) {\n            documentCount++; // Our size accounting requires us to read all documents before\n            // removing them.\n\n            return changeBuffer.getEntry(txn, docKey).next(function () {\n              changeBuffer.removeEntry(docKey);\n              return documentTargetStore(txn).delete(sentinelKey$1(docKey));\n            });\n          }\n        });\n\n        promises.push(p);\n      }\n    });\n    return iteration.next(function () {\n      return PersistencePromise.waitFor(promises);\n    }).next(function () {\n      return changeBuffer.apply(txn);\n    }).next(function () {\n      return documentCount;\n    });\n  };\n\n  IndexedDbLruDelegateImpl.prototype.removeTarget = function (txn, targetData) {\n    var updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.db.getTargetCache().updateTargetData(txn, updated);\n  };\n\n  IndexedDbLruDelegateImpl.prototype.updateLimboDocument = function (txn, key) {\n    return writeSentinelKey(txn, key);\n  };\n  /**\r\n   * Call provided function for each document in the cache that is 'orphaned'. Orphaned\r\n   * means not a part of any target, so the only entry in the target-document index for\r\n   * that document will be the sentinel row (targetId 0), which will also have the sequence\r\n   * number for the last time the document was accessed.\r\n   */\n\n\n  IndexedDbLruDelegateImpl.prototype.forEachOrphanedDocument = function (txn, f) {\n    var store = documentTargetStore(txn);\n    var nextToReport = ListenSequence.INVALID;\n    var nextPath;\n    return store.iterate({\n      index: DbTargetDocument.documentTargetsIndex\n    }, function (_d, _e) {\n      var targetId = _d[0];\n      _d[1];\n      var path = _e.path,\n          sequenceNumber = _e.sequenceNumber;\n\n      if (targetId === 0) {\n        // if nextToReport is valid, report it, this is a new key so the\n        // last one must not be a member of any targets.\n        if (nextToReport !== ListenSequence.INVALID) {\n          f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\n        } // set nextToReport to be this sequence number. It's the next one we\n        // might report, if we don't find any targets for this document.\n        // Note that the sequence number must be defined when the targetId\n        // is 0.\n\n\n        nextToReport = sequenceNumber;\n        nextPath = path;\n      } else {\n        // set nextToReport to be invalid, we know we don't need to report\n        // this one since we found a target for it.\n        nextToReport = ListenSequence.INVALID;\n      }\n    }).next(function () {\n      // Since we report sequence numbers after getting to the next key, we\n      // need to check if the last key we iterated over was an orphaned\n      // document and report it.\n      if (nextToReport !== ListenSequence.INVALID) {\n        f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\n      }\n    });\n  };\n\n  IndexedDbLruDelegateImpl.prototype.getCacheSize = function (txn) {\n    return this.db.getRemoteDocumentCache().getSize(txn);\n  };\n\n  return IndexedDbLruDelegateImpl;\n}();\n\nfunction sentinelKey$1(key) {\n  return [0, encodeResourcePath(key.path)];\n}\n/**\r\n * @returns A value suitable for writing a sentinel row in the target-document\r\n * store.\r\n */\n\n\nfunction sentinelRow(key, sequenceNumber) {\n  return new DbTargetDocument(0, encodeResourcePath(key.path), sequenceNumber);\n}\n\nfunction writeSentinelKey(txn, key) {\n  return documentTargetStore(txn).put(sentinelRow(key, txn.currentSequenceNumber));\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A map implementation that uses objects as keys. Objects must have an\r\n * associated equals function and must be immutable. Entries in the map are\r\n * stored together with the key being produced from the mapKeyFn. This map\r\n * automatically handles collisions of keys.\r\n */\n\n\nvar ObjectMap =\n/** @class */\nfunction () {\n  function ObjectMap(mapKeyFn, equalsFn) {\n    this.mapKeyFn = mapKeyFn;\n    this.equalsFn = equalsFn;\n    /**\r\n     * The inner map for a key/value pair. Due to the possibility of collisions we\r\n     * keep a list of entries that we do a linear search through to find an actual\r\n     * match. Note that collisions should be rare, so we still expect near\r\n     * constant time lookups in practice.\r\n     */\n\n    this.inner = {};\n  }\n  /** Get a value for this key, or undefined if it does not exist. */\n\n\n  ObjectMap.prototype.get = function (key) {\n    var id = this.mapKeyFn(key);\n    var matches = this.inner[id];\n\n    if (matches === undefined) {\n      return undefined;\n    }\n\n    for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n      var _d = matches_1[_i],\n          otherKey = _d[0],\n          value = _d[1];\n\n      if (this.equalsFn(otherKey, key)) {\n        return value;\n      }\n    }\n\n    return undefined;\n  };\n\n  ObjectMap.prototype.has = function (key) {\n    return this.get(key) !== undefined;\n  };\n  /** Put this key and value in the map. */\n\n\n  ObjectMap.prototype.set = function (key, value) {\n    var id = this.mapKeyFn(key);\n    var matches = this.inner[id];\n\n    if (matches === undefined) {\n      this.inner[id] = [[key, value]];\n      return;\n    }\n\n    for (var i = 0; i < matches.length; i++) {\n      if (this.equalsFn(matches[i][0], key)) {\n        matches[i] = [key, value];\n        return;\n      }\n    }\n\n    matches.push([key, value]);\n  };\n  /**\r\n   * Remove this key from the map. Returns a boolean if anything was deleted.\r\n   */\n\n\n  ObjectMap.prototype.delete = function (key) {\n    var id = this.mapKeyFn(key);\n    var matches = this.inner[id];\n\n    if (matches === undefined) {\n      return false;\n    }\n\n    for (var i = 0; i < matches.length; i++) {\n      if (this.equalsFn(matches[i][0], key)) {\n        if (matches.length === 1) {\n          delete this.inner[id];\n        } else {\n          matches.splice(i, 1);\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  ObjectMap.prototype.forEach = function (fn) {\n    forEach(this.inner, function (_, entries) {\n      for (var _i = 0, entries_2 = entries; _i < entries_2.length; _i++) {\n        var _d = entries_2[_i],\n            k = _d[0],\n            v = _d[1];\n        fn(k, v);\n      }\n    });\n  };\n\n  ObjectMap.prototype.isEmpty = function () {\n    return isEmpty(this.inner);\n  };\n\n  return ObjectMap;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\r\n * It can be used to batch up a set of changes to be written to the cache, but\r\n * additionally supports reading entries back with the `getEntry()` method,\r\n * falling back to the underlying RemoteDocumentCache if no entry is\r\n * buffered.\r\n *\r\n * Entries added to the cache *must* be read first. This is to facilitate\r\n * calculating the size delta of the pending changes.\r\n *\r\n * PORTING NOTE: This class was implemented then removed from other platforms.\r\n * If byte-counting ends up being needed on the other platforms, consider\r\n * porting this class as part of that implementation work.\r\n */\n\n\nvar RemoteDocumentChangeBuffer =\n/** @class */\nfunction () {\n  function RemoteDocumentChangeBuffer() {\n    // A mapping of document key to the new cache entry that should be written (or null if any\n    // existing cache entry should be removed).\n    this.changes = new ObjectMap(function (key) {\n      return key.toString();\n    }, function (l, r) {\n      return l.isEqual(r);\n    });\n    this.changesApplied = false;\n  }\n\n  RemoteDocumentChangeBuffer.prototype.getReadTime = function (key) {\n    var change = this.changes.get(key);\n\n    if (change) {\n      return change.readTime;\n    }\n\n    return SnapshotVersion.min();\n  };\n  /**\r\n   * Buffers a `RemoteDocumentCache.addEntry()` call.\r\n   *\r\n   * You can only modify documents that have already been retrieved via\r\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\r\n   */\n\n\n  RemoteDocumentChangeBuffer.prototype.addEntry = function (document, readTime) {\n    this.assertNotApplied();\n    this.changes.set(document.key, {\n      document: document,\n      readTime: readTime\n    });\n  };\n  /**\r\n   * Buffers a `RemoteDocumentCache.removeEntry()` call.\r\n   *\r\n   * You can only remove documents that have already been retrieved via\r\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\r\n   */\n\n\n  RemoteDocumentChangeBuffer.prototype.removeEntry = function (key, readTime) {\n    if (readTime === void 0) {\n      readTime = null;\n    }\n\n    this.assertNotApplied();\n    this.changes.set(key, {\n      document: MutableDocument.newInvalidDocument(key),\n      readTime: readTime\n    });\n  };\n  /**\r\n   * Looks up an entry in the cache. The buffered changes will first be checked,\r\n   * and if no buffered change applies, this will forward to\r\n   * `RemoteDocumentCache.getEntry()`.\r\n   *\r\n   * @param transaction - The transaction in which to perform any persistence\r\n   *     operations.\r\n   * @param documentKey - The key of the entry to look up.\r\n   * @returns The cached document or an invalid document if we have nothing\r\n   * cached.\r\n   */\n\n\n  RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {\n    this.assertNotApplied();\n    var bufferedEntry = this.changes.get(documentKey);\n\n    if (bufferedEntry !== undefined) {\n      return PersistencePromise.resolve(bufferedEntry.document);\n    } else {\n      return this.getFromCache(transaction, documentKey);\n    }\n  };\n  /**\r\n   * Looks up several entries in the cache, forwarding to\r\n   * `RemoteDocumentCache.getEntry()`.\r\n   *\r\n   * @param transaction - The transaction in which to perform any persistence\r\n   *     operations.\r\n   * @param documentKeys - The keys of the entries to look up.\r\n   * @returns A map of cached documents, indexed by key. If an entry cannot be\r\n   *     found, the corresponding key will be mapped to an invalid document.\r\n   */\n\n\n  RemoteDocumentChangeBuffer.prototype.getEntries = function (transaction, documentKeys) {\n    return this.getAllFromCache(transaction, documentKeys);\n  };\n  /**\r\n   * Applies buffered changes to the underlying RemoteDocumentCache, using\r\n   * the provided transaction.\r\n   */\n\n\n  RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {\n    this.assertNotApplied();\n    this.changesApplied = true;\n    return this.applyChanges(transaction);\n  };\n  /** Helper to assert this.changes is not null  */\n\n\n  RemoteDocumentChangeBuffer.prototype.assertNotApplied = function () {};\n\n  return RemoteDocumentChangeBuffer;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The RemoteDocumentCache for IndexedDb. To construct, invoke\r\n * `newIndexedDbRemoteDocumentCache()`.\r\n */\n\n\nvar IndexedDbRemoteDocumentCacheImpl =\n/** @class */\nfunction () {\n  /**\r\n   * @param serializer - The document serializer.\r\n   * @param indexManager - The query indexes that need to be maintained.\r\n   */\n  function IndexedDbRemoteDocumentCacheImpl(serializer, indexManager) {\n    this.serializer = serializer;\n    this.indexManager = indexManager;\n  }\n  /**\r\n   * Adds the supplied entries to the cache.\r\n   *\r\n   * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer\r\n   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\r\n   */\n\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.addEntry = function (transaction, key, doc) {\n    var documentStore = remoteDocumentsStore(transaction);\n    return documentStore.put(dbKey(key), doc);\n  };\n  /**\r\n   * Removes a document from the cache.\r\n   *\r\n   * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer\r\n   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\r\n   */\n\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.removeEntry = function (transaction, documentKey) {\n    var store = remoteDocumentsStore(transaction);\n    var key = dbKey(documentKey);\n    return store.delete(key);\n  };\n  /**\r\n   * Updates the current cache size.\r\n   *\r\n   * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the\r\n   * cache's metadata.\r\n   */\n\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.updateMetadata = function (transaction, sizeDelta) {\n    var _this = this;\n\n    return this.getMetadata(transaction).next(function (metadata) {\n      metadata.byteSize += sizeDelta;\n      return _this.setMetadata(transaction, metadata);\n    });\n  };\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.getEntry = function (transaction, documentKey) {\n    var _this = this;\n\n    return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function (dbRemoteDoc) {\n      return _this.maybeDecodeDocument(documentKey, dbRemoteDoc);\n    });\n  };\n  /**\r\n   * Looks up an entry in the cache.\r\n   *\r\n   * @param documentKey - The key of the entry to look up.\r\n   * @returns The cached document entry and its size.\r\n   */\n\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.getSizedEntry = function (transaction, documentKey) {\n    var _this = this;\n\n    return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function (dbRemoteDoc) {\n      var doc = _this.maybeDecodeDocument(documentKey, dbRemoteDoc);\n\n      return {\n        document: doc,\n        size: dbDocumentSize(dbRemoteDoc)\n      };\n    });\n  };\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.getEntries = function (transaction, documentKeys) {\n    var _this = this;\n\n    var results = mutableDocumentMap();\n    return this.forEachDbEntry(transaction, documentKeys, function (key, dbRemoteDoc) {\n      var doc = _this.maybeDecodeDocument(key, dbRemoteDoc);\n\n      results = results.insert(key, doc);\n    }).next(function () {\n      return results;\n    });\n  };\n  /**\r\n   * Looks up several entries in the cache.\r\n   *\r\n   * @param documentKeys - The set of keys entries to look up.\r\n   * @returns A map of documents indexed by key and a map of sizes indexed by\r\n   *     key (zero if the document does not exist).\r\n   */\n\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.getSizedEntries = function (transaction, documentKeys) {\n    var _this = this;\n\n    var results = mutableDocumentMap();\n    var sizeMap = new SortedMap(DocumentKey.comparator);\n    return this.forEachDbEntry(transaction, documentKeys, function (key, dbRemoteDoc) {\n      var doc = _this.maybeDecodeDocument(key, dbRemoteDoc);\n\n      results = results.insert(key, doc);\n      sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc));\n    }).next(function () {\n      return {\n        documents: results,\n        sizeMap: sizeMap\n      };\n    });\n  };\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.forEachDbEntry = function (transaction, documentKeys, callback) {\n    if (documentKeys.isEmpty()) {\n      return PersistencePromise.resolve();\n    }\n\n    var range = IDBKeyRange.bound(documentKeys.first().path.toArray(), documentKeys.last().path.toArray());\n    var keyIter = documentKeys.getIterator();\n    var nextKey = keyIter.getNext();\n    return remoteDocumentsStore(transaction).iterate({\n      range: range\n    }, function (potentialKeyRaw, dbRemoteDoc, control) {\n      var potentialKey = DocumentKey.fromSegments(potentialKeyRaw); // Go through keys not found in cache.\n\n      while (nextKey && DocumentKey.comparator(nextKey, potentialKey) < 0) {\n        callback(nextKey, null);\n        nextKey = keyIter.getNext();\n      }\n\n      if (nextKey && nextKey.isEqual(potentialKey)) {\n        // Key found in cache.\n        callback(nextKey, dbRemoteDoc);\n        nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\n      } // Skip to the next key (if there is one).\n\n\n      if (nextKey) {\n        control.skip(nextKey.path.toArray());\n      } else {\n        control.done();\n      }\n    }).next(function () {\n      // The rest of the keys are not in the cache. One case where `iterate`\n      // above won't go through them is when the cache is empty.\n      while (nextKey) {\n        callback(nextKey, null);\n        nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\n      }\n    });\n  };\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.getDocumentsMatchingQuery = function (transaction, query, sinceReadTime) {\n    var _this = this;\n\n    var results = mutableDocumentMap();\n    var immediateChildrenPathLength = query.path.length + 1;\n    var iterationOptions = {};\n\n    if (sinceReadTime.isEqual(SnapshotVersion.min())) {\n      // Documents are ordered by key, so we can use a prefix scan to narrow\n      // down the documents we need to match the query against.\n      var startKey = query.path.toArray();\n      iterationOptions.range = IDBKeyRange.lowerBound(startKey);\n    } else {\n      // Execute an index-free query and filter by read time. This is safe\n      // since all document changes to queries that have a\n      // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.\n      var collectionKey = query.path.toArray();\n      var readTimeKey = toDbTimestampKey(sinceReadTime);\n      iterationOptions.range = IDBKeyRange.lowerBound([collectionKey, readTimeKey],\n      /* open= */\n      true);\n      iterationOptions.index = DbRemoteDocument.collectionReadTimeIndex;\n    }\n\n    return remoteDocumentsStore(transaction).iterate(iterationOptions, function (key, dbRemoteDoc, control) {\n      // The query is actually returning any path that starts with the query\n      // path prefix which may include documents in subcollections. For\n      // example, a query on 'rooms' will return rooms/abc/messages/xyx but we\n      // shouldn't match it. Fix this by discarding rows with document keys\n      // more than one segment longer than the query path.\n      if (key.length !== immediateChildrenPathLength) {\n        return;\n      }\n\n      var document = fromDbRemoteDocument(_this.serializer, dbRemoteDoc);\n\n      if (!query.path.isPrefixOf(document.key.path)) {\n        control.done();\n      } else if (queryMatches(query, document)) {\n        results = results.insert(document.key, document);\n      }\n    }).next(function () {\n      return results;\n    });\n  };\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.newChangeBuffer = function (options) {\n    return new IndexedDbRemoteDocumentChangeBuffer(this, !!options && options.trackRemovals);\n  };\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.getSize = function (txn) {\n    return this.getMetadata(txn).next(function (metadata) {\n      return metadata.byteSize;\n    });\n  };\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.getMetadata = function (txn) {\n    return documentGlobalStore(txn).get(DbRemoteDocumentGlobal.key).next(function (metadata) {\n      hardAssert(!!metadata);\n      return metadata;\n    });\n  };\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.setMetadata = function (txn, metadata) {\n    return documentGlobalStore(txn).put(DbRemoteDocumentGlobal.key, metadata);\n  };\n  /**\r\n   * Decodes `remoteDoc` and returns the document (or null, if the document\r\n   * corresponds to the format used for sentinel deletes).\r\n   */\n\n\n  IndexedDbRemoteDocumentCacheImpl.prototype.maybeDecodeDocument = function (documentKey, dbRemoteDoc) {\n    if (dbRemoteDoc) {\n      var doc_4 = fromDbRemoteDocument(this.serializer, dbRemoteDoc); // Whether the document is a sentinel removal and should only be used in the\n      // `getNewDocumentChanges()`\n\n      var isSentinelRemoval = doc_4.isNoDocument() && doc_4.version.isEqual(SnapshotVersion.min());\n\n      if (!isSentinelRemoval) {\n        return doc_4;\n      }\n    }\n\n    return MutableDocument.newInvalidDocument(documentKey);\n  };\n\n  return IndexedDbRemoteDocumentCacheImpl;\n}();\n/**\r\n * Creates a new IndexedDbRemoteDocumentCache.\r\n *\r\n * @param serializer - The document serializer.\r\n * @param indexManager - The query indexes that need to be maintained.\r\n */\n\n\nfunction newIndexedDbRemoteDocumentCache(serializer, indexManager) {\n  return new IndexedDbRemoteDocumentCacheImpl(serializer, indexManager);\n}\n/**\r\n * Returns the set of documents that have changed since the specified read\r\n * time.\r\n */\n// PORTING NOTE: This is only used for multi-tab synchronization.\n\n\nfunction remoteDocumentCacheGetNewDocumentChanges(remoteDocumentCache, transaction, sinceReadTime) {\n  var remoteDocumentCacheImpl = debugCast(remoteDocumentCache);\n  var changedDocs = mutableDocumentMap();\n  var lastReadTime = toDbTimestampKey(sinceReadTime);\n  var documentsStore = remoteDocumentsStore(transaction);\n  var range = IDBKeyRange.lowerBound(lastReadTime, true);\n  return documentsStore.iterate({\n    index: DbRemoteDocument.readTimeIndex,\n    range: range\n  }, function (_, dbRemoteDoc) {\n    // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses\n    // the documents directly since we want to keep sentinel deletes.\n    var doc = fromDbRemoteDocument(remoteDocumentCacheImpl.serializer, dbRemoteDoc);\n    changedDocs = changedDocs.insert(doc.key, doc);\n    lastReadTime = dbRemoteDoc.readTime;\n  }).next(function () {\n    return {\n      changedDocs: changedDocs,\n      readTime: fromDbTimestampKey(lastReadTime)\n    };\n  });\n}\n/**\r\n * Returns the read time of the most recently read document in the cache, or\r\n * SnapshotVersion.min() if not available.\r\n */\n// PORTING NOTE: This is only used for multi-tab synchronization.\n\n\nfunction remoteDocumentCacheGetLastReadTime(transaction) {\n  var documentsStore = remoteDocumentsStore(transaction); // If there are no existing entries, we return SnapshotVersion.min().\n\n  var readTime = SnapshotVersion.min();\n  return documentsStore.iterate({\n    index: DbRemoteDocument.readTimeIndex,\n    reverse: true\n  }, function (key, dbRemoteDoc, control) {\n    if (dbRemoteDoc.readTime) {\n      readTime = fromDbTimestampKey(dbRemoteDoc.readTime);\n    }\n\n    control.done();\n  }).next(function () {\n    return readTime;\n  });\n}\n/**\r\n * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.\r\n *\r\n * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size\r\n * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb\r\n * when we apply the changes.\r\n */\n\n\nvar IndexedDbRemoteDocumentChangeBuffer =\n/** @class */\nfunction (_super) {\n  tslib.__extends(IndexedDbRemoteDocumentChangeBuffer, _super);\n  /**\r\n   * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.\r\n   * @param trackRemovals - Whether to create sentinel deletes that can be tracked by\r\n   * `getNewDocumentChanges()`.\r\n   */\n\n\n  function IndexedDbRemoteDocumentChangeBuffer(documentCache, trackRemovals) {\n    var _this = _super.call(this) || this;\n\n    _this.documentCache = documentCache;\n    _this.trackRemovals = trackRemovals; // A map of document sizes prior to applying the changes in this buffer.\n\n    _this.documentSizes = new ObjectMap(function (key) {\n      return key.toString();\n    }, function (l, r) {\n      return l.isEqual(r);\n    });\n    return _this;\n  }\n\n  IndexedDbRemoteDocumentChangeBuffer.prototype.applyChanges = function (transaction) {\n    var _this = this;\n\n    var promises = [];\n    var sizeDelta = 0;\n    var collectionParents = new SortedSet(function (l, r) {\n      return primitiveComparator(l.canonicalString(), r.canonicalString());\n    });\n    this.changes.forEach(function (key, documentChange) {\n      var previousSize = _this.documentSizes.get(key);\n\n      if (documentChange.document.isValidDocument()) {\n        var doc_5 = toDbRemoteDocument(_this.documentCache.serializer, documentChange.document, _this.getReadTime(key));\n        collectionParents = collectionParents.add(key.path.popLast());\n        var size = dbDocumentSize(doc_5);\n        sizeDelta += size - previousSize;\n        promises.push(_this.documentCache.addEntry(transaction, key, doc_5));\n      } else {\n        sizeDelta -= previousSize;\n\n        if (_this.trackRemovals) {\n          // In order to track removals, we store a \"sentinel delete\" in the\n          // RemoteDocumentCache. This entry is represented by a NoDocument\n          // with a version of 0 and ignored by `maybeDecodeDocument()` but\n          // preserved in `getNewDocumentChanges()`.\n          var deletedDoc = toDbRemoteDocument(_this.documentCache.serializer, MutableDocument.newNoDocument(key, SnapshotVersion.min()), _this.getReadTime(key));\n          promises.push(_this.documentCache.addEntry(transaction, key, deletedDoc));\n        } else {\n          promises.push(_this.documentCache.removeEntry(transaction, key));\n        }\n      }\n    });\n    collectionParents.forEach(function (parent) {\n      promises.push(_this.documentCache.indexManager.addToCollectionParentIndex(transaction, parent));\n    });\n    promises.push(this.documentCache.updateMetadata(transaction, sizeDelta));\n    return PersistencePromise.waitFor(promises);\n  };\n\n  IndexedDbRemoteDocumentChangeBuffer.prototype.getFromCache = function (transaction, documentKey) {\n    var _this = this; // Record the size of everything we load from the cache so we can compute a delta later.\n\n\n    return this.documentCache.getSizedEntry(transaction, documentKey).next(function (getResult) {\n      _this.documentSizes.set(documentKey, getResult.size);\n\n      return getResult.document;\n    });\n  };\n\n  IndexedDbRemoteDocumentChangeBuffer.prototype.getAllFromCache = function (transaction, documentKeys) {\n    var _this = this; // Record the size of everything we load from the cache so we can compute\n    // a delta later.\n\n\n    return this.documentCache.getSizedEntries(transaction, documentKeys).next(function (_d) {\n      var documents = _d.documents,\n          sizeMap = _d.sizeMap; // Note: `getAllFromCache` returns two maps instead of a single map from\n      // keys to `DocumentSizeEntry`s. This is to allow returning the\n      // `MutableDocumentMap` directly, without a conversion.\n\n      sizeMap.forEach(function (documentKey, size) {\n        _this.documentSizes.set(documentKey, size);\n      });\n      return documents;\n    });\n  };\n\n  return IndexedDbRemoteDocumentChangeBuffer;\n}(RemoteDocumentChangeBuffer);\n\nfunction documentGlobalStore(txn) {\n  return getStore(txn, DbRemoteDocumentGlobal.store);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\r\n */\n\n\nfunction remoteDocumentsStore(txn) {\n  return getStore(txn, DbRemoteDocument.store);\n}\n\nfunction dbKey(docKey) {\n  return docKey.path.toArray();\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Performs database creation and schema upgrades. */\n\n\nvar SchemaConverter =\n/** @class */\nfunction () {\n  function SchemaConverter(serializer) {\n    this.serializer = serializer;\n  }\n  /**\r\n   * Performs database creation and schema upgrades.\r\n   *\r\n   * Note that in production, this method is only ever used to upgrade the schema\r\n   * to SCHEMA_VERSION. Different values of toVersion are only used for testing\r\n   * and local feature development.\r\n   */\n\n\n  SchemaConverter.prototype.createOrUpgrade = function (db, txn, fromVersion, toVersion) {\n    var _this = this;\n\n    hardAssert(fromVersion < toVersion && fromVersion >= 0 && toVersion <= SCHEMA_VERSION);\n    var simpleDbTransaction = new SimpleDbTransaction('createOrUpgrade', txn);\n\n    if (fromVersion < 1 && toVersion >= 1) {\n      createPrimaryClientStore(db);\n      createMutationQueue(db);\n      createQueryCache(db);\n      createRemoteDocumentCache(db);\n    } // Migration 2 to populate the targetGlobal object no longer needed since\n    // migration 3 unconditionally clears it.\n\n\n    var p = PersistencePromise.resolve();\n\n    if (fromVersion < 3 && toVersion >= 3) {\n      // Brand new clients don't need to drop and recreate--only clients that\n      // potentially have corrupt data.\n      if (fromVersion !== 0) {\n        dropQueryCache(db);\n        createQueryCache(db);\n      }\n\n      p = p.next(function () {\n        return writeEmptyTargetGlobalEntry(simpleDbTransaction);\n      });\n    }\n\n    if (fromVersion < 4 && toVersion >= 4) {\n      if (fromVersion !== 0) {\n        // Schema version 3 uses auto-generated keys to generate globally unique\n        // mutation batch IDs (this was previously ensured internally by the\n        // client). To migrate to the new schema, we have to read all mutations\n        // and write them back out. We preserve the existing batch IDs to guarantee\n        // consistency with other object stores. Any further mutation batch IDs will\n        // be auto-generated.\n        p = p.next(function () {\n          return upgradeMutationBatchSchemaAndMigrateData(db, simpleDbTransaction);\n        });\n      }\n\n      p = p.next(function () {\n        createClientMetadataStore(db);\n      });\n    }\n\n    if (fromVersion < 5 && toVersion >= 5) {\n      p = p.next(function () {\n        return _this.removeAcknowledgedMutations(simpleDbTransaction);\n      });\n    }\n\n    if (fromVersion < 6 && toVersion >= 6) {\n      p = p.next(function () {\n        createDocumentGlobalStore(db);\n        return _this.addDocumentGlobal(simpleDbTransaction);\n      });\n    }\n\n    if (fromVersion < 7 && toVersion >= 7) {\n      p = p.next(function () {\n        return _this.ensureSequenceNumbers(simpleDbTransaction);\n      });\n    }\n\n    if (fromVersion < 8 && toVersion >= 8) {\n      p = p.next(function () {\n        return _this.createCollectionParentIndex(db, simpleDbTransaction);\n      });\n    }\n\n    if (fromVersion < 9 && toVersion >= 9) {\n      p = p.next(function () {\n        // Multi-Tab used to manage its own changelog, but this has been moved\n        // to the DbRemoteDocument object store itself. Since the previous change\n        // log only contained transient data, we can drop its object store.\n        dropRemoteDocumentChangesStore(db);\n        createRemoteDocumentReadTimeIndex(txn);\n      });\n    }\n\n    if (fromVersion < 10 && toVersion >= 10) {\n      p = p.next(function () {\n        return _this.rewriteCanonicalIds(simpleDbTransaction);\n      });\n    }\n\n    if (fromVersion < 11 && toVersion >= 11) {\n      p = p.next(function () {\n        createBundlesStore(db);\n        createNamedQueriesStore(db);\n      });\n    }\n\n    return p;\n  };\n\n  SchemaConverter.prototype.addDocumentGlobal = function (txn) {\n    var byteCount = 0;\n    return txn.store(DbRemoteDocument.store).iterate(function (_, doc) {\n      byteCount += dbDocumentSize(doc);\n    }).next(function () {\n      var metadata = new DbRemoteDocumentGlobal(byteCount);\n      return txn.store(DbRemoteDocumentGlobal.store).put(DbRemoteDocumentGlobal.key, metadata);\n    });\n  };\n\n  SchemaConverter.prototype.removeAcknowledgedMutations = function (txn) {\n    var _this = this;\n\n    var queuesStore = txn.store(DbMutationQueue.store);\n    var mutationsStore = txn.store(DbMutationBatch.store);\n    return queuesStore.loadAll().next(function (queues) {\n      return PersistencePromise.forEach(queues, function (queue) {\n        var range = IDBKeyRange.bound([queue.userId, BATCHID_UNKNOWN], [queue.userId, queue.lastAcknowledgedBatchId]);\n        return mutationsStore.loadAll(DbMutationBatch.userMutationsIndex, range).next(function (dbBatches) {\n          return PersistencePromise.forEach(dbBatches, function (dbBatch) {\n            hardAssert(dbBatch.userId === queue.userId);\n            var batch = fromDbMutationBatch(_this.serializer, dbBatch);\n            return removeMutationBatch(txn, queue.userId, batch).next(function () {});\n          });\n        });\n      });\n    });\n  };\n  /**\r\n   * Ensures that every document in the remote document cache has a corresponding sentinel row\r\n   * with a sequence number. Missing rows are given the most recently used sequence number.\r\n   */\n\n\n  SchemaConverter.prototype.ensureSequenceNumbers = function (txn) {\n    var documentTargetStore = txn.store(DbTargetDocument.store);\n    var documentsStore = txn.store(DbRemoteDocument.store);\n    var globalTargetStore = txn.store(DbTargetGlobal.store);\n    return globalTargetStore.get(DbTargetGlobal.key).next(function (metadata) {\n      var writeSentinelKey = function (path) {\n        return documentTargetStore.put(new DbTargetDocument(0, encodeResourcePath(path), metadata.highestListenSequenceNumber));\n      };\n\n      var promises = [];\n      return documentsStore.iterate(function (key, doc) {\n        var path = new ResourcePath(key);\n        var docSentinelKey = sentinelKey(path);\n        promises.push(documentTargetStore.get(docSentinelKey).next(function (maybeSentinel) {\n          if (!maybeSentinel) {\n            return writeSentinelKey(path);\n          } else {\n            return PersistencePromise.resolve();\n          }\n        }));\n      }).next(function () {\n        return PersistencePromise.waitFor(promises);\n      });\n    });\n  };\n\n  SchemaConverter.prototype.createCollectionParentIndex = function (db, txn) {\n    // Create the index.\n    db.createObjectStore(DbCollectionParent.store, {\n      keyPath: DbCollectionParent.keyPath\n    });\n    var collectionParentsStore = txn.store(DbCollectionParent.store); // Helper to add an index entry iff we haven't already written it.\n\n    var cache = new MemoryCollectionParentIndex();\n\n    var addEntry = function (collectionPath) {\n      if (cache.add(collectionPath)) {\n        var collectionId = collectionPath.lastSegment();\n        var parentPath = collectionPath.popLast();\n        return collectionParentsStore.put({\n          collectionId: collectionId,\n          parent: encodeResourcePath(parentPath)\n        });\n      }\n    }; // Index existing remote documents.\n\n\n    return txn.store(DbRemoteDocument.store).iterate({\n      keysOnly: true\n    }, function (pathSegments, _) {\n      var path = new ResourcePath(pathSegments);\n      return addEntry(path.popLast());\n    }).next(function () {\n      // Index existing mutations.\n      return txn.store(DbDocumentMutation.store).iterate({\n        keysOnly: true\n      }, function (_d, _) {\n        _d[0];\n        var encodedPath = _d[1];\n        _d[2];\n        var path = decodeResourcePath(encodedPath);\n        return addEntry(path.popLast());\n      });\n    });\n  };\n\n  SchemaConverter.prototype.rewriteCanonicalIds = function (txn) {\n    var _this = this;\n\n    var targetStore = txn.store(DbTarget.store);\n    return targetStore.iterate(function (key, originalDbTarget) {\n      var originalTargetData = fromDbTarget(originalDbTarget);\n      var updatedDbTarget = toDbTarget(_this.serializer, originalTargetData);\n      return targetStore.put(updatedDbTarget);\n    });\n  };\n\n  return SchemaConverter;\n}();\n\nfunction sentinelKey(path) {\n  return [0, encodeResourcePath(path)];\n}\n\nfunction createPrimaryClientStore(db) {\n  db.createObjectStore(DbPrimaryClient.store);\n}\n\nfunction createMutationQueue(db) {\n  db.createObjectStore(DbMutationQueue.store, {\n    keyPath: DbMutationQueue.keyPath\n  });\n  var mutationBatchesStore = db.createObjectStore(DbMutationBatch.store, {\n    keyPath: DbMutationBatch.keyPath,\n    autoIncrement: true\n  });\n  mutationBatchesStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, {\n    unique: true\n  });\n  db.createObjectStore(DbDocumentMutation.store);\n}\n/**\r\n * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads\r\n * and rewrites all data.\r\n */\n\n\nfunction upgradeMutationBatchSchemaAndMigrateData(db, txn) {\n  var v1MutationsStore = txn.store(DbMutationBatch.store);\n  return v1MutationsStore.loadAll().next(function (existingMutations) {\n    db.deleteObjectStore(DbMutationBatch.store);\n    var mutationsStore = db.createObjectStore(DbMutationBatch.store, {\n      keyPath: DbMutationBatch.keyPath,\n      autoIncrement: true\n    });\n    mutationsStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, {\n      unique: true\n    });\n    var v3MutationsStore = txn.store(DbMutationBatch.store);\n    var writeAll = existingMutations.map(function (mutation) {\n      return v3MutationsStore.put(mutation);\n    });\n    return PersistencePromise.waitFor(writeAll);\n  });\n}\n\nfunction createRemoteDocumentCache(db) {\n  db.createObjectStore(DbRemoteDocument.store);\n}\n\nfunction createDocumentGlobalStore(db) {\n  db.createObjectStore(DbRemoteDocumentGlobal.store);\n}\n\nfunction createQueryCache(db) {\n  var targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, {\n    keyPath: DbTargetDocument.keyPath\n  });\n  targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, {\n    unique: true\n  });\n  var targetStore = db.createObjectStore(DbTarget.store, {\n    keyPath: DbTarget.keyPath\n  }); // NOTE: This is unique only because the TargetId is the suffix.\n\n  targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, {\n    unique: true\n  });\n  db.createObjectStore(DbTargetGlobal.store);\n}\n\nfunction dropQueryCache(db) {\n  db.deleteObjectStore(DbTargetDocument.store);\n  db.deleteObjectStore(DbTarget.store);\n  db.deleteObjectStore(DbTargetGlobal.store);\n}\n\nfunction dropRemoteDocumentChangesStore(db) {\n  if (db.objectStoreNames.contains('remoteDocumentChanges')) {\n    db.deleteObjectStore('remoteDocumentChanges');\n  }\n}\n/**\r\n * Creates the target global singleton row.\r\n *\r\n * @param txn - The version upgrade transaction for indexeddb\r\n */\n\n\nfunction writeEmptyTargetGlobalEntry(txn) {\n  var globalStore = txn.store(DbTargetGlobal.store);\n  var metadata = new DbTargetGlobal(\n  /*highestTargetId=*/\n  0,\n  /*lastListenSequenceNumber=*/\n  0, SnapshotVersion.min().toTimestamp(),\n  /*targetCount=*/\n  0);\n  return globalStore.put(DbTargetGlobal.key, metadata);\n}\n/**\r\n * Creates indices on the RemoteDocuments store used for both multi-tab\r\n * and Index-Free queries.\r\n */\n\n\nfunction createRemoteDocumentReadTimeIndex(txn) {\n  var remoteDocumentStore = txn.objectStore(DbRemoteDocument.store);\n  remoteDocumentStore.createIndex(DbRemoteDocument.readTimeIndex, DbRemoteDocument.readTimeIndexPath, {\n    unique: false\n  });\n  remoteDocumentStore.createIndex(DbRemoteDocument.collectionReadTimeIndex, DbRemoteDocument.collectionReadTimeIndexPath, {\n    unique: false\n  });\n}\n\nfunction createClientMetadataStore(db) {\n  db.createObjectStore(DbClientMetadata.store, {\n    keyPath: DbClientMetadata.keyPath\n  });\n}\n\nfunction createBundlesStore(db) {\n  db.createObjectStore(DbBundle.store, {\n    keyPath: DbBundle.keyPath\n  });\n}\n\nfunction createNamedQueriesStore(db) {\n  db.createObjectStore(DbNamedQuery.store, {\n    keyPath: DbNamedQuery.keyPath\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$d = 'IndexedDbPersistence';\n/**\r\n * Oldest acceptable age in milliseconds for client metadata before the client\r\n * is considered inactive and its associated data is garbage collected.\r\n */\n\nvar MAX_CLIENT_AGE_MS = 30 * 60 * 1000; // 30 minutes\n\n/**\r\n * Oldest acceptable metadata age for clients that may participate in the\r\n * primary lease election. Clients that have not updated their client metadata\r\n * within 5 seconds are not eligible to receive a primary lease.\r\n */\n\nvar MAX_PRIMARY_ELIGIBLE_AGE_MS = 5000;\n/**\r\n * The interval at which clients will update their metadata, including\r\n * refreshing their primary lease if held or potentially trying to acquire it if\r\n * not held.\r\n *\r\n * Primary clients may opportunistically refresh their metadata earlier\r\n * if they're already performing an IndexedDB operation.\r\n */\n\nvar CLIENT_METADATA_REFRESH_INTERVAL_MS = 4000;\n/** User-facing error when the primary lease is required but not available. */\n\nvar PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG = 'Failed to obtain exclusive access to the persistence layer. To allow ' + 'shared access, multi-tab synchronization has to be enabled in all tabs. ' + 'If you are using `experimentalForceOwningTab:true`, make sure that only ' + 'one tab has persistence enabled at any given time.';\nvar UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing IndexedDB or is known to have ' + 'an incomplete implementation. Offline persistence has been disabled.'; // The format of the LocalStorage key that stores zombied client is:\n//     firestore_zombie_<persistence_prefix>_<instance_key>\n\nvar ZOMBIED_CLIENTS_KEY_PREFIX = 'firestore_zombie';\n/**\r\n * The name of the main (and currently only) IndexedDB database. This name is\r\n * appended to the prefix provided to the IndexedDbPersistence constructor.\r\n */\n\nvar MAIN_DATABASE = 'main';\n/**\r\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\r\n * across sessions.\r\n *\r\n * On Web only, the Firestore SDKs support shared access to its persistence\r\n * layer. This allows multiple browser tabs to read and write to IndexedDb and\r\n * to synchronize state even without network connectivity. Shared access is\r\n * currently optional and not enabled unless all clients invoke\r\n * `enablePersistence()` with `{synchronizeTabs:true}`.\r\n *\r\n * In multi-tab mode, if multiple clients are active at the same time, the SDK\r\n * will designate one client as the “primary client”. An effort is made to pick\r\n * a visible, network-connected and active client, and this client is\r\n * responsible for letting other clients know about its presence. The primary\r\n * client writes a unique client-generated identifier (the client ID) to\r\n * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to\r\n * update this entry, another client can acquire the lease and take over as\r\n * primary.\r\n *\r\n * Some persistence operations in the SDK are designated as primary-client only\r\n * operations. This includes the acknowledgment of mutations and all updates of\r\n * remote documents. The effects of these operations are written to persistence\r\n * and then broadcast to other tabs via LocalStorage (see\r\n * `WebStorageSharedClientState`), which then refresh their state from\r\n * persistence.\r\n *\r\n * Similarly, the primary client listens to notifications sent by secondary\r\n * clients to discover persistence changes written by secondary clients, such as\r\n * the addition of new mutations and query targets.\r\n *\r\n * If multi-tab is not enabled and another tab already obtained the primary\r\n * lease, IndexedDbPersistence enters a failed state and all subsequent\r\n * operations will automatically fail.\r\n *\r\n * Additionally, there is an optimization so that when a tab is closed, the\r\n * primary lease is released immediately (this is especially important to make\r\n * sure that a refreshed tab is able to immediately re-acquire the primary\r\n * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload\r\n * since it is an asynchronous API. So in addition to attempting to give up the\r\n * lease, the leaseholder writes its client ID to a \"zombiedClient\" entry in\r\n * LocalStorage which acts as an indicator that another tab should go ahead and\r\n * take the primary lease immediately regardless of the current lease timestamp.\r\n *\r\n * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no\r\n * longer optional.\r\n */\n\nvar IndexedDbPersistence =\n/** @class */\nfunction () {\n  function IndexedDbPersistence(\n  /**\r\n   * Whether to synchronize the in-memory state of multiple tabs and share\r\n   * access to local persistence.\r\n   */\n  allowTabSynchronization, persistenceKey, clientId, lruParams, queue, window, document, serializer, sequenceNumberSyncer,\n  /**\r\n   * If set to true, forcefully obtains database access. Existing tabs will\r\n   * no longer be able to access IndexedDB.\r\n   */\n  forceOwningTab) {\n    this.allowTabSynchronization = allowTabSynchronization;\n    this.persistenceKey = persistenceKey;\n    this.clientId = clientId;\n    this.queue = queue;\n    this.window = window;\n    this.document = document;\n    this.sequenceNumberSyncer = sequenceNumberSyncer;\n    this.forceOwningTab = forceOwningTab;\n    this.listenSequence = null;\n    this._started = false;\n    this.isPrimary = false;\n    this.networkEnabled = true;\n    /** Our window.unload handler, if registered. */\n\n    this.windowUnloadHandler = null;\n    this.inForeground = false;\n    /** Our 'visibilitychange' listener if registered. */\n\n    this.documentVisibilityHandler = null;\n    /** The client metadata refresh task. */\n\n    this.clientMetadataRefresher = null;\n    /** The last time we garbage collected the client metadata object store. */\n\n    this.lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;\n    /** A listener to notify on primary state changes. */\n\n    this.primaryStateListener = function (_) {\n      return Promise.resolve();\n    };\n\n    if (!IndexedDbPersistence.isAvailable()) {\n      throw new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n    }\n\n    this.referenceDelegate = new IndexedDbLruDelegateImpl(this, lruParams);\n    this.dbName = persistenceKey + MAIN_DATABASE;\n    this.serializer = new LocalSerializer(serializer);\n    this.simpleDb = new SimpleDb(this.dbName, SCHEMA_VERSION, new SchemaConverter(this.serializer));\n    this.targetCache = new IndexedDbTargetCache(this.referenceDelegate, this.serializer);\n    this.indexManager = new IndexedDbIndexManager();\n    this.remoteDocumentCache = newIndexedDbRemoteDocumentCache(this.serializer, this.indexManager);\n    this.bundleCache = new IndexedDbBundleCache();\n\n    if (this.window && this.window.localStorage) {\n      this.webStorage = this.window.localStorage;\n    } else {\n      this.webStorage = null;\n\n      if (forceOwningTab === false) {\n        logError(LOG_TAG$d, 'LocalStorage is unavailable. As a result, persistence may not work ' + 'reliably. In particular enablePersistence() could fail immediately ' + 'after refreshing the page.');\n      }\n    }\n  }\n  /**\r\n   * Attempt to start IndexedDb persistence.\r\n   *\r\n   * @returns Whether persistence was enabled.\r\n   */\n\n\n  IndexedDbPersistence.prototype.start = function () {\n    var _this = this; // NOTE: This is expected to fail sometimes (in the case of another tab\n    // already having the persistence lock), so it's the first thing we should\n    // do.\n\n\n    return this.updateClientMetadataAndTryBecomePrimary().then(function () {\n      if (!_this.isPrimary && !_this.allowTabSynchronization) {\n        // Fail `start()` if `synchronizeTabs` is disabled and we cannot\n        // obtain the primary lease.\n        throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\n      }\n\n      _this.attachVisibilityHandler();\n\n      _this.attachWindowUnloadHook();\n\n      _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();\n\n      return _this.runTransaction('getHighestListenSequenceNumber', 'readonly', function (txn) {\n        return _this.targetCache.getHighestSequenceNumber(txn);\n      });\n    }).then(function (highestListenSequenceNumber) {\n      _this.listenSequence = new ListenSequence(highestListenSequenceNumber, _this.sequenceNumberSyncer);\n    }).then(function () {\n      _this._started = true;\n    }).catch(function (reason) {\n      _this.simpleDb && _this.simpleDb.close();\n      return Promise.reject(reason);\n    });\n  };\n  /**\r\n   * Registers a listener that gets called when the primary state of the\r\n   * instance changes. Upon registering, this listener is invoked immediately\r\n   * with the current primary state.\r\n   *\r\n   * PORTING NOTE: This is only used for Web multi-tab.\r\n   */\n\n\n  IndexedDbPersistence.prototype.setPrimaryStateListener = function (primaryStateListener) {\n    var _this = this;\n\n    this.primaryStateListener = function (primaryState) {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_d) {\n          if (this.started) {\n            return [2\n            /*return*/\n            , primaryStateListener(primaryState)];\n          }\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    };\n\n    return primaryStateListener(this.isPrimary);\n  };\n  /**\r\n   * Registers a listener that gets called when the database receives a\r\n   * version change event indicating that it has deleted.\r\n   *\r\n   * PORTING NOTE: This is only used for Web multi-tab.\r\n   */\n\n\n  IndexedDbPersistence.prototype.setDatabaseDeletedListener = function (databaseDeletedListener) {\n    var _this = this;\n\n    this.simpleDb.setVersionChangeListener(function (event) {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              if (!(event.newVersion === null)) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , databaseDeletedListener()];\n\n            case 1:\n              _d.sent();\n\n              _d.label = 2;\n\n            case 2:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n  /**\r\n   * Adjusts the current network state in the client's metadata, potentially\r\n   * affecting the primary lease.\r\n   *\r\n   * PORTING NOTE: This is only used for Web multi-tab.\r\n   */\n\n\n  IndexedDbPersistence.prototype.setNetworkEnabled = function (networkEnabled) {\n    var _this = this;\n\n    if (this.networkEnabled !== networkEnabled) {\n      this.networkEnabled = networkEnabled; // Schedule a primary lease refresh for immediate execution. The eventual\n      // lease update will be propagated via `primaryStateListener`.\n\n      this.queue.enqueueAndForget(function () {\n        return tslib.__awaiter(_this, void 0, void 0, function () {\n          return tslib.__generator(this, function (_d) {\n            switch (_d.label) {\n              case 0:\n                if (!this.started) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , this.updateClientMetadataAndTryBecomePrimary()];\n\n              case 1:\n                _d.sent();\n\n                _d.label = 2;\n\n              case 2:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      });\n    }\n  };\n  /**\r\n   * Updates the client metadata in IndexedDb and attempts to either obtain or\r\n   * extend the primary lease for the local client. Asynchronously notifies the\r\n   * primary state listener if the client either newly obtained or released its\r\n   * primary lease.\r\n   */\n\n\n  IndexedDbPersistence.prototype.updateClientMetadataAndTryBecomePrimary = function () {\n    var _this = this;\n\n    return this.runTransaction('updateClientMetadataAndTryBecomePrimary', 'readwrite', function (txn) {\n      var metadataStore = clientMetadataStore(txn);\n      return metadataStore.put(new DbClientMetadata(_this.clientId, Date.now(), _this.networkEnabled, _this.inForeground)).next(function () {\n        if (_this.isPrimary) {\n          return _this.verifyPrimaryLease(txn).next(function (success) {\n            if (!success) {\n              _this.isPrimary = false;\n\n              _this.queue.enqueueRetryable(function () {\n                return _this.primaryStateListener(false);\n              });\n            }\n          });\n        }\n      }).next(function () {\n        return _this.canActAsPrimary(txn);\n      }).next(function (canActAsPrimary) {\n        if (_this.isPrimary && !canActAsPrimary) {\n          return _this.releasePrimaryLeaseIfHeld(txn).next(function () {\n            return false;\n          });\n        } else if (canActAsPrimary) {\n          return _this.acquireOrExtendPrimaryLease(txn).next(function () {\n            return true;\n          });\n        } else {\n          return (\n            /* canActAsPrimary= */\n            false\n          );\n        }\n      });\n    }).catch(function (e) {\n      if (isIndexedDbTransactionError(e)) {\n        logDebug(LOG_TAG$d, 'Failed to extend owner lease: ', e); // Proceed with the existing state. Any subsequent access to\n        // IndexedDB will verify the lease.\n\n        return _this.isPrimary;\n      }\n\n      if (!_this.allowTabSynchronization) {\n        throw e;\n      }\n\n      logDebug(LOG_TAG$d, 'Releasing owner lease after error during lease refresh', e);\n      return (\n        /* isPrimary= */\n        false\n      );\n    }).then(function (isPrimary) {\n      if (_this.isPrimary !== isPrimary) {\n        _this.queue.enqueueRetryable(function () {\n          return _this.primaryStateListener(isPrimary);\n        });\n      }\n\n      _this.isPrimary = isPrimary;\n    });\n  };\n\n  IndexedDbPersistence.prototype.verifyPrimaryLease = function (txn) {\n    var _this = this;\n\n    var store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(function (primaryClient) {\n      return PersistencePromise.resolve(_this.isLocalClient(primaryClient));\n    });\n  };\n\n  IndexedDbPersistence.prototype.removeClientMetadata = function (txn) {\n    var metadataStore = clientMetadataStore(txn);\n    return metadataStore.delete(this.clientId);\n  };\n  /**\r\n   * If the garbage collection threshold has passed, prunes the\r\n   * RemoteDocumentChanges and the ClientMetadata store based on the last update\r\n   * time of all clients.\r\n   */\n\n\n  IndexedDbPersistence.prototype.maybeGarbageCollectMultiClientState = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var inactiveClients, _i, inactiveClients_1, inactiveClient;\n\n      var _this = this;\n\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (!(this.isPrimary && !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS))) return [3\n            /*break*/\n            , 2];\n            this.lastGarbageCollectionTime = Date.now();\n            return [4\n            /*yield*/\n            , this.runTransaction('maybeGarbageCollectMultiClientState', 'readwrite-primary', function (txn) {\n              var metadataStore = getStore(txn, DbClientMetadata.store);\n              return metadataStore.loadAll().next(function (existingClients) {\n                var active = _this.filterActiveClients(existingClients, MAX_CLIENT_AGE_MS);\n\n                var inactive = existingClients.filter(function (client) {\n                  return active.indexOf(client) === -1;\n                }); // Delete metadata for clients that are no longer considered active.\n\n                return PersistencePromise.forEach(inactive, function (inactiveClient) {\n                  return metadataStore.delete(inactiveClient.clientId);\n                }).next(function () {\n                  return inactive;\n                });\n              });\n            }).catch(function () {\n              // Ignore primary lease violations or any other type of error. The next\n              // primary will run `maybeGarbageCollectMultiClientState()` again.\n              // We don't use `ignoreIfPrimaryLeaseLoss()` since we don't want to depend\n              // on LocalStore.\n              return [];\n            })];\n\n          case 1:\n            inactiveClients = _d.sent(); // Delete potential leftover entries that may continue to mark the\n            // inactive clients as zombied in LocalStorage.\n            // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for\n            // the client atomically, but we can't. So we opt to delete the IndexedDb\n            // entries first to avoid potentially reviving a zombied client.\n\n            if (this.webStorage) {\n              for (_i = 0, inactiveClients_1 = inactiveClients; _i < inactiveClients_1.length; _i++) {\n                inactiveClient = inactiveClients_1[_i];\n                this.webStorage.removeItem(this.zombiedClientLocalStorageKey(inactiveClient.clientId));\n              }\n            }\n\n            _d.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Schedules a recurring timer to update the client metadata and to either\r\n   * extend or acquire the primary lease if the client is eligible.\r\n   */\n\n\n  IndexedDbPersistence.prototype.scheduleClientMetadataAndPrimaryLeaseRefreshes = function () {\n    var _this = this;\n\n    this.clientMetadataRefresher = this.queue.enqueueAfterDelay(\"client_metadata_refresh\"\n    /* ClientMetadataRefresh */\n    , CLIENT_METADATA_REFRESH_INTERVAL_MS, function () {\n      return _this.updateClientMetadataAndTryBecomePrimary().then(function () {\n        return _this.maybeGarbageCollectMultiClientState();\n      }).then(function () {\n        return _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();\n      });\n    });\n  };\n  /** Checks whether `client` is the local client. */\n\n\n  IndexedDbPersistence.prototype.isLocalClient = function (client) {\n    return client ? client.ownerId === this.clientId : false;\n  };\n  /**\r\n   * Evaluate the state of all active clients and determine whether the local\r\n   * client is or can act as the holder of the primary lease. Returns whether\r\n   * the client is eligible for the lease, but does not actually acquire it.\r\n   * May return 'false' even if there is no active leaseholder and another\r\n   * (foreground) client should become leaseholder instead.\r\n   */\n\n\n  IndexedDbPersistence.prototype.canActAsPrimary = function (txn) {\n    var _this = this;\n\n    if (this.forceOwningTab) {\n      return PersistencePromise.resolve(true);\n    }\n\n    var store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(function (currentPrimary) {\n      var currentLeaseIsValid = currentPrimary !== null && _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !_this.isClientZombied(currentPrimary.ownerId); // A client is eligible for the primary lease if:\n      // - its network is enabled and the client's tab is in the foreground.\n      // - its network is enabled and no other client's tab is in the\n      //   foreground.\n      // - every clients network is disabled and the client's tab is in the\n      //   foreground.\n      // - every clients network is disabled and no other client's tab is in\n      //   the foreground.\n      // - the `forceOwningTab` setting was passed in.\n\n      if (currentLeaseIsValid) {\n        if (_this.isLocalClient(currentPrimary) && _this.networkEnabled) {\n          return true;\n        }\n\n        if (!_this.isLocalClient(currentPrimary)) {\n          if (!currentPrimary.allowTabSynchronization) {\n            // Fail the `canActAsPrimary` check if the current leaseholder has\n            // not opted into multi-tab synchronization. If this happens at\n            // client startup, we reject the Promise returned by\n            // `enablePersistence()` and the user can continue to use Firestore\n            // with in-memory persistence.\n            // If this fails during a lease refresh, we will instead block the\n            // AsyncQueue from executing further operations. Note that this is\n            // acceptable since mixing & matching different `synchronizeTabs`\n            // settings is not supported.\n            //\n            // TODO(b/114226234): Remove this check when `synchronizeTabs` can\n            // no longer be turned off.\n            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\n          }\n\n          return false;\n        }\n      }\n\n      if (_this.networkEnabled && _this.inForeground) {\n        return true;\n      }\n\n      return clientMetadataStore(txn).loadAll().next(function (existingClients) {\n        // Process all existing clients and determine whether at least one of\n        // them is better suited to obtain the primary lease.\n        var preferredCandidate = _this.filterActiveClients(existingClients, MAX_PRIMARY_ELIGIBLE_AGE_MS).find(function (otherClient) {\n          if (_this.clientId !== otherClient.clientId) {\n            var otherClientHasBetterNetworkState = !_this.networkEnabled && otherClient.networkEnabled;\n            var otherClientHasBetterVisibility = !_this.inForeground && otherClient.inForeground;\n            var otherClientHasSameNetworkState = _this.networkEnabled === otherClient.networkEnabled;\n\n            if (otherClientHasBetterNetworkState || otherClientHasBetterVisibility && otherClientHasSameNetworkState) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        return preferredCandidate === undefined;\n      });\n    }).next(function (canActAsPrimary) {\n      if (_this.isPrimary !== canActAsPrimary) {\n        logDebug(LOG_TAG$d, \"Client \" + (canActAsPrimary ? 'is' : 'is not') + \" eligible for a primary lease.\");\n      }\n\n      return canActAsPrimary;\n    });\n  };\n\n  IndexedDbPersistence.prototype.shutdown = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            // The shutdown() operations are idempotent and can be called even when\n            // start() aborted (e.g. because it couldn't acquire the persistence lease).\n            this._started = false;\n            this.markClientZombied();\n\n            if (this.clientMetadataRefresher) {\n              this.clientMetadataRefresher.cancel();\n              this.clientMetadataRefresher = null;\n            }\n\n            this.detachVisibilityHandler();\n            this.detachWindowUnloadHook(); // Use `SimpleDb.runTransaction` directly to avoid failing if another tab\n            // has obtained the primary lease.\n\n            return [4\n            /*yield*/\n            , this.simpleDb.runTransaction('shutdown', 'readwrite', [DbPrimaryClient.store, DbClientMetadata.store], function (simpleDbTxn) {\n              var persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, ListenSequence.INVALID);\n              return _this.releasePrimaryLeaseIfHeld(persistenceTransaction).next(function () {\n                return _this.removeClientMetadata(persistenceTransaction);\n              });\n            })];\n\n          case 1:\n            // Use `SimpleDb.runTransaction` directly to avoid failing if another tab\n            // has obtained the primary lease.\n            _d.sent();\n\n            this.simpleDb.close(); // Remove the entry marking the client as zombied from LocalStorage since\n            // we successfully deleted its metadata from IndexedDb.\n\n            this.removeClientZombiedEntry();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns clients that are not zombied and have an updateTime within the\r\n   * provided threshold.\r\n   */\n\n\n  IndexedDbPersistence.prototype.filterActiveClients = function (clients, activityThresholdMs) {\n    var _this = this;\n\n    return clients.filter(function (client) {\n      return _this.isWithinAge(client.updateTimeMs, activityThresholdMs) && !_this.isClientZombied(client.clientId);\n    });\n  };\n  /**\r\n   * Returns the IDs of the clients that are currently active. If multi-tab\r\n   * is not supported, returns an array that only contains the local client's\r\n   * ID.\r\n   *\r\n   * PORTING NOTE: This is only used for Web multi-tab.\r\n   */\n\n\n  IndexedDbPersistence.prototype.getActiveClients = function () {\n    var _this = this;\n\n    return this.runTransaction('getActiveClients', 'readonly', function (txn) {\n      return clientMetadataStore(txn).loadAll().next(function (clients) {\n        return _this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(function (clientMetadata) {\n          return clientMetadata.clientId;\n        });\n      });\n    });\n  };\n\n  Object.defineProperty(IndexedDbPersistence.prototype, \"started\", {\n    get: function () {\n      return this._started;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IndexedDbPersistence.prototype.getMutationQueue = function (user) {\n    return IndexedDbMutationQueue.forUser(user, this.serializer, this.indexManager, this.referenceDelegate);\n  };\n\n  IndexedDbPersistence.prototype.getTargetCache = function () {\n    return this.targetCache;\n  };\n\n  IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {\n    return this.remoteDocumentCache;\n  };\n\n  IndexedDbPersistence.prototype.getIndexManager = function () {\n    return this.indexManager;\n  };\n\n  IndexedDbPersistence.prototype.getBundleCache = function () {\n    return this.bundleCache;\n  };\n\n  IndexedDbPersistence.prototype.runTransaction = function (action, mode, transactionOperation) {\n    var _this = this;\n\n    logDebug(LOG_TAG$d, 'Starting transaction:', action);\n    var simpleDbMode = mode === 'readonly' ? 'readonly' : 'readwrite';\n    var persistenceTransaction; // Do all transactions as readwrite against all object stores, since we\n    // are the only reader/writer.\n\n    return this.simpleDb.runTransaction(action, simpleDbMode, ALL_STORES, function (simpleDbTxn) {\n      persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, _this.listenSequence ? _this.listenSequence.next() : ListenSequence.INVALID);\n\n      if (mode === 'readwrite-primary') {\n        // While we merely verify that we have (or can acquire) the lease\n        // immediately, we wait to extend the primary lease until after\n        // executing transactionOperation(). This ensures that even if the\n        // transactionOperation takes a long time, we'll use a recent\n        // leaseTimestampMs in the extended (or newly acquired) lease.\n        return _this.verifyPrimaryLease(persistenceTransaction).next(function (holdsPrimaryLease) {\n          if (holdsPrimaryLease) {\n            return (\n              /* holdsPrimaryLease= */\n              true\n            );\n          }\n\n          return _this.canActAsPrimary(persistenceTransaction);\n        }).next(function (holdsPrimaryLease) {\n          if (!holdsPrimaryLease) {\n            logError(\"Failed to obtain primary lease for action '\" + action + \"'.\");\n            _this.isPrimary = false;\n\n            _this.queue.enqueueRetryable(function () {\n              return _this.primaryStateListener(false);\n            });\n\n            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_LOST_ERROR_MSG);\n          }\n\n          return transactionOperation(persistenceTransaction);\n        }).next(function (result) {\n          return _this.acquireOrExtendPrimaryLease(persistenceTransaction).next(function () {\n            return result;\n          });\n        });\n      } else {\n        return _this.verifyAllowTabSynchronization(persistenceTransaction).next(function () {\n          return transactionOperation(persistenceTransaction);\n        });\n      }\n    }).then(function (result) {\n      persistenceTransaction.raiseOnCommittedEvent();\n      return result;\n    });\n  };\n  /**\r\n   * Verifies that the current tab is the primary leaseholder or alternatively\r\n   * that the leaseholder has opted into multi-tab synchronization.\r\n   */\n  // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer\n  // be turned off.\n\n\n  IndexedDbPersistence.prototype.verifyAllowTabSynchronization = function (txn) {\n    var _this = this;\n\n    var store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(function (currentPrimary) {\n      var currentLeaseIsValid = currentPrimary !== null && _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !_this.isClientZombied(currentPrimary.ownerId);\n\n      if (currentLeaseIsValid && !_this.isLocalClient(currentPrimary)) {\n        if (!_this.forceOwningTab && (!_this.allowTabSynchronization || !currentPrimary.allowTabSynchronization)) {\n          throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\n        }\n      }\n    });\n  };\n  /**\r\n   * Obtains or extends the new primary lease for the local client. This\r\n   * method does not verify that the client is eligible for this lease.\r\n   */\n\n\n  IndexedDbPersistence.prototype.acquireOrExtendPrimaryLease = function (txn) {\n    var newPrimary = new DbPrimaryClient(this.clientId, this.allowTabSynchronization, Date.now());\n    return primaryClientStore(txn).put(DbPrimaryClient.key, newPrimary);\n  };\n\n  IndexedDbPersistence.isAvailable = function () {\n    return SimpleDb.isAvailable();\n  };\n  /** Checks the primary lease and removes it if we are the current primary. */\n\n\n  IndexedDbPersistence.prototype.releasePrimaryLeaseIfHeld = function (txn) {\n    var _this = this;\n\n    var store = primaryClientStore(txn);\n    return store.get(DbPrimaryClient.key).next(function (primaryClient) {\n      if (_this.isLocalClient(primaryClient)) {\n        logDebug(LOG_TAG$d, 'Releasing primary lease.');\n        return store.delete(DbPrimaryClient.key);\n      } else {\n        return PersistencePromise.resolve();\n      }\n    });\n  };\n  /** Verifies that `updateTimeMs` is within `maxAgeMs`. */\n\n\n  IndexedDbPersistence.prototype.isWithinAge = function (updateTimeMs, maxAgeMs) {\n    var now = Date.now();\n    var minAcceptable = now - maxAgeMs;\n    var maxAcceptable = now;\n\n    if (updateTimeMs < minAcceptable) {\n      return false;\n    } else if (updateTimeMs > maxAcceptable) {\n      logError(\"Detected an update time that is in the future: \" + updateTimeMs + \" > \" + maxAcceptable);\n      return false;\n    }\n\n    return true;\n  };\n\n  IndexedDbPersistence.prototype.attachVisibilityHandler = function () {\n    var _this = this;\n\n    if (this.document !== null && typeof this.document.addEventListener === 'function') {\n      this.documentVisibilityHandler = function () {\n        _this.queue.enqueueAndForget(function () {\n          _this.inForeground = _this.document.visibilityState === 'visible';\n          return _this.updateClientMetadataAndTryBecomePrimary();\n        });\n      };\n\n      this.document.addEventListener('visibilitychange', this.documentVisibilityHandler);\n      this.inForeground = this.document.visibilityState === 'visible';\n    }\n  };\n\n  IndexedDbPersistence.prototype.detachVisibilityHandler = function () {\n    if (this.documentVisibilityHandler) {\n      this.document.removeEventListener('visibilitychange', this.documentVisibilityHandler);\n      this.documentVisibilityHandler = null;\n    }\n  };\n  /**\r\n   * Attaches a window.unload handler that will synchronously write our\r\n   * clientId to a \"zombie client id\" location in LocalStorage. This can be used\r\n   * by tabs trying to acquire the primary lease to determine that the lease\r\n   * is no longer valid even if the timestamp is recent. This is particularly\r\n   * important for the refresh case (so the tab correctly re-acquires the\r\n   * primary lease). LocalStorage is used for this rather than IndexedDb because\r\n   * it is a synchronous API and so can be used reliably from  an unload\r\n   * handler.\r\n   */\n\n\n  IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {\n    var _this = this;\n\n    var _a;\n\n    if (typeof ((_a = this.window) === null || _a === void 0 ? void 0 : _a.addEventListener) === 'function') {\n      this.windowUnloadHandler = function () {\n        // Note: In theory, this should be scheduled on the AsyncQueue since it\n        // accesses internal state. We execute this code directly during shutdown\n        // to make sure it gets a chance to run.\n        _this.markClientZombied();\n\n        if (util.isSafari() && navigator.appVersion.match(\"Version/14\")) {\n          // On Safari 14, we do not run any cleanup actions as it might trigger\n          // a bug that prevents Safari from re-opening IndexedDB during the\n          // next page load.\n          // See https://bugs.webkit.org/show_bug.cgi?id=226547\n          _this.queue.enterRestrictedMode(\n          /* purgeExistingTasks= */\n          true);\n        }\n\n        _this.queue.enqueueAndForget(function () {\n          // Attempt graceful shutdown (including releasing our primary lease),\n          // but there's no guarantee it will complete.\n          return _this.shutdown();\n        });\n      };\n\n      this.window.addEventListener('pagehide', this.windowUnloadHandler);\n    }\n  };\n\n  IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {\n    if (this.windowUnloadHandler) {\n      this.window.removeEventListener('pagehide', this.windowUnloadHandler);\n      this.windowUnloadHandler = null;\n    }\n  };\n  /**\r\n   * Returns whether a client is \"zombied\" based on its LocalStorage entry.\r\n   * Clients become zombied when their tab closes without running all of the\r\n   * cleanup logic in `shutdown()`.\r\n   */\n\n\n  IndexedDbPersistence.prototype.isClientZombied = function (clientId) {\n    var _a;\n\n    try {\n      var isZombied = ((_a = this.webStorage) === null || _a === void 0 ? void 0 : _a.getItem(this.zombiedClientLocalStorageKey(clientId))) !== null;\n      logDebug(LOG_TAG$d, \"Client '\" + clientId + \"' \" + (isZombied ? 'is' : 'is not') + \" zombied in LocalStorage\");\n      return isZombied;\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't working.\n      logError(LOG_TAG$d, 'Failed to get zombied client id.', e);\n      return false;\n    }\n  };\n  /**\r\n   * Record client as zombied (a client that had its tab closed). Zombied\r\n   * clients are ignored during primary tab selection.\r\n   */\n\n\n  IndexedDbPersistence.prototype.markClientZombied = function () {\n    if (!this.webStorage) {\n      return;\n    }\n\n    try {\n      this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId), String(Date.now()));\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't available / working.\n      logError('Failed to set zombie client id.', e);\n    }\n  };\n  /** Removes the zombied client entry if it exists. */\n\n\n  IndexedDbPersistence.prototype.removeClientZombiedEntry = function () {\n    if (!this.webStorage) {\n      return;\n    }\n\n    try {\n      this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId));\n    } catch (e) {// Ignore\n    }\n  };\n\n  IndexedDbPersistence.prototype.zombiedClientLocalStorageKey = function (clientId) {\n    return ZOMBIED_CLIENTS_KEY_PREFIX + \"_\" + this.persistenceKey + \"_\" + clientId;\n  };\n\n  return IndexedDbPersistence;\n}();\n/**\r\n * Helper to get a typed SimpleDbStore for the primary client object store.\r\n */\n\n\nfunction primaryClientStore(txn) {\n  return getStore(txn, DbPrimaryClient.store);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the client metadata object store.\r\n */\n\n\nfunction clientMetadataStore(txn) {\n  return getStore(txn, DbClientMetadata.store);\n}\n/**\r\n * Generates a string used as a prefix when storing data in IndexedDB and\r\n * LocalStorage.\r\n */\n\n\nfunction indexedDbStoragePrefix(databaseId, persistenceKey) {\n  // Use two different prefix formats:\n  //\n  //   * firestore / persistenceKey / projectID . databaseID / ...\n  //   * firestore / persistenceKey / projectID / ...\n  //\n  // projectIDs are DNS-compatible names and cannot contain dots\n  // so there's no danger of collisions.\n  var database = databaseId.projectId;\n\n  if (!databaseId.isDefaultDatabase) {\n    database += '.' + databaseId.database;\n  }\n\n  return 'firestore/' + persistenceKey + '/' + database + '/';\n}\n\nfunction indexedDbClearPersistence(persistenceKey) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var dbName;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          if (!SimpleDb.isAvailable()) {\n            return [2\n            /*return*/\n            , Promise.resolve()];\n          }\n\n          dbName = persistenceKey + MAIN_DATABASE;\n          return [4\n          /*yield*/\n          , SimpleDb.delete(dbName)];\n\n        case 1:\n          _d.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A readonly view of the local state of all documents we're tracking (i.e. we\r\n * have a cached version in remoteDocumentCache or local mutations for the\r\n * document). The view is computed by applying the mutations in the\r\n * MutationQueue to the RemoteDocumentCache.\r\n */\n\n\nvar LocalDocumentsView =\n/** @class */\nfunction () {\n  function LocalDocumentsView(remoteDocumentCache, mutationQueue, indexManager) {\n    this.remoteDocumentCache = remoteDocumentCache;\n    this.mutationQueue = mutationQueue;\n    this.indexManager = indexManager;\n  }\n  /**\r\n   * Get the local view of the document identified by `key`.\r\n   *\r\n   * @returns Local view of the document or null if we don't have any cached\r\n   * state for it.\r\n   */\n\n\n  LocalDocumentsView.prototype.getDocument = function (transaction, key) {\n    var _this = this;\n\n    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKey(transaction, key).next(function (batches) {\n      return _this.getDocumentInternal(transaction, key, batches);\n    });\n  };\n  /** Internal version of `getDocument` that allows reusing batches. */\n\n\n  LocalDocumentsView.prototype.getDocumentInternal = function (transaction, key, inBatches) {\n    return this.remoteDocumentCache.getEntry(transaction, key).next(function (doc) {\n      for (var _i = 0, inBatches_1 = inBatches; _i < inBatches_1.length; _i++) {\n        var batch = inBatches_1[_i];\n        batch.applyToLocalView(doc);\n      }\n\n      return doc;\n    });\n  }; // Returns the view of the given `docs` as they would appear after applying\n  // all mutations in the given `batches`.\n\n\n  LocalDocumentsView.prototype.applyLocalMutationsToDocuments = function (docs, batches) {\n    docs.forEach(function (key, localView) {\n      for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\n        var batch = batches_1[_i];\n        batch.applyToLocalView(localView);\n      }\n    });\n  };\n  /**\r\n   * Gets the local view of the documents identified by `keys`.\r\n   *\r\n   * If we don't have cached state for a document in `keys`, a NoDocument will\r\n   * be stored for that key in the resulting set.\r\n   */\n\n\n  LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {\n    var _this = this;\n\n    return this.remoteDocumentCache.getEntries(transaction, keys).next(function (docs) {\n      return _this.applyLocalViewToDocuments(transaction, docs).next(function () {\n        return docs;\n      });\n    });\n  };\n  /**\r\n   * Applies the local view the given `baseDocs` without retrieving documents\r\n   * from the local store.\r\n   */\n\n\n  LocalDocumentsView.prototype.applyLocalViewToDocuments = function (transaction, baseDocs) {\n    var _this = this;\n\n    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs).next(function (batches) {\n      return _this.applyLocalMutationsToDocuments(baseDocs, batches);\n    });\n  };\n  /**\r\n   * Performs a query against the local view of all documents.\r\n   *\r\n   * @param transaction - The persistence transaction.\r\n   * @param query - The query to match documents against.\r\n   * @param sinceReadTime - If not set to SnapshotVersion.min(), return only\r\n   *     documents that have been read since this snapshot version (exclusive).\r\n   */\n\n\n  LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query, sinceReadTime) {\n    if (isDocumentQuery$1(query)) {\n      return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n    } else if (isCollectionGroupQuery(query)) {\n      return this.getDocumentsMatchingCollectionGroupQuery(transaction, query, sinceReadTime);\n    } else {\n      return this.getDocumentsMatchingCollectionQuery(transaction, query, sinceReadTime);\n    }\n  };\n\n  LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {\n    // Just do a simple document lookup.\n    return this.getDocument(transaction, new DocumentKey(docPath)).next(function (document) {\n      var result = documentMap();\n\n      if (document.isFoundDocument()) {\n        result = result.insert(document.key, document);\n      }\n\n      return result;\n    });\n  };\n\n  LocalDocumentsView.prototype.getDocumentsMatchingCollectionGroupQuery = function (transaction, query, sinceReadTime) {\n    var _this = this;\n\n    var collectionId = query.collectionGroup;\n    var results = documentMap();\n    return this.indexManager.getCollectionParents(transaction, collectionId).next(function (parents) {\n      // Perform a collection query against each parent that contains the\n      // collectionId and aggregate the results.\n      return PersistencePromise.forEach(parents, function (parent) {\n        var collectionQuery = asCollectionQueryAtPath(query, parent.child(collectionId));\n        return _this.getDocumentsMatchingCollectionQuery(transaction, collectionQuery, sinceReadTime).next(function (r) {\n          r.forEach(function (key, doc) {\n            results = results.insert(key, doc);\n          });\n        });\n      }).next(function () {\n        return results;\n      });\n    });\n  };\n\n  LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query, sinceReadTime) {\n    var _this = this; // Query the remote documents and overlay mutations.\n\n\n    var results;\n    var mutationBatches;\n    return this.remoteDocumentCache.getDocumentsMatchingQuery(transaction, query, sinceReadTime).next(function (queryResults) {\n      results = queryResults;\n      return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);\n    }).next(function (matchingMutationBatches) {\n      mutationBatches = matchingMutationBatches; // It is possible that a PatchMutation can make a document match a query, even if\n      // the version in the RemoteDocumentCache is not a match yet (waiting for server\n      // to ack). To handle this, we find all document keys affected by the PatchMutations\n      // that are not in `result` yet, and back fill them via `remoteDocumentCache.getEntries`,\n      // otherwise those `PatchMutations` will be ignored because no base document can be found,\n      // and lead to missing result for the query.\n\n      return _this.addMissingBaseDocuments(transaction, mutationBatches, results).next(function (mergedDocuments) {\n        results = mergedDocuments;\n\n        for (var _i = 0, mutationBatches_1 = mutationBatches; _i < mutationBatches_1.length; _i++) {\n          var batch = mutationBatches_1[_i];\n\n          for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {\n            var mutation = _e[_d];\n            var key = mutation.key;\n            var document_2 = results.get(key);\n\n            if (document_2 == null) {\n              // Create invalid document to apply mutations on top of\n              document_2 = MutableDocument.newInvalidDocument(key);\n              results = results.insert(key, document_2);\n            }\n\n            applyMutationToLocalView(mutation, document_2, batch.localWriteTime);\n\n            if (!document_2.isFoundDocument()) {\n              results = results.remove(key);\n            }\n          }\n        }\n      });\n    }).next(function () {\n      // Finally, filter out any documents that don't actually match\n      // the query.\n      results.forEach(function (key, doc) {\n        if (!queryMatches(query, doc)) {\n          results = results.remove(key);\n        }\n      });\n      return results;\n    });\n  };\n\n  LocalDocumentsView.prototype.addMissingBaseDocuments = function (transaction, matchingMutationBatches, existingDocuments) {\n    var missingBaseDocEntriesForPatching = documentKeySet();\n\n    for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {\n      var batch = matchingMutationBatches_1[_i];\n\n      for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {\n        var mutation = _e[_d];\n\n        if (mutation instanceof PatchMutation && existingDocuments.get(mutation.key) === null) {\n          missingBaseDocEntriesForPatching = missingBaseDocEntriesForPatching.add(mutation.key);\n        }\n      }\n    }\n\n    var mergedDocuments = existingDocuments;\n    return this.remoteDocumentCache.getEntries(transaction, missingBaseDocEntriesForPatching).next(function (missingBaseDocs) {\n      missingBaseDocs.forEach(function (key, doc) {\n        if (doc.isFoundDocument()) {\n          mergedDocuments = mergedDocuments.insert(key, doc);\n        }\n      });\n      return mergedDocuments;\n    });\n  };\n\n  return LocalDocumentsView;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$c = 'LocalStore';\n/**\r\n * The maximum time to leave a resume token buffered without writing it out.\r\n * This value is arbitrary: it's long enough to avoid several writes\r\n * (possibly indefinitely if updates come more frequently than this) but\r\n * short enough that restarting after crashing will still have a pretty\r\n * recent resume token.\r\n */\n\nvar RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;\n/**\r\n * Implements `LocalStore` interface.\r\n *\r\n * Note: some field defined in this class might have public access level, but\r\n * the class is not exported so they are only accessible from this module.\r\n * This is useful to implement optional features (like bundles) in free\r\n * functions, such that they are tree-shakeable.\r\n */\n\nvar LocalStoreImpl =\n/** @class */\nfunction () {\n  function LocalStoreImpl(\n  /** Manages our in-memory or durable persistence. */\n  persistence, queryEngine, initialUser, serializer) {\n    this.persistence = persistence;\n    this.queryEngine = queryEngine;\n    this.serializer = serializer;\n    /**\r\n     * Maps a targetID to data about its target.\r\n     *\r\n     * PORTING NOTE: We are using an immutable data structure on Web to make re-runs\r\n     * of `applyRemoteEvent()` idempotent.\r\n     */\n\n    this.targetDataByTarget = new SortedMap(primitiveComparator);\n    /** Maps a target to its targetID. */\n    // TODO(wuandy): Evaluate if TargetId can be part of Target.\n\n    this.targetIdByTarget = new ObjectMap(function (t) {\n      return canonifyTarget(t);\n    }, targetEquals);\n    /**\r\n     * The read time of the last entry processed by `getNewDocumentChanges()`.\r\n     *\r\n     * PORTING NOTE: This is only used for multi-tab synchronization.\r\n     */\n\n    this.lastDocumentChangeReadTime = SnapshotVersion.min();\n    this.mutationQueue = persistence.getMutationQueue(initialUser);\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n    this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue, this.persistence.getIndexManager());\n    this.bundleCache = persistence.getBundleCache();\n    this.queryEngine.setLocalDocumentsView(this.localDocuments);\n  }\n\n  LocalStoreImpl.prototype.collectGarbage = function (garbageCollector) {\n    var _this = this;\n\n    return this.persistence.runTransaction('Collect garbage', 'readwrite-primary', function (txn) {\n      return garbageCollector.collect(txn, _this.targetDataByTarget);\n    });\n  };\n\n  return LocalStoreImpl;\n}();\n\nfunction newLocalStore(\n/** Manages our in-memory or durable persistence. */\npersistence, queryEngine, initialUser, serializer) {\n  return new LocalStoreImpl(persistence, queryEngine, initialUser, serializer);\n}\n/**\r\n * Tells the LocalStore that the currently authenticated user has changed.\r\n *\r\n * In response the local store switches the mutation queue to the new user and\r\n * returns any resulting document changes.\r\n */\n// PORTING NOTE: Android and iOS only return the documents affected by the\n// change.\n\n\nfunction localStoreHandleUserChange(localStore, user) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var localStoreImpl, newMutationQueue, newLocalDocuments, result;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          localStoreImpl = debugCast(localStore);\n          newMutationQueue = localStoreImpl.mutationQueue;\n          newLocalDocuments = localStoreImpl.localDocuments;\n          return [4\n          /*yield*/\n          , localStoreImpl.persistence.runTransaction('Handle user change', 'readonly', function (txn) {\n            // Swap out the mutation queue, grabbing the pending mutation batches\n            // before and after.\n            var oldBatches;\n            return localStoreImpl.mutationQueue.getAllMutationBatches(txn).next(function (promisedOldBatches) {\n              oldBatches = promisedOldBatches;\n              newMutationQueue = localStoreImpl.persistence.getMutationQueue(user); // Recreate our LocalDocumentsView using the new\n              // MutationQueue.\n\n              newLocalDocuments = new LocalDocumentsView(localStoreImpl.remoteDocuments, newMutationQueue, localStoreImpl.persistence.getIndexManager());\n              return newMutationQueue.getAllMutationBatches(txn);\n            }).next(function (newBatches) {\n              var removedBatchIds = [];\n              var addedBatchIds = []; // Union the old/new changed keys.\n\n              var changedKeys = documentKeySet();\n\n              for (var _i = 0, oldBatches_1 = oldBatches; _i < oldBatches_1.length; _i++) {\n                var batch = oldBatches_1[_i];\n                removedBatchIds.push(batch.batchId);\n\n                for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {\n                  var mutation = _e[_d];\n                  changedKeys = changedKeys.add(mutation.key);\n                }\n              }\n\n              for (var _f = 0, newBatches_1 = newBatches; _f < newBatches_1.length; _f++) {\n                var batch = newBatches_1[_f];\n                addedBatchIds.push(batch.batchId);\n\n                for (var _g = 0, _h = batch.mutations; _g < _h.length; _g++) {\n                  var mutation = _h[_g];\n                  changedKeys = changedKeys.add(mutation.key);\n                }\n              } // Return the set of all (potentially) changed documents and the list\n              // of mutation batch IDs that were affected by change.\n\n\n              return newLocalDocuments.getDocuments(txn, changedKeys).next(function (affectedDocuments) {\n                return {\n                  affectedDocuments: affectedDocuments,\n                  removedBatchIds: removedBatchIds,\n                  addedBatchIds: addedBatchIds\n                };\n              });\n            });\n          })];\n\n        case 1:\n          result = _d.sent();\n          localStoreImpl.mutationQueue = newMutationQueue;\n          localStoreImpl.localDocuments = newLocalDocuments;\n          localStoreImpl.queryEngine.setLocalDocumentsView(localStoreImpl.localDocuments);\n          return [2\n          /*return*/\n          , result];\n      }\n    });\n  });\n}\n/* Accepts locally generated Mutations and commit them to storage. */\n\n\nfunction localStoreWriteLocally(localStore, mutations) {\n  var localStoreImpl = debugCast(localStore);\n  var localWriteTime = Timestamp.now();\n  var keys = mutations.reduce(function (keys, m) {\n    return keys.add(m.key);\n  }, documentKeySet());\n  var existingDocs;\n  return localStoreImpl.persistence.runTransaction('Locally write mutations', 'readwrite', function (txn) {\n    // Load and apply all existing mutations. This lets us compute the\n    // current base state for all non-idempotent transforms before applying\n    // any additional user-provided writes.\n    return localStoreImpl.localDocuments.getDocuments(txn, keys).next(function (docs) {\n      existingDocs = docs; // For non-idempotent mutations (such as `FieldValue.increment()`),\n      // we record the base state in a separate patch mutation. This is\n      // later used to guarantee consistent values and prevents flicker\n      // even if the backend sends us an update that already includes our\n      // transform.\n\n      var baseMutations = [];\n\n      for (var _i = 0, mutations_2 = mutations; _i < mutations_2.length; _i++) {\n        var mutation = mutations_2[_i];\n        var baseValue = extractMutationBaseValue(mutation, existingDocs.get(mutation.key));\n\n        if (baseValue != null) {\n          // NOTE: The base state should only be applied if there's some\n          // existing document to override, so use a Precondition of\n          // exists=true\n          baseMutations.push(new PatchMutation(mutation.key, baseValue, extractFieldMask(baseValue.value.mapValue), Precondition.exists(true)));\n        }\n      }\n\n      return localStoreImpl.mutationQueue.addMutationBatch(txn, localWriteTime, baseMutations, mutations);\n    });\n  }).then(function (batch) {\n    batch.applyToLocalDocumentSet(existingDocs);\n    return {\n      batchId: batch.batchId,\n      changes: existingDocs\n    };\n  });\n}\n/**\r\n * Acknowledges the given batch.\r\n *\r\n * On the happy path when a batch is acknowledged, the local store will\r\n *\r\n *  + remove the batch from the mutation queue;\r\n *  + apply the changes to the remote document cache;\r\n *  + recalculate the latency compensated view implied by those changes (there\r\n *    may be mutations in the queue that affect the documents but haven't been\r\n *    acknowledged yet); and\r\n *  + give the changed documents back the sync engine\r\n *\r\n * @returns The resulting (modified) documents.\r\n */\n\n\nfunction localStoreAcknowledgeBatch(localStore, batchResult) {\n  var localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Acknowledge batch', 'readwrite-primary', function (txn) {\n    var affected = batchResult.batch.keys();\n    var documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\n      trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n\n    });\n    return applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer).next(function () {\n      return documentBuffer.apply(txn);\n    }).next(function () {\n      return localStoreImpl.mutationQueue.performConsistencyCheck(txn);\n    }).next(function () {\n      return localStoreImpl.localDocuments.getDocuments(txn, affected);\n    });\n  });\n}\n/**\r\n * Removes mutations from the MutationQueue for the specified batch;\r\n * LocalDocuments will be recalculated.\r\n *\r\n * @returns The resulting modified documents.\r\n */\n\n\nfunction localStoreRejectBatch(localStore, batchId) {\n  var localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Reject batch', 'readwrite-primary', function (txn) {\n    var affectedKeys;\n    return localStoreImpl.mutationQueue.lookupMutationBatch(txn, batchId).next(function (batch) {\n      hardAssert(batch !== null);\n      affectedKeys = batch.keys();\n      return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);\n    }).next(function () {\n      return localStoreImpl.mutationQueue.performConsistencyCheck(txn);\n    }).next(function () {\n      return localStoreImpl.localDocuments.getDocuments(txn, affectedKeys);\n    });\n  });\n}\n/**\r\n * Returns the largest (latest) batch id in mutation queue that is pending\r\n * server response.\r\n *\r\n * Returns `BATCHID_UNKNOWN` if the queue is empty.\r\n */\n\n\nfunction localStoreGetHighestUnacknowledgedBatchId(localStore) {\n  var localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get highest unacknowledged batch id', 'readonly', function (txn) {\n    return localStoreImpl.mutationQueue.getHighestUnacknowledgedBatchId(txn);\n  });\n}\n/**\r\n * Returns the last consistent snapshot processed (used by the RemoteStore to\r\n * determine whether to buffer incoming snapshots from the backend).\r\n */\n\n\nfunction localStoreGetLastRemoteSnapshotVersion(localStore) {\n  var localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get last remote snapshot version', 'readonly', function (txn) {\n    return localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn);\n  });\n}\n/**\r\n * Updates the \"ground-state\" (remote) documents. We assume that the remote\r\n * event reflects any write batches that have been acknowledged or rejected\r\n * (i.e. we do not re-apply local mutations to updates from this event).\r\n *\r\n * LocalDocuments are re-calculated if there are remaining mutations in the\r\n * queue.\r\n */\n\n\nfunction localStoreApplyRemoteEventToLocalCache(localStore, remoteEvent) {\n  var localStoreImpl = debugCast(localStore);\n  var remoteVersion = remoteEvent.snapshotVersion;\n  var newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;\n  return localStoreImpl.persistence.runTransaction('Apply remote event', 'readwrite-primary', function (txn) {\n    var documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\n      trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n\n    }); // Reset newTargetDataByTargetMap in case this transaction gets re-run.\n\n    newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;\n    var promises = [];\n    remoteEvent.targetChanges.forEach(function (change, targetId) {\n      var oldTargetData = newTargetDataByTargetMap.get(targetId);\n\n      if (!oldTargetData) {\n        return;\n      } // Only update the remote keys if the target is still active. This\n      // ensures that we can persist the updated target data along with\n      // the updated assignment.\n\n\n      promises.push(localStoreImpl.targetCache.removeMatchingKeys(txn, change.removedDocuments, targetId).next(function () {\n        return localStoreImpl.targetCache.addMatchingKeys(txn, change.addedDocuments, targetId);\n      }));\n      var resumeToken = change.resumeToken; // Update the resume token if the change includes one.\n\n      if (resumeToken.approximateByteSize() > 0) {\n        var newTargetData = oldTargetData.withResumeToken(resumeToken, remoteVersion).withSequenceNumber(txn.currentSequenceNumber);\n        newTargetDataByTargetMap = newTargetDataByTargetMap.insert(targetId, newTargetData); // Update the target data if there are target changes (or if\n        // sufficient time has passed since the last update).\n\n        if (shouldPersistTargetData(oldTargetData, newTargetData, change)) {\n          promises.push(localStoreImpl.targetCache.updateTargetData(txn, newTargetData));\n        }\n      }\n    });\n    var changedDocs = mutableDocumentMap();\n    remoteEvent.documentUpdates.forEach(function (key, doc) {\n      if (remoteEvent.resolvedLimboDocuments.has(key)) {\n        promises.push(localStoreImpl.persistence.referenceDelegate.updateLimboDocument(txn, key));\n      }\n    }); // Each loop iteration only affects its \"own\" doc, so it's safe to get all the remote\n    // documents in advance in a single call.\n\n    promises.push(populateDocumentChangeBuffer(txn, documentBuffer, remoteEvent.documentUpdates, remoteVersion, undefined).next(function (result) {\n      changedDocs = result;\n    })); // HACK: The only reason we allow a null snapshot version is so that we\n    // can synthesize remote events when we get permission denied errors while\n    // trying to resolve the state of a locally cached document that is in\n    // limbo.\n\n    if (!remoteVersion.isEqual(SnapshotVersion.min())) {\n      var updateRemoteVersion = localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn).next(function (lastRemoteSnapshotVersion) {\n        return localStoreImpl.targetCache.setTargetsMetadata(txn, txn.currentSequenceNumber, remoteVersion);\n      });\n      promises.push(updateRemoteVersion);\n    }\n\n    return PersistencePromise.waitFor(promises).next(function () {\n      return documentBuffer.apply(txn);\n    }).next(function () {\n      return localStoreImpl.localDocuments.applyLocalViewToDocuments(txn, changedDocs);\n    }).next(function () {\n      return changedDocs;\n    });\n  }).then(function (changedDocs) {\n    localStoreImpl.targetDataByTarget = newTargetDataByTargetMap;\n    return changedDocs;\n  });\n}\n/**\r\n * Populates document change buffer with documents from backend or a bundle.\r\n * Returns the document changes resulting from applying those documents.\r\n *\r\n * @param txn - Transaction to use to read existing documents from storage.\r\n * @param documentBuffer - Document buffer to collect the resulted changes to be\r\n *        applied to storage.\r\n * @param documents - Documents to be applied.\r\n * @param globalVersion - A `SnapshotVersion` representing the read time if all\r\n *        documents have the same read time.\r\n * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents\r\n *        have their own read time.\r\n *\r\n * Note: this function will use `documentVersions` if it is defined;\r\n * when it is not defined, resorts to `globalVersion`.\r\n */\n\n\nfunction populateDocumentChangeBuffer(txn, documentBuffer, documents, globalVersion, // TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove\n// this parameter.\ndocumentVersions) {\n  var updatedKeys = documentKeySet();\n  documents.forEach(function (k) {\n    return updatedKeys = updatedKeys.add(k);\n  });\n  return documentBuffer.getEntries(txn, updatedKeys).next(function (existingDocs) {\n    var changedDocs = mutableDocumentMap();\n    documents.forEach(function (key, doc) {\n      var existingDoc = existingDocs.get(key);\n      var docReadTime = (documentVersions === null || documentVersions === void 0 ? void 0 : documentVersions.get(key)) || globalVersion; // Note: The order of the steps below is important, since we want\n      // to ensure that rejected limbo resolutions (which fabricate\n      // NoDocuments with SnapshotVersion.min()) never add documents to\n      // cache.\n\n      if (doc.isNoDocument() && doc.version.isEqual(SnapshotVersion.min())) {\n        // NoDocuments with SnapshotVersion.min() are used in manufactured\n        // events. We remove these documents from cache since we lost\n        // access.\n        documentBuffer.removeEntry(key, docReadTime);\n        changedDocs = changedDocs.insert(key, doc);\n      } else if (!existingDoc.isValidDocument() || doc.version.compareTo(existingDoc.version) > 0 || doc.version.compareTo(existingDoc.version) === 0 && existingDoc.hasPendingWrites) {\n        documentBuffer.addEntry(doc, docReadTime);\n        changedDocs = changedDocs.insert(key, doc);\n      } else {\n        logDebug(LOG_TAG$c, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n      }\n    });\n    return changedDocs;\n  });\n}\n/**\r\n * Returns true if the newTargetData should be persisted during an update of\r\n * an active target. TargetData should always be persisted when a target is\r\n * being released and should not call this function.\r\n *\r\n * While the target is active, TargetData updates can be omitted when nothing\r\n * about the target has changed except metadata like the resume token or\r\n * snapshot version. Occasionally it's worth the extra write to prevent these\r\n * values from getting too stale after a crash, but this doesn't have to be\r\n * too frequent.\r\n */\n\n\nfunction shouldPersistTargetData(oldTargetData, newTargetData, change) {\n  hardAssert(newTargetData.resumeToken.approximateByteSize() > 0); // Always persist target data if we don't already have a resume token.\n\n  if (oldTargetData.resumeToken.approximateByteSize() === 0) {\n    return true;\n  } // Don't allow resume token changes to be buffered indefinitely. This\n  // allows us to be reasonably up-to-date after a crash and avoids needing\n  // to loop over all active queries on shutdown. Especially in the browser\n  // we may not get time to do anything interesting while the current tab is\n  // closing.\n\n\n  var timeDelta = newTargetData.snapshotVersion.toMicroseconds() - oldTargetData.snapshotVersion.toMicroseconds();\n\n  if (timeDelta >= RESUME_TOKEN_MAX_AGE_MICROS) {\n    return true;\n  } // Otherwise if the only thing that has changed about a target is its resume\n  // token it's not worth persisting. Note that the RemoteStore keeps an\n  // in-memory view of the currently active targets which includes the current\n  // resume token, so stream failure or user changes will still use an\n  // up-to-date resume token regardless of what we do here.\n\n\n  var changes = change.addedDocuments.size + change.modifiedDocuments.size + change.removedDocuments.size;\n  return changes > 0;\n}\n/**\r\n * Notifies local store of the changed views to locally pin documents.\r\n */\n\n\nfunction localStoreNotifyLocalViewChanges(localStore, viewChanges) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var localStoreImpl, e_2, _i, viewChanges_1, viewChange, targetId, targetData, lastLimboFreeSnapshotVersion, updatedTargetData;\n\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          localStoreImpl = debugCast(localStore);\n          _d.label = 1;\n\n        case 1:\n          _d.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , localStoreImpl.persistence.runTransaction('notifyLocalViewChanges', 'readwrite', function (txn) {\n            return PersistencePromise.forEach(viewChanges, function (viewChange) {\n              return PersistencePromise.forEach(viewChange.addedKeys, function (key) {\n                return localStoreImpl.persistence.referenceDelegate.addReference(txn, viewChange.targetId, key);\n              }).next(function () {\n                return PersistencePromise.forEach(viewChange.removedKeys, function (key) {\n                  return localStoreImpl.persistence.referenceDelegate.removeReference(txn, viewChange.targetId, key);\n                });\n              });\n            });\n          })];\n\n        case 2:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          e_2 = _d.sent();\n\n          if (isIndexedDbTransactionError(e_2)) {\n            // If `notifyLocalViewChanges` fails, we did not advance the sequence\n            // number for the documents that were included in this transaction.\n            // This might trigger them to be deleted earlier than they otherwise\n            // would have, but it should not invalidate the integrity of the data.\n            logDebug(LOG_TAG$c, 'Failed to update sequence numbers: ' + e_2);\n          } else {\n            throw e_2;\n          }\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 4:\n          for (_i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {\n            viewChange = viewChanges_1[_i];\n            targetId = viewChange.targetId;\n\n            if (!viewChange.fromCache) {\n              targetData = localStoreImpl.targetDataByTarget.get(targetId);\n              lastLimboFreeSnapshotVersion = targetData.snapshotVersion;\n              updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(lastLimboFreeSnapshotVersion);\n              localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetId, updatedTargetData);\n            }\n          }\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Gets the mutation batch after the passed in batchId in the mutation queue\r\n * or null if empty.\r\n * @param afterBatchId - If provided, the batch to search after.\r\n * @returns The next mutation or null if there wasn't one.\r\n */\n\n\nfunction localStoreGetNextMutationBatch(localStore, afterBatchId) {\n  var localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get next mutation batch', 'readonly', function (txn) {\n    if (afterBatchId === undefined) {\n      afterBatchId = BATCHID_UNKNOWN;\n    }\n\n    return localStoreImpl.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n  });\n}\n/**\r\n * Reads the current value of a Document with a given key or null if not\r\n * found - used for testing.\r\n */\n\n\nfunction localStoreReadDocument(localStore, key) {\n  var localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('read document', 'readonly', function (txn) {\n    return localStoreImpl.localDocuments.getDocument(txn, key);\n  });\n}\n/**\r\n * Assigns the given target an internal ID so that its results can be pinned so\r\n * they don't get GC'd. A target must be allocated in the local store before\r\n * the store can be used to manage its view.\r\n *\r\n * Allocating an already allocated `Target` will return the existing `TargetData`\r\n * for that `Target`.\r\n */\n\n\nfunction localStoreAllocateTarget(localStore, target) {\n  var localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Allocate target', 'readwrite', function (txn) {\n    var targetData;\n    return localStoreImpl.targetCache.getTargetData(txn, target).next(function (cached) {\n      if (cached) {\n        // This target has been listened to previously, so reuse the\n        // previous targetID.\n        // TODO(mcg): freshen last accessed date?\n        targetData = cached;\n        return PersistencePromise.resolve(targetData);\n      } else {\n        return localStoreImpl.targetCache.allocateTargetId(txn).next(function (targetId) {\n          targetData = new TargetData(target, targetId, 0\n          /* Listen */\n          , txn.currentSequenceNumber);\n          return localStoreImpl.targetCache.addTargetData(txn, targetData).next(function () {\n            return targetData;\n          });\n        });\n      }\n    });\n  }).then(function (targetData) {\n    // If Multi-Tab is enabled, the existing target data may be newer than\n    // the in-memory data\n    var cachedTargetData = localStoreImpl.targetDataByTarget.get(targetData.targetId);\n\n    if (cachedTargetData === null || targetData.snapshotVersion.compareTo(cachedTargetData.snapshotVersion) > 0) {\n      localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetData.targetId, targetData);\n      localStoreImpl.targetIdByTarget.set(target, targetData.targetId);\n    }\n\n    return targetData;\n  });\n}\n/**\r\n * Returns the TargetData as seen by the LocalStore, including updates that may\r\n * have not yet been persisted to the TargetCache.\r\n */\n// Visible for testing.\n\n\nfunction localStoreGetTargetData(localStore, transaction, target) {\n  var localStoreImpl = debugCast(localStore);\n  var targetId = localStoreImpl.targetIdByTarget.get(target);\n\n  if (targetId !== undefined) {\n    return PersistencePromise.resolve(localStoreImpl.targetDataByTarget.get(targetId));\n  } else {\n    return localStoreImpl.targetCache.getTargetData(transaction, target);\n  }\n}\n/**\r\n * Unpins all the documents associated with the given target. If\r\n * `keepPersistedTargetData` is set to false and Eager GC enabled, the method\r\n * directly removes the associated target data from the target cache.\r\n *\r\n * Releasing a non-existing `Target` is a no-op.\r\n */\n// PORTING NOTE: `keepPersistedTargetData` is multi-tab only.\n\n\nfunction localStoreReleaseTarget(localStore, targetId, keepPersistedTargetData) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var localStoreImpl, targetData, mode, e_3;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          localStoreImpl = debugCast(localStore);\n          targetData = localStoreImpl.targetDataByTarget.get(targetId);\n          mode = keepPersistedTargetData ? 'readwrite' : 'readwrite-primary';\n          _d.label = 1;\n\n        case 1:\n          _d.trys.push([1, 4,, 5]);\n\n          if (!!keepPersistedTargetData) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , localStoreImpl.persistence.runTransaction('Release target', mode, function (txn) {\n            return localStoreImpl.persistence.referenceDelegate.removeTarget(txn, targetData);\n          })];\n\n        case 2:\n          _d.sent();\n\n          _d.label = 3;\n\n        case 3:\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          e_3 = _d.sent();\n\n          if (isIndexedDbTransactionError(e_3)) {\n            // All `releaseTarget` does is record the final metadata state for the\n            // target, but we've been recording this periodically during target\n            // activity. If we lose this write this could cause a very slight\n            // difference in the order of target deletion during GC, but we\n            // don't define exact LRU semantics so this is acceptable.\n            logDebug(LOG_TAG$c, \"Failed to update sequence numbers for target \" + targetId + \": \" + e_3);\n          } else {\n            throw e_3;\n          }\n\n          return [3\n          /*break*/\n          , 5];\n\n        case 5:\n          localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.remove(targetId);\n          localStoreImpl.targetIdByTarget.delete(targetData.target);\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Runs the specified query against the local store and returns the results,\r\n * potentially taking advantage of query data from previous executions (such\r\n * as the set of remote keys).\r\n *\r\n * @param usePreviousResults - Whether results from previous executions can\r\n * be used to optimize this query execution.\r\n */\n\n\nfunction localStoreExecuteQuery(localStore, query, usePreviousResults) {\n  var localStoreImpl = debugCast(localStore);\n  var lastLimboFreeSnapshotVersion = SnapshotVersion.min();\n  var remoteKeys = documentKeySet();\n  return localStoreImpl.persistence.runTransaction('Execute query', 'readonly', function (txn) {\n    return localStoreGetTargetData(localStoreImpl, txn, queryToTarget(query)).next(function (targetData) {\n      if (targetData) {\n        lastLimboFreeSnapshotVersion = targetData.lastLimboFreeSnapshotVersion;\n        return localStoreImpl.targetCache.getMatchingKeysForTargetId(txn, targetData.targetId).next(function (result) {\n          remoteKeys = result;\n        });\n      }\n    }).next(function () {\n      return localStoreImpl.queryEngine.getDocumentsMatchingQuery(txn, query, usePreviousResults ? lastLimboFreeSnapshotVersion : SnapshotVersion.min(), usePreviousResults ? remoteKeys : documentKeySet());\n    }).next(function (documents) {\n      return {\n        documents: documents,\n        remoteKeys: remoteKeys\n      };\n    });\n  });\n}\n\nfunction applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer) {\n  var batch = batchResult.batch;\n  var docKeys = batch.keys();\n  var promiseChain = PersistencePromise.resolve();\n  docKeys.forEach(function (docKey) {\n    promiseChain = promiseChain.next(function () {\n      return documentBuffer.getEntry(txn, docKey);\n    }).next(function (doc) {\n      var ackVersion = batchResult.docVersions.get(docKey);\n      hardAssert(ackVersion !== null);\n\n      if (doc.version.compareTo(ackVersion) < 0) {\n        batch.applyToRemoteDocument(doc, batchResult);\n\n        if (doc.isValidDocument()) {\n          // We use the commitVersion as the readTime rather than the\n          // document's updateTime since the updateTime is not advanced\n          // for updates that do not modify the underlying document.\n          documentBuffer.addEntry(doc, batchResult.commitVersion);\n        }\n      }\n    });\n  });\n  return promiseChain.next(function () {\n    return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);\n  });\n}\n/** Returns the local view of the documents affected by a mutation batch. */\n// PORTING NOTE: Multi-Tab only.\n\n\nfunction localStoreLookupMutationDocuments(localStore, batchId) {\n  var localStoreImpl = debugCast(localStore);\n  var mutationQueueImpl = debugCast(localStoreImpl.mutationQueue);\n  return localStoreImpl.persistence.runTransaction('Lookup mutation documents', 'readonly', function (txn) {\n    return mutationQueueImpl.lookupMutationKeys(txn, batchId).next(function (keys) {\n      if (keys) {\n        return localStoreImpl.localDocuments.getDocuments(txn, keys);\n      } else {\n        return PersistencePromise.resolve(null);\n      }\n    });\n  });\n} // PORTING NOTE: Multi-Tab only.\n\n\nfunction localStoreRemoveCachedMutationBatchMetadata(localStore, batchId) {\n  var mutationQueueImpl = debugCast(debugCast(localStore, LocalStoreImpl).mutationQueue);\n  mutationQueueImpl.removeCachedMutationKeys(batchId);\n} // PORTING NOTE: Multi-Tab only.\n\n\nfunction localStoreGetActiveClients(localStore) {\n  var persistenceImpl = debugCast(debugCast(localStore, LocalStoreImpl).persistence);\n  return persistenceImpl.getActiveClients();\n} // PORTING NOTE: Multi-Tab only.\n\n\nfunction localStoreGetCachedTarget(localStore, targetId) {\n  var localStoreImpl = debugCast(localStore);\n  var targetCacheImpl = debugCast(localStoreImpl.targetCache);\n  var cachedTargetData = localStoreImpl.targetDataByTarget.get(targetId);\n\n  if (cachedTargetData) {\n    return Promise.resolve(cachedTargetData.target);\n  } else {\n    return localStoreImpl.persistence.runTransaction('Get target data', 'readonly', function (txn) {\n      return targetCacheImpl.getTargetDataForTarget(txn, targetId).next(function (targetData) {\n        return targetData ? targetData.target : null;\n      });\n    });\n  }\n}\n/**\r\n * Returns the set of documents that have been updated since the last call.\r\n * If this is the first call, returns the set of changes since client\r\n * initialization. Further invocations will return document that have changed\r\n * since the prior call.\r\n */\n// PORTING NOTE: Multi-Tab only.\n\n\nfunction localStoreGetNewDocumentChanges(localStore) {\n  var localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get new document changes', 'readonly', function (txn) {\n    return remoteDocumentCacheGetNewDocumentChanges(localStoreImpl.remoteDocuments, txn, localStoreImpl.lastDocumentChangeReadTime);\n  }).then(function (_d) {\n    var changedDocs = _d.changedDocs,\n        readTime = _d.readTime;\n    localStoreImpl.lastDocumentChangeReadTime = readTime;\n    return changedDocs;\n  });\n}\n/**\r\n * Reads the newest document change from persistence and moves the internal\r\n * synchronization marker forward so that calls to `getNewDocumentChanges()`\r\n * only return changes that happened after client initialization.\r\n */\n// PORTING NOTE: Multi-Tab only.\n\n\nfunction localStoreSynchronizeLastDocumentChangeReadTime(localStore) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var localStoreImpl;\n    return tslib.__generator(this, function (_d) {\n      localStoreImpl = debugCast(localStore);\n      return [2\n      /*return*/\n      , localStoreImpl.persistence.runTransaction('Synchronize last document change read time', 'readonly', function (txn) {\n        return remoteDocumentCacheGetLastReadTime(txn);\n      }).then(function (readTime) {\n        localStoreImpl.lastDocumentChangeReadTime = readTime;\n      })];\n    });\n  });\n}\n/**\r\n * Creates a new target using the given bundle name, which will be used to\r\n * hold the keys of all documents from the bundle in query-document mappings.\r\n * This ensures that the loaded documents do not get garbage collected\r\n * right away.\r\n */\n\n\nfunction umbrellaTarget(bundleName) {\n  // It is OK that the path used for the query is not valid, because this will\n  // not be read and queried.\n  return queryToTarget(newQueryForPath(ResourcePath.fromString(\"__bundle__/docs/\" + bundleName)));\n}\n/**\r\n * Applies the documents from a bundle to the \"ground-state\" (remote)\r\n * documents.\r\n *\r\n * LocalDocuments are re-calculated if there are remaining mutations in the\r\n * queue.\r\n */\n\n\nfunction localStoreApplyBundledDocuments(localStore, bundleConverter, documents, bundleName) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var localStoreImpl, documentKeys, documentMap, versionMap, _i, documents_1, bundleDoc, documentKey, documentBuffer, umbrellaTargetData;\n\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          localStoreImpl = debugCast(localStore);\n          documentKeys = documentKeySet();\n          documentMap = mutableDocumentMap();\n          versionMap = documentVersionMap();\n\n          for (_i = 0, documents_1 = documents; _i < documents_1.length; _i++) {\n            bundleDoc = documents_1[_i];\n            documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);\n\n            if (bundleDoc.document) {\n              documentKeys = documentKeys.add(documentKey);\n            }\n\n            documentMap = documentMap.insert(documentKey, bundleConverter.toMutableDocument(bundleDoc));\n            versionMap = versionMap.insert(documentKey, bundleConverter.toSnapshotVersion(bundleDoc.metadata.readTime));\n          }\n\n          documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\n            trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n\n          });\n          return [4\n          /*yield*/\n          , localStoreAllocateTarget(localStoreImpl, umbrellaTarget(bundleName))];\n\n        case 1:\n          umbrellaTargetData = _d.sent();\n          return [2\n          /*return*/\n          , localStoreImpl.persistence.runTransaction('Apply bundle documents', 'readwrite', function (txn) {\n            return populateDocumentChangeBuffer(txn, documentBuffer, documentMap, SnapshotVersion.min(), versionMap).next(function (changedDocs) {\n              documentBuffer.apply(txn);\n              return changedDocs;\n            }).next(function (changedDocs) {\n              return localStoreImpl.targetCache.removeMatchingKeysForTargetId(txn, umbrellaTargetData.targetId).next(function () {\n                return localStoreImpl.targetCache.addMatchingKeys(txn, documentKeys, umbrellaTargetData.targetId);\n              }).next(function () {\n                return localStoreImpl.localDocuments.applyLocalViewToDocuments(txn, changedDocs);\n              }).next(function () {\n                return changedDocs;\n              });\n            });\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Returns a promise of a boolean to indicate if the given bundle has already\r\n * been loaded and the create time is newer than the current loading bundle.\r\n */\n\n\nfunction localStoreHasNewerBundle(localStore, bundleMetadata) {\n  var localStoreImpl = debugCast(localStore);\n  var currentReadTime = fromVersion(bundleMetadata.createTime);\n  return localStoreImpl.persistence.runTransaction('hasNewerBundle', 'readonly', function (transaction) {\n    return localStoreImpl.bundleCache.getBundleMetadata(transaction, bundleMetadata.id);\n  }).then(function (cached) {\n    return !!cached && cached.createTime.compareTo(currentReadTime) >= 0;\n  });\n}\n/**\r\n * Saves the given `BundleMetadata` to local persistence.\r\n */\n\n\nfunction localStoreSaveBundle(localStore, bundleMetadata) {\n  var localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Save bundle', 'readwrite', function (transaction) {\n    return localStoreImpl.bundleCache.saveBundleMetadata(transaction, bundleMetadata);\n  });\n}\n/**\r\n * Returns a promise of a `NamedQuery` associated with given query name. Promise\r\n * resolves to undefined if no persisted data can be found.\r\n */\n\n\nfunction localStoreGetNamedQuery(localStore, queryName) {\n  var localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get named query', 'readonly', function (transaction) {\n    return localStoreImpl.bundleCache.getNamedQuery(transaction, queryName);\n  });\n}\n/**\r\n * Saves the given `NamedQuery` to local persistence.\r\n */\n\n\nfunction localStoreSaveNamedQuery(localStore, query, documents) {\n  if (documents === void 0) {\n    documents = documentKeySet();\n  }\n\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var allocated, localStoreImpl;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , localStoreAllocateTarget(localStore, queryToTarget(fromBundledQuery(query.bundledQuery)))];\n\n        case 1:\n          allocated = _d.sent();\n          localStoreImpl = debugCast(localStore);\n          return [2\n          /*return*/\n          , localStoreImpl.persistence.runTransaction('Save named query', 'readwrite', function (transaction) {\n            var readTime = fromVersion(query.readTime); // Simply save the query itself if it is older than what the SDK already\n            // has.\n\n            if (allocated.snapshotVersion.compareTo(readTime) >= 0) {\n              return localStoreImpl.bundleCache.saveNamedQuery(transaction, query);\n            } // Update existing target data because the query from the bundle is newer.\n\n\n            var newTargetData = allocated.withResumeToken(ByteString.EMPTY_BYTE_STRING, readTime);\n            localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(newTargetData.targetId, newTargetData);\n            return localStoreImpl.targetCache.updateTargetData(transaction, newTargetData).next(function () {\n              return localStoreImpl.targetCache.removeMatchingKeysForTargetId(transaction, allocated.targetId);\n            }).next(function () {\n              return localStoreImpl.targetCache.addMatchingKeys(transaction, documents, allocated.targetId);\n            }).next(function () {\n              return localStoreImpl.bundleCache.saveNamedQuery(transaction, query);\n            });\n          })];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MemoryBundleCache =\n/** @class */\nfunction () {\n  function MemoryBundleCache(serializer) {\n    this.serializer = serializer;\n    this.bundles = new Map();\n    this.namedQueries = new Map();\n  }\n\n  MemoryBundleCache.prototype.getBundleMetadata = function (transaction, bundleId) {\n    return PersistencePromise.resolve(this.bundles.get(bundleId));\n  };\n\n  MemoryBundleCache.prototype.saveBundleMetadata = function (transaction, bundleMetadata) {\n    this.bundles.set(bundleMetadata.id, fromBundleMetadata(bundleMetadata));\n    return PersistencePromise.resolve();\n  };\n\n  MemoryBundleCache.prototype.getNamedQuery = function (transaction, queryName) {\n    return PersistencePromise.resolve(this.namedQueries.get(queryName));\n  };\n\n  MemoryBundleCache.prototype.saveNamedQuery = function (transaction, query) {\n    this.namedQueries.set(query.name, fromProtoNamedQuery(query));\n    return PersistencePromise.resolve();\n  };\n\n  return MemoryBundleCache;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A collection of references to a document from some kind of numbered entity\r\n * (either a target ID or batch ID). As references are added to or removed from\r\n * the set corresponding events are emitted to a registered garbage collector.\r\n *\r\n * Each reference is represented by a DocumentReference object. Each of them\r\n * contains enough information to uniquely identify the reference. They are all\r\n * stored primarily in a set sorted by key. A document is considered garbage if\r\n * there's no references in that set (this can be efficiently checked thanks to\r\n * sorting by key).\r\n *\r\n * ReferenceSet also keeps a secondary set that contains references sorted by\r\n * IDs. This one is used to efficiently implement removal of all references by\r\n * some target ID.\r\n */\n\n\nvar ReferenceSet =\n/** @class */\nfunction () {\n  function ReferenceSet() {\n    // A set of outstanding references to a document sorted by key.\n    this.refsByKey = new SortedSet(DocReference.compareByKey); // A set of outstanding references to a document sorted by target id.\n\n    this.refsByTarget = new SortedSet(DocReference.compareByTargetId);\n  }\n  /** Returns true if the reference set contains no references. */\n\n\n  ReferenceSet.prototype.isEmpty = function () {\n    return this.refsByKey.isEmpty();\n  };\n  /** Adds a reference to the given document key for the given ID. */\n\n\n  ReferenceSet.prototype.addReference = function (key, id) {\n    var ref = new DocReference(key, id);\n    this.refsByKey = this.refsByKey.add(ref);\n    this.refsByTarget = this.refsByTarget.add(ref);\n  };\n  /** Add references to the given document keys for the given ID. */\n\n\n  ReferenceSet.prototype.addReferences = function (keys, id) {\n    var _this = this;\n\n    keys.forEach(function (key) {\n      return _this.addReference(key, id);\n    });\n  };\n  /**\r\n   * Removes a reference to the given document key for the given\r\n   * ID.\r\n   */\n\n\n  ReferenceSet.prototype.removeReference = function (key, id) {\n    this.removeRef(new DocReference(key, id));\n  };\n\n  ReferenceSet.prototype.removeReferences = function (keys, id) {\n    var _this = this;\n\n    keys.forEach(function (key) {\n      return _this.removeReference(key, id);\n    });\n  };\n  /**\r\n   * Clears all references with a given ID. Calls removeRef() for each key\r\n   * removed.\r\n   */\n\n\n  ReferenceSet.prototype.removeReferencesForId = function (id) {\n    var _this = this;\n\n    var emptyKey = new DocumentKey(new ResourcePath([]));\n    var startRef = new DocReference(emptyKey, id);\n    var endRef = new DocReference(emptyKey, id + 1);\n    var keys = [];\n    this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n      _this.removeRef(ref);\n\n      keys.push(ref.key);\n    });\n    return keys;\n  };\n\n  ReferenceSet.prototype.removeAllReferences = function () {\n    var _this = this;\n\n    this.refsByKey.forEach(function (ref) {\n      return _this.removeRef(ref);\n    });\n  };\n\n  ReferenceSet.prototype.removeRef = function (ref) {\n    this.refsByKey = this.refsByKey.delete(ref);\n    this.refsByTarget = this.refsByTarget.delete(ref);\n  };\n\n  ReferenceSet.prototype.referencesForId = function (id) {\n    var emptyKey = new DocumentKey(new ResourcePath([]));\n    var startRef = new DocReference(emptyKey, id);\n    var endRef = new DocReference(emptyKey, id + 1);\n    var keys = documentKeySet();\n    this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\n      keys = keys.add(ref.key);\n    });\n    return keys;\n  };\n\n  ReferenceSet.prototype.containsKey = function (key) {\n    var ref = new DocReference(key, 0);\n    var firstRef = this.refsByKey.firstAfterOrEqual(ref);\n    return firstRef !== null && key.isEqual(firstRef.key);\n  };\n\n  return ReferenceSet;\n}();\n\nvar DocReference =\n/** @class */\nfunction () {\n  function DocReference(key, targetOrBatchId) {\n    this.key = key;\n    this.targetOrBatchId = targetOrBatchId;\n  }\n  /** Compare by key then by ID */\n\n\n  DocReference.compareByKey = function (left, right) {\n    return DocumentKey.comparator(left.key, right.key) || primitiveComparator(left.targetOrBatchId, right.targetOrBatchId);\n  };\n  /** Compare by ID then by key */\n\n\n  DocReference.compareByTargetId = function (left, right) {\n    return primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) || DocumentKey.comparator(left.key, right.key);\n  };\n\n  return DocReference;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MemoryMutationQueue =\n/** @class */\nfunction () {\n  function MemoryMutationQueue(indexManager, referenceDelegate) {\n    this.indexManager = indexManager;\n    this.referenceDelegate = referenceDelegate;\n    /**\r\n     * The set of all mutations that have been sent but not yet been applied to\r\n     * the backend.\r\n     */\n\n    this.mutationQueue = [];\n    /** Next value to use when assigning sequential IDs to each mutation batch. */\n\n    this.nextBatchId = 1;\n    /** An ordered mapping between documents and the mutations batch IDs. */\n\n    this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n  }\n\n  MemoryMutationQueue.prototype.checkEmpty = function (transaction) {\n    return PersistencePromise.resolve(this.mutationQueue.length === 0);\n  };\n\n  MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, baseMutations, mutations) {\n    var batchId = this.nextBatchId;\n    this.nextBatchId++;\n\n    if (this.mutationQueue.length > 0) {\n      this.mutationQueue[this.mutationQueue.length - 1];\n    }\n\n    var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);\n    this.mutationQueue.push(batch); // Track references by document key and index collection parents.\n\n    for (var _i = 0, mutations_3 = mutations; _i < mutations_3.length; _i++) {\n      var mutation = mutations_3[_i];\n      this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));\n      this.indexManager.addToCollectionParentIndex(transaction, mutation.key.path.popLast());\n    }\n\n    return PersistencePromise.resolve(batch);\n  };\n\n  MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\n    return PersistencePromise.resolve(this.findMutationBatch(batchId));\n  };\n\n  MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\n    var nextBatchId = batchId + 1; // The requested batchId may still be out of range so normalize it to the\n    // start of the queue.\n\n    var rawIndex = this.indexOfBatchId(nextBatchId);\n    var index = rawIndex < 0 ? 0 : rawIndex;\n    return PersistencePromise.resolve(this.mutationQueue.length > index ? this.mutationQueue[index] : null);\n  };\n\n  MemoryMutationQueue.prototype.getHighestUnacknowledgedBatchId = function () {\n    return PersistencePromise.resolve(this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1);\n  };\n\n  MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {\n    return PersistencePromise.resolve(this.mutationQueue.slice());\n  };\n\n  MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\n    var _this = this;\n\n    var start = new DocReference(documentKey, 0);\n    var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n    var result = [];\n    this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\n      var batch = _this.findMutationBatch(ref.targetOrBatchId);\n\n      result.push(batch);\n    });\n    return PersistencePromise.resolve(result);\n  };\n\n  MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKeys = function (transaction, documentKeys) {\n    var _this = this;\n\n    var uniqueBatchIDs = new SortedSet(primitiveComparator);\n    documentKeys.forEach(function (documentKey) {\n      var start = new DocReference(documentKey, 0);\n      var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n\n      _this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\n        uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n      });\n    });\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  };\n\n  MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\n    // Use the query path as a prefix for testing if a document matches the\n    // query.\n    var prefix = query.path;\n    var immediateChildrenPathLength = prefix.length + 1; // Construct a document reference for actually scanning the index. Unlike\n    // the prefix the document key in this reference must have an even number of\n    // segments. The empty segment can be used a suffix of the query path\n    // because it precedes all other segments in an ordered traversal.\n\n    var startPath = prefix;\n\n    if (!DocumentKey.isDocumentKey(startPath)) {\n      startPath = startPath.child('');\n    }\n\n    var start = new DocReference(new DocumentKey(startPath), 0); // Find unique batchIDs referenced by all documents potentially matching the\n    // query.\n\n    var uniqueBatchIDs = new SortedSet(primitiveComparator);\n    this.batchesByDocumentKey.forEachWhile(function (ref) {\n      var rowKeyPath = ref.key.path;\n\n      if (!prefix.isPrefixOf(rowKeyPath)) {\n        return false;\n      } else {\n        // Rows with document keys more than one segment longer than the query\n        // path can't be matches. For example, a query on 'rooms' can't match\n        // the document /rooms/abc/messages/xyx.\n        // TODO(mcg): we'll need a different scanner when we implement\n        // ancestor queries.\n        if (rowKeyPath.length === immediateChildrenPathLength) {\n          uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n        }\n\n        return true;\n      }\n    }, start);\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  };\n\n  MemoryMutationQueue.prototype.findMutationBatches = function (batchIDs) {\n    var _this = this; // Construct an array of matching batches, sorted by batchID to ensure that\n    // multiple mutations affecting the same document key are applied in order.\n\n\n    var result = [];\n    batchIDs.forEach(function (batchId) {\n      var batch = _this.findMutationBatch(batchId);\n\n      if (batch !== null) {\n        result.push(batch);\n      }\n    });\n    return result;\n  };\n\n  MemoryMutationQueue.prototype.removeMutationBatch = function (transaction, batch) {\n    var _this = this; // Find the position of the first batch for removal.\n\n\n    var batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');\n    hardAssert(batchIndex === 0);\n    this.mutationQueue.shift();\n    var references = this.batchesByDocumentKey;\n    return PersistencePromise.forEach(batch.mutations, function (mutation) {\n      var ref = new DocReference(mutation.key, batch.batchId);\n      references = references.delete(ref);\n      return _this.referenceDelegate.markPotentiallyOrphaned(transaction, mutation.key);\n    }).next(function () {\n      _this.batchesByDocumentKey = references;\n    });\n  };\n\n  MemoryMutationQueue.prototype.removeCachedMutationKeys = function (batchId) {// No-op since the memory mutation queue does not maintain a separate cache.\n  };\n\n  MemoryMutationQueue.prototype.containsKey = function (txn, key) {\n    var ref = new DocReference(key, 0);\n    var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n    return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n  };\n\n  MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {\n    if (this.mutationQueue.length === 0) ;\n    return PersistencePromise.resolve();\n  };\n  /**\r\n   * Finds the index of the given batchId in the mutation queue and asserts that\r\n   * the resulting index is within the bounds of the queue.\r\n   *\r\n   * @param batchId - The batchId to search for\r\n   * @param action - A description of what the caller is doing, phrased in passive\r\n   * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\r\n   */\n\n\n  MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {\n    var index = this.indexOfBatchId(batchId);\n    return index;\n  };\n  /**\r\n   * Finds the index of the given batchId in the mutation queue. This operation\r\n   * is O(1).\r\n   *\r\n   * @returns The computed index of the batch with the given batchId, based on\r\n   * the state of the queue. Note this index can be negative if the requested\r\n   * batchId has already been remvoed from the queue or past the end of the\r\n   * queue if the batchId is larger than the last added batch.\r\n   */\n\n\n  MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {\n    if (this.mutationQueue.length === 0) {\n      // As an index this is past the end of the queue\n      return 0;\n    } // Examine the front of the queue to figure out the difference between the\n    // batchId and indexes in the array. Note that since the queue is ordered\n    // by batchId, if the first batch has a larger batchId then the requested\n    // batchId doesn't exist in the queue.\n\n\n    var firstBatchId = this.mutationQueue[0].batchId;\n    return batchId - firstBatchId;\n  };\n  /**\r\n   * A version of lookupMutationBatch that doesn't return a promise, this makes\r\n   * other functions that uses this code easier to read and more efficent.\r\n   */\n\n\n  MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {\n    var index = this.indexOfBatchId(batchId);\n\n    if (index < 0 || index >= this.mutationQueue.length) {\n      return null;\n    }\n\n    var batch = this.mutationQueue[index];\n    return batch;\n  };\n\n  return MemoryMutationQueue;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction documentEntryMap() {\n  return new SortedMap(DocumentKey.comparator);\n}\n/**\r\n * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke\r\n * `newMemoryRemoteDocumentCache()`.\r\n */\n\n\nvar MemoryRemoteDocumentCacheImpl =\n/** @class */\nfunction () {\n  /**\r\n   * @param sizer - Used to assess the size of a document. For eager GC, this is\r\n   * expected to just return 0 to avoid unnecessarily doing the work of\r\n   * calculating the size.\r\n   */\n  function MemoryRemoteDocumentCacheImpl(indexManager, sizer) {\n    this.indexManager = indexManager;\n    this.sizer = sizer;\n    /** Underlying cache of documents and their read times. */\n\n    this.docs = documentEntryMap();\n    /** Size of all cached documents. */\n\n    this.size = 0;\n  }\n  /**\r\n   * Adds the supplied entry to the cache and updates the cache size as appropriate.\r\n   *\r\n   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer\r\n   * returned by `newChangeBuffer()`.\r\n   */\n\n\n  MemoryRemoteDocumentCacheImpl.prototype.addEntry = function (transaction, doc, readTime) {\n    var key = doc.key;\n    var entry = this.docs.get(key);\n    var previousSize = entry ? entry.size : 0;\n    var currentSize = this.sizer(doc);\n    this.docs = this.docs.insert(key, {\n      document: doc.clone(),\n      size: currentSize,\n      readTime: readTime\n    });\n    this.size += currentSize - previousSize;\n    return this.indexManager.addToCollectionParentIndex(transaction, key.path.popLast());\n  };\n  /**\r\n   * Removes the specified entry from the cache and updates the cache size as appropriate.\r\n   *\r\n   * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer\r\n   * returned by `newChangeBuffer()`.\r\n   */\n\n\n  MemoryRemoteDocumentCacheImpl.prototype.removeEntry = function (documentKey) {\n    var entry = this.docs.get(documentKey);\n\n    if (entry) {\n      this.docs = this.docs.remove(documentKey);\n      this.size -= entry.size;\n    }\n  };\n\n  MemoryRemoteDocumentCacheImpl.prototype.getEntry = function (transaction, documentKey) {\n    var entry = this.docs.get(documentKey);\n    return PersistencePromise.resolve(entry ? entry.document.clone() : MutableDocument.newInvalidDocument(documentKey));\n  };\n\n  MemoryRemoteDocumentCacheImpl.prototype.getEntries = function (transaction, documentKeys) {\n    var _this = this;\n\n    var results = mutableDocumentMap();\n    documentKeys.forEach(function (documentKey) {\n      var entry = _this.docs.get(documentKey);\n\n      results = results.insert(documentKey, entry ? entry.document.clone() : MutableDocument.newInvalidDocument(documentKey));\n    });\n    return PersistencePromise.resolve(results);\n  };\n\n  MemoryRemoteDocumentCacheImpl.prototype.getDocumentsMatchingQuery = function (transaction, query, sinceReadTime) {\n    var results = mutableDocumentMap(); // Documents are ordered by key, so we can use a prefix scan to narrow down\n    // the documents we need to match the query against.\n\n    var prefix = new DocumentKey(query.path.child(''));\n    var iterator = this.docs.getIteratorFrom(prefix);\n\n    while (iterator.hasNext()) {\n      var _d = iterator.getNext(),\n          key = _d.key,\n          _e = _d.value,\n          document_3 = _e.document,\n          readTime = _e.readTime;\n\n      if (!query.path.isPrefixOf(key.path)) {\n        break;\n      }\n\n      if (readTime.compareTo(sinceReadTime) <= 0) {\n        continue;\n      }\n\n      if (!queryMatches(query, document_3)) {\n        continue;\n      }\n\n      results = results.insert(document_3.key, document_3.clone());\n    }\n\n    return PersistencePromise.resolve(results);\n  };\n\n  MemoryRemoteDocumentCacheImpl.prototype.forEachDocumentKey = function (transaction, f) {\n    return PersistencePromise.forEach(this.docs, function (key) {\n      return f(key);\n    });\n  };\n\n  MemoryRemoteDocumentCacheImpl.prototype.newChangeBuffer = function (options) {\n    // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps\n    // a separate changelog and does not need special handling for removals.\n    return new MemoryRemoteDocumentChangeBuffer(this);\n  };\n\n  MemoryRemoteDocumentCacheImpl.prototype.getSize = function (txn) {\n    return PersistencePromise.resolve(this.size);\n  };\n\n  return MemoryRemoteDocumentCacheImpl;\n}();\n/**\r\n * Creates a new memory-only RemoteDocumentCache.\r\n *\r\n * @param indexManager - A class that manages collection group indices.\r\n * @param sizer - Used to assess the size of a document. For eager GC, this is\r\n * expected to just return 0 to avoid unnecessarily doing the work of\r\n * calculating the size.\r\n */\n\n\nfunction newMemoryRemoteDocumentCache(indexManager, sizer) {\n  return new MemoryRemoteDocumentCacheImpl(indexManager, sizer);\n}\n/**\r\n * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.\r\n */\n\n\nvar MemoryRemoteDocumentChangeBuffer =\n/** @class */\nfunction (_super) {\n  tslib.__extends(MemoryRemoteDocumentChangeBuffer, _super);\n\n  function MemoryRemoteDocumentChangeBuffer(documentCache) {\n    var _this = _super.call(this) || this;\n\n    _this.documentCache = documentCache;\n    return _this;\n  }\n\n  MemoryRemoteDocumentChangeBuffer.prototype.applyChanges = function (transaction) {\n    var _this = this;\n\n    var promises = [];\n    this.changes.forEach(function (key, doc) {\n      if (doc.document.isValidDocument()) {\n        promises.push(_this.documentCache.addEntry(transaction, doc.document, _this.getReadTime(key)));\n      } else {\n        _this.documentCache.removeEntry(key);\n      }\n    });\n    return PersistencePromise.waitFor(promises);\n  };\n\n  MemoryRemoteDocumentChangeBuffer.prototype.getFromCache = function (transaction, documentKey) {\n    return this.documentCache.getEntry(transaction, documentKey);\n  };\n\n  MemoryRemoteDocumentChangeBuffer.prototype.getAllFromCache = function (transaction, documentKeys) {\n    return this.documentCache.getEntries(transaction, documentKeys);\n  };\n\n  return MemoryRemoteDocumentChangeBuffer;\n}(RemoteDocumentChangeBuffer);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MemoryTargetCache =\n/** @class */\nfunction () {\n  function MemoryTargetCache(persistence) {\n    this.persistence = persistence;\n    /**\r\n     * Maps a target to the data about that target\r\n     */\n\n    this.targets = new ObjectMap(function (t) {\n      return canonifyTarget(t);\n    }, targetEquals);\n    /** The last received snapshot version. */\n\n    this.lastRemoteSnapshotVersion = SnapshotVersion.min();\n    /** The highest numbered target ID encountered. */\n\n    this.highestTargetId = 0;\n    /** The highest sequence number encountered. */\n\n    this.highestSequenceNumber = 0;\n    /**\r\n     * A ordered bidirectional mapping between documents and the remote target\r\n     * IDs.\r\n     */\n\n    this.references = new ReferenceSet();\n    this.targetCount = 0;\n    this.targetIdGenerator = TargetIdGenerator.forTargetCache();\n  }\n\n  MemoryTargetCache.prototype.forEachTarget = function (txn, f) {\n    this.targets.forEach(function (_, targetData) {\n      return f(targetData);\n    });\n    return PersistencePromise.resolve();\n  };\n\n  MemoryTargetCache.prototype.getLastRemoteSnapshotVersion = function (transaction) {\n    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);\n  };\n\n  MemoryTargetCache.prototype.getHighestSequenceNumber = function (transaction) {\n    return PersistencePromise.resolve(this.highestSequenceNumber);\n  };\n\n  MemoryTargetCache.prototype.allocateTargetId = function (transaction) {\n    this.highestTargetId = this.targetIdGenerator.next();\n    return PersistencePromise.resolve(this.highestTargetId);\n  };\n\n  MemoryTargetCache.prototype.setTargetsMetadata = function (transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {\n    if (lastRemoteSnapshotVersion) {\n      this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n\n    if (highestListenSequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = highestListenSequenceNumber;\n    }\n\n    return PersistencePromise.resolve();\n  };\n\n  MemoryTargetCache.prototype.saveTargetData = function (targetData) {\n    this.targets.set(targetData.target, targetData);\n    var targetId = targetData.targetId;\n\n    if (targetId > this.highestTargetId) {\n      this.targetIdGenerator = new TargetIdGenerator(targetId);\n      this.highestTargetId = targetId;\n    }\n\n    if (targetData.sequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = targetData.sequenceNumber;\n    }\n  };\n\n  MemoryTargetCache.prototype.addTargetData = function (transaction, targetData) {\n    this.saveTargetData(targetData);\n    this.targetCount += 1;\n    return PersistencePromise.resolve();\n  };\n\n  MemoryTargetCache.prototype.updateTargetData = function (transaction, targetData) {\n    this.saveTargetData(targetData);\n    return PersistencePromise.resolve();\n  };\n\n  MemoryTargetCache.prototype.removeTargetData = function (transaction, targetData) {\n    this.targets.delete(targetData.target);\n    this.references.removeReferencesForId(targetData.targetId);\n    this.targetCount -= 1;\n    return PersistencePromise.resolve();\n  };\n\n  MemoryTargetCache.prototype.removeTargets = function (transaction, upperBound, activeTargetIds) {\n    var _this = this;\n\n    var count = 0;\n    var removals = [];\n    this.targets.forEach(function (key, targetData) {\n      if (targetData.sequenceNumber <= upperBound && activeTargetIds.get(targetData.targetId) === null) {\n        _this.targets.delete(key);\n\n        removals.push(_this.removeMatchingKeysForTargetId(transaction, targetData.targetId));\n        count++;\n      }\n    });\n    return PersistencePromise.waitFor(removals).next(function () {\n      return count;\n    });\n  };\n\n  MemoryTargetCache.prototype.getTargetCount = function (transaction) {\n    return PersistencePromise.resolve(this.targetCount);\n  };\n\n  MemoryTargetCache.prototype.getTargetData = function (transaction, target) {\n    var targetData = this.targets.get(target) || null;\n    return PersistencePromise.resolve(targetData);\n  };\n\n  MemoryTargetCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\n    this.references.addReferences(keys, targetId);\n    return PersistencePromise.resolve();\n  };\n\n  MemoryTargetCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\n    this.references.removeReferences(keys, targetId);\n    var referenceDelegate = this.persistence.referenceDelegate;\n    var promises = [];\n\n    if (referenceDelegate) {\n      keys.forEach(function (key) {\n        promises.push(referenceDelegate.markPotentiallyOrphaned(txn, key));\n      });\n    }\n\n    return PersistencePromise.waitFor(promises);\n  };\n\n  MemoryTargetCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\n    this.references.removeReferencesForId(targetId);\n    return PersistencePromise.resolve();\n  };\n\n  MemoryTargetCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\n    var matchingKeys = this.references.referencesForId(targetId);\n    return PersistencePromise.resolve(matchingKeys);\n  };\n\n  MemoryTargetCache.prototype.containsKey = function (txn, key) {\n    return PersistencePromise.resolve(this.references.containsKey(key));\n  };\n\n  return MemoryTargetCache;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$b = 'MemoryPersistence';\n/**\r\n * A memory-backed instance of Persistence. Data is stored only in RAM and\r\n * not persisted across sessions.\r\n */\n\nvar MemoryPersistence =\n/** @class */\nfunction () {\n  /**\r\n   * The constructor accepts a factory for creating a reference delegate. This\r\n   * allows both the delegate and this instance to have strong references to\r\n   * each other without having nullable fields that would then need to be\r\n   * checked or asserted on every access.\r\n   */\n  function MemoryPersistence(referenceDelegateFactory, serializer) {\n    var _this = this;\n\n    this.mutationQueues = {};\n    this.listenSequence = new ListenSequence(0);\n    this._started = false;\n    this._started = true;\n    this.referenceDelegate = referenceDelegateFactory(this);\n    this.targetCache = new MemoryTargetCache(this);\n\n    var sizer = function (doc) {\n      return _this.referenceDelegate.documentSize(doc);\n    };\n\n    this.indexManager = new MemoryIndexManager();\n    this.remoteDocumentCache = newMemoryRemoteDocumentCache(this.indexManager, sizer);\n    this.serializer = new LocalSerializer(serializer);\n    this.bundleCache = new MemoryBundleCache(this.serializer);\n  }\n\n  MemoryPersistence.prototype.start = function () {\n    return Promise.resolve();\n  };\n\n  MemoryPersistence.prototype.shutdown = function () {\n    // No durable state to ensure is closed on shutdown.\n    this._started = false;\n    return Promise.resolve();\n  };\n\n  Object.defineProperty(MemoryPersistence.prototype, \"started\", {\n    get: function () {\n      return this._started;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MemoryPersistence.prototype.setDatabaseDeletedListener = function () {// No op.\n  };\n\n  MemoryPersistence.prototype.setNetworkEnabled = function () {// No op.\n  };\n\n  MemoryPersistence.prototype.getIndexManager = function () {\n    return this.indexManager;\n  };\n\n  MemoryPersistence.prototype.getMutationQueue = function (user) {\n    var queue = this.mutationQueues[user.toKey()];\n\n    if (!queue) {\n      queue = new MemoryMutationQueue(this.indexManager, this.referenceDelegate);\n      this.mutationQueues[user.toKey()] = queue;\n    }\n\n    return queue;\n  };\n\n  MemoryPersistence.prototype.getTargetCache = function () {\n    return this.targetCache;\n  };\n\n  MemoryPersistence.prototype.getRemoteDocumentCache = function () {\n    return this.remoteDocumentCache;\n  };\n\n  MemoryPersistence.prototype.getBundleCache = function () {\n    return this.bundleCache;\n  };\n\n  MemoryPersistence.prototype.runTransaction = function (action, mode, transactionOperation) {\n    var _this = this;\n\n    logDebug(LOG_TAG$b, 'Starting transaction:', action);\n    var txn = new MemoryTransaction(this.listenSequence.next());\n    this.referenceDelegate.onTransactionStarted();\n    return transactionOperation(txn).next(function (result) {\n      return _this.referenceDelegate.onTransactionCommitted(txn).next(function () {\n        return result;\n      });\n    }).toPromise().then(function (result) {\n      txn.raiseOnCommittedEvent();\n      return result;\n    });\n  };\n\n  MemoryPersistence.prototype.mutationQueuesContainKey = function (transaction, key) {\n    return PersistencePromise.or(Object.values(this.mutationQueues).map(function (queue) {\n      return function () {\n        return queue.containsKey(transaction, key);\n      };\n    }));\n  };\n\n  return MemoryPersistence;\n}();\n/**\r\n * Memory persistence is not actually transactional, but future implementations\r\n * may have transaction-scoped state.\r\n */\n\n\nvar MemoryTransaction =\n/** @class */\nfunction (_super) {\n  tslib.__extends(MemoryTransaction, _super);\n\n  function MemoryTransaction(currentSequenceNumber) {\n    var _this = _super.call(this) || this;\n\n    _this.currentSequenceNumber = currentSequenceNumber;\n    return _this;\n  }\n\n  return MemoryTransaction;\n}(PersistenceTransaction);\n\nvar MemoryEagerDelegate =\n/** @class */\nfunction () {\n  function MemoryEagerDelegate(persistence) {\n    this.persistence = persistence;\n    /** Tracks all documents that are active in Query views. */\n\n    this.localViewReferences = new ReferenceSet();\n    /** The list of documents that are potentially GCed after each transaction. */\n\n    this._orphanedDocuments = null;\n  }\n\n  MemoryEagerDelegate.factory = function (persistence) {\n    return new MemoryEagerDelegate(persistence);\n  };\n\n  Object.defineProperty(MemoryEagerDelegate.prototype, \"orphanedDocuments\", {\n    get: function () {\n      if (!this._orphanedDocuments) {\n        throw fail();\n      } else {\n        return this._orphanedDocuments;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MemoryEagerDelegate.prototype.addReference = function (txn, targetId, key) {\n    this.localViewReferences.addReference(key, targetId);\n    this.orphanedDocuments.delete(key.toString());\n    return PersistencePromise.resolve();\n  };\n\n  MemoryEagerDelegate.prototype.removeReference = function (txn, targetId, key) {\n    this.localViewReferences.removeReference(key, targetId);\n    this.orphanedDocuments.add(key.toString());\n    return PersistencePromise.resolve();\n  };\n\n  MemoryEagerDelegate.prototype.markPotentiallyOrphaned = function (txn, key) {\n    this.orphanedDocuments.add(key.toString());\n    return PersistencePromise.resolve();\n  };\n\n  MemoryEagerDelegate.prototype.removeTarget = function (txn, targetData) {\n    var _this = this;\n\n    var orphaned = this.localViewReferences.removeReferencesForId(targetData.targetId);\n    orphaned.forEach(function (key) {\n      return _this.orphanedDocuments.add(key.toString());\n    });\n    var cache = this.persistence.getTargetCache();\n    return cache.getMatchingKeysForTargetId(txn, targetData.targetId).next(function (keys) {\n      keys.forEach(function (key) {\n        return _this.orphanedDocuments.add(key.toString());\n      });\n    }).next(function () {\n      return cache.removeTargetData(txn, targetData);\n    });\n  };\n\n  MemoryEagerDelegate.prototype.onTransactionStarted = function () {\n    this._orphanedDocuments = new Set();\n  };\n\n  MemoryEagerDelegate.prototype.onTransactionCommitted = function (txn) {\n    var _this = this; // Remove newly orphaned documents.\n\n\n    var cache = this.persistence.getRemoteDocumentCache();\n    var changeBuffer = cache.newChangeBuffer();\n    return PersistencePromise.forEach(this.orphanedDocuments, function (path) {\n      var key = DocumentKey.fromPath(path);\n      return _this.isReferenced(txn, key).next(function (isReferenced) {\n        if (!isReferenced) {\n          changeBuffer.removeEntry(key);\n        }\n      });\n    }).next(function () {\n      _this._orphanedDocuments = null;\n      return changeBuffer.apply(txn);\n    });\n  };\n\n  MemoryEagerDelegate.prototype.updateLimboDocument = function (txn, key) {\n    var _this = this;\n\n    return this.isReferenced(txn, key).next(function (isReferenced) {\n      if (isReferenced) {\n        _this.orphanedDocuments.delete(key.toString());\n      } else {\n        _this.orphanedDocuments.add(key.toString());\n      }\n    });\n  };\n\n  MemoryEagerDelegate.prototype.documentSize = function (doc) {\n    // For eager GC, we don't care about the document size, there are no size thresholds.\n    return 0;\n  };\n\n  MemoryEagerDelegate.prototype.isReferenced = function (txn, key) {\n    var _this = this;\n\n    return PersistencePromise.or([function () {\n      return PersistencePromise.resolve(_this.localViewReferences.containsKey(key));\n    }, function () {\n      return _this.persistence.getTargetCache().containsKey(txn, key);\n    }, function () {\n      return _this.persistence.mutationQueuesContainKey(txn, key);\n    }]);\n  };\n\n  return MemoryEagerDelegate;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A query engine that takes advantage of the target document mapping in the\r\n * QueryCache. Query execution is optimized by only reading the documents that\r\n * previously matched a query plus any documents that were edited after the\r\n * query was last listened to.\r\n *\r\n * There are some cases when this optimization is not guaranteed to produce\r\n * the same results as full collection scans. In these cases, query\r\n * processing falls back to full scans. These cases are:\r\n *\r\n * - Limit queries where a document that matched the query previously no longer\r\n *   matches the query.\r\n *\r\n * - Limit queries where a document edit may cause the document to sort below\r\n *   another document that is in the local cache.\r\n *\r\n * - Queries that have never been CURRENT or free of limbo documents.\r\n */\n\n\nvar QueryEngine =\n/** @class */\nfunction () {\n  function QueryEngine() {}\n  /** Sets the document view to query against. */\n\n\n  QueryEngine.prototype.setLocalDocumentsView = function (localDocuments) {\n    this.localDocumentsView = localDocuments;\n  };\n  /** Returns all local documents matching the specified query. */\n\n\n  QueryEngine.prototype.getDocumentsMatchingQuery = function (transaction, query, lastLimboFreeSnapshotVersion, remoteKeys) {\n    var _this = this; // Queries that match all documents don't benefit from using\n    // key-based lookups. It is more efficient to scan all documents in a\n    // collection, rather than to perform individual lookups.\n\n\n    if (matchesAllDocuments(query)) {\n      return this.executeFullCollectionScan(transaction, query);\n    } // Queries that have never seen a snapshot without limbo free documents\n    // should also be run as a full collection scan.\n\n\n    if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.min())) {\n      return this.executeFullCollectionScan(transaction, query);\n    }\n\n    return this.localDocumentsView.getDocuments(transaction, remoteKeys).next(function (documents) {\n      var previousResults = _this.applyQuery(query, documents);\n\n      if ((hasLimitToFirst(query) || hasLimitToLast(query)) && _this.needsRefill(query.limitType, previousResults, remoteKeys, lastLimboFreeSnapshotVersion)) {\n        return _this.executeFullCollectionScan(transaction, query);\n      }\n\n      if (getLogLevel() <= logger.LogLevel.DEBUG) {\n        logDebug('QueryEngine', 'Re-using previous result from %s to execute query: %s', lastLimboFreeSnapshotVersion.toString(), stringifyQuery(query));\n      } // Retrieve all results for documents that were updated since the last\n      // limbo-document free remote snapshot.\n\n\n      return _this.localDocumentsView.getDocumentsMatchingQuery(transaction, query, lastLimboFreeSnapshotVersion).next(function (updatedResults) {\n        // We merge `previousResults` into `updateResults`, since\n        // `updateResults` is already a DocumentMap. If a document is\n        // contained in both lists, then its contents are the same.\n        previousResults.forEach(function (doc) {\n          updatedResults = updatedResults.insert(doc.key, doc);\n        });\n        return updatedResults;\n      });\n    });\n  };\n  /** Applies the query filter and sorting to the provided documents.  */\n\n\n  QueryEngine.prototype.applyQuery = function (query, documents) {\n    // Sort the documents and re-apply the query filter since previously\n    // matching documents do not necessarily still match the query.\n    var queryResults = new SortedSet(newQueryComparator(query));\n    documents.forEach(function (_, maybeDoc) {\n      if (queryMatches(query, maybeDoc)) {\n        queryResults = queryResults.add(maybeDoc);\n      }\n    });\n    return queryResults;\n  };\n  /**\r\n   * Determines if a limit query needs to be refilled from cache, making it\r\n   * ineligible for index-free execution.\r\n   *\r\n   * @param sortedPreviousResults - The documents that matched the query when it\r\n   * was last synchronized, sorted by the query's comparator.\r\n   * @param remoteKeys - The document keys that matched the query at the last\r\n   * snapshot.\r\n   * @param limboFreeSnapshotVersion - The version of the snapshot when the\r\n   * query was last synchronized.\r\n   */\n\n\n  QueryEngine.prototype.needsRefill = function (limitType, sortedPreviousResults, remoteKeys, limboFreeSnapshotVersion) {\n    // The query needs to be refilled if a previously matching document no\n    // longer matches.\n    if (remoteKeys.size !== sortedPreviousResults.size) {\n      return true;\n    } // Limit queries are not eligible for index-free query execution if there is\n    // a potential that an older document from cache now sorts before a document\n    // that was previously part of the limit. This, however, can only happen if\n    // the document at the edge of the limit goes out of limit.\n    // If a document that is not the limit boundary sorts differently,\n    // the boundary of the limit itself did not change and documents from cache\n    // will continue to be \"rejected\" by this boundary. Therefore, we can ignore\n    // any modifications that don't affect the last document.\n\n\n    var docAtLimitEdge = limitType === \"F\"\n    /* First */\n    ? sortedPreviousResults.last() : sortedPreviousResults.first();\n\n    if (!docAtLimitEdge) {\n      // We don't need to refill the query if there were already no documents.\n      return false;\n    }\n\n    return docAtLimitEdge.hasPendingWrites || docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0;\n  };\n\n  QueryEngine.prototype.executeFullCollectionScan = function (transaction, query) {\n    if (getLogLevel() <= logger.LogLevel.DEBUG) {\n      logDebug('QueryEngine', 'Using full collection scan to execute query:', stringifyQuery(query));\n    }\n\n    return this.localDocumentsView.getDocumentsMatchingQuery(transaction, query, SnapshotVersion.min());\n  };\n\n  return QueryEngine;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Simple wrapper around a nullable UID. Mostly exists to make code more\r\n * readable.\r\n */\n\n\nvar User =\n/** @class */\nfunction () {\n  function User(uid) {\n    this.uid = uid;\n  }\n\n  User.prototype.isAuthenticated = function () {\n    return this.uid != null;\n  };\n  /**\r\n   * Returns a key representing this user, suitable for inclusion in a\r\n   * dictionary.\r\n   */\n\n\n  User.prototype.toKey = function () {\n    if (this.isAuthenticated()) {\n      return 'uid:' + this.uid;\n    } else {\n      return 'anonymous-user';\n    }\n  };\n\n  User.prototype.isEqual = function (otherUser) {\n    return otherUser.uid === this.uid;\n  };\n\n  return User;\n}();\n/** A user with a null UID. */\n\n\nUser.UNAUTHENTICATED = new User(null); // TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\n\nUser.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\nUser.FIRST_PARTY = new User('first-party-uid');\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// The format of the LocalStorage key that stores the client state is:\n//     firestore_clients_<persistence_prefix>_<instance_key>\n\nvar CLIENT_STATE_KEY_PREFIX = 'firestore_clients';\n/** Assembles the key for a client state in WebStorage */\n\nfunction createWebStorageClientStateKey(persistenceKey, clientId) {\n  return CLIENT_STATE_KEY_PREFIX + \"_\" + persistenceKey + \"_\" + clientId;\n} // The format of the WebStorage key that stores the mutation state is:\n//     firestore_mutations_<persistence_prefix>_<batch_id>\n//     (for unauthenticated users)\n// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>\n//\n// 'user_uid' is last to avoid needing to escape '_' characters that it might\n// contain.\n\n\nvar MUTATION_BATCH_KEY_PREFIX = 'firestore_mutations';\n/** Assembles the key for a mutation batch in WebStorage */\n\nfunction createWebStorageMutationBatchKey(persistenceKey, user, batchId) {\n  var mutationKey = MUTATION_BATCH_KEY_PREFIX + \"_\" + persistenceKey + \"_\" + batchId;\n\n  if (user.isAuthenticated()) {\n    mutationKey += \"_\" + user.uid;\n  }\n\n  return mutationKey;\n} // The format of the WebStorage key that stores a query target's metadata is:\n//     firestore_targets_<persistence_prefix>_<target_id>\n\n\nvar QUERY_TARGET_KEY_PREFIX = 'firestore_targets';\n/** Assembles the key for a query state in WebStorage */\n\nfunction createWebStorageQueryTargetMetadataKey(persistenceKey, targetId) {\n  return QUERY_TARGET_KEY_PREFIX + \"_\" + persistenceKey + \"_\" + targetId;\n} // The WebStorage prefix that stores the primary tab's online state. The\n// format of the key is:\n//     firestore_online_state_<persistence_prefix>\n\n\nvar ONLINE_STATE_KEY_PREFIX = 'firestore_online_state';\n/** Assembles the key for the online state of the primary tab. */\n\nfunction createWebStorageOnlineStateKey(persistenceKey) {\n  return ONLINE_STATE_KEY_PREFIX + \"_\" + persistenceKey;\n} // The WebStorage prefix that plays as a event to indicate the remote documents\n// might have changed due to some secondary tabs loading a bundle.\n// format of the key is:\n//     firestore_bundle_loaded_<persistenceKey>\n\n\nvar BUNDLE_LOADED_KEY_PREFIX = 'firestore_bundle_loaded';\n\nfunction createBundleLoadedKey(persistenceKey) {\n  return BUNDLE_LOADED_KEY_PREFIX + \"_\" + persistenceKey;\n} // The WebStorage key prefix for the key that stores the last sequence number allocated. The key\n// looks like 'firestore_sequence_number_<persistence_prefix>'.\n\n\nvar SEQUENCE_NUMBER_KEY_PREFIX = 'firestore_sequence_number';\n/** Assembles the key for the current sequence number. */\n\nfunction createWebStorageSequenceNumberKey(persistenceKey) {\n  return SEQUENCE_NUMBER_KEY_PREFIX + \"_\" + persistenceKey;\n}\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$a = 'SharedClientState';\n/**\r\n * Holds the state of a mutation batch, including its user ID, batch ID and\r\n * whether the batch is 'pending', 'acknowledged' or 'rejected'.\r\n */\n// Visible for testing\n\nvar MutationMetadata =\n/** @class */\nfunction () {\n  function MutationMetadata(user, batchId, state, error) {\n    this.user = user;\n    this.batchId = batchId;\n    this.state = state;\n    this.error = error;\n  }\n  /**\r\n   * Parses a MutationMetadata from its JSON representation in WebStorage.\r\n   * Logs a warning and returns null if the format of the data is not valid.\r\n   */\n\n\n  MutationMetadata.fromWebStorageEntry = function (user, batchId, value) {\n    var mutationBatch = JSON.parse(value);\n    var validData = typeof mutationBatch === 'object' && ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !== -1 && (mutationBatch.error === undefined || typeof mutationBatch.error === 'object');\n    var firestoreError = undefined;\n\n    if (validData && mutationBatch.error) {\n      validData = typeof mutationBatch.error.message === 'string' && typeof mutationBatch.error.code === 'string';\n\n      if (validData) {\n        firestoreError = new FirestoreError(mutationBatch.error.code, mutationBatch.error.message);\n      }\n    }\n\n    if (validData) {\n      return new MutationMetadata(user, batchId, mutationBatch.state, firestoreError);\n    } else {\n      logError(LOG_TAG$a, \"Failed to parse mutation state for ID '\" + batchId + \"': \" + value);\n      return null;\n    }\n  };\n\n  MutationMetadata.prototype.toWebStorageJSON = function () {\n    var batchMetadata = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n\n    };\n\n    if (this.error) {\n      batchMetadata.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(batchMetadata);\n  };\n\n  return MutationMetadata;\n}();\n/**\r\n * Holds the state of a query target, including its target ID and whether the\r\n * target is 'not-current', 'current' or 'rejected'.\r\n */\n// Visible for testing\n\n\nvar QueryTargetMetadata =\n/** @class */\nfunction () {\n  function QueryTargetMetadata(targetId, state, error) {\n    this.targetId = targetId;\n    this.state = state;\n    this.error = error;\n  }\n  /**\r\n   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.\r\n   * Logs a warning and returns null if the format of the data is not valid.\r\n   */\n\n\n  QueryTargetMetadata.fromWebStorageEntry = function (targetId, value) {\n    var targetState = JSON.parse(value);\n    var validData = typeof targetState === 'object' && ['not-current', 'current', 'rejected'].indexOf(targetState.state) !== -1 && (targetState.error === undefined || typeof targetState.error === 'object');\n    var firestoreError = undefined;\n\n    if (validData && targetState.error) {\n      validData = typeof targetState.error.message === 'string' && typeof targetState.error.code === 'string';\n\n      if (validData) {\n        firestoreError = new FirestoreError(targetState.error.code, targetState.error.message);\n      }\n    }\n\n    if (validData) {\n      return new QueryTargetMetadata(targetId, targetState.state, firestoreError);\n    } else {\n      logError(LOG_TAG$a, \"Failed to parse target state for ID '\" + targetId + \"': \" + value);\n      return null;\n    }\n  };\n\n  QueryTargetMetadata.prototype.toWebStorageJSON = function () {\n    var targetState = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n\n    };\n\n    if (this.error) {\n      targetState.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n\n    return JSON.stringify(targetState);\n  };\n\n  return QueryTargetMetadata;\n}();\n/**\r\n * This class represents the immutable ClientState for a client read from\r\n * WebStorage, containing the list of active query targets.\r\n */\n\n\nvar RemoteClientState =\n/** @class */\nfunction () {\n  function RemoteClientState(clientId, activeTargetIds) {\n    this.clientId = clientId;\n    this.activeTargetIds = activeTargetIds;\n  }\n  /**\r\n   * Parses a RemoteClientState from the JSON representation in WebStorage.\r\n   * Logs a warning and returns null if the format of the data is not valid.\r\n   */\n\n\n  RemoteClientState.fromWebStorageEntry = function (clientId, value) {\n    var clientState = JSON.parse(value);\n    var validData = typeof clientState === 'object' && clientState.activeTargetIds instanceof Array;\n    var activeTargetIdsSet = targetIdSet();\n\n    for (var i = 0; validData && i < clientState.activeTargetIds.length; ++i) {\n      validData = isSafeInteger(clientState.activeTargetIds[i]);\n      activeTargetIdsSet = activeTargetIdsSet.add(clientState.activeTargetIds[i]);\n    }\n\n    if (validData) {\n      return new RemoteClientState(clientId, activeTargetIdsSet);\n    } else {\n      logError(LOG_TAG$a, \"Failed to parse client data for instance '\" + clientId + \"': \" + value);\n      return null;\n    }\n  };\n\n  return RemoteClientState;\n}();\n/**\r\n * This class represents the online state for all clients participating in\r\n * multi-tab. The online state is only written to by the primary client, and\r\n * used in secondary clients to update their query views.\r\n */\n\n\nvar SharedOnlineState =\n/** @class */\nfunction () {\n  function SharedOnlineState(clientId, onlineState) {\n    this.clientId = clientId;\n    this.onlineState = onlineState;\n  }\n  /**\r\n   * Parses a SharedOnlineState from its JSON representation in WebStorage.\r\n   * Logs a warning and returns null if the format of the data is not valid.\r\n   */\n\n\n  SharedOnlineState.fromWebStorageEntry = function (value) {\n    var onlineState = JSON.parse(value);\n    var validData = typeof onlineState === 'object' && ['Unknown', 'Online', 'Offline'].indexOf(onlineState.onlineState) !== -1 && typeof onlineState.clientId === 'string';\n\n    if (validData) {\n      return new SharedOnlineState(onlineState.clientId, onlineState.onlineState);\n    } else {\n      logError(LOG_TAG$a, \"Failed to parse online state: \" + value);\n      return null;\n    }\n  };\n\n  return SharedOnlineState;\n}();\n/**\r\n * Metadata state of the local client. Unlike `RemoteClientState`, this class is\r\n * mutable and keeps track of all pending mutations, which allows us to\r\n * update the range of pending mutation batch IDs as new mutations are added or\r\n * removed.\r\n *\r\n * The data in `LocalClientState` is not read from WebStorage and instead\r\n * updated via its instance methods. The updated state can be serialized via\r\n * `toWebStorageJSON()`.\r\n */\n// Visible for testing.\n\n\nvar LocalClientState =\n/** @class */\nfunction () {\n  function LocalClientState() {\n    this.activeTargetIds = targetIdSet();\n  }\n\n  LocalClientState.prototype.addQueryTarget = function (targetId) {\n    this.activeTargetIds = this.activeTargetIds.add(targetId);\n  };\n\n  LocalClientState.prototype.removeQueryTarget = function (targetId) {\n    this.activeTargetIds = this.activeTargetIds.delete(targetId);\n  };\n  /**\r\n   * Converts this entry into a JSON-encoded format we can use for WebStorage.\r\n   * Does not encode `clientId` as it is part of the key in WebStorage.\r\n   */\n\n\n  LocalClientState.prototype.toWebStorageJSON = function () {\n    var data = {\n      activeTargetIds: this.activeTargetIds.toArray(),\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n\n    };\n    return JSON.stringify(data);\n  };\n\n  return LocalClientState;\n}();\n/**\r\n * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the\r\n * backing store for the SharedClientState. It keeps track of all active\r\n * clients and supports modifications of the local client's data.\r\n */\n\n\nvar WebStorageSharedClientState =\n/** @class */\nfunction () {\n  function WebStorageSharedClientState(window, queue, persistenceKey, localClientId, initialUser) {\n    this.window = window;\n    this.queue = queue;\n    this.persistenceKey = persistenceKey;\n    this.localClientId = localClientId;\n    this.syncEngine = null;\n    this.onlineStateHandler = null;\n    this.sequenceNumberHandler = null;\n    this.storageListener = this.handleWebStorageEvent.bind(this);\n    this.activeClients = new SortedMap(primitiveComparator);\n    this.started = false;\n    /**\r\n     * Captures WebStorage events that occur before `start()` is called. These\r\n     * events are replayed once `WebStorageSharedClientState` is started.\r\n     */\n\n    this.earlyEvents = []; // Escape the special characters mentioned here:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n\n    var escapedPersistenceKey = persistenceKey.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    this.storage = this.window.localStorage;\n    this.currentUser = initialUser;\n    this.localClientStorageKey = createWebStorageClientStateKey(this.persistenceKey, this.localClientId);\n    this.sequenceNumberKey = createWebStorageSequenceNumberKey(this.persistenceKey);\n    this.activeClients = this.activeClients.insert(this.localClientId, new LocalClientState());\n    this.clientStateKeyRe = new RegExp(\"^\" + CLIENT_STATE_KEY_PREFIX + \"_\" + escapedPersistenceKey + \"_([^_]*)$\");\n    this.mutationBatchKeyRe = new RegExp(\"^\" + MUTATION_BATCH_KEY_PREFIX + \"_\" + escapedPersistenceKey + \"_(\\\\d+)(?:_(.*))?$\");\n    this.queryTargetKeyRe = new RegExp(\"^\" + QUERY_TARGET_KEY_PREFIX + \"_\" + escapedPersistenceKey + \"_(\\\\d+)$\");\n    this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);\n    this.bundleLoadedKey = createBundleLoadedKey(this.persistenceKey); // Rather than adding the storage observer during start(), we add the\n    // storage observer during initialization. This ensures that we collect\n    // events before other components populate their initial state (during their\n    // respective start() calls). Otherwise, we might for example miss a\n    // mutation that is added after LocalStore's start() processed the existing\n    // mutations but before we observe WebStorage events.\n\n    this.window.addEventListener('storage', this.storageListener);\n  }\n  /** Returns 'true' if WebStorage is available in the current environment. */\n\n\n  WebStorageSharedClientState.isAvailable = function (window) {\n    return !!(window && window.localStorage);\n  };\n\n  WebStorageSharedClientState.prototype.start = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var existingClients, _i, existingClients_1, clientId, storageItem, clientState, onlineStateJSON, onlineState, _d, _e, event_1;\n\n      var _this = this;\n\n      return tslib.__generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.syncEngine.getActiveClients()];\n\n          case 1:\n            existingClients = _f.sent();\n\n            for (_i = 0, existingClients_1 = existingClients; _i < existingClients_1.length; _i++) {\n              clientId = existingClients_1[_i];\n\n              if (clientId === this.localClientId) {\n                continue;\n              }\n\n              storageItem = this.getItem(createWebStorageClientStateKey(this.persistenceKey, clientId));\n\n              if (storageItem) {\n                clientState = RemoteClientState.fromWebStorageEntry(clientId, storageItem);\n\n                if (clientState) {\n                  this.activeClients = this.activeClients.insert(clientState.clientId, clientState);\n                }\n              }\n            }\n\n            this.persistClientState();\n            onlineStateJSON = this.storage.getItem(this.onlineStateKey);\n\n            if (onlineStateJSON) {\n              onlineState = this.fromWebStorageOnlineState(onlineStateJSON);\n\n              if (onlineState) {\n                this.handleOnlineStateEvent(onlineState);\n              }\n            }\n\n            for (_d = 0, _e = this.earlyEvents; _d < _e.length; _d++) {\n              event_1 = _e[_d];\n              this.handleWebStorageEvent(event_1);\n            }\n\n            this.earlyEvents = []; // Register a window unload hook to remove the client metadata entry from\n            // WebStorage even if `shutdown()` was not called.\n\n            this.window.addEventListener('pagehide', function () {\n              return _this.shutdown();\n            });\n            this.started = true;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  WebStorageSharedClientState.prototype.writeSequenceNumber = function (sequenceNumber) {\n    this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));\n  };\n\n  WebStorageSharedClientState.prototype.getAllActiveQueryTargets = function () {\n    return this.extractActiveQueryTargets(this.activeClients);\n  };\n\n  WebStorageSharedClientState.prototype.isActiveQueryTarget = function (targetId) {\n    var found = false;\n    this.activeClients.forEach(function (key, value) {\n      if (value.activeTargetIds.has(targetId)) {\n        found = true;\n      }\n    });\n    return found;\n  };\n\n  WebStorageSharedClientState.prototype.addPendingMutation = function (batchId) {\n    this.persistMutationState(batchId, 'pending');\n  };\n\n  WebStorageSharedClientState.prototype.updateMutationState = function (batchId, state, error) {\n    this.persistMutationState(batchId, state, error); // Once a final mutation result is observed by other clients, they no longer\n    // access the mutation's metadata entry. Since WebStorage replays events\n    // in order, it is safe to delete the entry right after updating it.\n\n    this.removeMutationState(batchId);\n  };\n\n  WebStorageSharedClientState.prototype.addLocalQueryTarget = function (targetId) {\n    var queryState = 'not-current'; // Lookup an existing query state if the target ID was already registered\n    // by another tab\n\n    if (this.isActiveQueryTarget(targetId)) {\n      var storageItem = this.storage.getItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));\n\n      if (storageItem) {\n        var metadata = QueryTargetMetadata.fromWebStorageEntry(targetId, storageItem);\n\n        if (metadata) {\n          queryState = metadata.state;\n        }\n      }\n    }\n\n    this.localClientState.addQueryTarget(targetId);\n    this.persistClientState();\n    return queryState;\n  };\n\n  WebStorageSharedClientState.prototype.removeLocalQueryTarget = function (targetId) {\n    this.localClientState.removeQueryTarget(targetId);\n    this.persistClientState();\n  };\n\n  WebStorageSharedClientState.prototype.isLocalQueryTarget = function (targetId) {\n    return this.localClientState.activeTargetIds.has(targetId);\n  };\n\n  WebStorageSharedClientState.prototype.clearQueryState = function (targetId) {\n    this.removeItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));\n  };\n\n  WebStorageSharedClientState.prototype.updateQueryState = function (targetId, state, error) {\n    this.persistQueryTargetState(targetId, state, error);\n  };\n\n  WebStorageSharedClientState.prototype.handleUserChange = function (user, removedBatchIds, addedBatchIds) {\n    var _this = this;\n\n    removedBatchIds.forEach(function (batchId) {\n      _this.removeMutationState(batchId);\n    });\n    this.currentUser = user;\n    addedBatchIds.forEach(function (batchId) {\n      _this.addPendingMutation(batchId);\n    });\n  };\n\n  WebStorageSharedClientState.prototype.setOnlineState = function (onlineState) {\n    this.persistOnlineState(onlineState);\n  };\n\n  WebStorageSharedClientState.prototype.notifyBundleLoaded = function () {\n    this.persistBundleLoadedState();\n  };\n\n  WebStorageSharedClientState.prototype.shutdown = function () {\n    if (this.started) {\n      this.window.removeEventListener('storage', this.storageListener);\n      this.removeItem(this.localClientStorageKey);\n      this.started = false;\n    }\n  };\n\n  WebStorageSharedClientState.prototype.getItem = function (key) {\n    var value = this.storage.getItem(key);\n    logDebug(LOG_TAG$a, 'READ', key, value);\n    return value;\n  };\n\n  WebStorageSharedClientState.prototype.setItem = function (key, value) {\n    logDebug(LOG_TAG$a, 'SET', key, value);\n    this.storage.setItem(key, value);\n  };\n\n  WebStorageSharedClientState.prototype.removeItem = function (key) {\n    logDebug(LOG_TAG$a, 'REMOVE', key);\n    this.storage.removeItem(key);\n  };\n\n  WebStorageSharedClientState.prototype.handleWebStorageEvent = function (event) {\n    var _this = this; // Note: The function is typed to take Event to be interface-compatible with\n    // `Window.addEventListener`.\n\n\n    var storageEvent = event;\n\n    if (storageEvent.storageArea === this.storage) {\n      logDebug(LOG_TAG$a, 'EVENT', storageEvent.key, storageEvent.newValue);\n\n      if (storageEvent.key === this.localClientStorageKey) {\n        logError('Received WebStorage notification for local change. Another client might have ' + 'garbage-collected our state');\n        return;\n      }\n\n      this.queue.enqueueRetryable(function () {\n        return tslib.__awaiter(_this, void 0, void 0, function () {\n          var clientState, clientId, mutationMetadata, queryTargetMetadata, onlineState, sequenceNumber;\n          return tslib.__generator(this, function (_d) {\n            if (!this.started) {\n              this.earlyEvents.push(storageEvent);\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (storageEvent.key === null) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (this.clientStateKeyRe.test(storageEvent.key)) {\n              if (storageEvent.newValue != null) {\n                clientState = this.fromWebStorageClientState(storageEvent.key, storageEvent.newValue);\n\n                if (clientState) {\n                  return [2\n                  /*return*/\n                  , this.handleClientStateEvent(clientState.clientId, clientState)];\n                }\n              } else {\n                clientId = this.fromWebStorageClientStateKey(storageEvent.key);\n                return [2\n                /*return*/\n                , this.handleClientStateEvent(clientId, null)];\n              }\n            } else if (this.mutationBatchKeyRe.test(storageEvent.key)) {\n              if (storageEvent.newValue !== null) {\n                mutationMetadata = this.fromWebStorageMutationMetadata(storageEvent.key, storageEvent.newValue);\n\n                if (mutationMetadata) {\n                  return [2\n                  /*return*/\n                  , this.handleMutationBatchEvent(mutationMetadata)];\n                }\n              }\n            } else if (this.queryTargetKeyRe.test(storageEvent.key)) {\n              if (storageEvent.newValue !== null) {\n                queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(storageEvent.key, storageEvent.newValue);\n\n                if (queryTargetMetadata) {\n                  return [2\n                  /*return*/\n                  , this.handleQueryTargetEvent(queryTargetMetadata)];\n                }\n              }\n            } else if (storageEvent.key === this.onlineStateKey) {\n              if (storageEvent.newValue !== null) {\n                onlineState = this.fromWebStorageOnlineState(storageEvent.newValue);\n\n                if (onlineState) {\n                  return [2\n                  /*return*/\n                  , this.handleOnlineStateEvent(onlineState)];\n                }\n              }\n            } else if (storageEvent.key === this.sequenceNumberKey) {\n              sequenceNumber = fromWebStorageSequenceNumber(storageEvent.newValue);\n\n              if (sequenceNumber !== ListenSequence.INVALID) {\n                this.sequenceNumberHandler(sequenceNumber);\n              }\n            } else if (storageEvent.key === this.bundleLoadedKey) {\n              return [2\n              /*return*/\n              , this.syncEngine.synchronizeWithChangedDocuments()];\n            }\n\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      });\n    }\n  };\n\n  Object.defineProperty(WebStorageSharedClientState.prototype, \"localClientState\", {\n    get: function () {\n      return this.activeClients.get(this.localClientId);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebStorageSharedClientState.prototype.persistClientState = function () {\n    this.setItem(this.localClientStorageKey, this.localClientState.toWebStorageJSON());\n  };\n\n  WebStorageSharedClientState.prototype.persistMutationState = function (batchId, state, error) {\n    var mutationState = new MutationMetadata(this.currentUser, batchId, state, error);\n    var mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);\n    this.setItem(mutationKey, mutationState.toWebStorageJSON());\n  };\n\n  WebStorageSharedClientState.prototype.removeMutationState = function (batchId) {\n    var mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);\n    this.removeItem(mutationKey);\n  };\n\n  WebStorageSharedClientState.prototype.persistOnlineState = function (onlineState) {\n    var entry = {\n      clientId: this.localClientId,\n      onlineState: onlineState\n    };\n    this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));\n  };\n\n  WebStorageSharedClientState.prototype.persistQueryTargetState = function (targetId, state, error) {\n    var targetKey = createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId);\n    var targetMetadata = new QueryTargetMetadata(targetId, state, error);\n    this.setItem(targetKey, targetMetadata.toWebStorageJSON());\n  };\n\n  WebStorageSharedClientState.prototype.persistBundleLoadedState = function () {\n    this.setItem(this.bundleLoadedKey, 'value-not-used');\n  };\n  /**\r\n   * Parses a client state key in WebStorage. Returns null if the key does not\r\n   * match the expected key format.\r\n   */\n\n\n  WebStorageSharedClientState.prototype.fromWebStorageClientStateKey = function (key) {\n    var match = this.clientStateKeyRe.exec(key);\n    return match ? match[1] : null;\n  };\n  /**\r\n   * Parses a client state in WebStorage. Returns 'null' if the value could not\r\n   * be parsed.\r\n   */\n\n\n  WebStorageSharedClientState.prototype.fromWebStorageClientState = function (key, value) {\n    var clientId = this.fromWebStorageClientStateKey(key);\n    return RemoteClientState.fromWebStorageEntry(clientId, value);\n  };\n  /**\r\n   * Parses a mutation batch state in WebStorage. Returns 'null' if the value\r\n   * could not be parsed.\r\n   */\n\n\n  WebStorageSharedClientState.prototype.fromWebStorageMutationMetadata = function (key, value) {\n    var match = this.mutationBatchKeyRe.exec(key);\n    var batchId = Number(match[1]);\n    var userId = match[2] !== undefined ? match[2] : null;\n    return MutationMetadata.fromWebStorageEntry(new User(userId), batchId, value);\n  };\n  /**\r\n   * Parses a query target state from WebStorage. Returns 'null' if the value\r\n   * could not be parsed.\r\n   */\n\n\n  WebStorageSharedClientState.prototype.fromWebStorageQueryTargetMetadata = function (key, value) {\n    var match = this.queryTargetKeyRe.exec(key);\n    var targetId = Number(match[1]);\n    return QueryTargetMetadata.fromWebStorageEntry(targetId, value);\n  };\n  /**\r\n   * Parses an online state from WebStorage. Returns 'null' if the value\r\n   * could not be parsed.\r\n   */\n\n\n  WebStorageSharedClientState.prototype.fromWebStorageOnlineState = function (value) {\n    return SharedOnlineState.fromWebStorageEntry(value);\n  };\n\n  WebStorageSharedClientState.prototype.handleMutationBatchEvent = function (mutationBatch) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_d) {\n        if (mutationBatch.user.uid !== this.currentUser.uid) {\n          logDebug(LOG_TAG$a, \"Ignoring mutation for non-active user \" + mutationBatch.user.uid);\n          return [2\n          /*return*/\n          ];\n        }\n\n        return [2\n        /*return*/\n        , this.syncEngine.applyBatchState(mutationBatch.batchId, mutationBatch.state, mutationBatch.error)];\n      });\n    });\n  };\n\n  WebStorageSharedClientState.prototype.handleQueryTargetEvent = function (targetMetadata) {\n    return this.syncEngine.applyTargetState(targetMetadata.targetId, targetMetadata.state, targetMetadata.error);\n  };\n\n  WebStorageSharedClientState.prototype.handleClientStateEvent = function (clientId, clientState) {\n    var _this = this;\n\n    var updatedClients = clientState ? this.activeClients.insert(clientId, clientState) : this.activeClients.remove(clientId);\n    var existingTargets = this.extractActiveQueryTargets(this.activeClients);\n    var newTargets = this.extractActiveQueryTargets(updatedClients);\n    var addedTargets = [];\n    var removedTargets = [];\n    newTargets.forEach(function (targetId) {\n      if (!existingTargets.has(targetId)) {\n        addedTargets.push(targetId);\n      }\n    });\n    existingTargets.forEach(function (targetId) {\n      if (!newTargets.has(targetId)) {\n        removedTargets.push(targetId);\n      }\n    });\n    return this.syncEngine.applyActiveTargetsChange(addedTargets, removedTargets).then(function () {\n      _this.activeClients = updatedClients;\n    });\n  };\n\n  WebStorageSharedClientState.prototype.handleOnlineStateEvent = function (onlineState) {\n    // We check whether the client that wrote this online state is still active\n    // by comparing its client ID to the list of clients kept active in\n    // IndexedDb. If a client does not update their IndexedDb client state\n    // within 5 seconds, it is considered inactive and we don't emit an online\n    // state event.\n    if (this.activeClients.get(onlineState.clientId)) {\n      this.onlineStateHandler(onlineState.onlineState);\n    }\n  };\n\n  WebStorageSharedClientState.prototype.extractActiveQueryTargets = function (clients) {\n    var activeTargets = targetIdSet();\n    clients.forEach(function (kev, value) {\n      activeTargets = activeTargets.unionWith(value.activeTargetIds);\n    });\n    return activeTargets;\n  };\n\n  return WebStorageSharedClientState;\n}();\n\nfunction fromWebStorageSequenceNumber(seqString) {\n  var sequenceNumber = ListenSequence.INVALID;\n\n  if (seqString != null) {\n    try {\n      var parsed = JSON.parse(seqString);\n      hardAssert(typeof parsed === 'number');\n      sequenceNumber = parsed;\n    } catch (e) {\n      logError(LOG_TAG$a, 'Failed to read sequence number from WebStorage', e);\n    }\n  }\n\n  return sequenceNumber;\n}\n/**\r\n * `MemorySharedClientState` is a simple implementation of SharedClientState for\r\n * clients using memory persistence. The state in this class remains fully\r\n * isolated and no synchronization is performed.\r\n */\n\n\nvar MemorySharedClientState =\n/** @class */\nfunction () {\n  function MemorySharedClientState() {\n    this.localState = new LocalClientState();\n    this.queryState = {};\n    this.onlineStateHandler = null;\n    this.sequenceNumberHandler = null;\n  }\n\n  MemorySharedClientState.prototype.addPendingMutation = function (batchId) {// No op.\n  };\n\n  MemorySharedClientState.prototype.updateMutationState = function (batchId, state, error) {// No op.\n  };\n\n  MemorySharedClientState.prototype.addLocalQueryTarget = function (targetId) {\n    this.localState.addQueryTarget(targetId);\n    return this.queryState[targetId] || 'not-current';\n  };\n\n  MemorySharedClientState.prototype.updateQueryState = function (targetId, state, error) {\n    this.queryState[targetId] = state;\n  };\n\n  MemorySharedClientState.prototype.removeLocalQueryTarget = function (targetId) {\n    this.localState.removeQueryTarget(targetId);\n  };\n\n  MemorySharedClientState.prototype.isLocalQueryTarget = function (targetId) {\n    return this.localState.activeTargetIds.has(targetId);\n  };\n\n  MemorySharedClientState.prototype.clearQueryState = function (targetId) {\n    delete this.queryState[targetId];\n  };\n\n  MemorySharedClientState.prototype.getAllActiveQueryTargets = function () {\n    return this.localState.activeTargetIds;\n  };\n\n  MemorySharedClientState.prototype.isActiveQueryTarget = function (targetId) {\n    return this.localState.activeTargetIds.has(targetId);\n  };\n\n  MemorySharedClientState.prototype.start = function () {\n    this.localState = new LocalClientState();\n    return Promise.resolve();\n  };\n\n  MemorySharedClientState.prototype.handleUserChange = function (user, removedBatchIds, addedBatchIds) {// No op.\n  };\n\n  MemorySharedClientState.prototype.setOnlineState = function (onlineState) {// No op.\n  };\n\n  MemorySharedClientState.prototype.shutdown = function () {};\n\n  MemorySharedClientState.prototype.writeSequenceNumber = function (sequenceNumber) {};\n\n  MemorySharedClientState.prototype.notifyBundleLoaded = function () {// No op.\n  };\n\n  return MemorySharedClientState;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar NoopConnectivityMonitor =\n/** @class */\nfunction () {\n  function NoopConnectivityMonitor() {}\n\n  NoopConnectivityMonitor.prototype.addCallback = function (callback) {// No-op.\n  };\n\n  NoopConnectivityMonitor.prototype.shutdown = function () {// No-op.\n  };\n\n  return NoopConnectivityMonitor;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides a simple helper class that implements the Stream interface to\r\n * bridge to other implementations that are streams but do not implement the\r\n * interface. The stream callbacks are invoked with the callOn... methods.\r\n */\n\n\nvar StreamBridge =\n/** @class */\nfunction () {\n  function StreamBridge(args) {\n    this.sendFn = args.sendFn;\n    this.closeFn = args.closeFn;\n  }\n\n  StreamBridge.prototype.onOpen = function (callback) {\n    this.wrappedOnOpen = callback;\n  };\n\n  StreamBridge.prototype.onClose = function (callback) {\n    this.wrappedOnClose = callback;\n  };\n\n  StreamBridge.prototype.onMessage = function (callback) {\n    this.wrappedOnMessage = callback;\n  };\n\n  StreamBridge.prototype.close = function () {\n    this.closeFn();\n  };\n\n  StreamBridge.prototype.send = function (msg) {\n    this.sendFn(msg);\n  };\n\n  StreamBridge.prototype.callOnOpen = function () {\n    this.wrappedOnOpen();\n  };\n\n  StreamBridge.prototype.callOnClose = function (err) {\n    this.wrappedOnClose(err);\n  };\n\n  StreamBridge.prototype.callOnMessage = function (msg) {\n    this.wrappedOnMessage(msg);\n  };\n\n  return StreamBridge;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/*\r\n * Utilities for dealing with node.js-style APIs. See nodePromise for more\r\n * details.\r\n */\n\n/**\r\n * Creates a node-style callback that resolves or rejects a new Promise. The\r\n * callback is passed to the given action which can then use the callback as\r\n * a parameter to a node-style function.\r\n *\r\n * The intent is to directly bridge a node-style function (which takes a\r\n * callback) into a Promise without manually converting between the node-style\r\n * callback and the promise at each call.\r\n *\r\n * In effect it allows you to convert:\r\n *\r\n * @example\r\n * new Promise((resolve: (value?: fs.Stats) => void,\r\n *              reject: (error?: any) => void) => {\r\n *   fs.stat(path, (error?: any, stat?: fs.Stats) => {\r\n *     if (error) {\r\n *       reject(error);\r\n *     } else {\r\n *       resolve(stat);\r\n *     }\r\n *   });\r\n * });\r\n *\r\n * Into\r\n * @example\r\n * nodePromise((callback: NodeCallback<fs.Stats>) => {\r\n *   fs.stat(path, callback);\r\n * });\r\n *\r\n * @param action - a function that takes a node-style callback as an argument\r\n *     and then uses that callback to invoke some node-style API.\r\n * @returns a new Promise which will be rejected if the callback is given the\r\n *     first Error parameter or will resolve to the value given otherwise.\r\n */\n\n\nfunction nodePromise(action) {\n  return new Promise(function (resolve, reject) {\n    action(function (error, value) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(value);\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$9 = 'Connection';\nvar X_GOOG_API_CLIENT_VALUE = \"gl-node/\" + process.versions.node + \" fire/\" + SDK_VERSION + \" grpc/\" + package_json.version;\n\nfunction createMetadata(databasePath, token, appId) {\n  hardAssert(token === null || token.type === 'OAuth');\n  var metadata = new grpcJs.Metadata();\n\n  if (token) {\n    for (var header in token.authHeaders) {\n      if (token.authHeaders.hasOwnProperty(header)) {\n        metadata.set(header, token.authHeaders[header]);\n      }\n    }\n  }\n\n  if (appId) {\n    metadata.set('X-Firebase-GMPID', appId);\n  }\n\n  metadata.set('X-Goog-Api-Client', X_GOOG_API_CLIENT_VALUE); // This header is used to improve routing and project isolation by the\n  // backend.\n\n  metadata.set('Google-Cloud-Resource-Prefix', databasePath);\n  return metadata;\n}\n/**\r\n * A Connection implemented by GRPC-Node.\r\n */\n\n\nvar GrpcConnection =\n/** @class */\nfunction () {\n  function GrpcConnection(protos, databaseInfo) {\n    this.databaseInfo = databaseInfo; // We cache stubs for the most-recently-used token.\n\n    this.cachedStub = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.firestore = protos['google']['firestore']['v1'];\n    this.databasePath = \"projects/\" + databaseInfo.databaseId.projectId + \"/databases/\" + databaseInfo.databaseId.database;\n  }\n\n  GrpcConnection.prototype.ensureActiveStub = function () {\n    if (!this.cachedStub) {\n      logDebug(LOG_TAG$9, 'Creating Firestore stub.');\n      var credentials$1 = this.databaseInfo.ssl ? grpcJs.credentials.createSsl() : grpcJs.credentials.createInsecure();\n      this.cachedStub = new this.firestore.Firestore(this.databaseInfo.host, credentials$1);\n    }\n\n    return this.cachedStub;\n  };\n\n  GrpcConnection.prototype.invokeRPC = function (rpcName, path, request, token) {\n    var stub = this.ensureActiveStub();\n    var metadata = createMetadata(this.databasePath, token, this.databaseInfo.appId);\n    var jsonRequest = Object.assign({\n      database: this.databasePath\n    }, request);\n    return nodePromise(function (callback) {\n      logDebug(LOG_TAG$9, \"RPC '\" + rpcName + \"' invoked with request:\", request);\n      return stub[rpcName](jsonRequest, metadata, function (grpcError, value) {\n        if (grpcError) {\n          logDebug(LOG_TAG$9, \"RPC '\" + rpcName + \"' failed with error:\", grpcError);\n          callback(new FirestoreError(mapCodeFromRpcCode(grpcError.code), grpcError.message));\n        } else {\n          logDebug(LOG_TAG$9, \"RPC '\" + rpcName + \"' completed with response:\", value);\n          callback(undefined, value);\n        }\n      });\n    });\n  };\n\n  GrpcConnection.prototype.invokeStreamingRPC = function (rpcName, path, request, token) {\n    var results = [];\n    var responseDeferred = new Deferred();\n    logDebug(LOG_TAG$9, \"RPC '\" + rpcName + \"' invoked (streaming) with request:\", request);\n    var stub = this.ensureActiveStub();\n    var metadata = createMetadata(this.databasePath, token, this.databaseInfo.appId);\n    var jsonRequest = Object.assign(Object.assign({}, request), {\n      database: this.databasePath\n    });\n    var stream = stub[rpcName](jsonRequest, metadata);\n    stream.on('data', function (response) {\n      logDebug(LOG_TAG$9, \"RPC \" + rpcName + \" received result:\", response);\n      results.push(response);\n    });\n    stream.on('end', function () {\n      logDebug(LOG_TAG$9, \"RPC '\" + rpcName + \"' completed.\");\n      responseDeferred.resolve(results);\n    });\n    stream.on('error', function (grpcError) {\n      logDebug(LOG_TAG$9, \"RPC '\" + rpcName + \"' failed with error:\", grpcError);\n      var code = mapCodeFromRpcCode(grpcError.code);\n      responseDeferred.reject(new FirestoreError(code, grpcError.message));\n    });\n    return responseDeferred.promise;\n  }; // TODO(mikelehen): This \"method\" is a monster. Should be refactored.\n\n\n  GrpcConnection.prototype.openStream = function (rpcName, token) {\n    var stub = this.ensureActiveStub();\n    var metadata = createMetadata(this.databasePath, token, this.databaseInfo.appId);\n    var grpcStream = stub[rpcName](metadata);\n    var closed = false;\n\n    var close = function (err) {\n      if (!closed) {\n        closed = true;\n        stream.callOnClose(err);\n        grpcStream.end();\n      }\n    };\n\n    var stream = new StreamBridge({\n      sendFn: function (msg) {\n        if (!closed) {\n          logDebug(LOG_TAG$9, 'GRPC stream sending:', msg);\n\n          try {\n            grpcStream.write(msg);\n          } catch (e) {\n            // This probably means we didn't conform to the proto.  Make sure to\n            // log the message we sent.\n            logError('Failure sending:', msg);\n            logError('Error:', e);\n            throw e;\n          }\n        } else {\n          logDebug(LOG_TAG$9, 'Not sending because gRPC stream is closed:', msg);\n        }\n      },\n      closeFn: function () {\n        logDebug(LOG_TAG$9, 'GRPC stream closed locally via close().');\n        close();\n      }\n    });\n    grpcStream.on('data', function (msg) {\n      if (!closed) {\n        logDebug(LOG_TAG$9, 'GRPC stream received:', msg);\n        stream.callOnMessage(msg);\n      }\n    });\n    grpcStream.on('end', function () {\n      logDebug(LOG_TAG$9, 'GRPC stream ended.');\n      close();\n    });\n    grpcStream.on('error', function (grpcError) {\n      if (!closed) {\n        logWarn(LOG_TAG$9, 'GRPC stream error. Code:', grpcError.code, 'Message:', grpcError.message);\n        var code = mapCodeFromRpcCode(grpcError.code);\n        close(new FirestoreError(code, grpcError.message));\n      }\n    });\n    logDebug(LOG_TAG$9, 'Opening GRPC stream'); // TODO(dimond): Since grpc has no explicit open status (or does it?) we\n    // simulate an onOpen in the next loop after the stream had it's listeners\n    // registered\n\n    setTimeout(function () {\n      stream.callOnOpen();\n    }, 0);\n    return stream;\n  };\n\n  return GrpcConnection;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Used by tests so we can match @grpc/proto-loader behavior. */\n\n\nvar protoLoaderOptions = {\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: false\n};\n/**\r\n * Loads the protocol buffer definitions for Firestore.\r\n *\r\n * @returns The GrpcObject representing our protos.\r\n */\n\nfunction loadProtos() {\n  var root = path.resolve(__dirname, \"../protos\");\n  var firestoreProtoFile = path.join(root, 'google/firestore/v1/firestore.proto');\n  var packageDefinition = protoLoader.loadSync(firestoreProtoFile, Object.assign(Object.assign({}, protoLoaderOptions), {\n    includeDirs: [root]\n  }));\n  return grpcJs.loadPackageDefinition(packageDefinition);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Loads the GRPC stack */\n\n\nfunction newConnection(databaseInfo) {\n  var protos = loadProtos();\n  return new GrpcConnection(protos, databaseInfo);\n}\n/** Return the Platform-specific connectivity monitor. */\n\n\nfunction newConnectivityMonitor() {\n  return new NoopConnectivityMonitor();\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** The Platform's 'window' implementation or null if not available. */\n\n\nfunction getWindow() {\n  if (process.env.USE_MOCK_PERSISTENCE === 'YES') {\n    // eslint-disable-next-line no-restricted-globals\n    return window;\n  }\n\n  return null;\n}\n/** The Platform's 'document' implementation or null if not available. */\n\n\nfunction getDocument() {\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction newSerializer(databaseId) {\n  return new JsonProtoSerializer(databaseId,\n  /* useProto3Json= */\n  false);\n}\n/**\r\n * An instance of the Platform's 'TextEncoder' implementation.\r\n */\n\n\nfunction newTextEncoder() {\n  return new util$1.TextEncoder();\n}\n/**\r\n * An instance of the Platform's 'TextDecoder' implementation.\r\n */\n\n\nfunction newTextDecoder() {\n  return new util$1.TextDecoder('utf-8');\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$8 = 'ExponentialBackoff';\n/**\r\n * Initial backoff time in milliseconds after an error.\r\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\r\n */\n\nvar DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\nvar DEFAULT_BACKOFF_FACTOR = 1.5;\n/** Maximum backoff time in milliseconds */\n\nvar DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n/**\r\n * A helper for running delayed tasks following an exponential backoff curve\r\n * between attempts.\r\n *\r\n * Each delay is made up of a \"base\" delay which follows the exponential\r\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\r\n * base delay. This prevents clients from accidentally synchronizing their\r\n * delays causing spikes of load to the backend.\r\n */\n\nvar ExponentialBackoff =\n/** @class */\nfunction () {\n  function ExponentialBackoff(\n  /**\r\n   * The AsyncQueue to run backoff operations on.\r\n   */\n  queue,\n  /**\r\n   * The ID to use when scheduling backoff operations on the AsyncQueue.\r\n   */\n  timerId,\n  /**\r\n   * The initial delay (used as the base delay on the first retry attempt).\r\n   * Note that jitter will still be applied, so the actual delay could be as\r\n   * little as 0.5*initialDelayMs.\r\n   */\n  initialDelayMs,\n  /**\r\n   * The multiplier to use to determine the extended base delay after each\r\n   * attempt.\r\n   */\n  backoffFactor,\n  /**\r\n   * The maximum base delay after which no further backoff is performed.\r\n   * Note that jitter will still be applied, so the actual delay could be as\r\n   * much as 1.5*maxDelayMs.\r\n   */\n  maxDelayMs) {\n    if (initialDelayMs === void 0) {\n      initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n    }\n\n    if (backoffFactor === void 0) {\n      backoffFactor = DEFAULT_BACKOFF_FACTOR;\n    }\n\n    if (maxDelayMs === void 0) {\n      maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS;\n    }\n\n    this.queue = queue;\n    this.timerId = timerId;\n    this.initialDelayMs = initialDelayMs;\n    this.backoffFactor = backoffFactor;\n    this.maxDelayMs = maxDelayMs;\n    this.currentBaseMs = 0;\n    this.timerPromise = null;\n    /** The last backoff attempt, as epoch milliseconds. */\n\n    this.lastAttemptTime = Date.now();\n    this.reset();\n  }\n  /**\r\n   * Resets the backoff delay.\r\n   *\r\n   * The very next backoffAndWait() will have no delay. If it is called again\r\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\r\n   * subsequent ones will increase according to the backoffFactor.\r\n   */\n\n\n  ExponentialBackoff.prototype.reset = function () {\n    this.currentBaseMs = 0;\n  };\n  /**\r\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\r\n   * RESOURCE_EXHAUSTED error).\r\n   */\n\n\n  ExponentialBackoff.prototype.resetToMax = function () {\n    this.currentBaseMs = this.maxDelayMs;\n  };\n  /**\r\n   * Returns a promise that resolves after currentDelayMs, and increases the\r\n   * delay for any subsequent attempts. If there was a pending backoff operation\r\n   * already, it will be canceled.\r\n   */\n\n\n  ExponentialBackoff.prototype.backoffAndRun = function (op) {\n    var _this = this; // Cancel any pending backoff operation.\n\n\n    this.cancel(); // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n\n    var desiredDelayWithJitterMs = Math.floor(this.currentBaseMs + this.jitterDelayMs()); // Guard against lastAttemptTime being in the future due to a clock change.\n\n    var delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime); // Guard against the backoff delay already being past.\n\n    var remainingDelayMs = Math.max(0, desiredDelayWithJitterMs - delaySoFarMs);\n\n    if (remainingDelayMs > 0) {\n      logDebug(LOG_TAG$8, \"Backing off for \" + remainingDelayMs + \" ms \" + (\"(base delay: \" + this.currentBaseMs + \" ms, \") + (\"delay with jitter: \" + desiredDelayWithJitterMs + \" ms, \") + (\"last attempt: \" + delaySoFarMs + \" ms ago)\"));\n    }\n\n    this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, remainingDelayMs, function () {\n      _this.lastAttemptTime = Date.now();\n      return op();\n    }); // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n\n    this.currentBaseMs *= this.backoffFactor;\n\n    if (this.currentBaseMs < this.initialDelayMs) {\n      this.currentBaseMs = this.initialDelayMs;\n    }\n\n    if (this.currentBaseMs > this.maxDelayMs) {\n      this.currentBaseMs = this.maxDelayMs;\n    }\n  };\n\n  ExponentialBackoff.prototype.skipBackoff = function () {\n    if (this.timerPromise !== null) {\n      this.timerPromise.skipDelay();\n      this.timerPromise = null;\n    }\n  };\n\n  ExponentialBackoff.prototype.cancel = function () {\n    if (this.timerPromise !== null) {\n      this.timerPromise.cancel();\n      this.timerPromise = null;\n    }\n  };\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n\n\n  ExponentialBackoff.prototype.jitterDelayMs = function () {\n    return (Math.random() - 0.5) * this.currentBaseMs;\n  };\n\n  return ExponentialBackoff;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$7 = 'PersistentStream';\n/** The time a stream stays open after it is marked idle. */\n\nvar IDLE_TIMEOUT_MS = 60 * 1000;\n/**\r\n * A PersistentStream is an abstract base class that represents a streaming RPC\r\n * to the Firestore backend. It's built on top of the connections own support\r\n * for streaming RPCs, and adds several critical features for our clients:\r\n *\r\n *   - Exponential backoff on failure\r\n *   - Authentication via CredentialsProvider\r\n *   - Dispatching all callbacks into the shared worker queue\r\n *   - Closing idle streams after 60 seconds of inactivity\r\n *\r\n * Subclasses of PersistentStream implement serialization of models to and\r\n * from the JSON representation of the protocol buffers for a specific\r\n * streaming RPC.\r\n *\r\n * ## Starting and Stopping\r\n *\r\n * Streaming RPCs are stateful and need to be start()ed before messages can\r\n * be sent and received. The PersistentStream will call the onOpen() function\r\n * of the listener once the stream is ready to accept requests.\r\n *\r\n * Should a start() fail, PersistentStream will call the registered onClose()\r\n * listener with a FirestoreError indicating what went wrong.\r\n *\r\n * A PersistentStream can be started and stopped repeatedly.\r\n *\r\n * Generic types:\r\n *  SendType: The type of the outgoing message of the underlying\r\n *    connection stream\r\n *  ReceiveType: The type of the incoming message of the underlying\r\n *    connection stream\r\n *  ListenerType: The type of the listener that will be used for callbacks\r\n */\n\nvar PersistentStream =\n/** @class */\nfunction () {\n  function PersistentStream(queue, connectionTimerId, idleTimerId, connection, credentialsProvider, listener) {\n    this.queue = queue;\n    this.idleTimerId = idleTimerId;\n    this.connection = connection;\n    this.credentialsProvider = credentialsProvider;\n    this.listener = listener;\n    this.state = 0\n    /* Initial */\n    ;\n    /**\r\n     * A close count that's incremented every time the stream is closed; used by\r\n     * getCloseGuardedDispatcher() to invalidate callbacks that happen after\r\n     * close.\r\n     */\n\n    this.closeCount = 0;\n    this.idleTimer = null;\n    this.stream = null;\n    this.backoff = new ExponentialBackoff(queue, connectionTimerId);\n  }\n  /**\r\n   * Returns true if start() has been called and no error has occurred. True\r\n   * indicates the stream is open or in the process of opening (which\r\n   * encompasses respecting backoff, getting auth tokens, and starting the\r\n   * actual RPC). Use isOpen() to determine if the stream is open and ready for\r\n   * outbound requests.\r\n   */\n\n\n  PersistentStream.prototype.isStarted = function () {\n    return this.state === 1\n    /* Starting */\n    || this.state === 2\n    /* Open */\n    || this.state === 4\n    /* Backoff */\n    ;\n  };\n  /**\r\n   * Returns true if the underlying RPC is open (the onOpen() listener has been\r\n   * called) and the stream is ready for outbound requests.\r\n   */\n\n\n  PersistentStream.prototype.isOpen = function () {\n    return this.state === 2\n    /* Open */\n    ;\n  };\n  /**\r\n   * Starts the RPC. Only allowed if isStarted() returns false. The stream is\r\n   * not immediately ready for use: onOpen() will be invoked when the RPC is\r\n   * ready for outbound requests, at which point isOpen() will return true.\r\n   *\r\n   * When start returns, isStarted() will return true.\r\n   */\n\n\n  PersistentStream.prototype.start = function () {\n    if (this.state === 3\n    /* Error */\n    ) {\n        this.performBackoff();\n        return;\n      }\n\n    this.auth();\n  };\n  /**\r\n   * Stops the RPC. This call is idempotent and allowed regardless of the\r\n   * current isStarted() state.\r\n   *\r\n   * When stop returns, isStarted() and isOpen() will both return false.\r\n   */\n\n\n  PersistentStream.prototype.stop = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (!this.isStarted()) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.close(0\n            /* Initial */\n            )];\n\n          case 1:\n            _d.sent();\n\n            _d.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * After an error the stream will usually back off on the next attempt to\r\n   * start it. If the error warrants an immediate restart of the stream, the\r\n   * sender can use this to indicate that the receiver should not back off.\r\n   *\r\n   * Each error will call the onClose() listener. That function can decide to\r\n   * inhibit backoff if required.\r\n   */\n\n\n  PersistentStream.prototype.inhibitBackoff = function () {\n    this.state = 0\n    /* Initial */\n    ;\n    this.backoff.reset();\n  };\n  /**\r\n   * Marks this stream as idle. If no further actions are performed on the\r\n   * stream for one minute, the stream will automatically close itself and\r\n   * notify the stream's onClose() handler with Status.OK. The stream will then\r\n   * be in a !isStarted() state, requiring the caller to start the stream again\r\n   * before further use.\r\n   *\r\n   * Only streams that are in state 'Open' can be marked idle, as all other\r\n   * states imply pending network operations.\r\n   */\n\n\n  PersistentStream.prototype.markIdle = function () {\n    var _this = this; // Starts the idle time if we are in state 'Open' and are not yet already\n    // running a timer (in which case the previous idle timeout still applies).\n\n\n    if (this.isOpen() && this.idleTimer === null) {\n      this.idleTimer = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, function () {\n        return _this.handleIdleCloseTimer();\n      });\n    }\n  };\n  /** Sends a message to the underlying stream. */\n\n\n  PersistentStream.prototype.sendRequest = function (msg) {\n    this.cancelIdleCheck();\n    this.stream.send(msg);\n  };\n  /** Called by the idle timer when the stream should close due to inactivity. */\n\n\n  PersistentStream.prototype.handleIdleCloseTimer = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_d) {\n        if (this.isOpen()) {\n          // When timing out an idle stream there's no reason to force the stream into backoff when\n          // it restarts so set the stream state to Initial instead of Error.\n          return [2\n          /*return*/\n          , this.close(0\n          /* Initial */\n          )];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /** Marks the stream as active again. */\n\n\n  PersistentStream.prototype.cancelIdleCheck = function () {\n    if (this.idleTimer) {\n      this.idleTimer.cancel();\n      this.idleTimer = null;\n    }\n  };\n  /**\r\n   * Closes the stream and cleans up as necessary:\r\n   *\r\n   * * closes the underlying GRPC stream;\r\n   * * calls the onClose handler with the given 'error';\r\n   * * sets internal stream state to 'finalState';\r\n   * * adjusts the backoff timer based on the error\r\n   *\r\n   * A new stream can be opened by calling start().\r\n   *\r\n   * @param finalState - the intended state of the stream after closing.\r\n   * @param error - the error the connection was closed with.\r\n   */\n\n\n  PersistentStream.prototype.close = function (finalState, error) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            // Cancel any outstanding timers (they're guaranteed not to execute).\n            this.cancelIdleCheck();\n            this.backoff.cancel(); // Invalidates any stream-related callbacks (e.g. from auth or the\n            // underlying stream), guaranteeing they won't execute.\n\n            this.closeCount++;\n\n            if (finalState !== 3\n            /* Error */\n            ) {\n                // If this is an intentional close ensure we don't delay our next connection attempt.\n                this.backoff.reset();\n              } else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n              // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n              logError(error.toString());\n              logError('Using maximum backoff delay to prevent overloading the backend.');\n              this.backoff.resetToMax();\n            } else if (error && error.code === Code.UNAUTHENTICATED) {\n              // \"unauthenticated\" error means the token was rejected. Try force refreshing it in case it\n              // just expired.\n              this.credentialsProvider.invalidateToken();\n            } // Clean up the underlying stream because we are no longer interested in events.\n\n\n            if (this.stream !== null) {\n              this.tearDown();\n              this.stream.close();\n              this.stream = null;\n            } // This state must be assigned before calling onClose() to allow the callback to\n            // inhibit backoff or otherwise manipulate the state in its non-started state.\n\n\n            this.state = finalState; // Notify the listener that the stream closed.\n\n            return [4\n            /*yield*/\n            , this.listener.onClose(error)];\n\n          case 1:\n            // Notify the listener that the stream closed.\n            _d.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Can be overridden to perform additional cleanup before the stream is closed.\r\n   * Calling super.tearDown() is not required.\r\n   */\n\n\n  PersistentStream.prototype.tearDown = function () {};\n\n  PersistentStream.prototype.auth = function () {\n    var _this = this;\n\n    this.state = 1\n    /* Starting */\n    ;\n    var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount); // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.\n\n    var closeCount = this.closeCount;\n    this.credentialsProvider.getToken().then(function (token) {\n      // Stream can be stopped while waiting for authentication.\n      // TODO(mikelehen): We really should just use dispatchIfNotClosed\n      // and let this dispatch onto the queue, but that opened a spec test can\n      // of worms that I don't want to deal with in this PR.\n      if (_this.closeCount === closeCount) {\n        // Normally we'd have to schedule the callback on the AsyncQueue.\n        // However, the following calls are safe to be called outside the\n        // AsyncQueue since they don't chain asynchronous calls\n        _this.startStream(token);\n      }\n    }, function (error) {\n      dispatchIfNotClosed(function () {\n        var rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\n        return _this.handleStreamClose(rpcError);\n      });\n    });\n  };\n\n  PersistentStream.prototype.startStream = function (token) {\n    var _this = this;\n\n    var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n    this.stream = this.startRpc(token);\n    this.stream.onOpen(function () {\n      dispatchIfNotClosed(function () {\n        _this.state = 2\n        /* Open */\n        ;\n        return _this.listener.onOpen();\n      });\n    });\n    this.stream.onClose(function (error) {\n      dispatchIfNotClosed(function () {\n        return _this.handleStreamClose(error);\n      });\n    });\n    this.stream.onMessage(function (msg) {\n      dispatchIfNotClosed(function () {\n        return _this.onMessage(msg);\n      });\n    });\n  };\n\n  PersistentStream.prototype.performBackoff = function () {\n    var _this = this;\n\n    this.state = 4\n    /* Backoff */\n    ;\n    this.backoff.backoffAndRun(function () {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_d) {\n          this.state = 0\n          /* Initial */\n          ;\n          this.start();\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    });\n  }; // Visible for tests\n\n\n  PersistentStream.prototype.handleStreamClose = function (error) {\n    logDebug(LOG_TAG$7, \"close with error: \" + error);\n    this.stream = null; // In theory the stream could close cleanly, however, in our current model\n    // we never expect this to happen because if we stop a stream ourselves,\n    // this callback will never be called. To prevent cases where we retry\n    // without a backoff accidentally, we set the stream to error in all cases.\n\n    return this.close(3\n    /* Error */\n    , error);\n  };\n  /**\r\n   * Returns a \"dispatcher\" function that dispatches operations onto the\r\n   * AsyncQueue but only runs them if closeCount remains unchanged. This allows\r\n   * us to turn auth / stream callbacks into no-ops if the stream is closed /\r\n   * re-opened, etc.\r\n   */\n\n\n  PersistentStream.prototype.getCloseGuardedDispatcher = function (startCloseCount) {\n    var _this = this;\n\n    return function (fn) {\n      _this.queue.enqueueAndForget(function () {\n        if (_this.closeCount === startCloseCount) {\n          return fn();\n        } else {\n          logDebug(LOG_TAG$7, 'stream callback skipped by getCloseGuardedDispatcher.');\n          return Promise.resolve();\n        }\n      });\n    };\n  };\n\n  return PersistentStream;\n}();\n/**\r\n * A PersistentStream that implements the Listen RPC.\r\n *\r\n * Once the Listen stream has called the onOpen() listener, any number of\r\n * listen() and unlisten() calls can be made to control what changes will be\r\n * sent from the server for ListenResponses.\r\n */\n\n\nvar PersistentListenStream =\n/** @class */\nfunction (_super) {\n  tslib.__extends(PersistentListenStream, _super);\n\n  function PersistentListenStream(queue, connection, credentials, serializer, listener) {\n    var _this = _super.call(this, queue, \"listen_stream_connection_backoff\"\n    /* ListenStreamConnectionBackoff */\n    , \"listen_stream_idle\"\n    /* ListenStreamIdle */\n    , connection, credentials, listener) || this;\n\n    _this.serializer = serializer;\n    return _this;\n  }\n\n  PersistentListenStream.prototype.startRpc = function (token) {\n    return this.connection.openStream('Listen', token);\n  };\n\n  PersistentListenStream.prototype.onMessage = function (watchChangeProto) {\n    // A successful response means the stream is healthy\n    this.backoff.reset();\n    var watchChange = fromWatchChange(this.serializer, watchChangeProto);\n    var snapshot = versionFromListenResponse(watchChangeProto);\n    return this.listener.onWatchChange(watchChange, snapshot);\n  };\n  /**\r\n   * Registers interest in the results of the given target. If the target\r\n   * includes a resumeToken it will be included in the request. Results that\r\n   * affect the target will be streamed back as WatchChange messages that\r\n   * reference the targetId.\r\n   */\n\n\n  PersistentListenStream.prototype.watch = function (targetData) {\n    var request = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    request.addTarget = toTarget(this.serializer, targetData);\n    var labels = toListenRequestLabels(this.serializer, targetData);\n\n    if (labels) {\n      request.labels = labels;\n    }\n\n    this.sendRequest(request);\n  };\n  /**\r\n   * Unregisters interest in the results of the target associated with the\r\n   * given targetId.\r\n   */\n\n\n  PersistentListenStream.prototype.unwatch = function (targetId) {\n    var request = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    request.removeTarget = targetId;\n    this.sendRequest(request);\n  };\n\n  return PersistentListenStream;\n}(PersistentStream);\n/**\r\n * A Stream that implements the Write RPC.\r\n *\r\n * The Write RPC requires the caller to maintain special streamToken\r\n * state in between calls, to help the server understand which responses the\r\n * client has processed by the time the next request is made. Every response\r\n * will contain a streamToken; this value must be passed to the next\r\n * request.\r\n *\r\n * After calling start() on this stream, the next request must be a handshake,\r\n * containing whatever streamToken is on hand. Once a response to this\r\n * request is received, all pending mutations may be submitted. When\r\n * submitting multiple batches of mutations at the same time, it's\r\n * okay to use the same streamToken for the calls to writeMutations.\r\n *\r\n * TODO(b/33271235): Use proto types\r\n */\n\n\nvar PersistentWriteStream =\n/** @class */\nfunction (_super) {\n  tslib.__extends(PersistentWriteStream, _super);\n\n  function PersistentWriteStream(queue, connection, credentials, serializer, listener) {\n    var _this = _super.call(this, queue, \"write_stream_connection_backoff\"\n    /* WriteStreamConnectionBackoff */\n    , \"write_stream_idle\"\n    /* WriteStreamIdle */\n    , connection, credentials, listener) || this;\n\n    _this.serializer = serializer;\n    _this.handshakeComplete_ = false;\n    return _this;\n  }\n\n  Object.defineProperty(PersistentWriteStream.prototype, \"handshakeComplete\", {\n    /**\r\n     * Tracks whether or not a handshake has been successfully exchanged and\r\n     * the stream is ready to accept mutations.\r\n     */\n    get: function () {\n      return this.handshakeComplete_;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Override of PersistentStream.start\n\n  PersistentWriteStream.prototype.start = function () {\n    this.handshakeComplete_ = false;\n    this.lastStreamToken = undefined;\n\n    _super.prototype.start.call(this);\n  };\n\n  PersistentWriteStream.prototype.tearDown = function () {\n    if (this.handshakeComplete_) {\n      this.writeMutations([]);\n    }\n  };\n\n  PersistentWriteStream.prototype.startRpc = function (token) {\n    return this.connection.openStream('Write', token);\n  };\n\n  PersistentWriteStream.prototype.onMessage = function (responseProto) {\n    // Always capture the last stream token.\n    hardAssert(!!responseProto.streamToken);\n    this.lastStreamToken = responseProto.streamToken;\n\n    if (!this.handshakeComplete_) {\n      // The first response is always the handshake response\n      hardAssert(!responseProto.writeResults || responseProto.writeResults.length === 0);\n      this.handshakeComplete_ = true;\n      return this.listener.onHandshakeComplete();\n    } else {\n      // A successful first write response means the stream is healthy,\n      // Note, that we could consider a successful handshake healthy, however,\n      // the write itself might be causing an error we want to back off from.\n      this.backoff.reset();\n      var results = fromWriteResults(responseProto.writeResults, responseProto.commitTime);\n      var commitVersion = fromVersion(responseProto.commitTime);\n      return this.listener.onMutationResult(commitVersion, results);\n    }\n  };\n  /**\r\n   * Sends an initial streamToken to the server, performing the handshake\r\n   * required to make the StreamingWrite RPC work. Subsequent\r\n   * calls should wait until onHandshakeComplete was called.\r\n   */\n\n\n  PersistentWriteStream.prototype.writeHandshake = function () {\n    // TODO(dimond): Support stream resumption. We intentionally do not set the\n    // stream token on the handshake, ignoring any stream token we might have.\n    var request = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    this.sendRequest(request);\n  };\n  /** Sends a group of mutations to the Firestore backend to apply. */\n\n\n  PersistentWriteStream.prototype.writeMutations = function (mutations) {\n    var _this = this;\n\n    var request = {\n      streamToken: this.lastStreamToken,\n      writes: mutations.map(function (mutation) {\n        return toMutation(_this.serializer, mutation);\n      })\n    };\n    this.sendRequest(request);\n  };\n\n  return PersistentWriteStream;\n}(PersistentStream);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Datastore and its related methods are a wrapper around the external Google\r\n * Cloud Datastore grpc API, which provides an interface that is more convenient\r\n * for the rest of the client SDK architecture to consume.\r\n */\n\n\nvar Datastore =\n/** @class */\nfunction () {\n  function Datastore() {}\n\n  return Datastore;\n}();\n/**\r\n * An implementation of Datastore that exposes additional state for internal\r\n * consumption.\r\n */\n\n\nvar DatastoreImpl =\n/** @class */\nfunction (_super) {\n  tslib.__extends(DatastoreImpl, _super);\n\n  function DatastoreImpl(credentials, connection, serializer) {\n    var _this = _super.call(this) || this;\n\n    _this.credentials = credentials;\n    _this.connection = connection;\n    _this.serializer = serializer;\n    _this.terminated = false;\n    return _this;\n  }\n\n  DatastoreImpl.prototype.verifyInitialized = function () {\n    if (this.terminated) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'The client has already been terminated.');\n    }\n  };\n  /** Gets an auth token and invokes the provided RPC. */\n\n\n  DatastoreImpl.prototype.invokeRPC = function (rpcName, path, request) {\n    var _this = this;\n\n    this.verifyInitialized();\n    return this.credentials.getToken().then(function (token) {\n      return _this.connection.invokeRPC(rpcName, path, request, token);\n    }).catch(function (error) {\n      if (error.name === 'FirebaseError') {\n        if (error.code === Code.UNAUTHENTICATED) {\n          _this.credentials.invalidateToken();\n        }\n\n        throw error;\n      } else {\n        throw new FirestoreError(Code.UNKNOWN, error.toString());\n      }\n    });\n  };\n  /** Gets an auth token and invokes the provided RPC with streamed results. */\n\n\n  DatastoreImpl.prototype.invokeStreamingRPC = function (rpcName, path, request) {\n    var _this = this;\n\n    this.verifyInitialized();\n    return this.credentials.getToken().then(function (token) {\n      return _this.connection.invokeStreamingRPC(rpcName, path, request, token);\n    }).catch(function (error) {\n      if (error.name === 'FirebaseError') {\n        if (error.code === Code.UNAUTHENTICATED) {\n          _this.credentials.invalidateToken();\n        }\n\n        throw error;\n      } else {\n        throw new FirestoreError(Code.UNKNOWN, error.toString());\n      }\n    });\n  };\n\n  DatastoreImpl.prototype.terminate = function () {\n    this.terminated = true;\n  };\n\n  return DatastoreImpl;\n}(Datastore); // TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\n\n\nfunction newDatastore(credentials, connection, serializer) {\n  return new DatastoreImpl(credentials, connection, serializer);\n}\n\nfunction invokeCommitRpc(datastore, mutations) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var datastoreImpl, path, request;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          datastoreImpl = debugCast(datastore);\n          path = getEncodedDatabaseId(datastoreImpl.serializer) + '/documents';\n          request = {\n            writes: mutations.map(function (m) {\n              return toMutation(datastoreImpl.serializer, m);\n            })\n          };\n          return [4\n          /*yield*/\n          , datastoreImpl.invokeRPC('Commit', path, request)];\n\n        case 1:\n          _d.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction invokeBatchGetDocumentsRpc(datastore, keys) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var datastoreImpl, path, request, response, docs, result;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          datastoreImpl = debugCast(datastore);\n          path = getEncodedDatabaseId(datastoreImpl.serializer) + '/documents';\n          request = {\n            documents: keys.map(function (k) {\n              return toName(datastoreImpl.serializer, k);\n            })\n          };\n          return [4\n          /*yield*/\n          , datastoreImpl.invokeStreamingRPC('BatchGetDocuments', path, request)];\n\n        case 1:\n          response = _d.sent();\n          docs = new Map();\n          response.forEach(function (proto) {\n            var doc = fromBatchGetDocumentsResponse(datastoreImpl.serializer, proto);\n            docs.set(doc.key.toString(), doc);\n          });\n          result = [];\n          keys.forEach(function (key) {\n            var doc = docs.get(key.toString());\n            hardAssert(!!doc);\n            result.push(doc);\n          });\n          return [2\n          /*return*/\n          , result];\n      }\n    });\n  });\n}\n\nfunction newPersistentWriteStream(datastore, queue, listener) {\n  var datastoreImpl = debugCast(datastore);\n  datastoreImpl.verifyInitialized();\n  return new PersistentWriteStream(queue, datastoreImpl.connection, datastoreImpl.credentials, datastoreImpl.serializer, listener);\n}\n\nfunction newPersistentWatchStream(datastore, queue, listener) {\n  var datastoreImpl = debugCast(datastore);\n  datastoreImpl.verifyInitialized();\n  return new PersistentListenStream(queue, datastoreImpl.connection, datastoreImpl.credentials, datastoreImpl.serializer, listener);\n}\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$6 = 'OnlineStateTracker'; // To deal with transient failures, we allow multiple stream attempts before\n// giving up and transitioning from OnlineState.Unknown to Offline.\n// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.\n// @jdimond thinks that bug is sufficiently fixed so that we can set this back\n// to 1. If that works okay, we could potentially remove this logic entirely.\n\nvar MAX_WATCH_STREAM_FAILURES = 1; // To deal with stream attempts that don't succeed or fail in a timely manner,\n// we have a timeout for OnlineState to reach Online or Offline.\n// If the timeout is reached, we transition to Offline rather than waiting\n// indefinitely.\n\nvar ONLINE_STATE_TIMEOUT_MS = 10 * 1000;\n/**\r\n * A component used by the RemoteStore to track the OnlineState (that is,\r\n * whether or not the client as a whole should be considered to be online or\r\n * offline), implementing the appropriate heuristics.\r\n *\r\n * In particular, when the client is trying to connect to the backend, we\r\n * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for\r\n * a connection to succeed. If we have too many failures or the timeout elapses,\r\n * then we set the OnlineState to Offline, and the client will behave as if\r\n * it is offline (get()s will return cached data, etc.).\r\n */\n\nvar OnlineStateTracker =\n/** @class */\nfunction () {\n  function OnlineStateTracker(asyncQueue, onlineStateHandler) {\n    this.asyncQueue = asyncQueue;\n    this.onlineStateHandler = onlineStateHandler;\n    /** The current OnlineState. */\n\n    this.state = \"Unknown\"\n    /* Unknown */\n    ;\n    /**\r\n     * A count of consecutive failures to open the stream. If it reaches the\r\n     * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to\r\n     * Offline.\r\n     */\n\n    this.watchStreamFailures = 0;\n    /**\r\n     * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we\r\n     * transition from OnlineState.Unknown to OnlineState.Offline without waiting\r\n     * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).\r\n     */\n\n    this.onlineStateTimer = null;\n    /**\r\n     * Whether the client should log a warning message if it fails to connect to\r\n     * the backend (initially true, cleared after a successful stream, or if we've\r\n     * logged the message already).\r\n     */\n\n    this.shouldWarnClientIsOffline = true;\n  }\n  /**\r\n   * Called by RemoteStore when a watch stream is started (including on each\r\n   * backoff attempt).\r\n   *\r\n   * If this is the first attempt, it sets the OnlineState to Unknown and starts\r\n   * the onlineStateTimer.\r\n   */\n\n\n  OnlineStateTracker.prototype.handleWatchStreamStart = function () {\n    var _this = this;\n\n    if (this.watchStreamFailures === 0) {\n      this.setAndBroadcast(\"Unknown\"\n      /* Unknown */\n      );\n      this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(\"online_state_timeout\"\n      /* OnlineStateTimeout */\n      , ONLINE_STATE_TIMEOUT_MS, function () {\n        _this.onlineStateTimer = null;\n\n        _this.logClientOfflineWarningIfNecessary(\"Backend didn't respond within \" + ONLINE_STATE_TIMEOUT_MS / 1000 + \" \" + \"seconds.\");\n\n        _this.setAndBroadcast(\"Offline\"\n        /* Offline */\n        ); // NOTE: handleWatchStreamFailure() will continue to increment\n        // watchStreamFailures even though we are already marked Offline,\n        // but this is non-harmful.\n\n\n        return Promise.resolve();\n      });\n    }\n  };\n  /**\r\n   * Updates our OnlineState as appropriate after the watch stream reports a\r\n   * failure. The first failure moves us to the 'Unknown' state. We then may\r\n   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we\r\n   * actually transition to the 'Offline' state.\r\n   */\n\n\n  OnlineStateTracker.prototype.handleWatchStreamFailure = function (error) {\n    if (this.state === \"Online\"\n    /* Online */\n    ) {\n        this.setAndBroadcast(\"Unknown\"\n        /* Unknown */\n        );\n      } else {\n      this.watchStreamFailures++;\n\n      if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {\n        this.clearOnlineStateTimer();\n        this.logClientOfflineWarningIfNecessary(\"Connection failed \" + MAX_WATCH_STREAM_FAILURES + \" \" + (\"times. Most recent error: \" + error.toString()));\n        this.setAndBroadcast(\"Offline\"\n        /* Offline */\n        );\n      }\n    }\n  };\n  /**\r\n   * Explicitly sets the OnlineState to the specified state.\r\n   *\r\n   * Note that this resets our timers / failure counters, etc. used by our\r\n   * Offline heuristics, so must not be used in place of\r\n   * handleWatchStreamStart() and handleWatchStreamFailure().\r\n   */\n\n\n  OnlineStateTracker.prototype.set = function (newState) {\n    this.clearOnlineStateTimer();\n    this.watchStreamFailures = 0;\n\n    if (newState === \"Online\"\n    /* Online */\n    ) {\n        // We've connected to watch at least once. Don't warn the developer\n        // about being offline going forward.\n        this.shouldWarnClientIsOffline = false;\n      }\n\n    this.setAndBroadcast(newState);\n  };\n\n  OnlineStateTracker.prototype.setAndBroadcast = function (newState) {\n    if (newState !== this.state) {\n      this.state = newState;\n      this.onlineStateHandler(newState);\n    }\n  };\n\n  OnlineStateTracker.prototype.logClientOfflineWarningIfNecessary = function (details) {\n    var message = \"Could not reach Cloud Firestore backend. \" + details + \"\\n\" + \"This typically indicates that your device does not have a healthy \" + \"Internet connection at the moment. The client will operate in offline \" + \"mode until it is able to successfully connect to the backend.\";\n\n    if (this.shouldWarnClientIsOffline) {\n      logError(message);\n      this.shouldWarnClientIsOffline = false;\n    } else {\n      logDebug(LOG_TAG$6, message);\n    }\n  };\n\n  OnlineStateTracker.prototype.clearOnlineStateTimer = function () {\n    if (this.onlineStateTimer !== null) {\n      this.onlineStateTimer.cancel();\n      this.onlineStateTimer = null;\n    }\n  };\n\n  return OnlineStateTracker;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$5 = 'RemoteStore'; // TODO(b/35853402): Negotiate this with the stream.\n\nvar MAX_PENDING_WRITES = 10;\n\nvar RemoteStoreImpl =\n/** @class */\nfunction () {\n  function RemoteStoreImpl(\n  /**\r\n   * The local store, used to fill the write pipeline with outbound mutations.\r\n   */\n  localStore,\n  /** The client-side proxy for interacting with the backend. */\n  datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {\n    var _this = this;\n\n    this.localStore = localStore;\n    this.datastore = datastore;\n    this.asyncQueue = asyncQueue;\n    this.remoteSyncer = {};\n    /**\r\n     * A list of up to MAX_PENDING_WRITES writes that we have fetched from the\r\n     * LocalStore via fillWritePipeline() and have or will send to the write\r\n     * stream.\r\n     *\r\n     * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or\r\n     * restart the write stream. When the stream is established the writes in the\r\n     * pipeline will be sent in order.\r\n     *\r\n     * Writes remain in writePipeline until they are acknowledged by the backend\r\n     * and thus will automatically be re-sent if the stream is interrupted /\r\n     * restarted before they're acknowledged.\r\n     *\r\n     * Write responses from the backend are linked to their originating request\r\n     * purely based on order, and so we can just shift() writes from the front of\r\n     * the writePipeline as we receive responses.\r\n     */\n\n    this.writePipeline = [];\n    /**\r\n     * A mapping of watched targets that the client cares about tracking and the\r\n     * user has explicitly called a 'listen' for this target.\r\n     *\r\n     * These targets may or may not have been sent to or acknowledged by the\r\n     * server. On re-establishing the listen stream, these targets should be sent\r\n     * to the server. The targets removed with unlistens are removed eagerly\r\n     * without waiting for confirmation from the listen stream.\r\n     */\n\n    this.listenTargets = new Map();\n    /**\r\n     * A set of reasons for why the RemoteStore may be offline. If empty, the\r\n     * RemoteStore may start its network connections.\r\n     */\n\n    this.offlineCauses = new Set();\n    /**\r\n     * Event handlers that get called when the network is disabled or enabled.\r\n     *\r\n     * PORTING NOTE: These functions are used on the Web client to create the\r\n     * underlying streams (to support tree-shakeable streams). On Android and iOS,\r\n     * the streams are created during construction of RemoteStore.\r\n     */\n\n    this.onNetworkStatusChange = [];\n    this.connectivityMonitor = connectivityMonitor;\n    this.connectivityMonitor.addCallback(function (_) {\n      asyncQueue.enqueueAndForget(function () {\n        return tslib.__awaiter(_this, void 0, void 0, function () {\n          return tslib.__generator(this, function (_d) {\n            switch (_d.label) {\n              case 0:\n                if (!canUseNetwork(this)) return [3\n                /*break*/\n                , 2];\n                logDebug(LOG_TAG$5, 'Restarting streams for network reachability change.');\n                return [4\n                /*yield*/\n                , restartNetwork(this)];\n\n              case 1:\n                _d.sent();\n\n                _d.label = 2;\n\n              case 2:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      });\n    });\n    this.onlineStateTracker = new OnlineStateTracker(asyncQueue, onlineStateHandler);\n  }\n\n  return RemoteStoreImpl;\n}();\n\nfunction newRemoteStore(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {\n  return new RemoteStoreImpl(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor);\n}\n/** Re-enables the network. Idempotent. */\n\n\nfunction remoteStoreEnableNetwork(remoteStore) {\n  var remoteStoreImpl = debugCast(remoteStore);\n  remoteStoreImpl.offlineCauses.delete(0\n  /* UserDisabled */\n  );\n  return enableNetworkInternal(remoteStoreImpl);\n}\n\nfunction enableNetworkInternal(remoteStoreImpl) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var _i, _d, networkStatusHandler;\n\n    return tslib.__generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          if (!canUseNetwork(remoteStoreImpl)) return [3\n          /*break*/\n          , 4];\n          _i = 0, _d = remoteStoreImpl.onNetworkStatusChange;\n          _e.label = 1;\n\n        case 1:\n          if (!(_i < _d.length)) return [3\n          /*break*/\n          , 4];\n          networkStatusHandler = _d[_i];\n          return [4\n          /*yield*/\n          , networkStatusHandler(\n          /* enabled= */\n          true)];\n\n        case 2:\n          _e.sent();\n\n          _e.label = 3;\n\n        case 3:\n          _i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Temporarily disables the network. The network can be re-enabled using\r\n * enableNetwork().\r\n */\n\n\nfunction remoteStoreDisableNetwork(remoteStore) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var remoteStoreImpl;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          remoteStoreImpl = debugCast(remoteStore);\n          remoteStoreImpl.offlineCauses.add(0\n          /* UserDisabled */\n          );\n          return [4\n          /*yield*/\n          , disableNetworkInternal(remoteStoreImpl)];\n\n        case 1:\n          _d.sent(); // Set the OnlineState to Offline so get()s return from cache, etc.\n\n\n          remoteStoreImpl.onlineStateTracker.set(\"Offline\"\n          /* Offline */\n          );\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction disableNetworkInternal(remoteStoreImpl) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var _i, _d, networkStatusHandler;\n\n    return tslib.__generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _i = 0, _d = remoteStoreImpl.onNetworkStatusChange;\n          _e.label = 1;\n\n        case 1:\n          if (!(_i < _d.length)) return [3\n          /*break*/\n          , 4];\n          networkStatusHandler = _d[_i];\n          return [4\n          /*yield*/\n          , networkStatusHandler(\n          /* enabled= */\n          false)];\n\n        case 2:\n          _e.sent();\n\n          _e.label = 3;\n\n        case 3:\n          _i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction remoteStoreShutdown(remoteStore) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var remoteStoreImpl;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          remoteStoreImpl = debugCast(remoteStore);\n          logDebug(LOG_TAG$5, 'RemoteStore shutting down.');\n          remoteStoreImpl.offlineCauses.add(5\n          /* Shutdown */\n          );\n          return [4\n          /*yield*/\n          , disableNetworkInternal(remoteStoreImpl)];\n\n        case 1:\n          _d.sent();\n\n          remoteStoreImpl.connectivityMonitor.shutdown(); // Set the OnlineState to Unknown (rather than Offline) to avoid potentially\n          // triggering spurious listener events with cached data, etc.\n\n          remoteStoreImpl.onlineStateTracker.set(\"Unknown\"\n          /* Unknown */\n          );\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Starts new listen for the given target. Uses resume token if provided. It\r\n * is a no-op if the target of given `TargetData` is already being listened to.\r\n */\n\n\nfunction remoteStoreListen(remoteStore, targetData) {\n  var remoteStoreImpl = debugCast(remoteStore);\n\n  if (remoteStoreImpl.listenTargets.has(targetData.targetId)) {\n    return;\n  } // Mark this as something the client is currently listening for.\n\n\n  remoteStoreImpl.listenTargets.set(targetData.targetId, targetData);\n\n  if (shouldStartWatchStream(remoteStoreImpl)) {\n    // The listen will be sent in onWatchStreamOpen\n    startWatchStream(remoteStoreImpl);\n  } else if (ensureWatchStream(remoteStoreImpl).isOpen()) {\n    sendWatchRequest(remoteStoreImpl, targetData);\n  }\n}\n/**\r\n * Removes the listen from server. It is a no-op if the given target id is\r\n * not being listened to.\r\n */\n\n\nfunction remoteStoreUnlisten(remoteStore, targetId) {\n  var remoteStoreImpl = debugCast(remoteStore);\n  var watchStream = ensureWatchStream(remoteStoreImpl);\n  remoteStoreImpl.listenTargets.delete(targetId);\n\n  if (watchStream.isOpen()) {\n    sendUnwatchRequest(remoteStoreImpl, targetId);\n  }\n\n  if (remoteStoreImpl.listenTargets.size === 0) {\n    if (watchStream.isOpen()) {\n      watchStream.markIdle();\n    } else if (canUseNetwork(remoteStoreImpl)) {\n      // Revert to OnlineState.Unknown if the watch stream is not open and we\n      // have no listeners, since without any listens to send we cannot\n      // confirm if the stream is healthy and upgrade to OnlineState.Online.\n      remoteStoreImpl.onlineStateTracker.set(\"Unknown\"\n      /* Unknown */\n      );\n    }\n  }\n}\n/**\r\n * We need to increment the the expected number of pending responses we're due\r\n * from watch so we wait for the ack to process any messages from this target.\r\n */\n\n\nfunction sendWatchRequest(remoteStoreImpl, targetData) {\n  remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetData.targetId);\n  ensureWatchStream(remoteStoreImpl).watch(targetData);\n}\n/**\r\n * We need to increment the expected number of pending responses we're due\r\n * from watch so we wait for the removal on the server before we process any\r\n * messages from this target.\r\n */\n\n\nfunction sendUnwatchRequest(remoteStoreImpl, targetId) {\n  remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetId);\n  ensureWatchStream(remoteStoreImpl).unwatch(targetId);\n}\n\nfunction startWatchStream(remoteStoreImpl) {\n  remoteStoreImpl.watchChangeAggregator = new WatchChangeAggregator({\n    getRemoteKeysForTarget: function (targetId) {\n      return remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget(targetId);\n    },\n    getTargetDataForTarget: function (targetId) {\n      return remoteStoreImpl.listenTargets.get(targetId) || null;\n    }\n  });\n  ensureWatchStream(remoteStoreImpl).start();\n  remoteStoreImpl.onlineStateTracker.handleWatchStreamStart();\n}\n/**\r\n * Returns whether the watch stream should be started because it's necessary\r\n * and has not yet been started.\r\n */\n\n\nfunction shouldStartWatchStream(remoteStoreImpl) {\n  return canUseNetwork(remoteStoreImpl) && !ensureWatchStream(remoteStoreImpl).isStarted() && remoteStoreImpl.listenTargets.size > 0;\n}\n\nfunction canUseNetwork(remoteStore) {\n  var remoteStoreImpl = debugCast(remoteStore);\n  return remoteStoreImpl.offlineCauses.size === 0;\n}\n\nfunction cleanUpWatchStreamState(remoteStoreImpl) {\n  remoteStoreImpl.watchChangeAggregator = undefined;\n}\n\nfunction onWatchStreamOpen(remoteStoreImpl) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_d) {\n      remoteStoreImpl.listenTargets.forEach(function (targetData, targetId) {\n        sendWatchRequest(remoteStoreImpl, targetData);\n      });\n      return [2\n      /*return*/\n      ];\n    });\n  });\n}\n\nfunction onWatchStreamClose(remoteStoreImpl, error) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_d) {\n      cleanUpWatchStreamState(remoteStoreImpl); // If we still need the watch stream, retry the connection.\n\n      if (shouldStartWatchStream(remoteStoreImpl)) {\n        remoteStoreImpl.onlineStateTracker.handleWatchStreamFailure(error);\n        startWatchStream(remoteStoreImpl);\n      } else {\n        // No need to restart watch stream because there are no active targets.\n        // The online state is set to unknown because there is no active attempt\n        // at establishing a connection\n        remoteStoreImpl.onlineStateTracker.set(\"Unknown\"\n        /* Unknown */\n        );\n      }\n\n      return [2\n      /*return*/\n      ];\n    });\n  });\n}\n\nfunction onWatchStreamChange(remoteStoreImpl, watchChange, snapshotVersion) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var e_4, lastRemoteSnapshotVersion, e_5;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          // Mark the client as online since we got a message from the server\n          remoteStoreImpl.onlineStateTracker.set(\"Online\"\n          /* Online */\n          );\n          if (!(watchChange instanceof WatchTargetChange && watchChange.state === 2\n          /* Removed */\n          && watchChange.cause)) return [3\n          /*break*/\n          , 6];\n          _d.label = 1;\n\n        case 1:\n          _d.trys.push([1, 3,, 5]);\n\n          return [4\n          /*yield*/\n          , handleTargetError(remoteStoreImpl, watchChange)];\n\n        case 2:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 5];\n\n        case 3:\n          e_4 = _d.sent();\n          logDebug(LOG_TAG$5, 'Failed to remove targets %s: %s ', watchChange.targetIds.join(','), e_4);\n          return [4\n          /*yield*/\n          , disableNetworkUntilRecovery(remoteStoreImpl, e_4)];\n\n        case 4:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 5];\n\n        case 5:\n          return [2\n          /*return*/\n          ];\n\n        case 6:\n          if (watchChange instanceof DocumentWatchChange) {\n            remoteStoreImpl.watchChangeAggregator.handleDocumentChange(watchChange);\n          } else if (watchChange instanceof ExistenceFilterChange) {\n            remoteStoreImpl.watchChangeAggregator.handleExistenceFilter(watchChange);\n          } else {\n            remoteStoreImpl.watchChangeAggregator.handleTargetChange(watchChange);\n          }\n\n          if (!!snapshotVersion.isEqual(SnapshotVersion.min())) return [3\n          /*break*/\n          , 13];\n          _d.label = 7;\n\n        case 7:\n          _d.trys.push([7, 11,, 13]);\n\n          return [4\n          /*yield*/\n          , localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore)];\n\n        case 8:\n          lastRemoteSnapshotVersion = _d.sent();\n          if (!(snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0)) return [3\n          /*break*/\n          , 10]; // We have received a target change with a global snapshot if the snapshot\n          // version is not equal to SnapshotVersion.min().\n\n          return [4\n          /*yield*/\n          , raiseWatchSnapshot(remoteStoreImpl, snapshotVersion)];\n\n        case 9:\n          // We have received a target change with a global snapshot if the snapshot\n          // version is not equal to SnapshotVersion.min().\n          _d.sent();\n\n          _d.label = 10;\n\n        case 10:\n          return [3\n          /*break*/\n          , 13];\n\n        case 11:\n          e_5 = _d.sent();\n          logDebug(LOG_TAG$5, 'Failed to raise snapshot:', e_5);\n          return [4\n          /*yield*/\n          , disableNetworkUntilRecovery(remoteStoreImpl, e_5)];\n\n        case 12:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 13];\n\n        case 13:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Recovery logic for IndexedDB errors that takes the network offline until\r\n * `op` succeeds. Retries are scheduled with backoff using\r\n * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is\r\n * validated via a generic operation.\r\n *\r\n * The returned Promise is resolved once the network is disabled and before\r\n * any retry attempt.\r\n */\n\n\nfunction disableNetworkUntilRecovery(remoteStoreImpl, e, op) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var _this = this;\n\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          if (!isIndexedDbTransactionError(e)) return [3\n          /*break*/\n          , 2];\n          remoteStoreImpl.offlineCauses.add(1\n          /* IndexedDbFailed */\n          ); // Disable network and raise offline snapshots\n\n          return [4\n          /*yield*/\n          , disableNetworkInternal(remoteStoreImpl)];\n\n        case 1:\n          // Disable network and raise offline snapshots\n          _d.sent();\n\n          remoteStoreImpl.onlineStateTracker.set(\"Offline\"\n          /* Offline */\n          );\n\n          if (!op) {\n            // Use a simple read operation to determine if IndexedDB recovered.\n            // Ideally, we would expose a health check directly on SimpleDb, but\n            // RemoteStore only has access to persistence through LocalStore.\n            op = function () {\n              return localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore);\n            };\n          } // Probe IndexedDB periodically and re-enable network\n\n\n          remoteStoreImpl.asyncQueue.enqueueRetryable(function () {\n            return tslib.__awaiter(_this, void 0, void 0, function () {\n              return tslib.__generator(this, function (_d) {\n                switch (_d.label) {\n                  case 0:\n                    logDebug(LOG_TAG$5, 'Retrying IndexedDB access');\n                    return [4\n                    /*yield*/\n                    , op()];\n\n                  case 1:\n                    _d.sent();\n\n                    remoteStoreImpl.offlineCauses.delete(1\n                    /* IndexedDbFailed */\n                    );\n                    return [4\n                    /*yield*/\n                    , enableNetworkInternal(remoteStoreImpl)];\n\n                  case 2:\n                    _d.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          });\n          return [3\n          /*break*/\n          , 3];\n\n        case 2:\n          throw e;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Executes `op`. If `op` fails, takes the network offline until `op`\r\n * succeeds. Returns after the first attempt.\r\n */\n\n\nfunction executeWithRecovery(remoteStoreImpl, op) {\n  return op().catch(function (e) {\n    return disableNetworkUntilRecovery(remoteStoreImpl, e, op);\n  });\n}\n/**\r\n * Takes a batch of changes from the Datastore, repackages them as a\r\n * RemoteEvent, and passes that on to the listener, which is typically the\r\n * SyncEngine.\r\n */\n\n\nfunction raiseWatchSnapshot(remoteStoreImpl, snapshotVersion) {\n  var remoteEvent = remoteStoreImpl.watchChangeAggregator.createRemoteEvent(snapshotVersion); // Update in-memory resume tokens. LocalStore will update the\n  // persistent view of these when applying the completed RemoteEvent.\n\n  remoteEvent.targetChanges.forEach(function (change, targetId) {\n    if (change.resumeToken.approximateByteSize() > 0) {\n      var targetData = remoteStoreImpl.listenTargets.get(targetId); // A watched target might have been removed already.\n\n      if (targetData) {\n        remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(change.resumeToken, snapshotVersion));\n      }\n    }\n  }); // Re-establish listens for the targets that have been invalidated by\n  // existence filter mismatches.\n\n  remoteEvent.targetMismatches.forEach(function (targetId) {\n    var targetData = remoteStoreImpl.listenTargets.get(targetId);\n\n    if (!targetData) {\n      // A watched target might have been removed already.\n      return;\n    } // Clear the resume token for the target, since we're in a known mismatch\n    // state.\n\n\n    remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(ByteString.EMPTY_BYTE_STRING, targetData.snapshotVersion)); // Cause a hard reset by unwatching and rewatching immediately, but\n    // deliberately don't send a resume token so that we get a full update.\n\n    sendUnwatchRequest(remoteStoreImpl, targetId); // Mark the target we send as being on behalf of an existence filter\n    // mismatch, but don't actually retain that in listenTargets. This ensures\n    // that we flag the first re-listen this way without impacting future\n    // listens of this target (that might happen e.g. on reconnect).\n\n    var requestTargetData = new TargetData(targetData.target, targetId, 1\n    /* ExistenceFilterMismatch */\n    , targetData.sequenceNumber);\n    sendWatchRequest(remoteStoreImpl, requestTargetData);\n  });\n  return remoteStoreImpl.remoteSyncer.applyRemoteEvent(remoteEvent);\n}\n/** Handles an error on a target */\n\n\nfunction handleTargetError(remoteStoreImpl, watchChange) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var error, _i, _d, targetId;\n\n    return tslib.__generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          error = watchChange.cause;\n          _i = 0, _d = watchChange.targetIds;\n          _e.label = 1;\n\n        case 1:\n          if (!(_i < _d.length)) return [3\n          /*break*/\n          , 4];\n          targetId = _d[_i];\n          if (!remoteStoreImpl.listenTargets.has(targetId)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , remoteStoreImpl.remoteSyncer.rejectListen(targetId, error)];\n\n        case 2:\n          _e.sent();\n\n          remoteStoreImpl.listenTargets.delete(targetId);\n          remoteStoreImpl.watchChangeAggregator.removeTarget(targetId);\n          _e.label = 3;\n\n        case 3:\n          _i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Attempts to fill our write pipeline with writes from the LocalStore.\r\n *\r\n * Called internally to bootstrap or refill the write pipeline and by\r\n * SyncEngine whenever there are new mutations to process.\r\n *\r\n * Starts the write stream if necessary.\r\n */\n\n\nfunction fillWritePipeline(remoteStore) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var remoteStoreImpl, writeStream, lastBatchIdRetrieved, batch, e_6;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          remoteStoreImpl = debugCast(remoteStore);\n          writeStream = ensureWriteStream(remoteStoreImpl);\n          lastBatchIdRetrieved = remoteStoreImpl.writePipeline.length > 0 ? remoteStoreImpl.writePipeline[remoteStoreImpl.writePipeline.length - 1].batchId : BATCHID_UNKNOWN;\n          _d.label = 1;\n\n        case 1:\n          if (!canAddToWritePipeline(remoteStoreImpl)) return [3\n          /*break*/\n          , 7];\n          _d.label = 2;\n\n        case 2:\n          _d.trys.push([2, 4,, 6]);\n\n          return [4\n          /*yield*/\n          , localStoreGetNextMutationBatch(remoteStoreImpl.localStore, lastBatchIdRetrieved)];\n\n        case 3:\n          batch = _d.sent();\n\n          if (batch === null) {\n            if (remoteStoreImpl.writePipeline.length === 0) {\n              writeStream.markIdle();\n            }\n\n            return [3\n            /*break*/\n            , 7];\n          } else {\n            lastBatchIdRetrieved = batch.batchId;\n            addToWritePipeline(remoteStoreImpl, batch);\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 4:\n          e_6 = _d.sent();\n          return [4\n          /*yield*/\n          , disableNetworkUntilRecovery(remoteStoreImpl, e_6)];\n\n        case 5:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 6:\n          return [3\n          /*break*/\n          , 1];\n\n        case 7:\n          if (shouldStartWriteStream(remoteStoreImpl)) {\n            startWriteStream(remoteStoreImpl);\n          }\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Returns true if we can add to the write pipeline (i.e. the network is\r\n * enabled and the write pipeline is not full).\r\n */\n\n\nfunction canAddToWritePipeline(remoteStoreImpl) {\n  return canUseNetwork(remoteStoreImpl) && remoteStoreImpl.writePipeline.length < MAX_PENDING_WRITES;\n}\n/**\r\n * Queues additional writes to be sent to the write stream, sending them\r\n * immediately if the write stream is established.\r\n */\n\n\nfunction addToWritePipeline(remoteStoreImpl, batch) {\n  remoteStoreImpl.writePipeline.push(batch);\n  var writeStream = ensureWriteStream(remoteStoreImpl);\n\n  if (writeStream.isOpen() && writeStream.handshakeComplete) {\n    writeStream.writeMutations(batch.mutations);\n  }\n}\n\nfunction shouldStartWriteStream(remoteStoreImpl) {\n  return canUseNetwork(remoteStoreImpl) && !ensureWriteStream(remoteStoreImpl).isStarted() && remoteStoreImpl.writePipeline.length > 0;\n}\n\nfunction startWriteStream(remoteStoreImpl) {\n  ensureWriteStream(remoteStoreImpl).start();\n}\n\nfunction onWriteStreamOpen(remoteStoreImpl) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_d) {\n      ensureWriteStream(remoteStoreImpl).writeHandshake();\n      return [2\n      /*return*/\n      ];\n    });\n  });\n}\n\nfunction onWriteHandshakeComplete(remoteStoreImpl) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var writeStream, _i, _d, batch;\n\n    return tslib.__generator(this, function (_e) {\n      writeStream = ensureWriteStream(remoteStoreImpl); // Send the write pipeline now that the stream is established.\n\n      for (_i = 0, _d = remoteStoreImpl.writePipeline; _i < _d.length; _i++) {\n        batch = _d[_i];\n        writeStream.writeMutations(batch.mutations);\n      }\n\n      return [2\n      /*return*/\n      ];\n    });\n  });\n}\n\nfunction onMutationResult(remoteStoreImpl, commitVersion, results) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var batch, success;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          batch = remoteStoreImpl.writePipeline.shift();\n          success = MutationBatchResult.from(batch, commitVersion, results);\n          return [4\n          /*yield*/\n          , executeWithRecovery(remoteStoreImpl, function () {\n            return remoteStoreImpl.remoteSyncer.applySuccessfulWrite(success);\n          })];\n\n        case 1:\n          _d.sent(); // It's possible that with the completion of this mutation another\n          // slot has freed up.\n\n\n          return [4\n          /*yield*/\n          , fillWritePipeline(remoteStoreImpl)];\n\n        case 2:\n          // It's possible that with the completion of this mutation another\n          // slot has freed up.\n          _d.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction onWriteStreamClose(remoteStoreImpl, error) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          if (!(error && ensureWriteStream(remoteStoreImpl).handshakeComplete)) return [3\n          /*break*/\n          , 2]; // This error affects the actual write.\n\n          return [4\n          /*yield*/\n          , handleWriteError(remoteStoreImpl, error)];\n\n        case 1:\n          // This error affects the actual write.\n          _d.sent();\n\n          _d.label = 2;\n\n        case 2:\n          // The write stream might have been started by refilling the write\n          // pipeline for failed writes\n          if (shouldStartWriteStream(remoteStoreImpl)) {\n            startWriteStream(remoteStoreImpl);\n          }\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction handleWriteError(remoteStoreImpl, error) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var batch_1;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          if (!isPermanentWriteError(error.code)) return [3\n          /*break*/\n          , 3];\n          batch_1 = remoteStoreImpl.writePipeline.shift(); // In this case it's also unlikely that the server itself is melting\n          // down -- this was just a bad request so inhibit backoff on the next\n          // restart.\n\n          ensureWriteStream(remoteStoreImpl).inhibitBackoff();\n          return [4\n          /*yield*/\n          , executeWithRecovery(remoteStoreImpl, function () {\n            return remoteStoreImpl.remoteSyncer.rejectFailedWrite(batch_1.batchId, error);\n          })];\n\n        case 1:\n          _d.sent(); // It's possible that with the completion of this mutation\n          // another slot has freed up.\n\n\n          return [4\n          /*yield*/\n          , fillWritePipeline(remoteStoreImpl)];\n\n        case 2:\n          // It's possible that with the completion of this mutation\n          // another slot has freed up.\n          _d.sent();\n\n          _d.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction restartNetwork(remoteStore) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var remoteStoreImpl;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          remoteStoreImpl = debugCast(remoteStore);\n          remoteStoreImpl.offlineCauses.add(4\n          /* ConnectivityChange */\n          );\n          return [4\n          /*yield*/\n          , disableNetworkInternal(remoteStoreImpl)];\n\n        case 1:\n          _d.sent();\n\n          remoteStoreImpl.onlineStateTracker.set(\"Unknown\"\n          /* Unknown */\n          );\n          remoteStoreImpl.offlineCauses.delete(4\n          /* ConnectivityChange */\n          );\n          return [4\n          /*yield*/\n          , enableNetworkInternal(remoteStoreImpl)];\n\n        case 2:\n          _d.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction remoteStoreHandleCredentialChange(remoteStore, user) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var remoteStoreImpl, usesNetwork;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          remoteStoreImpl = debugCast(remoteStore);\n          remoteStoreImpl.asyncQueue.verifyOperationInProgress();\n          logDebug(LOG_TAG$5, 'RemoteStore received new credentials');\n          usesNetwork = canUseNetwork(remoteStoreImpl); // Tear down and re-create our network streams. This will ensure we get a\n          // fresh auth token for the new user and re-fill the write pipeline with\n          // new mutations from the LocalStore (since mutations are per-user).\n\n          remoteStoreImpl.offlineCauses.add(3\n          /* CredentialChange */\n          );\n          return [4\n          /*yield*/\n          , disableNetworkInternal(remoteStoreImpl)];\n\n        case 1:\n          _d.sent();\n\n          if (usesNetwork) {\n            // Don't set the network status to Unknown if we are offline.\n            remoteStoreImpl.onlineStateTracker.set(\"Unknown\"\n            /* Unknown */\n            );\n          }\n\n          return [4\n          /*yield*/\n          , remoteStoreImpl.remoteSyncer.handleCredentialChange(user)];\n\n        case 2:\n          _d.sent();\n\n          remoteStoreImpl.offlineCauses.delete(3\n          /* CredentialChange */\n          );\n          return [4\n          /*yield*/\n          , enableNetworkInternal(remoteStoreImpl)];\n\n        case 3:\n          _d.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Toggles the network state when the client gains or loses its primary lease.\r\n */\n\n\nfunction remoteStoreApplyPrimaryState(remoteStore, isPrimary) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var remoteStoreImpl;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          remoteStoreImpl = debugCast(remoteStore);\n          if (!isPrimary) return [3\n          /*break*/\n          , 2];\n          remoteStoreImpl.offlineCauses.delete(2\n          /* IsSecondary */\n          );\n          return [4\n          /*yield*/\n          , enableNetworkInternal(remoteStoreImpl)];\n\n        case 1:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          if (!!isPrimary) return [3\n          /*break*/\n          , 4];\n          remoteStoreImpl.offlineCauses.add(2\n          /* IsSecondary */\n          );\n          return [4\n          /*yield*/\n          , disableNetworkInternal(remoteStoreImpl)];\n\n        case 3:\n          _d.sent();\n\n          remoteStoreImpl.onlineStateTracker.set(\"Unknown\"\n          /* Unknown */\n          );\n          _d.label = 4;\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * If not yet initialized, registers the WatchStream and its network state\r\n * callback with `remoteStoreImpl`. Returns the existing stream if one is\r\n * already available.\r\n *\r\n * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.\r\n * This is not done on Web to allow it to be tree-shaken.\r\n */\n\n\nfunction ensureWatchStream(remoteStoreImpl) {\n  var _this = this;\n\n  if (!remoteStoreImpl.watchStream) {\n    // Create stream (but note that it is not started yet).\n    remoteStoreImpl.watchStream = newPersistentWatchStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {\n      onOpen: onWatchStreamOpen.bind(null, remoteStoreImpl),\n      onClose: onWatchStreamClose.bind(null, remoteStoreImpl),\n      onWatchChange: onWatchStreamChange.bind(null, remoteStoreImpl)\n    });\n    remoteStoreImpl.onNetworkStatusChange.push(function (enabled) {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              if (!enabled) return [3\n              /*break*/\n              , 1];\n              remoteStoreImpl.watchStream.inhibitBackoff();\n\n              if (shouldStartWatchStream(remoteStoreImpl)) {\n                startWatchStream(remoteStoreImpl);\n              } else {\n                remoteStoreImpl.onlineStateTracker.set(\"Unknown\"\n                /* Unknown */\n                );\n              }\n\n              return [3\n              /*break*/\n              , 3];\n\n            case 1:\n              return [4\n              /*yield*/\n              , remoteStoreImpl.watchStream.stop()];\n\n            case 2:\n              _d.sent();\n\n              cleanUpWatchStreamState(remoteStoreImpl);\n              _d.label = 3;\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  }\n\n  return remoteStoreImpl.watchStream;\n}\n/**\r\n * If not yet initialized, registers the WriteStream and its network state\r\n * callback with `remoteStoreImpl`. Returns the existing stream if one is\r\n * already available.\r\n *\r\n * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.\r\n * This is not done on Web to allow it to be tree-shaken.\r\n */\n\n\nfunction ensureWriteStream(remoteStoreImpl) {\n  var _this = this;\n\n  if (!remoteStoreImpl.writeStream) {\n    // Create stream (but note that it is not started yet).\n    remoteStoreImpl.writeStream = newPersistentWriteStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {\n      onOpen: onWriteStreamOpen.bind(null, remoteStoreImpl),\n      onClose: onWriteStreamClose.bind(null, remoteStoreImpl),\n      onHandshakeComplete: onWriteHandshakeComplete.bind(null, remoteStoreImpl),\n      onMutationResult: onMutationResult.bind(null, remoteStoreImpl)\n    });\n    remoteStoreImpl.onNetworkStatusChange.push(function (enabled) {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              if (!enabled) return [3\n              /*break*/\n              , 2];\n              remoteStoreImpl.writeStream.inhibitBackoff(); // This will start the write stream if necessary.\n\n              return [4\n              /*yield*/\n              , fillWritePipeline(remoteStoreImpl)];\n\n            case 1:\n              // This will start the write stream if necessary.\n              _d.sent();\n\n              return [3\n              /*break*/\n              , 4];\n\n            case 2:\n              return [4\n              /*yield*/\n              , remoteStoreImpl.writeStream.stop()];\n\n            case 3:\n              _d.sent();\n\n              if (remoteStoreImpl.writePipeline.length > 0) {\n                logDebug(LOG_TAG$5, \"Stopping write stream with \" + remoteStoreImpl.writePipeline.length + \" pending writes\");\n                remoteStoreImpl.writePipeline = [];\n              }\n\n              _d.label = 4;\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  }\n\n  return remoteStoreImpl.writeStream;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$4 = 'AsyncQueue';\n/**\r\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\r\n *\r\n * It is created via DelayedOperation.createAndSchedule().\r\n *\r\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\r\n *\r\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\r\n * in newer versions of TypeScript defines `finally`, which is not available in\r\n * IE.\r\n */\n\nvar DelayedOperation =\n/** @class */\nfunction () {\n  function DelayedOperation(asyncQueue, timerId, targetTimeMs, op, removalCallback) {\n    this.asyncQueue = asyncQueue;\n    this.timerId = timerId;\n    this.targetTimeMs = targetTimeMs;\n    this.op = op;\n    this.removalCallback = removalCallback;\n    this.deferred = new Deferred();\n    this.then = this.deferred.promise.then.bind(this.deferred.promise); // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n\n    this.deferred.promise.catch(function (err) {});\n  }\n  /**\r\n   * Creates and returns a DelayedOperation that has been scheduled to be\r\n   * executed on the provided asyncQueue after the provided delayMs.\r\n   *\r\n   * @param asyncQueue - The queue to schedule the operation on.\r\n   * @param id - A Timer ID identifying the type of operation this is.\r\n   * @param delayMs - The delay (ms) before the operation should be scheduled.\r\n   * @param op - The operation to run.\r\n   * @param removalCallback - A callback to be called synchronously once the\r\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\r\n   *   from its delayedOperations list.\r\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\r\n   *   the DelayedOperation class public.\r\n   */\n\n\n  DelayedOperation.createAndSchedule = function (asyncQueue, timerId, delayMs, op, removalCallback) {\n    var targetTime = Date.now() + delayMs;\n    var delayedOp = new DelayedOperation(asyncQueue, timerId, targetTime, op, removalCallback);\n    delayedOp.start(delayMs);\n    return delayedOp;\n  };\n  /**\r\n   * Starts the timer. This is called immediately after construction by\r\n   * createAndSchedule().\r\n   */\n\n\n  DelayedOperation.prototype.start = function (delayMs) {\n    var _this = this;\n\n    this.timerHandle = setTimeout(function () {\n      return _this.handleDelayElapsed();\n    }, delayMs);\n  };\n  /**\r\n   * Queues the operation to run immediately (if it hasn't already been run or\r\n   * canceled).\r\n   */\n\n\n  DelayedOperation.prototype.skipDelay = function () {\n    return this.handleDelayElapsed();\n  };\n  /**\r\n   * Cancels the operation if it hasn't already been executed or canceled. The\r\n   * promise will be rejected.\r\n   *\r\n   * As long as the operation has not yet been run, calling cancel() provides a\r\n   * guarantee that the operation will not be run.\r\n   */\n\n\n  DelayedOperation.prototype.cancel = function (reason) {\n    if (this.timerHandle !== null) {\n      this.clearTimeout();\n      this.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled' + (reason ? ': ' + reason : '')));\n    }\n  };\n\n  DelayedOperation.prototype.handleDelayElapsed = function () {\n    var _this = this;\n\n    this.asyncQueue.enqueueAndForget(function () {\n      if (_this.timerHandle !== null) {\n        _this.clearTimeout();\n\n        return _this.op().then(function (result) {\n          return _this.deferred.resolve(result);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  };\n\n  DelayedOperation.prototype.clearTimeout = function () {\n    if (this.timerHandle !== null) {\n      this.removalCallback(this);\n      clearTimeout(this.timerHandle);\n      this.timerHandle = null;\n    }\n  };\n\n  return DelayedOperation;\n}();\n/**\r\n * Returns a FirestoreError that can be surfaced to the user if the provided\r\n * error is an IndexedDbTransactionError. Re-throws the error otherwise.\r\n */\n\n\nfunction wrapInUserErrorIfRecoverable(e, msg) {\n  logError(LOG_TAG$4, msg + \": \" + e);\n\n  if (isIndexedDbTransactionError(e)) {\n    return new FirestoreError(Code.UNAVAILABLE, msg + \": \" + e);\n  } else {\n    throw e;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\r\n * in order specified by the provided comparator. We always add a document key\r\n * comparator on top of what is provided to guarantee document equality based on\r\n * the key.\r\n */\n\n\nvar DocumentSet =\n/** @class */\nfunction () {\n  /** The default ordering is by key if the comparator is omitted */\n  function DocumentSet(comp) {\n    // We are adding document key comparator to the end as it's the only\n    // guaranteed unique property of a document.\n    if (comp) {\n      this.comparator = function (d1, d2) {\n        return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n      };\n    } else {\n      this.comparator = function (d1, d2) {\n        return DocumentKey.comparator(d1.key, d2.key);\n      };\n    }\n\n    this.keyedMap = documentMap();\n    this.sortedSet = new SortedMap(this.comparator);\n  }\n  /**\r\n   * Returns an empty copy of the existing DocumentSet, using the same\r\n   * comparator.\r\n   */\n\n\n  DocumentSet.emptySet = function (oldSet) {\n    return new DocumentSet(oldSet.comparator);\n  };\n\n  DocumentSet.prototype.has = function (key) {\n    return this.keyedMap.get(key) != null;\n  };\n\n  DocumentSet.prototype.get = function (key) {\n    return this.keyedMap.get(key);\n  };\n\n  DocumentSet.prototype.first = function () {\n    return this.sortedSet.minKey();\n  };\n\n  DocumentSet.prototype.last = function () {\n    return this.sortedSet.maxKey();\n  };\n\n  DocumentSet.prototype.isEmpty = function () {\n    return this.sortedSet.isEmpty();\n  };\n  /**\r\n   * Returns the index of the provided key in the document set, or -1 if the\r\n   * document key is not present in the set;\r\n   */\n\n\n  DocumentSet.prototype.indexOf = function (key) {\n    var doc = this.keyedMap.get(key);\n    return doc ? this.sortedSet.indexOf(doc) : -1;\n  };\n\n  Object.defineProperty(DocumentSet.prototype, \"size\", {\n    get: function () {\n      return this.sortedSet.size;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Iterates documents in order defined by \"comparator\" */\n\n  DocumentSet.prototype.forEach = function (cb) {\n    this.sortedSet.inorderTraversal(function (k, v) {\n      cb(k);\n      return false;\n    });\n  };\n  /** Inserts or updates a document with the same key */\n\n\n  DocumentSet.prototype.add = function (doc) {\n    // First remove the element if we have it.\n    var set = this.delete(doc.key);\n    return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n  };\n  /** Deletes a document with a given key */\n\n\n  DocumentSet.prototype.delete = function (key) {\n    var doc = this.get(key);\n\n    if (!doc) {\n      return this;\n    }\n\n    return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n  };\n\n  DocumentSet.prototype.isEqual = function (other) {\n    if (!(other instanceof DocumentSet)) {\n      return false;\n    }\n\n    if (this.size !== other.size) {\n      return false;\n    }\n\n    var thisIt = this.sortedSet.getIterator();\n    var otherIt = other.sortedSet.getIterator();\n\n    while (thisIt.hasNext()) {\n      var thisDoc = thisIt.getNext().key;\n      var otherDoc = otherIt.getNext().key;\n\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  DocumentSet.prototype.toString = function () {\n    var docStrings = [];\n    this.forEach(function (doc) {\n      docStrings.push(doc.toString());\n    });\n\n    if (docStrings.length === 0) {\n      return 'DocumentSet ()';\n    } else {\n      return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n    }\n  };\n\n  DocumentSet.prototype.copy = function (keyedMap, sortedSet) {\n    var newSet = new DocumentSet();\n    newSet.comparator = this.comparator;\n    newSet.keyedMap = keyedMap;\n    newSet.sortedSet = sortedSet;\n    return newSet;\n  };\n\n  return DocumentSet;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\r\n * duplicate events for the same doc.\r\n */\n\n\nvar DocumentChangeSet =\n/** @class */\nfunction () {\n  function DocumentChangeSet() {\n    this.changeMap = new SortedMap(DocumentKey.comparator);\n  }\n\n  DocumentChangeSet.prototype.track = function (change) {\n    var key = change.doc.key;\n    var oldChange = this.changeMap.get(key);\n\n    if (!oldChange) {\n      this.changeMap = this.changeMap.insert(key, change);\n      return;\n    } // Merge the new change with the existing change.\n\n\n    if (change.type !== 0\n    /* Added */\n    && oldChange.type === 3\n    /* Metadata */\n    ) {\n        this.changeMap = this.changeMap.insert(key, change);\n      } else if (change.type === 3\n    /* Metadata */\n    && oldChange.type !== 1\n    /* Removed */\n    ) {\n        this.changeMap = this.changeMap.insert(key, {\n          type: oldChange.type,\n          doc: change.doc\n        });\n      } else if (change.type === 2\n    /* Modified */\n    && oldChange.type === 2\n    /* Modified */\n    ) {\n        this.changeMap = this.changeMap.insert(key, {\n          type: 2\n          /* Modified */\n          ,\n          doc: change.doc\n        });\n      } else if (change.type === 2\n    /* Modified */\n    && oldChange.type === 0\n    /* Added */\n    ) {\n        this.changeMap = this.changeMap.insert(key, {\n          type: 0\n          /* Added */\n          ,\n          doc: change.doc\n        });\n      } else if (change.type === 1\n    /* Removed */\n    && oldChange.type === 0\n    /* Added */\n    ) {\n        this.changeMap = this.changeMap.remove(key);\n      } else if (change.type === 1\n    /* Removed */\n    && oldChange.type === 2\n    /* Modified */\n    ) {\n        this.changeMap = this.changeMap.insert(key, {\n          type: 1\n          /* Removed */\n          ,\n          doc: oldChange.doc\n        });\n      } else if (change.type === 0\n    /* Added */\n    && oldChange.type === 1\n    /* Removed */\n    ) {\n        this.changeMap = this.changeMap.insert(key, {\n          type: 2\n          /* Modified */\n          ,\n          doc: change.doc\n        });\n      } else {\n      // This includes these cases, which don't make sense:\n      // Added->Added\n      // Removed->Removed\n      // Modified->Added\n      // Removed->Modified\n      // Metadata->Added\n      // Removed->Metadata\n      fail();\n    }\n  };\n\n  DocumentChangeSet.prototype.getChanges = function () {\n    var changes = [];\n    this.changeMap.inorderTraversal(function (key, change) {\n      changes.push(change);\n    });\n    return changes;\n  };\n\n  return DocumentChangeSet;\n}();\n\nvar ViewSnapshot =\n/** @class */\nfunction () {\n  function ViewSnapshot(query, docs, oldDocs, docChanges, mutatedKeys, fromCache, syncStateChanged, excludesMetadataChanges) {\n    this.query = query;\n    this.docs = docs;\n    this.oldDocs = oldDocs;\n    this.docChanges = docChanges;\n    this.mutatedKeys = mutatedKeys;\n    this.fromCache = fromCache;\n    this.syncStateChanged = syncStateChanged;\n    this.excludesMetadataChanges = excludesMetadataChanges;\n  }\n  /** Returns a view snapshot as if all documents in the snapshot were added. */\n\n\n  ViewSnapshot.fromInitialDocuments = function (query, documents, mutatedKeys, fromCache) {\n    var changes = [];\n    documents.forEach(function (doc) {\n      changes.push({\n        type: 0\n        /* Added */\n        ,\n        doc: doc\n      });\n    });\n    return new ViewSnapshot(query, documents, DocumentSet.emptySet(documents), changes, mutatedKeys, fromCache,\n    /* syncStateChanged= */\n    true,\n    /* excludesMetadataChanges= */\n    false);\n  };\n\n  Object.defineProperty(ViewSnapshot.prototype, \"hasPendingWrites\", {\n    get: function () {\n      return !this.mutatedKeys.isEmpty();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ViewSnapshot.prototype.isEqual = function (other) {\n    if (this.fromCache !== other.fromCache || this.syncStateChanged !== other.syncStateChanged || !this.mutatedKeys.isEqual(other.mutatedKeys) || !queryEquals(this.query, other.query) || !this.docs.isEqual(other.docs) || !this.oldDocs.isEqual(other.oldDocs)) {\n      return false;\n    }\n\n    var changes = this.docChanges;\n    var otherChanges = other.docChanges;\n\n    if (changes.length !== otherChanges.length) {\n      return false;\n    }\n\n    for (var i = 0; i < changes.length; i++) {\n      if (changes[i].type !== otherChanges[i].type || !changes[i].doc.isEqual(otherChanges[i].doc)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  return ViewSnapshot;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Holds the listeners and the last received ViewSnapshot for a query being\r\n * tracked by EventManager.\r\n */\n\n\nvar QueryListenersInfo =\n/** @class */\nfunction () {\n  function QueryListenersInfo() {\n    this.viewSnap = undefined;\n    this.listeners = [];\n  }\n\n  return QueryListenersInfo;\n}();\n\nfunction newEventManager() {\n  return new EventManagerImpl();\n}\n\nvar EventManagerImpl =\n/** @class */\nfunction () {\n  function EventManagerImpl() {\n    this.queries = new ObjectMap(function (q) {\n      return canonifyQuery(q);\n    }, queryEquals);\n    this.onlineState = \"Unknown\"\n    /* Unknown */\n    ;\n    this.snapshotsInSyncListeners = new Set();\n  }\n\n  return EventManagerImpl;\n}();\n\nfunction eventManagerListen(eventManager, listener) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var eventManagerImpl, query, firstListen, queryInfo, _d, e_7, firestoreError, raisedEvent;\n\n    return tslib.__generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          eventManagerImpl = debugCast(eventManager);\n          query = listener.query;\n          firstListen = false;\n          queryInfo = eventManagerImpl.queries.get(query);\n\n          if (!queryInfo) {\n            firstListen = true;\n            queryInfo = new QueryListenersInfo();\n          }\n\n          if (!firstListen) return [3\n          /*break*/\n          , 4];\n          _e.label = 1;\n\n        case 1:\n          _e.trys.push([1, 3,, 4]);\n\n          _d = queryInfo;\n          return [4\n          /*yield*/\n          , eventManagerImpl.onListen(query)];\n\n        case 2:\n          _d.viewSnap = _e.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          e_7 = _e.sent();\n          firestoreError = wrapInUserErrorIfRecoverable(e_7, \"Initialization of query '\" + stringifyQuery(listener.query) + \"' failed\");\n          listener.onError(firestoreError);\n          return [2\n          /*return*/\n          ];\n\n        case 4:\n          eventManagerImpl.queries.set(query, queryInfo);\n          queryInfo.listeners.push(listener); // Run global snapshot listeners if a consistent snapshot has been emitted.\n\n          listener.applyOnlineStateChange(eventManagerImpl.onlineState);\n\n          if (queryInfo.viewSnap) {\n            raisedEvent = listener.onViewSnapshot(queryInfo.viewSnap);\n\n            if (raisedEvent) {\n              raiseSnapshotsInSyncEvent(eventManagerImpl);\n            }\n          }\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction eventManagerUnlisten(eventManager, listener) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var eventManagerImpl, query, lastListen, queryInfo, i;\n    return tslib.__generator(this, function (_d) {\n      eventManagerImpl = debugCast(eventManager);\n      query = listener.query;\n      lastListen = false;\n      queryInfo = eventManagerImpl.queries.get(query);\n\n      if (queryInfo) {\n        i = queryInfo.listeners.indexOf(listener);\n\n        if (i >= 0) {\n          queryInfo.listeners.splice(i, 1);\n          lastListen = queryInfo.listeners.length === 0;\n        }\n      }\n\n      if (lastListen) {\n        eventManagerImpl.queries.delete(query);\n        return [2\n        /*return*/\n        , eventManagerImpl.onUnlisten(query)];\n      }\n\n      return [2\n      /*return*/\n      ];\n    });\n  });\n}\n\nfunction eventManagerOnWatchChange(eventManager, viewSnaps) {\n  var eventManagerImpl = debugCast(eventManager);\n  var raisedEvent = false;\n\n  for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {\n    var viewSnap = viewSnaps_1[_i];\n    var query_1 = viewSnap.query;\n    var queryInfo = eventManagerImpl.queries.get(query_1);\n\n    if (queryInfo) {\n      for (var _d = 0, _e = queryInfo.listeners; _d < _e.length; _d++) {\n        var listener = _e[_d];\n\n        if (listener.onViewSnapshot(viewSnap)) {\n          raisedEvent = true;\n        }\n      }\n\n      queryInfo.viewSnap = viewSnap;\n    }\n  }\n\n  if (raisedEvent) {\n    raiseSnapshotsInSyncEvent(eventManagerImpl);\n  }\n}\n\nfunction eventManagerOnWatchError(eventManager, query, error) {\n  var eventManagerImpl = debugCast(eventManager);\n  var queryInfo = eventManagerImpl.queries.get(query);\n\n  if (queryInfo) {\n    for (var _i = 0, _d = queryInfo.listeners; _i < _d.length; _i++) {\n      var listener = _d[_i];\n      listener.onError(error);\n    }\n  } // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n  // after an error.\n\n\n  eventManagerImpl.queries.delete(query);\n}\n\nfunction eventManagerOnOnlineStateChange(eventManager, onlineState) {\n  var eventManagerImpl = debugCast(eventManager);\n  eventManagerImpl.onlineState = onlineState;\n  var raisedEvent = false;\n  eventManagerImpl.queries.forEach(function (_, queryInfo) {\n    for (var _i = 0, _d = queryInfo.listeners; _i < _d.length; _i++) {\n      var listener = _d[_i]; // Run global snapshot listeners if a consistent snapshot has been emitted.\n\n      if (listener.applyOnlineStateChange(onlineState)) {\n        raisedEvent = true;\n      }\n    }\n  });\n\n  if (raisedEvent) {\n    raiseSnapshotsInSyncEvent(eventManagerImpl);\n  }\n}\n\nfunction addSnapshotsInSyncListener(eventManager, observer) {\n  var eventManagerImpl = debugCast(eventManager);\n  eventManagerImpl.snapshotsInSyncListeners.add(observer); // Immediately fire an initial event, indicating all existing listeners\n  // are in-sync.\n\n  observer.next();\n}\n\nfunction removeSnapshotsInSyncListener(eventManager, observer) {\n  var eventManagerImpl = debugCast(eventManager);\n  eventManagerImpl.snapshotsInSyncListeners.delete(observer);\n} // Call all global snapshot listeners that have been set.\n\n\nfunction raiseSnapshotsInSyncEvent(eventManagerImpl) {\n  eventManagerImpl.snapshotsInSyncListeners.forEach(function (observer) {\n    observer.next();\n  });\n}\n/**\r\n * QueryListener takes a series of internal view snapshots and determines\r\n * when to raise the event.\r\n *\r\n * It uses an Observer to dispatch events.\r\n */\n\n\nvar QueryListener =\n/** @class */\nfunction () {\n  function QueryListener(query, queryObserver, options) {\n    this.query = query;\n    this.queryObserver = queryObserver;\n    /**\r\n     * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\r\n     * observer. This flag is set to true once we've actually raised an event.\r\n     */\n\n    this.raisedInitialEvent = false;\n    this.snap = null;\n    this.onlineState = \"Unknown\"\n    /* Unknown */\n    ;\n    this.options = options || {};\n  }\n  /**\r\n   * Applies the new ViewSnapshot to this listener, raising a user-facing event\r\n   * if applicable (depending on what changed, whether the user has opted into\r\n   * metadata-only changes, etc.). Returns true if a user-facing event was\r\n   * indeed raised.\r\n   */\n\n\n  QueryListener.prototype.onViewSnapshot = function (snap) {\n    if (!this.options.includeMetadataChanges) {\n      // Remove the metadata only changes.\n      var docChanges = [];\n\n      for (var _i = 0, _d = snap.docChanges; _i < _d.length; _i++) {\n        var docChange = _d[_i];\n\n        if (docChange.type !== 3\n        /* Metadata */\n        ) {\n            docChanges.push(docChange);\n          }\n      }\n\n      snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.mutatedKeys, snap.fromCache, snap.syncStateChanged,\n      /* excludesMetadataChanges= */\n      true);\n    }\n\n    var raisedEvent = false;\n\n    if (!this.raisedInitialEvent) {\n      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n        this.raiseInitialEvent(snap);\n        raisedEvent = true;\n      }\n    } else if (this.shouldRaiseEvent(snap)) {\n      this.queryObserver.next(snap);\n      raisedEvent = true;\n    }\n\n    this.snap = snap;\n    return raisedEvent;\n  };\n\n  QueryListener.prototype.onError = function (error) {\n    this.queryObserver.error(error);\n  };\n  /** Returns whether a snapshot was raised. */\n\n\n  QueryListener.prototype.applyOnlineStateChange = function (onlineState) {\n    this.onlineState = onlineState;\n    var raisedEvent = false;\n\n    if (this.snap && !this.raisedInitialEvent && this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n      this.raiseInitialEvent(this.snap);\n      raisedEvent = true;\n    }\n\n    return raisedEvent;\n  };\n\n  QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {\n    // Always raise the first event when we're synced\n    if (!snap.fromCache) {\n      return true;\n    } // NOTE: We consider OnlineState.Unknown as online (it should become Offline\n    // or Online if we wait long enough).\n\n\n    var maybeOnline = onlineState !== \"Offline\"\n    /* Offline */\n    ; // Don't raise the event if we're online, aren't synced yet (checked\n    // above) and are waiting for a sync.\n\n    if (this.options.waitForSyncWhenOnline && maybeOnline) {\n      return false;\n    } // Raise data from cache if we have any documents or we are offline\n\n\n    return !snap.docs.isEmpty() || onlineState === \"Offline\"\n    /* Offline */\n    ;\n  };\n\n  QueryListener.prototype.shouldRaiseEvent = function (snap) {\n    // We don't need to handle includeDocumentMetadataChanges here because\n    // the Metadata only changes have already been stripped out if needed.\n    // At this point the only changes we will see are the ones we should\n    // propagate.\n    if (snap.docChanges.length > 0) {\n      return true;\n    }\n\n    var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n\n    if (snap.syncStateChanged || hasPendingWritesChanged) {\n      return this.options.includeMetadataChanges === true;\n    } // Generally we should have hit one of the cases above, but it's possible\n    // to get here if there were only metadata docChanges and they got\n    // stripped out.\n\n\n    return false;\n  };\n\n  QueryListener.prototype.raiseInitialEvent = function (snap) {\n    snap = ViewSnapshot.fromInitialDocuments(snap.query, snap.docs, snap.mutatedKeys, snap.fromCache);\n    this.raisedInitialEvent = true;\n    this.queryObserver.next(snap);\n  };\n\n  return QueryListener;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A set of changes to what documents are currently in view and out of view for\r\n * a given query. These changes are sent to the LocalStore by the View (via\r\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\r\n */\n\n\nvar LocalViewChanges =\n/** @class */\nfunction () {\n  function LocalViewChanges(targetId, fromCache, addedKeys, removedKeys) {\n    this.targetId = targetId;\n    this.fromCache = fromCache;\n    this.addedKeys = addedKeys;\n    this.removedKeys = removedKeys;\n  }\n\n  LocalViewChanges.fromSnapshot = function (targetId, viewSnapshot) {\n    var addedKeys = documentKeySet();\n    var removedKeys = documentKeySet();\n\n    for (var _i = 0, _d = viewSnapshot.docChanges; _i < _d.length; _i++) {\n      var docChange = _d[_i];\n\n      switch (docChange.type) {\n        case 0\n        /* Added */\n        :\n          addedKeys = addedKeys.add(docChange.doc.key);\n          break;\n\n        case 1\n        /* Removed */\n        :\n          removedKeys = removedKeys.add(docChange.doc.key);\n          break;\n        // do nothing\n      }\n    }\n\n    return new LocalViewChanges(targetId, viewSnapshot.fromCache, addedKeys, removedKeys);\n  };\n\n  return LocalViewChanges;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar BundleLoadResult =\n/** @class */\nfunction () {\n  function BundleLoadResult(progress, changedDocs) {\n    this.progress = progress;\n    this.changedDocs = changedDocs;\n  }\n\n  return BundleLoadResult;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper to convert objects from bundles to model objects in the SDK.\r\n */\n\n\nvar BundleConverterImpl =\n/** @class */\nfunction () {\n  function BundleConverterImpl(serializer) {\n    this.serializer = serializer;\n  }\n\n  BundleConverterImpl.prototype.toDocumentKey = function (name) {\n    return fromName(this.serializer, name);\n  };\n  /**\r\n   * Converts a BundleDocument to a MutableDocument.\r\n   */\n\n\n  BundleConverterImpl.prototype.toMutableDocument = function (bundledDoc) {\n    if (bundledDoc.metadata.exists) {\n      return fromDocument(this.serializer, bundledDoc.document, false);\n    } else {\n      return MutableDocument.newNoDocument(this.toDocumentKey(bundledDoc.metadata.name), this.toSnapshotVersion(bundledDoc.metadata.readTime));\n    }\n  };\n\n  BundleConverterImpl.prototype.toSnapshotVersion = function (time) {\n    return fromVersion(time);\n  };\n\n  return BundleConverterImpl;\n}();\n/**\r\n * A class to process the elements from a bundle, load them into local\r\n * storage and provide progress update while loading.\r\n */\n\n\nvar BundleLoader =\n/** @class */\nfunction () {\n  function BundleLoader(bundleMetadata, localStore, serializer) {\n    this.bundleMetadata = bundleMetadata;\n    this.localStore = localStore;\n    this.serializer = serializer;\n    /** Batched queries to be saved into storage */\n\n    this.queries = [];\n    /** Batched documents to be saved into storage */\n\n    this.documents = [];\n    this.progress = bundleInitialProgress(bundleMetadata);\n  }\n  /**\r\n   * Adds an element from the bundle to the loader.\r\n   *\r\n   * Returns a new progress if adding the element leads to a new progress,\r\n   * otherwise returns null.\r\n   */\n\n\n  BundleLoader.prototype.addSizedElement = function (element) {\n    this.progress.bytesLoaded += element.byteLength;\n    var documentsLoaded = this.progress.documentsLoaded;\n\n    if (element.payload.namedQuery) {\n      this.queries.push(element.payload.namedQuery);\n    } else if (element.payload.documentMetadata) {\n      this.documents.push({\n        metadata: element.payload.documentMetadata\n      });\n\n      if (!element.payload.documentMetadata.exists) {\n        ++documentsLoaded;\n      }\n    } else if (element.payload.document) {\n      this.documents[this.documents.length - 1].document = element.payload.document;\n      ++documentsLoaded;\n    }\n\n    if (documentsLoaded !== this.progress.documentsLoaded) {\n      this.progress.documentsLoaded = documentsLoaded;\n      return Object.assign({}, this.progress);\n    }\n\n    return null;\n  };\n\n  BundleLoader.prototype.getQueryDocumentMapping = function (documents) {\n    var queryDocumentMap = new Map();\n    var bundleConverter = new BundleConverterImpl(this.serializer);\n\n    for (var _i = 0, documents_2 = documents; _i < documents_2.length; _i++) {\n      var bundleDoc = documents_2[_i];\n\n      if (bundleDoc.metadata.queries) {\n        var documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);\n\n        for (var _d = 0, _e = bundleDoc.metadata.queries; _d < _e.length; _d++) {\n          var queryName = _e[_d];\n          var documentKeys = (queryDocumentMap.get(queryName) || documentKeySet()).add(documentKey);\n          queryDocumentMap.set(queryName, documentKeys);\n        }\n      }\n    }\n\n    return queryDocumentMap;\n  };\n  /**\r\n   * Update the progress to 'Success' and return the updated progress.\r\n   */\n\n\n  BundleLoader.prototype.complete = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var changedDocuments, queryDocumentMap, _i, _d, q;\n\n      return tslib.__generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , localStoreApplyBundledDocuments(this.localStore, new BundleConverterImpl(this.serializer), this.documents, this.bundleMetadata.id)];\n\n          case 1:\n            changedDocuments = _e.sent();\n            queryDocumentMap = this.getQueryDocumentMapping(this.documents);\n            _i = 0, _d = this.queries;\n            _e.label = 2;\n\n          case 2:\n            if (!(_i < _d.length)) return [3\n            /*break*/\n            , 5];\n            q = _d[_i];\n            return [4\n            /*yield*/\n            , localStoreSaveNamedQuery(this.localStore, q, queryDocumentMap.get(q.name))];\n\n          case 3:\n            _e.sent();\n\n            _e.label = 4;\n\n          case 4:\n            _i++;\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            this.progress.taskState = 'Success';\n            return [2\n            /*return*/\n            , new BundleLoadResult(Object.assign({}, this.progress), changedDocuments)];\n        }\n      });\n    });\n  };\n\n  return BundleLoader;\n}();\n/**\r\n * Returns a `LoadBundleTaskProgress` representing the initial progress of\r\n * loading a bundle.\r\n */\n\n\nfunction bundleInitialProgress(metadata) {\n  return {\n    taskState: 'Running',\n    documentsLoaded: 0,\n    bytesLoaded: 0,\n    totalDocuments: metadata.totalDocuments,\n    totalBytes: metadata.totalBytes\n  };\n}\n/**\r\n * Returns a `LoadBundleTaskProgress` representing the progress that the loading\r\n * has succeeded.\r\n */\n\n\nfunction bundleSuccessProgress(metadata) {\n  return {\n    taskState: 'Success',\n    documentsLoaded: metadata.totalDocuments,\n    bytesLoaded: metadata.totalBytes,\n    totalDocuments: metadata.totalDocuments,\n    totalBytes: metadata.totalBytes\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar AddedLimboDocument =\n/** @class */\nfunction () {\n  function AddedLimboDocument(key) {\n    this.key = key;\n  }\n\n  return AddedLimboDocument;\n}();\n\nvar RemovedLimboDocument =\n/** @class */\nfunction () {\n  function RemovedLimboDocument(key) {\n    this.key = key;\n  }\n\n  return RemovedLimboDocument;\n}();\n/**\r\n * View is responsible for computing the final merged truth of what docs are in\r\n * a query. It gets notified of local and remote changes to docs, and applies\r\n * the query filters and limits to determine the most correct possible results.\r\n */\n\n\nvar View =\n/** @class */\nfunction () {\n  function View(query,\n  /** Documents included in the remote target */\n  _syncedDocuments) {\n    this.query = query;\n    this._syncedDocuments = _syncedDocuments;\n    this.syncState = null;\n    /**\r\n     * A flag whether the view is current with the backend. A view is considered\r\n     * current after it has seen the current flag from the backend and did not\r\n     * lose consistency within the watch stream (e.g. because of an existence\r\n     * filter mismatch).\r\n     */\n\n    this.current = false;\n    /** Documents in the view but not in the remote target */\n\n    this.limboDocuments = documentKeySet();\n    /** Document Keys that have local changes */\n\n    this.mutatedKeys = documentKeySet();\n    this.docComparator = newQueryComparator(query);\n    this.documentSet = new DocumentSet(this.docComparator);\n  }\n\n  Object.defineProperty(View.prototype, \"syncedDocuments\", {\n    /**\r\n     * The set of remote documents that the server has told us belongs to the target associated with\r\n     * this view.\r\n     */\n    get: function () {\n      return this._syncedDocuments;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Iterates over a set of doc changes, applies the query limit, and computes\r\n   * what the new results should be, what the changes were, and whether we may\r\n   * need to go back to the local cache for more results. Does not make any\r\n   * changes to the view.\r\n   * @param docChanges - The doc changes to apply to this view.\r\n   * @param previousChanges - If this is being called with a refill, then start\r\n   *        with this set of docs and changes instead of the current view.\r\n   * @returns a new set of docs, changes, and refill flag.\r\n   */\n\n  View.prototype.computeDocChanges = function (docChanges, previousChanges) {\n    var _this = this;\n\n    var changeSet = previousChanges ? previousChanges.changeSet : new DocumentChangeSet();\n    var oldDocumentSet = previousChanges ? previousChanges.documentSet : this.documentSet;\n    var newMutatedKeys = previousChanges ? previousChanges.mutatedKeys : this.mutatedKeys;\n    var newDocumentSet = oldDocumentSet;\n    var needsRefill = false; // Track the last doc in a (full) limit. This is necessary, because some\n    // update (a delete, or an update moving a doc past the old limit) might\n    // mean there is some other document in the local cache that either should\n    // come (1) between the old last limit doc and the new last document, in the\n    // case of updates, or (2) after the new last document, in the case of\n    // deletes. So we keep this doc at the old limit to compare the updates to.\n    //\n    // Note that this should never get used in a refill (when previousChanges is\n    // set), because there will only be adds -- no deletes or updates.\n\n    var lastDocInLimit = hasLimitToFirst(this.query) && oldDocumentSet.size === this.query.limit ? oldDocumentSet.last() : null;\n    var firstDocInLimit = hasLimitToLast(this.query) && oldDocumentSet.size === this.query.limit ? oldDocumentSet.first() : null;\n    docChanges.inorderTraversal(function (key, entry) {\n      var oldDoc = oldDocumentSet.get(key);\n      var newDoc = queryMatches(_this.query, entry) ? entry : null;\n      var oldDocHadPendingMutations = oldDoc ? _this.mutatedKeys.has(oldDoc.key) : false;\n      var newDocHasPendingMutations = newDoc ? newDoc.hasLocalMutations || // We only consider committed mutations for documents that were\n      // mutated during the lifetime of the view.\n      _this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations : false;\n      var changeApplied = false; // Calculate change\n\n      if (oldDoc && newDoc) {\n        var docsEqual = oldDoc.data.isEqual(newDoc.data);\n\n        if (!docsEqual) {\n          if (!_this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {\n            changeSet.track({\n              type: 2\n              /* Modified */\n              ,\n              doc: newDoc\n            });\n            changeApplied = true;\n\n            if (lastDocInLimit && _this.docComparator(newDoc, lastDocInLimit) > 0 || firstDocInLimit && _this.docComparator(newDoc, firstDocInLimit) < 0) {\n              // This doc moved from inside the limit to outside the limit.\n              // That means there may be some other doc in the local cache\n              // that should be included instead.\n              needsRefill = true;\n            }\n          }\n        } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {\n          changeSet.track({\n            type: 3\n            /* Metadata */\n            ,\n            doc: newDoc\n          });\n          changeApplied = true;\n        }\n      } else if (!oldDoc && newDoc) {\n        changeSet.track({\n          type: 0\n          /* Added */\n          ,\n          doc: newDoc\n        });\n        changeApplied = true;\n      } else if (oldDoc && !newDoc) {\n        changeSet.track({\n          type: 1\n          /* Removed */\n          ,\n          doc: oldDoc\n        });\n        changeApplied = true;\n\n        if (lastDocInLimit || firstDocInLimit) {\n          // A doc was removed from a full limit query. We'll need to\n          // requery from the local cache to see if we know about some other\n          // doc that should be in the results.\n          needsRefill = true;\n        }\n      }\n\n      if (changeApplied) {\n        if (newDoc) {\n          newDocumentSet = newDocumentSet.add(newDoc);\n\n          if (newDocHasPendingMutations) {\n            newMutatedKeys = newMutatedKeys.add(key);\n          } else {\n            newMutatedKeys = newMutatedKeys.delete(key);\n          }\n        } else {\n          newDocumentSet = newDocumentSet.delete(key);\n          newMutatedKeys = newMutatedKeys.delete(key);\n        }\n      }\n    }); // Drop documents out to meet limit/limitToLast requirement.\n\n    if (hasLimitToFirst(this.query) || hasLimitToLast(this.query)) {\n      while (newDocumentSet.size > this.query.limit) {\n        var oldDoc = hasLimitToFirst(this.query) ? newDocumentSet.last() : newDocumentSet.first();\n        newDocumentSet = newDocumentSet.delete(oldDoc.key);\n        newMutatedKeys = newMutatedKeys.delete(oldDoc.key);\n        changeSet.track({\n          type: 1\n          /* Removed */\n          ,\n          doc: oldDoc\n        });\n      }\n    }\n\n    return {\n      documentSet: newDocumentSet,\n      changeSet: changeSet,\n      needsRefill: needsRefill,\n      mutatedKeys: newMutatedKeys\n    };\n  };\n\n  View.prototype.shouldWaitForSyncedDocument = function (oldDoc, newDoc) {\n    // We suppress the initial change event for documents that were modified as\n    // part of a write acknowledgment (e.g. when the value of a server transform\n    // is applied) as Watch will send us the same document again.\n    // By suppressing the event, we only raise two user visible events (one with\n    // `hasPendingWrites` and the final state of the document) instead of three\n    // (one with `hasPendingWrites`, the modified document with\n    // `hasPendingWrites` and the final state of the document).\n    return oldDoc.hasLocalMutations && newDoc.hasCommittedMutations && !newDoc.hasLocalMutations;\n  };\n  /**\r\n   * Updates the view with the given ViewDocumentChanges and optionally updates\r\n   * limbo docs and sync state from the provided target change.\r\n   * @param docChanges - The set of changes to make to the view's docs.\r\n   * @param updateLimboDocuments - Whether to update limbo documents based on\r\n   *        this change.\r\n   * @param targetChange - A target change to apply for computing limbo docs and\r\n   *        sync state.\r\n   * @returns A new ViewChange with the given docs, changes, and sync state.\r\n   */\n  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.\n\n\n  View.prototype.applyChanges = function (docChanges, updateLimboDocuments, targetChange) {\n    var _this = this;\n\n    var oldDocs = this.documentSet;\n    this.documentSet = docChanges.documentSet;\n    this.mutatedKeys = docChanges.mutatedKeys; // Sort changes based on type and query comparator\n\n    var changes = docChanges.changeSet.getChanges();\n    changes.sort(function (c1, c2) {\n      return compareChangeType(c1.type, c2.type) || _this.docComparator(c1.doc, c2.doc);\n    });\n    this.applyTargetChange(targetChange);\n    var limboChanges = updateLimboDocuments ? this.updateLimboDocuments() : [];\n    var synced = this.limboDocuments.size === 0 && this.current;\n    var newSyncState = synced ? 1\n    /* Synced */\n    : 0\n    /* Local */\n    ;\n    var syncStateChanged = newSyncState !== this.syncState;\n    this.syncState = newSyncState;\n\n    if (changes.length === 0 && !syncStateChanged) {\n      // no changes\n      return {\n        limboChanges: limboChanges\n      };\n    } else {\n      var snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, docChanges.mutatedKeys, newSyncState === 0\n      /* Local */\n      , syncStateChanged,\n      /* excludesMetadataChanges= */\n      false);\n      return {\n        snapshot: snap,\n        limboChanges: limboChanges\n      };\n    }\n  };\n  /**\r\n   * Applies an OnlineState change to the view, potentially generating a\r\n   * ViewChange if the view's syncState changes as a result.\r\n   */\n\n\n  View.prototype.applyOnlineStateChange = function (onlineState) {\n    if (this.current && onlineState === \"Offline\"\n    /* Offline */\n    ) {\n        // If we're offline, set `current` to false and then call applyChanges()\n        // to refresh our syncState and generate a ViewChange as appropriate. We\n        // are guaranteed to get a new TargetChange that sets `current` back to\n        // true once the client is back online.\n        this.current = false;\n        return this.applyChanges({\n          documentSet: this.documentSet,\n          changeSet: new DocumentChangeSet(),\n          mutatedKeys: this.mutatedKeys,\n          needsRefill: false\n        },\n        /* updateLimboDocuments= */\n        false);\n      } else {\n      // No effect, just return a no-op ViewChange.\n      return {\n        limboChanges: []\n      };\n    }\n  };\n  /**\r\n   * Returns whether the doc for the given key should be in limbo.\r\n   */\n\n\n  View.prototype.shouldBeInLimbo = function (key) {\n    // If the remote end says it's part of this query, it's not in limbo.\n    if (this._syncedDocuments.has(key)) {\n      return false;\n    } // The local store doesn't think it's a result, so it shouldn't be in limbo.\n\n\n    if (!this.documentSet.has(key)) {\n      return false;\n    } // If there are local changes to the doc, they might explain why the server\n    // doesn't know that it's part of the query. So don't put it in limbo.\n    // TODO(klimt): Ideally, we would only consider changes that might actually\n    // affect this specific query.\n\n\n    if (this.documentSet.get(key).hasLocalMutations) {\n      return false;\n    } // Everything else is in limbo.\n\n\n    return true;\n  };\n  /**\r\n   * Updates syncedDocuments, current, and limbo docs based on the given change.\r\n   * Returns the list of changes to which docs are in limbo.\r\n   */\n\n\n  View.prototype.applyTargetChange = function (targetChange) {\n    var _this = this;\n\n    if (targetChange) {\n      targetChange.addedDocuments.forEach(function (key) {\n        return _this._syncedDocuments = _this._syncedDocuments.add(key);\n      });\n      targetChange.modifiedDocuments.forEach(function (key) {});\n      targetChange.removedDocuments.forEach(function (key) {\n        return _this._syncedDocuments = _this._syncedDocuments.delete(key);\n      });\n      this.current = targetChange.current;\n    }\n  };\n\n  View.prototype.updateLimboDocuments = function () {\n    var _this = this; // We can only determine limbo documents when we're in-sync with the server.\n\n\n    if (!this.current) {\n      return [];\n    } // TODO(klimt): Do this incrementally so that it's not quadratic when\n    // updating many documents.\n\n\n    var oldLimboDocuments = this.limboDocuments;\n    this.limboDocuments = documentKeySet();\n    this.documentSet.forEach(function (doc) {\n      if (_this.shouldBeInLimbo(doc.key)) {\n        _this.limboDocuments = _this.limboDocuments.add(doc.key);\n      }\n    }); // Diff the new limbo docs with the old limbo docs.\n\n    var changes = [];\n    oldLimboDocuments.forEach(function (key) {\n      if (!_this.limboDocuments.has(key)) {\n        changes.push(new RemovedLimboDocument(key));\n      }\n    });\n    this.limboDocuments.forEach(function (key) {\n      if (!oldLimboDocuments.has(key)) {\n        changes.push(new AddedLimboDocument(key));\n      }\n    });\n    return changes;\n  };\n  /**\r\n   * Update the in-memory state of the current view with the state read from\r\n   * persistence.\r\n   *\r\n   * We update the query view whenever a client's primary status changes:\r\n   * - When a client transitions from primary to secondary, it can miss\r\n   *   LocalStorage updates and its query views may temporarily not be\r\n   *   synchronized with the state on disk.\r\n   * - For secondary to primary transitions, the client needs to update the list\r\n   *   of `syncedDocuments` since secondary clients update their query views\r\n   *   based purely on synthesized RemoteEvents.\r\n   *\r\n   * @param queryResult.documents - The documents that match the query according\r\n   * to the LocalStore.\r\n   * @param queryResult.remoteKeys - The keys of the documents that match the\r\n   * query according to the backend.\r\n   *\r\n   * @returns The ViewChange that resulted from this synchronization.\r\n   */\n  // PORTING NOTE: Multi-tab only.\n\n\n  View.prototype.synchronizeWithPersistedState = function (queryResult) {\n    this._syncedDocuments = queryResult.remoteKeys;\n    this.limboDocuments = documentKeySet();\n    var docChanges = this.computeDocChanges(queryResult.documents);\n    return this.applyChanges(docChanges,\n    /*updateLimboDocuments=*/\n    true);\n  };\n  /**\r\n   * Returns a view snapshot as if this query was just listened to. Contains\r\n   * a document add for every existing document and the `fromCache` and\r\n   * `hasPendingWrites` status of the already established view.\r\n   */\n  // PORTING NOTE: Multi-tab only.\n\n\n  View.prototype.computeInitialSnapshot = function () {\n    return ViewSnapshot.fromInitialDocuments(this.query, this.documentSet, this.mutatedKeys, this.syncState === 0\n    /* Local */\n    );\n  };\n\n  return View;\n}();\n\nfunction compareChangeType(c1, c2) {\n  var order = function (change) {\n    switch (change) {\n      case 0\n      /* Added */\n      :\n        return 1;\n\n      case 2\n      /* Modified */\n      :\n        return 2;\n\n      case 3\n      /* Metadata */\n      :\n        // A metadata change is converted to a modified change at the public\n        // api layer.  Since we sort by document key and then change type,\n        // metadata and modified changes must be sorted equivalently.\n        return 2;\n\n      case 1\n      /* Removed */\n      :\n        return 0;\n\n      default:\n        return fail();\n    }\n  };\n\n  return order(c1) - order(c2);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$3 = 'SyncEngine';\n/**\r\n * QueryView contains all of the data that SyncEngine needs to keep track of for\r\n * a particular query.\r\n */\n\nvar QueryView =\n/** @class */\nfunction () {\n  function QueryView(\n  /**\r\n   * The query itself.\r\n   */\n  query,\n  /**\r\n   * The target number created by the client that is used in the watch\r\n   * stream to identify this query.\r\n   */\n  targetId,\n  /**\r\n   * The view is responsible for computing the final merged truth of what\r\n   * docs are in the query. It gets notified of local and remote changes,\r\n   * and applies the query filters and limits to determine the most correct\r\n   * possible results.\r\n   */\n  view) {\n    this.query = query;\n    this.targetId = targetId;\n    this.view = view;\n  }\n\n  return QueryView;\n}();\n/** Tracks a limbo resolution. */\n\n\nvar LimboResolution =\n/** @class */\nfunction () {\n  function LimboResolution(key) {\n    this.key = key;\n    /**\r\n     * Set to true once we've received a document. This is used in\r\n     * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to\r\n     * decide whether it needs to manufacture a delete event for the target once\r\n     * the target is CURRENT.\r\n     */\n\n    this.receivedDocument = false;\n  }\n\n  return LimboResolution;\n}();\n/**\r\n * An implementation of `SyncEngine` coordinating with other parts of SDK.\r\n *\r\n * The parts of SyncEngine that act as a callback to RemoteStore need to be\r\n * registered individually. This is done in `syncEngineWrite()` and\r\n * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods\r\n * serve as entry points to RemoteStore's functionality.\r\n *\r\n * Note: some field defined in this class might have public access level, but\r\n * the class is not exported so they are only accessible from this module.\r\n * This is useful to implement optional features (like bundles) in free\r\n * functions, such that they are tree-shakeable.\r\n */\n\n\nvar SyncEngineImpl =\n/** @class */\nfunction () {\n  function SyncEngineImpl(localStore, remoteStore, eventManager, // PORTING NOTE: Manages state synchronization in multi-tab environments.\n  sharedClientState, currentUser, maxConcurrentLimboResolutions) {\n    this.localStore = localStore;\n    this.remoteStore = remoteStore;\n    this.eventManager = eventManager;\n    this.sharedClientState = sharedClientState;\n    this.currentUser = currentUser;\n    this.maxConcurrentLimboResolutions = maxConcurrentLimboResolutions;\n    this.syncEngineListener = {};\n    this.queryViewsByQuery = new ObjectMap(function (q) {\n      return canonifyQuery(q);\n    }, queryEquals);\n    this.queriesByTarget = new Map();\n    /**\r\n     * The keys of documents that are in limbo for which we haven't yet started a\r\n     * limbo resolution query. The strings in this set are the result of calling\r\n     * `key.path.canonicalString()` where `key` is a `DocumentKey` object.\r\n     *\r\n     * The `Set` type was chosen because it provides efficient lookup and removal\r\n     * of arbitrary elements and it also maintains insertion order, providing the\r\n     * desired queue-like FIFO semantics.\r\n     */\n\n    this.enqueuedLimboResolutions = new Set();\n    /**\r\n     * Keeps track of the target ID for each document that is in limbo with an\r\n     * active target.\r\n     */\n\n    this.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);\n    /**\r\n     * Keeps track of the information about an active limbo resolution for each\r\n     * active target ID that was started for the purpose of limbo resolution.\r\n     */\n\n    this.activeLimboResolutionsByTarget = new Map();\n    this.limboDocumentRefs = new ReferenceSet();\n    /** Stores user completion handlers, indexed by User and BatchId. */\n\n    this.mutationUserCallbacks = {};\n    /** Stores user callbacks waiting for all pending writes to be acknowledged. */\n\n    this.pendingWritesCallbacks = new Map();\n    this.limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();\n    this.onlineState = \"Unknown\"\n    /* Unknown */\n    ; // The primary state is set to `true` or `false` immediately after Firestore\n    // startup. In the interim, a client should only be considered primary if\n    // `isPrimary` is true.\n\n    this._isPrimaryClient = undefined;\n  }\n\n  Object.defineProperty(SyncEngineImpl.prototype, \"isPrimaryClient\", {\n    get: function () {\n      return this._isPrimaryClient === true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SyncEngineImpl;\n}();\n\nfunction newSyncEngine(localStore, remoteStore, eventManager, // PORTING NOTE: Manages state synchronization in multi-tab environments.\nsharedClientState, currentUser, maxConcurrentLimboResolutions, isPrimary) {\n  var syncEngine = new SyncEngineImpl(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions);\n\n  if (isPrimary) {\n    syncEngine._isPrimaryClient = true;\n  }\n\n  return syncEngine;\n}\n/**\r\n * Initiates the new listen, resolves promise when listen enqueued to the\r\n * server. All the subsequent view snapshots or errors are sent to the\r\n * subscribed handlers. Returns the initial snapshot.\r\n */\n\n\nfunction syncEngineListen(syncEngine, query) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, targetId, viewSnapshot, queryView, targetData, status_1;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = ensureWatchCallbacks(syncEngine);\n          queryView = syncEngineImpl.queryViewsByQuery.get(query);\n          if (!queryView) return [3\n          /*break*/\n          , 1]; // PORTING NOTE: With Multi-Tab Web, it is possible that a query view\n          // already exists when EventManager calls us for the first time. This\n          // happens when the primary tab is already listening to this query on\n          // behalf of another tab and the user of the primary also starts listening\n          // to the query. EventManager will not have an assigned target ID in this\n          // case and calls `listen` to obtain this ID.\n\n          targetId = queryView.targetId;\n          syncEngineImpl.sharedClientState.addLocalQueryTarget(targetId);\n          viewSnapshot = queryView.view.computeInitialSnapshot();\n          return [3\n          /*break*/\n          , 4];\n\n        case 1:\n          return [4\n          /*yield*/\n          , localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(query))];\n\n        case 2:\n          targetData = _d.sent();\n          status_1 = syncEngineImpl.sharedClientState.addLocalQueryTarget(targetData.targetId);\n          targetId = targetData.targetId;\n          return [4\n          /*yield*/\n          , initializeViewAndComputeSnapshot(syncEngineImpl, query, targetId, status_1 === 'current')];\n\n        case 3:\n          viewSnapshot = _d.sent();\n\n          if (syncEngineImpl.isPrimaryClient) {\n            remoteStoreListen(syncEngineImpl.remoteStore, targetData);\n          }\n\n          _d.label = 4;\n\n        case 4:\n          return [2\n          /*return*/\n          , viewSnapshot];\n      }\n    });\n  });\n}\n/**\r\n * Registers a view for a previously unknown query and computes its initial\r\n * snapshot.\r\n */\n\n\nfunction initializeViewAndComputeSnapshot(syncEngineImpl, query, targetId, current) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var queryResult, view, viewDocChanges, synthesizedTargetChange, viewChange, data;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          // PORTING NOTE: On Web only, we inject the code that registers new Limbo\n          // targets based on view changes. This allows us to only depend on Limbo\n          // changes when user code includes queries.\n          syncEngineImpl.applyDocChanges = function (queryView, changes, remoteEvent) {\n            return applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent);\n          };\n\n          return [4\n          /*yield*/\n          , localStoreExecuteQuery(syncEngineImpl.localStore, query,\n          /* usePreviousResults= */\n          true)];\n\n        case 1:\n          queryResult = _d.sent();\n          view = new View(query, queryResult.remoteKeys);\n          viewDocChanges = view.computeDocChanges(queryResult.documents);\n          synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current && syncEngineImpl.onlineState !== \"Offline\"\n          /* Offline */\n          );\n          viewChange = view.applyChanges(viewDocChanges,\n          /* updateLimboDocuments= */\n          syncEngineImpl.isPrimaryClient, synthesizedTargetChange);\n          updateTrackedLimbos(syncEngineImpl, targetId, viewChange.limboChanges);\n          data = new QueryView(query, targetId, view);\n          syncEngineImpl.queryViewsByQuery.set(query, data);\n\n          if (syncEngineImpl.queriesByTarget.has(targetId)) {\n            syncEngineImpl.queriesByTarget.get(targetId).push(query);\n          } else {\n            syncEngineImpl.queriesByTarget.set(targetId, [query]);\n          }\n\n          return [2\n          /*return*/\n          , viewChange.snapshot];\n      }\n    });\n  });\n}\n/** Stops listening to the query. */\n\n\nfunction syncEngineUnlisten(syncEngine, query) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, queryView, queries, targetRemainsActive;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine);\n          queryView = syncEngineImpl.queryViewsByQuery.get(query);\n          queries = syncEngineImpl.queriesByTarget.get(queryView.targetId);\n\n          if (queries.length > 1) {\n            syncEngineImpl.queriesByTarget.set(queryView.targetId, queries.filter(function (q) {\n              return !queryEquals(q, query);\n            }));\n            syncEngineImpl.queryViewsByQuery.delete(query);\n            return [2\n            /*return*/\n            ];\n          }\n\n          if (!syncEngineImpl.isPrimaryClient) return [3\n          /*break*/\n          , 3]; // We need to remove the local query target first to allow us to verify\n          // whether any other client is still interested in this target.\n\n          syncEngineImpl.sharedClientState.removeLocalQueryTarget(queryView.targetId);\n          targetRemainsActive = syncEngineImpl.sharedClientState.isActiveQueryTarget(queryView.targetId);\n          if (!!targetRemainsActive) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId,\n          /*keepPersistedTargetData=*/\n          false).then(function () {\n            syncEngineImpl.sharedClientState.clearQueryState(queryView.targetId);\n            remoteStoreUnlisten(syncEngineImpl.remoteStore, queryView.targetId);\n            removeAndCleanupTarget(syncEngineImpl, queryView.targetId);\n          }).catch(ignoreIfPrimaryLeaseLoss)];\n\n        case 1:\n          _d.sent();\n\n          _d.label = 2;\n\n        case 2:\n          return [3\n          /*break*/\n          , 5];\n\n        case 3:\n          removeAndCleanupTarget(syncEngineImpl, queryView.targetId);\n          return [4\n          /*yield*/\n          , localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId,\n          /*keepPersistedTargetData=*/\n          true)];\n\n        case 4:\n          _d.sent();\n\n          _d.label = 5;\n\n        case 5:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Initiates the write of local mutation batch which involves adding the\r\n * writes to the mutation queue, notifying the remote store about new\r\n * mutations and raising events for any changes this write caused.\r\n *\r\n * The promise returned by this call is resolved when the above steps\r\n * have completed, *not* when the write was acked by the backend. The\r\n * userCallback is resolved once the write was acked/rejected by the\r\n * backend (or failed locally for any other reason).\r\n */\n\n\nfunction syncEngineWrite(syncEngine, batch, userCallback) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, result, e_8, error;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = syncEngineEnsureWriteCallbacks(syncEngine);\n          _d.label = 1;\n\n        case 1:\n          _d.trys.push([1, 5,, 6]);\n\n          return [4\n          /*yield*/\n          , localStoreWriteLocally(syncEngineImpl.localStore, batch)];\n\n        case 2:\n          result = _d.sent();\n          syncEngineImpl.sharedClientState.addPendingMutation(result.batchId);\n          addMutationCallback(syncEngineImpl, result.batchId, userCallback);\n          return [4\n          /*yield*/\n          , syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.changes)];\n\n        case 3:\n          _d.sent();\n\n          return [4\n          /*yield*/\n          , fillWritePipeline(syncEngineImpl.remoteStore)];\n\n        case 4:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          e_8 = _d.sent();\n          error = wrapInUserErrorIfRecoverable(e_8, \"Failed to persist write\");\n          userCallback.reject(error);\n          return [3\n          /*break*/\n          , 6];\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Applies one remote event to the sync engine, notifying any views of the\r\n * changes, and releasing any pending mutation batches that would become\r\n * visible because of the snapshot version the remote event contains.\r\n */\n\n\nfunction syncEngineApplyRemoteEvent(syncEngine, remoteEvent) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, changes, error_2;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine);\n          _d.label = 1;\n\n        case 1:\n          _d.trys.push([1, 4,, 6]);\n\n          return [4\n          /*yield*/\n          , localStoreApplyRemoteEventToLocalCache(syncEngineImpl.localStore, remoteEvent)];\n\n        case 2:\n          changes = _d.sent(); // Update `receivedDocument` as appropriate for any limbo targets.\n\n          remoteEvent.targetChanges.forEach(function (targetChange, targetId) {\n            var limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\n\n            if (limboResolution) {\n              // Since this is a limbo resolution lookup, it's for a single document\n              // and it could be added, modified, or removed, but not a combination.\n              hardAssert(targetChange.addedDocuments.size + targetChange.modifiedDocuments.size + targetChange.removedDocuments.size <= 1);\n\n              if (targetChange.addedDocuments.size > 0) {\n                limboResolution.receivedDocument = true;\n              } else if (targetChange.modifiedDocuments.size > 0) {\n                hardAssert(limboResolution.receivedDocument);\n              } else if (targetChange.removedDocuments.size > 0) {\n                hardAssert(limboResolution.receivedDocument);\n                limboResolution.receivedDocument = false;\n              } else ;\n            }\n          });\n          return [4\n          /*yield*/\n          , syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, remoteEvent)];\n\n        case 3:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 4:\n          error_2 = _d.sent();\n          return [4\n          /*yield*/\n          , ignoreIfPrimaryLeaseLoss(error_2)];\n\n        case 5:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Applies an OnlineState change to the sync engine and notifies any views of\r\n * the change.\r\n */\n\n\nfunction syncEngineApplyOnlineStateChange(syncEngine, onlineState, source) {\n  var syncEngineImpl = debugCast(syncEngine); // If we are the secondary client, we explicitly ignore the remote store's\n  // online state (the local client may go offline, even though the primary\n  // tab remains online) and only apply the primary tab's online state from\n  // SharedClientState.\n\n  if (syncEngineImpl.isPrimaryClient && source === 0\n  /* RemoteStore */\n  || !syncEngineImpl.isPrimaryClient && source === 1\n  /* SharedClientState */\n  ) {\n    var newViewSnapshots_1 = [];\n    syncEngineImpl.queryViewsByQuery.forEach(function (query, queryView) {\n      var viewChange = queryView.view.applyOnlineStateChange(onlineState);\n\n      if (viewChange.snapshot) {\n        newViewSnapshots_1.push(viewChange.snapshot);\n      }\n    });\n    eventManagerOnOnlineStateChange(syncEngineImpl.eventManager, onlineState);\n\n    if (newViewSnapshots_1.length) {\n      syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots_1);\n    }\n\n    syncEngineImpl.onlineState = onlineState;\n\n    if (syncEngineImpl.isPrimaryClient) {\n      syncEngineImpl.sharedClientState.setOnlineState(onlineState);\n    }\n  }\n}\n/**\r\n * Rejects the listen for the given targetID. This can be triggered by the\r\n * backend for any active target.\r\n *\r\n * @param syncEngine - The sync engine implementation.\r\n * @param targetId - The targetID corresponds to one previously initiated by the\r\n * user as part of TargetData passed to listen() on RemoteStore.\r\n * @param err - A description of the condition that has forced the rejection.\r\n * Nearly always this will be an indication that the user is no longer\r\n * authorized to see the data matching the target.\r\n */\n\n\nfunction syncEngineRejectListen(syncEngine, targetId, err) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, limboResolution, limboKey, documentUpdates, resolvedLimboDocuments, event_2;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine); // PORTING NOTE: Multi-tab only.\n\n          syncEngineImpl.sharedClientState.updateQueryState(targetId, 'rejected', err);\n          limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\n          limboKey = limboResolution && limboResolution.key;\n          if (!limboKey) return [3\n          /*break*/\n          , 2];\n          documentUpdates = new SortedMap(DocumentKey.comparator);\n          documentUpdates = documentUpdates.insert(limboKey, MutableDocument.newNoDocument(limboKey, SnapshotVersion.min()));\n          resolvedLimboDocuments = documentKeySet().add(limboKey);\n          event_2 = new RemoteEvent(SnapshotVersion.min(),\n          /* targetChanges= */\n          new Map(),\n          /* targetMismatches= */\n          new SortedSet(primitiveComparator), documentUpdates, resolvedLimboDocuments);\n          return [4\n          /*yield*/\n          , syncEngineApplyRemoteEvent(syncEngineImpl, event_2)];\n\n        case 1:\n          _d.sent(); // Since this query failed, we won't want to manually unlisten to it.\n          // We only remove it from bookkeeping after we successfully applied the\n          // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to\n          // this query when the RemoteStore restarts the Watch stream, which should\n          // re-trigger the target failure.\n\n\n          syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(limboKey);\n          syncEngineImpl.activeLimboResolutionsByTarget.delete(targetId);\n          pumpEnqueuedLimboResolutions(syncEngineImpl);\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          return [4\n          /*yield*/\n          , localStoreReleaseTarget(syncEngineImpl.localStore, targetId,\n          /* keepPersistedTargetData */\n          false).then(function () {\n            return removeAndCleanupTarget(syncEngineImpl, targetId, err);\n          }).catch(ignoreIfPrimaryLeaseLoss)];\n\n        case 3:\n          _d.sent();\n\n          _d.label = 4;\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction syncEngineApplySuccessfulWrite(syncEngine, mutationBatchResult) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, batchId, changes, error_3;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine);\n          batchId = mutationBatchResult.batch.batchId;\n          _d.label = 1;\n\n        case 1:\n          _d.trys.push([1, 4,, 6]);\n\n          return [4\n          /*yield*/\n          , localStoreAcknowledgeBatch(syncEngineImpl.localStore, mutationBatchResult)];\n\n        case 2:\n          changes = _d.sent(); // The local store may or may not be able to apply the write result and\n          // raise events immediately (depending on whether the watcher is caught\n          // up), so we raise user callbacks first so that they consistently happen\n          // before listen events.\n\n          processUserCallback(syncEngineImpl, batchId,\n          /*error=*/\n          null);\n          triggerPendingWritesCallbacks(syncEngineImpl, batchId);\n          syncEngineImpl.sharedClientState.updateMutationState(batchId, 'acknowledged');\n          return [4\n          /*yield*/\n          , syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes)];\n\n        case 3:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 4:\n          error_3 = _d.sent();\n          return [4\n          /*yield*/\n          , ignoreIfPrimaryLeaseLoss(error_3)];\n\n        case 5:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction syncEngineRejectFailedWrite(syncEngine, batchId, error) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, changes, error_4;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine);\n          _d.label = 1;\n\n        case 1:\n          _d.trys.push([1, 4,, 6]);\n\n          return [4\n          /*yield*/\n          , localStoreRejectBatch(syncEngineImpl.localStore, batchId)];\n\n        case 2:\n          changes = _d.sent(); // The local store may or may not be able to apply the write result and\n          // raise events immediately (depending on whether the watcher is caught up),\n          // so we raise user callbacks first so that they consistently happen before\n          // listen events.\n\n          processUserCallback(syncEngineImpl, batchId, error);\n          triggerPendingWritesCallbacks(syncEngineImpl, batchId);\n          syncEngineImpl.sharedClientState.updateMutationState(batchId, 'rejected', error);\n          return [4\n          /*yield*/\n          , syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes)];\n\n        case 3:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 4:\n          error_4 = _d.sent();\n          return [4\n          /*yield*/\n          , ignoreIfPrimaryLeaseLoss(error_4)];\n\n        case 5:\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Registers a user callback that resolves when all pending mutations at the moment of calling\r\n * are acknowledged .\r\n */\n\n\nfunction syncEngineRegisterPendingWritesCallback(syncEngine, callback) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, highestBatchId, callbacks, e_9, firestoreError;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine);\n\n          if (!canUseNetwork(syncEngineImpl.remoteStore)) {\n            logDebug(LOG_TAG$3, 'The network is disabled. The task returned by ' + \"'awaitPendingWrites()' will not complete until the network is enabled.\");\n          }\n\n          _d.label = 1;\n\n        case 1:\n          _d.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , localStoreGetHighestUnacknowledgedBatchId(syncEngineImpl.localStore)];\n\n        case 2:\n          highestBatchId = _d.sent();\n\n          if (highestBatchId === BATCHID_UNKNOWN) {\n            // Trigger the callback right away if there is no pending writes at the moment.\n            callback.resolve();\n            return [2\n            /*return*/\n            ];\n          }\n\n          callbacks = syncEngineImpl.pendingWritesCallbacks.get(highestBatchId) || [];\n          callbacks.push(callback);\n          syncEngineImpl.pendingWritesCallbacks.set(highestBatchId, callbacks);\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          e_9 = _d.sent();\n          firestoreError = wrapInUserErrorIfRecoverable(e_9, 'Initialization of waitForPendingWrites() operation failed');\n          callback.reject(firestoreError);\n          return [3\n          /*break*/\n          , 4];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,\r\n * if there are any.\r\n */\n\n\nfunction triggerPendingWritesCallbacks(syncEngineImpl, batchId) {\n  (syncEngineImpl.pendingWritesCallbacks.get(batchId) || []).forEach(function (callback) {\n    callback.resolve();\n  });\n  syncEngineImpl.pendingWritesCallbacks.delete(batchId);\n}\n/** Reject all outstanding callbacks waiting for pending writes to complete. */\n\n\nfunction rejectOutstandingPendingWritesCallbacks(syncEngineImpl, errorMessage) {\n  syncEngineImpl.pendingWritesCallbacks.forEach(function (callbacks) {\n    callbacks.forEach(function (callback) {\n      callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));\n    });\n  });\n  syncEngineImpl.pendingWritesCallbacks.clear();\n}\n\nfunction addMutationCallback(syncEngineImpl, batchId, callback) {\n  var newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];\n\n  if (!newCallbacks) {\n    newCallbacks = new SortedMap(primitiveComparator);\n  }\n\n  newCallbacks = newCallbacks.insert(batchId, callback);\n  syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;\n}\n/**\r\n * Resolves or rejects the user callback for the given batch and then discards\r\n * it.\r\n */\n\n\nfunction processUserCallback(syncEngine, batchId, error) {\n  var syncEngineImpl = debugCast(syncEngine);\n  var newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()]; // NOTE: Mutations restored from persistence won't have callbacks, so it's\n  // okay for there to be no callback for this ID.\n\n  if (newCallbacks) {\n    var callback = newCallbacks.get(batchId);\n\n    if (callback) {\n      if (error) {\n        callback.reject(error);\n      } else {\n        callback.resolve();\n      }\n\n      newCallbacks = newCallbacks.remove(batchId);\n    }\n\n    syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;\n  }\n}\n\nfunction removeAndCleanupTarget(syncEngineImpl, targetId, error) {\n  if (error === void 0) {\n    error = null;\n  }\n\n  syncEngineImpl.sharedClientState.removeLocalQueryTarget(targetId);\n\n  for (var _i = 0, _d = syncEngineImpl.queriesByTarget.get(targetId); _i < _d.length; _i++) {\n    var query_2 = _d[_i];\n    syncEngineImpl.queryViewsByQuery.delete(query_2);\n\n    if (error) {\n      syncEngineImpl.syncEngineListener.onWatchError(query_2, error);\n    }\n  }\n\n  syncEngineImpl.queriesByTarget.delete(targetId);\n\n  if (syncEngineImpl.isPrimaryClient) {\n    var limboKeys = syncEngineImpl.limboDocumentRefs.removeReferencesForId(targetId);\n    limboKeys.forEach(function (limboKey) {\n      var isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboKey);\n\n      if (!isReferenced) {\n        // We removed the last reference for this key\n        removeLimboTarget(syncEngineImpl, limboKey);\n      }\n    });\n  }\n}\n\nfunction removeLimboTarget(syncEngineImpl, key) {\n  syncEngineImpl.enqueuedLimboResolutions.delete(key.path.canonicalString()); // It's possible that the target already got removed because the query failed. In that case,\n  // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.\n\n  var limboTargetId = syncEngineImpl.activeLimboTargetsByKey.get(key);\n\n  if (limboTargetId === null) {\n    // This target already got removed, because the query failed.\n    return;\n  }\n\n  remoteStoreUnlisten(syncEngineImpl.remoteStore, limboTargetId);\n  syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(key);\n  syncEngineImpl.activeLimboResolutionsByTarget.delete(limboTargetId);\n  pumpEnqueuedLimboResolutions(syncEngineImpl);\n}\n\nfunction updateTrackedLimbos(syncEngineImpl, targetId, limboChanges) {\n  for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {\n    var limboChange = limboChanges_1[_i];\n\n    if (limboChange instanceof AddedLimboDocument) {\n      syncEngineImpl.limboDocumentRefs.addReference(limboChange.key, targetId);\n      trackLimboChange(syncEngineImpl, limboChange);\n    } else if (limboChange instanceof RemovedLimboDocument) {\n      logDebug(LOG_TAG$3, 'Document no longer in limbo: ' + limboChange.key);\n      syncEngineImpl.limboDocumentRefs.removeReference(limboChange.key, targetId);\n      var isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboChange.key);\n\n      if (!isReferenced) {\n        // We removed the last reference for this key\n        removeLimboTarget(syncEngineImpl, limboChange.key);\n      }\n    } else {\n      fail();\n    }\n  }\n}\n\nfunction trackLimboChange(syncEngineImpl, limboChange) {\n  var key = limboChange.key;\n  var keyString = key.path.canonicalString();\n\n  if (!syncEngineImpl.activeLimboTargetsByKey.get(key) && !syncEngineImpl.enqueuedLimboResolutions.has(keyString)) {\n    logDebug(LOG_TAG$3, 'New document in limbo: ' + key);\n    syncEngineImpl.enqueuedLimboResolutions.add(keyString);\n    pumpEnqueuedLimboResolutions(syncEngineImpl);\n  }\n}\n/**\r\n * Starts listens for documents in limbo that are enqueued for resolution,\r\n * subject to a maximum number of concurrent resolutions.\r\n *\r\n * Without bounding the number of concurrent resolutions, the server can fail\r\n * with \"resource exhausted\" errors which can lead to pathological client\r\n * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.\r\n */\n\n\nfunction pumpEnqueuedLimboResolutions(syncEngineImpl) {\n  while (syncEngineImpl.enqueuedLimboResolutions.size > 0 && syncEngineImpl.activeLimboTargetsByKey.size < syncEngineImpl.maxConcurrentLimboResolutions) {\n    var keyString = syncEngineImpl.enqueuedLimboResolutions.values().next().value;\n    syncEngineImpl.enqueuedLimboResolutions.delete(keyString);\n    var key = new DocumentKey(ResourcePath.fromString(keyString));\n    var limboTargetId = syncEngineImpl.limboTargetIdGenerator.next();\n    syncEngineImpl.activeLimboResolutionsByTarget.set(limboTargetId, new LimboResolution(key));\n    syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.insert(key, limboTargetId);\n    remoteStoreListen(syncEngineImpl.remoteStore, new TargetData(queryToTarget(newQueryForPath(key.path)), limboTargetId, 2\n    /* LimboResolution */\n    , ListenSequence.INVALID));\n  }\n}\n\nfunction syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, changes, remoteEvent) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, newSnaps, docChangesInAllViews, queriesProcessed;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine);\n          newSnaps = [];\n          docChangesInAllViews = [];\n          queriesProcessed = [];\n\n          if (syncEngineImpl.queryViewsByQuery.isEmpty()) {\n            // Return early since `onWatchChange()` might not have been assigned yet.\n            return [2\n            /*return*/\n            ];\n          }\n\n          syncEngineImpl.queryViewsByQuery.forEach(function (_, queryView) {\n            queriesProcessed.push(syncEngineImpl.applyDocChanges(queryView, changes, remoteEvent).then(function (viewSnapshot) {\n              if (viewSnapshot) {\n                if (syncEngineImpl.isPrimaryClient) {\n                  syncEngineImpl.sharedClientState.updateQueryState(queryView.targetId, viewSnapshot.fromCache ? 'not-current' : 'current');\n                }\n\n                newSnaps.push(viewSnapshot);\n                var docChanges = LocalViewChanges.fromSnapshot(queryView.targetId, viewSnapshot);\n                docChangesInAllViews.push(docChanges);\n              }\n            }));\n          });\n          return [4\n          /*yield*/\n          , Promise.all(queriesProcessed)];\n\n        case 1:\n          _d.sent();\n\n          syncEngineImpl.syncEngineListener.onWatchChange(newSnaps);\n          return [4\n          /*yield*/\n          , localStoreNotifyLocalViewChanges(syncEngineImpl.localStore, docChangesInAllViews)];\n\n        case 2:\n          _d.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var viewDocChanges, targetChange, viewChange;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          viewDocChanges = queryView.view.computeDocChanges(changes);\n          if (!viewDocChanges.needsRefill) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query,\n          /* usePreviousResults= */\n          false).then(function (_d) {\n            var documents = _d.documents;\n            return queryView.view.computeDocChanges(documents, viewDocChanges);\n          })];\n\n        case 1:\n          // The query has a limit and some docs were removed, so we need\n          // to re-run the query against the local store to make sure we\n          // didn't lose any good docs that had been past the limit.\n          viewDocChanges = _d.sent();\n          _d.label = 2;\n\n        case 2:\n          targetChange = remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);\n          viewChange = queryView.view.applyChanges(viewDocChanges,\n          /* updateLimboDocuments= */\n          syncEngineImpl.isPrimaryClient, targetChange);\n          updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewChange.limboChanges);\n          return [2\n          /*return*/\n          , viewChange.snapshot];\n      }\n    });\n  });\n}\n\nfunction syncEngineHandleCredentialChange(syncEngine, user) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, userChanged, result;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine);\n          userChanged = !syncEngineImpl.currentUser.isEqual(user);\n          if (!userChanged) return [3\n          /*break*/\n          , 3];\n          logDebug(LOG_TAG$3, 'User change. New user:', user.toKey());\n          return [4\n          /*yield*/\n          , localStoreHandleUserChange(syncEngineImpl.localStore, user)];\n\n        case 1:\n          result = _d.sent();\n          syncEngineImpl.currentUser = user; // Fails tasks waiting for pending writes requested by previous user.\n\n          rejectOutstandingPendingWritesCallbacks(syncEngineImpl, \"'waitForPendingWrites' promise is rejected due to a user change.\"); // TODO(b/114226417): Consider calling this only in the primary tab.\n\n          syncEngineImpl.sharedClientState.handleUserChange(user, result.removedBatchIds, result.addedBatchIds);\n          return [4\n          /*yield*/\n          , syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.affectedDocuments)];\n\n        case 2:\n          _d.sent();\n\n          _d.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction syncEngineGetRemoteKeysForTarget(syncEngine, targetId) {\n  var syncEngineImpl = debugCast(syncEngine);\n  var limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\n\n  if (limboResolution && limboResolution.receivedDocument) {\n    return documentKeySet().add(limboResolution.key);\n  } else {\n    var keySet = documentKeySet();\n    var queries = syncEngineImpl.queriesByTarget.get(targetId);\n\n    if (!queries) {\n      return keySet;\n    }\n\n    for (var _i = 0, queries_1 = queries; _i < queries_1.length; _i++) {\n      var query_3 = queries_1[_i];\n      var queryView = syncEngineImpl.queryViewsByQuery.get(query_3);\n      keySet = keySet.unionWith(queryView.view.syncedDocuments);\n    }\n\n    return keySet;\n  }\n}\n/**\r\n * Reconcile the list of synced documents in an existing view with those\r\n * from persistence.\r\n */\n\n\nfunction synchronizeViewAndComputeSnapshot(syncEngine, queryView) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, queryResult, viewSnapshot;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine);\n          return [4\n          /*yield*/\n          , localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query,\n          /* usePreviousResults= */\n          true)];\n\n        case 1:\n          queryResult = _d.sent();\n          viewSnapshot = queryView.view.synchronizeWithPersistedState(queryResult);\n\n          if (syncEngineImpl.isPrimaryClient) {\n            updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewSnapshot.limboChanges);\n          }\n\n          return [2\n          /*return*/\n          , viewSnapshot];\n      }\n    });\n  });\n}\n/**\r\n * Retrieves newly changed documents from remote document cache and raises\r\n * snapshots if needed.\r\n */\n// PORTING NOTE: Multi-Tab only.\n\n\nfunction syncEngineSynchronizeWithChangedDocuments(syncEngine) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl;\n    return tslib.__generator(this, function (_d) {\n      syncEngineImpl = debugCast(syncEngine);\n      return [2\n      /*return*/\n      , localStoreGetNewDocumentChanges(syncEngineImpl.localStore).then(function (changes) {\n        return syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes);\n      })];\n    });\n  });\n}\n/** Applies a mutation state to an existing batch.  */\n// PORTING NOTE: Multi-Tab only.\n\n\nfunction syncEngineApplyBatchState(syncEngine, batchId, batchState, error) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, documents;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine);\n          return [4\n          /*yield*/\n          , localStoreLookupMutationDocuments(syncEngineImpl.localStore, batchId)];\n\n        case 1:\n          documents = _d.sent();\n\n          if (documents === null) {\n            // A throttled tab may not have seen the mutation before it was completed\n            // and removed from the mutation queue, in which case we won't have cached\n            // the affected documents. In this case we can safely ignore the update\n            // since that means we didn't apply the mutation locally at all (if we\n            // had, we would have cached the affected documents), and so we will just\n            // see any resulting document changes via normal remote document updates\n            // as applicable.\n            logDebug(LOG_TAG$3, 'Cannot apply mutation batch with id: ' + batchId);\n            return [2\n            /*return*/\n            ];\n          }\n\n          if (!(batchState === 'pending')) return [3\n          /*break*/\n          , 3]; // If we are the primary client, we need to send this write to the\n          // backend. Secondary clients will ignore these writes since their remote\n          // connection is disabled.\n\n          return [4\n          /*yield*/\n          , fillWritePipeline(syncEngineImpl.remoteStore)];\n\n        case 2:\n          // If we are the primary client, we need to send this write to the\n          // backend. Secondary clients will ignore these writes since their remote\n          // connection is disabled.\n          _d.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          if (batchState === 'acknowledged' || batchState === 'rejected') {\n            // NOTE: Both these methods are no-ops for batches that originated from\n            // other clients.\n            processUserCallback(syncEngineImpl, batchId, error ? error : null);\n            triggerPendingWritesCallbacks(syncEngineImpl, batchId);\n            localStoreRemoveCachedMutationBatchMetadata(syncEngineImpl.localStore, batchId);\n          } else {\n            fail();\n          }\n\n          _d.label = 4;\n\n        case 4:\n          return [4\n          /*yield*/\n          , syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, documents)];\n\n        case 5:\n          _d.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/** Applies a query target change from a different tab. */\n// PORTING NOTE: Multi-Tab only.\n\n\nfunction syncEngineApplyPrimaryState(syncEngine, isPrimary) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, activeTargets, activeQueries, _i, activeQueries_1, targetData, activeTargets_1, p_1;\n\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine);\n          ensureWatchCallbacks(syncEngineImpl);\n          syncEngineEnsureWriteCallbacks(syncEngineImpl);\n          if (!(isPrimary === true && syncEngineImpl._isPrimaryClient !== true)) return [3\n          /*break*/\n          , 3];\n          activeTargets = syncEngineImpl.sharedClientState.getAllActiveQueryTargets();\n          return [4\n          /*yield*/\n          , synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets.toArray())];\n\n        case 1:\n          activeQueries = _d.sent();\n          syncEngineImpl._isPrimaryClient = true;\n          return [4\n          /*yield*/\n          , remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, true)];\n\n        case 2:\n          _d.sent();\n\n          for (_i = 0, activeQueries_1 = activeQueries; _i < activeQueries_1.length; _i++) {\n            targetData = activeQueries_1[_i];\n            remoteStoreListen(syncEngineImpl.remoteStore, targetData);\n          }\n\n          return [3\n          /*break*/\n          , 7];\n\n        case 3:\n          if (!(isPrimary === false && syncEngineImpl._isPrimaryClient !== false)) return [3\n          /*break*/\n          , 7];\n          activeTargets_1 = [];\n          p_1 = Promise.resolve();\n          syncEngineImpl.queriesByTarget.forEach(function (_, targetId) {\n            if (syncEngineImpl.sharedClientState.isLocalQueryTarget(targetId)) {\n              activeTargets_1.push(targetId);\n            } else {\n              p_1 = p_1.then(function () {\n                removeAndCleanupTarget(syncEngineImpl, targetId);\n                return localStoreReleaseTarget(syncEngineImpl.localStore, targetId,\n                /*keepPersistedTargetData=*/\n                true);\n              });\n            }\n\n            remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\n          });\n          return [4\n          /*yield*/\n          , p_1];\n\n        case 4:\n          _d.sent();\n\n          return [4\n          /*yield*/\n          , synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets_1)];\n\n        case 5:\n          _d.sent();\n\n          resetLimboDocuments(syncEngineImpl);\n          syncEngineImpl._isPrimaryClient = false;\n          return [4\n          /*yield*/\n          , remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, false)];\n\n        case 6:\n          _d.sent();\n\n          _d.label = 7;\n\n        case 7:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n} // PORTING NOTE: Multi-Tab only.\n\n\nfunction resetLimboDocuments(syncEngine) {\n  var syncEngineImpl = debugCast(syncEngine);\n  syncEngineImpl.activeLimboResolutionsByTarget.forEach(function (_, targetId) {\n    remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\n  });\n  syncEngineImpl.limboDocumentRefs.removeAllReferences();\n  syncEngineImpl.activeLimboResolutionsByTarget = new Map();\n  syncEngineImpl.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);\n}\n/**\r\n * Reconcile the query views of the provided query targets with the state from\r\n * persistence. Raises snapshots for any changes that affect the local\r\n * client and returns the updated state of all target's query data.\r\n *\r\n * @param syncEngine - The sync engine implementation\r\n * @param targets - the list of targets with views that need to be recomputed\r\n * @param transitionToPrimary - `true` iff the tab transitions from a secondary\r\n * tab to a primary tab\r\n */\n// PORTING NOTE: Multi-Tab only.\n\n\nfunction synchronizeQueryViewsAndRaiseSnapshots(syncEngine, targets, transitionToPrimary) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, activeQueries, newViewSnapshots, _i, targets_1, targetId, targetData, queries, _d, queries_2, query_4, queryView, viewChange, target;\n\n    return tslib.__generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine);\n          activeQueries = [];\n          newViewSnapshots = [];\n          _i = 0, targets_1 = targets;\n          _e.label = 1;\n\n        case 1:\n          if (!(_i < targets_1.length)) return [3\n          /*break*/\n          , 13];\n          targetId = targets_1[_i];\n          targetData = void 0;\n          queries = syncEngineImpl.queriesByTarget.get(targetId);\n          if (!(queries && queries.length !== 0)) return [3\n          /*break*/\n          , 7];\n          return [4\n          /*yield*/\n          , localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(queries[0]))];\n\n        case 2:\n          // For queries that have a local View, we fetch their current state\n          // from LocalStore (as the resume token and the snapshot version\n          // might have changed) and reconcile their views with the persisted\n          // state (the list of syncedDocuments may have gotten out of sync).\n          targetData = _e.sent();\n          _d = 0, queries_2 = queries;\n          _e.label = 3;\n\n        case 3:\n          if (!(_d < queries_2.length)) return [3\n          /*break*/\n          , 6];\n          query_4 = queries_2[_d];\n          queryView = syncEngineImpl.queryViewsByQuery.get(query_4);\n          return [4\n          /*yield*/\n          , synchronizeViewAndComputeSnapshot(syncEngineImpl, queryView)];\n\n        case 4:\n          viewChange = _e.sent();\n\n          if (viewChange.snapshot) {\n            newViewSnapshots.push(viewChange.snapshot);\n          }\n\n          _e.label = 5;\n\n        case 5:\n          _d++;\n          return [3\n          /*break*/\n          , 3];\n\n        case 6:\n          return [3\n          /*break*/\n          , 11];\n\n        case 7:\n          return [4\n          /*yield*/\n          , localStoreGetCachedTarget(syncEngineImpl.localStore, targetId)];\n\n        case 8:\n          target = _e.sent();\n          return [4\n          /*yield*/\n          , localStoreAllocateTarget(syncEngineImpl.localStore, target)];\n\n        case 9:\n          targetData = _e.sent();\n          return [4\n          /*yield*/\n          , initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetId,\n          /*current=*/\n          false)];\n\n        case 10:\n          _e.sent();\n\n          _e.label = 11;\n\n        case 11:\n          activeQueries.push(targetData);\n          _e.label = 12;\n\n        case 12:\n          _i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 13:\n          syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots);\n          return [2\n          /*return*/\n          , activeQueries];\n      }\n    });\n  });\n}\n/**\r\n * Creates a `Query` object from the specified `Target`. There is no way to\r\n * obtain the original `Query`, so we synthesize a `Query` from the `Target`\r\n * object.\r\n *\r\n * The synthesized result might be different from the original `Query`, but\r\n * since the synthesized `Query` should return the same results as the\r\n * original one (only the presentation of results might differ), the potential\r\n * difference will not cause issues.\r\n */\n// PORTING NOTE: Multi-Tab only.\n\n\nfunction synthesizeTargetToQuery(target) {\n  return newQuery(target.path, target.collectionGroup, target.orderBy, target.filters, target.limit, \"F\"\n  /* First */\n  , target.startAt, target.endAt);\n}\n/** Returns the IDs of the clients that are currently active. */\n// PORTING NOTE: Multi-Tab only.\n\n\nfunction syncEngineGetActiveClients(syncEngine) {\n  var syncEngineImpl = debugCast(syncEngine);\n  return localStoreGetActiveClients(syncEngineImpl.localStore);\n}\n/** Applies a query target change from a different tab. */\n// PORTING NOTE: Multi-Tab only.\n\n\nfunction syncEngineApplyTargetState(syncEngine, targetId, state, error) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, _d, changes, synthesizedRemoteEvent;\n\n    return tslib.__generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          syncEngineImpl = debugCast(syncEngine);\n\n          if (syncEngineImpl._isPrimaryClient) {\n            // If we receive a target state notification via WebStorage, we are\n            // either already secondary or another tab has taken the primary lease.\n            logDebug(LOG_TAG$3, 'Ignoring unexpected query state notification.');\n            return [2\n            /*return*/\n            ];\n          }\n\n          if (!syncEngineImpl.queriesByTarget.has(targetId)) return [3\n          /*break*/\n          , 7];\n          _d = state;\n\n          switch (_d) {\n            case 'current':\n              return [3\n              /*break*/\n              , 1];\n\n            case 'not-current':\n              return [3\n              /*break*/\n              , 1];\n\n            case 'rejected':\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 1:\n          return [4\n          /*yield*/\n          , localStoreGetNewDocumentChanges(syncEngineImpl.localStore)];\n\n        case 2:\n          changes = _e.sent();\n          synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(targetId, state === 'current');\n          return [4\n          /*yield*/\n          , syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, synthesizedRemoteEvent)];\n\n        case 3:\n          _e.sent();\n\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          return [4\n          /*yield*/\n          , localStoreReleaseTarget(syncEngineImpl.localStore, targetId,\n          /* keepPersistedTargetData */\n          true)];\n\n        case 5:\n          _e.sent();\n\n          removeAndCleanupTarget(syncEngineImpl, targetId, error);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          fail();\n          _e.label = 7;\n\n        case 7:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/** Adds or removes Watch targets for queries from different tabs. */\n\n\nfunction syncEngineApplyActiveTargetsChange(syncEngine, added, removed) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var syncEngineImpl, _i, added_1, targetId, target, targetData, _loop_5, _d, removed_1, targetId;\n\n    return tslib.__generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          syncEngineImpl = ensureWatchCallbacks(syncEngine);\n\n          if (!syncEngineImpl._isPrimaryClient) {\n            return [2\n            /*return*/\n            ];\n          }\n\n          _i = 0, added_1 = added;\n          _e.label = 1;\n\n        case 1:\n          if (!(_i < added_1.length)) return [3\n          /*break*/\n          , 6];\n          targetId = added_1[_i];\n\n          if (syncEngineImpl.queriesByTarget.has(targetId)) {\n            // A target might have been added in a previous attempt\n            logDebug(LOG_TAG$3, 'Adding an already active target ' + targetId);\n            return [3\n            /*break*/\n            , 5];\n          }\n\n          return [4\n          /*yield*/\n          , localStoreGetCachedTarget(syncEngineImpl.localStore, targetId)];\n\n        case 2:\n          target = _e.sent();\n          return [4\n          /*yield*/\n          , localStoreAllocateTarget(syncEngineImpl.localStore, target)];\n\n        case 3:\n          targetData = _e.sent();\n          return [4\n          /*yield*/\n          , initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetData.targetId,\n          /*current=*/\n          false)];\n\n        case 4:\n          _e.sent();\n\n          remoteStoreListen(syncEngineImpl.remoteStore, targetData);\n          _e.label = 5;\n\n        case 5:\n          _i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 6:\n          _loop_5 = function (targetId) {\n            return tslib.__generator(this, function (_f) {\n              switch (_f.label) {\n                case 0:\n                  // Check that the target is still active since the target might have been\n                  // removed if it has been rejected by the backend.\n                  if (!syncEngineImpl.queriesByTarget.has(targetId)) {\n                    return [2\n                    /*return*/\n                    , \"continue\"];\n                  } // Release queries that are still active.\n\n\n                  return [4\n                  /*yield*/\n                  , localStoreReleaseTarget(syncEngineImpl.localStore, targetId,\n                  /* keepPersistedTargetData */\n                  false).then(function () {\n                    remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\n                    removeAndCleanupTarget(syncEngineImpl, targetId);\n                  }).catch(ignoreIfPrimaryLeaseLoss)];\n\n                case 1:\n                  // Release queries that are still active.\n                  _f.sent();\n\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          };\n\n          _d = 0, removed_1 = removed;\n          _e.label = 7;\n\n        case 7:\n          if (!(_d < removed_1.length)) return [3\n          /*break*/\n          , 10];\n          targetId = removed_1[_d];\n          return [5\n          /*yield**/\n          , _loop_5(targetId)];\n\n        case 8:\n          _e.sent();\n\n          _e.label = 9;\n\n        case 9:\n          _d++;\n          return [3\n          /*break*/\n          , 7];\n\n        case 10:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction ensureWatchCallbacks(syncEngine) {\n  var syncEngineImpl = debugCast(syncEngine);\n  syncEngineImpl.remoteStore.remoteSyncer.applyRemoteEvent = syncEngineApplyRemoteEvent.bind(null, syncEngineImpl);\n  syncEngineImpl.remoteStore.remoteSyncer.getRemoteKeysForTarget = syncEngineGetRemoteKeysForTarget.bind(null, syncEngineImpl);\n  syncEngineImpl.remoteStore.remoteSyncer.rejectListen = syncEngineRejectListen.bind(null, syncEngineImpl);\n  syncEngineImpl.syncEngineListener.onWatchChange = eventManagerOnWatchChange.bind(null, syncEngineImpl.eventManager);\n  syncEngineImpl.syncEngineListener.onWatchError = eventManagerOnWatchError.bind(null, syncEngineImpl.eventManager);\n  return syncEngineImpl;\n}\n\nfunction syncEngineEnsureWriteCallbacks(syncEngine) {\n  var syncEngineImpl = debugCast(syncEngine);\n  syncEngineImpl.remoteStore.remoteSyncer.applySuccessfulWrite = syncEngineApplySuccessfulWrite.bind(null, syncEngineImpl);\n  syncEngineImpl.remoteStore.remoteSyncer.rejectFailedWrite = syncEngineRejectFailedWrite.bind(null, syncEngineImpl);\n  return syncEngineImpl;\n}\n/**\r\n * Loads a Firestore bundle into the SDK. The returned promise resolves when\r\n * the bundle finished loading.\r\n *\r\n * @param syncEngine - SyncEngine to use.\r\n * @param bundleReader - Bundle to load into the SDK.\r\n * @param task - LoadBundleTask used to update the loading progress to public API.\r\n */\n\n\nfunction syncEngineLoadBundle(syncEngine, bundleReader, task) {\n  var syncEngineImpl = debugCast(syncEngine); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n  loadBundleImpl(syncEngineImpl, bundleReader, task).then(function () {\n    syncEngineImpl.sharedClientState.notifyBundleLoaded();\n  });\n}\n\nfunction loadBundleImpl(syncEngine, reader, task) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var metadata, skip, loader, element, progress, result, e_10;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _d.trys.push([0, 13,, 14]);\n\n          return [4\n          /*yield*/\n          , reader.getMetadata()];\n\n        case 1:\n          metadata = _d.sent();\n          return [4\n          /*yield*/\n          , localStoreHasNewerBundle(syncEngine.localStore, metadata)];\n\n        case 2:\n          skip = _d.sent();\n          if (!skip) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , reader.close()];\n\n        case 3:\n          _d.sent();\n\n          task._completeWith(bundleSuccessProgress(metadata));\n\n          return [2\n          /*return*/\n          ];\n\n        case 4:\n          task._updateProgress(bundleInitialProgress(metadata));\n\n          loader = new BundleLoader(metadata, syncEngine.localStore, reader.serializer);\n          return [4\n          /*yield*/\n          , reader.nextElement()];\n\n        case 5:\n          element = _d.sent();\n          _d.label = 6;\n\n        case 6:\n          if (!element) return [3\n          /*break*/\n          , 9];\n          return [4\n          /*yield*/\n          , loader.addSizedElement(element)];\n\n        case 7:\n          progress = _d.sent();\n\n          if (progress) {\n            task._updateProgress(progress);\n          }\n\n          return [4\n          /*yield*/\n          , reader.nextElement()];\n\n        case 8:\n          element = _d.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 9:\n          return [4\n          /*yield*/\n          , loader.complete()];\n\n        case 10:\n          result = _d.sent(); // TODO(b/160876443): This currently raises snapshots with\n          // `fromCache=false` if users already listen to some queries and bundles\n          // has newer version.\n\n          return [4\n          /*yield*/\n          , syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, result.changedDocs,\n          /* remoteEvent */\n          undefined)];\n\n        case 11:\n          // TODO(b/160876443): This currently raises snapshots with\n          // `fromCache=false` if users already listen to some queries and bundles\n          // has newer version.\n          _d.sent(); // Save metadata, so loading the same bundle will skip.\n\n\n          return [4\n          /*yield*/\n          , localStoreSaveBundle(syncEngine.localStore, metadata)];\n\n        case 12:\n          // Save metadata, so loading the same bundle will skip.\n          _d.sent();\n\n          task._completeWith(result.progress);\n\n          return [3\n          /*break*/\n          , 14];\n\n        case 13:\n          e_10 = _d.sent();\n          logWarn(LOG_TAG$3, \"Loading bundle failed with \" + e_10);\n\n          task._failWith(e_10);\n\n          return [3\n          /*break*/\n          , 14];\n\n        case 14:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides all components needed for Firestore with in-memory persistence.\r\n * Uses EagerGC garbage collection.\r\n */\n\n\nvar MemoryOfflineComponentProvider =\n/** @class */\nfunction () {\n  function MemoryOfflineComponentProvider() {\n    this.synchronizeTabs = false;\n  }\n\n  MemoryOfflineComponentProvider.prototype.initialize = function (cfg) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            this.serializer = newSerializer(cfg.databaseInfo.databaseId);\n            this.sharedClientState = this.createSharedClientState(cfg);\n            this.persistence = this.createPersistence(cfg);\n            return [4\n            /*yield*/\n            , this.persistence.start()];\n\n          case 1:\n            _d.sent();\n\n            this.gcScheduler = this.createGarbageCollectionScheduler(cfg);\n            this.localStore = this.createLocalStore(cfg);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MemoryOfflineComponentProvider.prototype.createGarbageCollectionScheduler = function (cfg) {\n    return null;\n  };\n\n  MemoryOfflineComponentProvider.prototype.createLocalStore = function (cfg) {\n    return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);\n  };\n\n  MemoryOfflineComponentProvider.prototype.createPersistence = function (cfg) {\n    return new MemoryPersistence(MemoryEagerDelegate.factory, this.serializer);\n  };\n\n  MemoryOfflineComponentProvider.prototype.createSharedClientState = function (cfg) {\n    return new MemorySharedClientState();\n  };\n\n  MemoryOfflineComponentProvider.prototype.terminate = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (this.gcScheduler) {\n              this.gcScheduler.stop();\n            }\n\n            return [4\n            /*yield*/\n            , this.sharedClientState.shutdown()];\n\n          case 1:\n            _d.sent();\n\n            return [4\n            /*yield*/\n            , this.persistence.shutdown()];\n\n          case 2:\n            _d.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return MemoryOfflineComponentProvider;\n}();\n/**\r\n * Provides all components needed for Firestore with IndexedDB persistence.\r\n */\n\n\nvar IndexedDbOfflineComponentProvider =\n/** @class */\nfunction (_super) {\n  tslib.__extends(IndexedDbOfflineComponentProvider, _super);\n\n  function IndexedDbOfflineComponentProvider(onlineComponentProvider, cacheSizeBytes, forceOwnership) {\n    var _this = _super.call(this) || this;\n\n    _this.onlineComponentProvider = onlineComponentProvider;\n    _this.cacheSizeBytes = cacheSizeBytes;\n    _this.forceOwnership = forceOwnership;\n    _this.synchronizeTabs = false;\n    return _this;\n  }\n\n  IndexedDbOfflineComponentProvider.prototype.initialize = function (cfg) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , _super.prototype.initialize.call(this, cfg)];\n\n          case 1:\n            _d.sent();\n\n            return [4\n            /*yield*/\n            , localStoreSynchronizeLastDocumentChangeReadTime(this.localStore)];\n\n          case 2:\n            _d.sent();\n\n            return [4\n            /*yield*/\n            , this.onlineComponentProvider.initialize(this, cfg)];\n\n          case 3:\n            _d.sent(); // Enqueue writes from a previous session\n\n\n            return [4\n            /*yield*/\n            , syncEngineEnsureWriteCallbacks(this.onlineComponentProvider.syncEngine)];\n\n          case 4:\n            // Enqueue writes from a previous session\n            _d.sent();\n\n            return [4\n            /*yield*/\n            , fillWritePipeline(this.onlineComponentProvider.remoteStore)];\n\n          case 5:\n            _d.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDbOfflineComponentProvider.prototype.createLocalStore = function (cfg) {\n    return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);\n  };\n\n  IndexedDbOfflineComponentProvider.prototype.createGarbageCollectionScheduler = function (cfg) {\n    var garbageCollector = this.persistence.referenceDelegate.garbageCollector;\n    return new LruScheduler(garbageCollector, cfg.asyncQueue);\n  };\n\n  IndexedDbOfflineComponentProvider.prototype.createPersistence = function (cfg) {\n    var persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);\n    var lruParams = this.cacheSizeBytes !== undefined ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;\n    return new IndexedDbPersistence(this.synchronizeTabs, persistenceKey, cfg.clientId, lruParams, cfg.asyncQueue, getWindow(), getDocument(), this.serializer, this.sharedClientState, !!this.forceOwnership);\n  };\n\n  IndexedDbOfflineComponentProvider.prototype.createSharedClientState = function (cfg) {\n    return new MemorySharedClientState();\n  };\n\n  return IndexedDbOfflineComponentProvider;\n}(MemoryOfflineComponentProvider);\n/**\r\n * Provides all components needed for Firestore with multi-tab IndexedDB\r\n * persistence.\r\n *\r\n * In the legacy client, this provider is used to provide both multi-tab and\r\n * non-multi-tab persistence since we cannot tell at build time whether\r\n * `synchronizeTabs` will be enabled.\r\n */\n\n\nvar MultiTabOfflineComponentProvider =\n/** @class */\nfunction (_super) {\n  tslib.__extends(MultiTabOfflineComponentProvider, _super);\n\n  function MultiTabOfflineComponentProvider(onlineComponentProvider, cacheSizeBytes) {\n    var _this = _super.call(this, onlineComponentProvider, cacheSizeBytes,\n    /* forceOwnership= */\n    false) || this;\n\n    _this.onlineComponentProvider = onlineComponentProvider;\n    _this.cacheSizeBytes = cacheSizeBytes;\n    _this.synchronizeTabs = true;\n    return _this;\n  }\n\n  MultiTabOfflineComponentProvider.prototype.initialize = function (cfg) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var syncEngine;\n\n      var _this = this;\n\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , _super.prototype.initialize.call(this, cfg)];\n\n          case 1:\n            _d.sent();\n\n            syncEngine = this.onlineComponentProvider.syncEngine;\n            if (!(this.sharedClientState instanceof WebStorageSharedClientState)) return [3\n            /*break*/\n            , 3];\n            this.sharedClientState.syncEngine = {\n              applyBatchState: syncEngineApplyBatchState.bind(null, syncEngine),\n              applyTargetState: syncEngineApplyTargetState.bind(null, syncEngine),\n              applyActiveTargetsChange: syncEngineApplyActiveTargetsChange.bind(null, syncEngine),\n              getActiveClients: syncEngineGetActiveClients.bind(null, syncEngine),\n              synchronizeWithChangedDocuments: syncEngineSynchronizeWithChangedDocuments.bind(null, syncEngine)\n            };\n            return [4\n            /*yield*/\n            , this.sharedClientState.start()];\n\n          case 2:\n            _d.sent();\n\n            _d.label = 3;\n\n          case 3:\n            // NOTE: This will immediately call the listener, so we make sure to\n            // set it after localStore / remoteStore are started.\n            return [4\n            /*yield*/\n            , this.persistence.setPrimaryStateListener(function (isPrimary) {\n              return tslib.__awaiter(_this, void 0, void 0, function () {\n                return tslib.__generator(this, function (_d) {\n                  switch (_d.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , syncEngineApplyPrimaryState(this.onlineComponentProvider.syncEngine, isPrimary)];\n\n                    case 1:\n                      _d.sent();\n\n                      if (this.gcScheduler) {\n                        if (isPrimary && !this.gcScheduler.started) {\n                          this.gcScheduler.start(this.localStore);\n                        } else if (!isPrimary) {\n                          this.gcScheduler.stop();\n                        }\n                      }\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            })];\n\n          case 4:\n            // NOTE: This will immediately call the listener, so we make sure to\n            // set it after localStore / remoteStore are started.\n            _d.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MultiTabOfflineComponentProvider.prototype.createSharedClientState = function (cfg) {\n    var window = getWindow();\n\n    if (!WebStorageSharedClientState.isAvailable(window)) {\n      throw new FirestoreError(Code.UNIMPLEMENTED, 'IndexedDB persistence is only available on platforms that support LocalStorage.');\n    }\n\n    var persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);\n    return new WebStorageSharedClientState(window, cfg.asyncQueue, persistenceKey, cfg.clientId, cfg.initialUser);\n  };\n\n  return MultiTabOfflineComponentProvider;\n}(IndexedDbOfflineComponentProvider);\n/**\r\n * Initializes and wires the components that are needed to interface with the\r\n * network.\r\n */\n\n\nvar OnlineComponentProvider =\n/** @class */\nfunction () {\n  function OnlineComponentProvider() {}\n\n  OnlineComponentProvider.prototype.initialize = function (offlineComponentProvider, cfg) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (this.localStore) {\n              // OnlineComponentProvider may get initialized multiple times if\n              // multi-tab persistence is used.\n              return [2\n              /*return*/\n              ];\n            }\n\n            this.localStore = offlineComponentProvider.localStore;\n            this.sharedClientState = offlineComponentProvider.sharedClientState;\n            this.datastore = this.createDatastore(cfg);\n            this.remoteStore = this.createRemoteStore(cfg);\n            this.eventManager = this.createEventManager(cfg);\n            this.syncEngine = this.createSyncEngine(cfg,\n            /* startAsPrimary=*/\n            !offlineComponentProvider.synchronizeTabs);\n\n            this.sharedClientState.onlineStateHandler = function (onlineState) {\n              return syncEngineApplyOnlineStateChange(_this.syncEngine, onlineState, 1\n              /* SharedClientState */\n              );\n            };\n\n            this.remoteStore.remoteSyncer.handleCredentialChange = syncEngineHandleCredentialChange.bind(null, this.syncEngine);\n            return [4\n            /*yield*/\n            , remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient)];\n\n          case 1:\n            _d.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  OnlineComponentProvider.prototype.createEventManager = function (cfg) {\n    return newEventManager();\n  };\n\n  OnlineComponentProvider.prototype.createDatastore = function (cfg) {\n    var serializer = newSerializer(cfg.databaseInfo.databaseId);\n    var connection = newConnection(cfg.databaseInfo);\n    return newDatastore(cfg.credentials, connection, serializer);\n  };\n\n  OnlineComponentProvider.prototype.createRemoteStore = function (cfg) {\n    var _this = this;\n\n    return newRemoteStore(this.localStore, this.datastore, cfg.asyncQueue, function (onlineState) {\n      return syncEngineApplyOnlineStateChange(_this.syncEngine, onlineState, 0\n      /* RemoteStore */\n      );\n    }, newConnectivityMonitor());\n  };\n\n  OnlineComponentProvider.prototype.createSyncEngine = function (cfg, startAsPrimary) {\n    return newSyncEngine(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, cfg.initialUser, cfg.maxConcurrentLimboResolutions, startAsPrimary);\n  };\n\n  OnlineComponentProvider.prototype.terminate = function () {\n    return remoteStoreShutdown(this.remoteStore);\n  };\n\n  return OnlineComponentProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * How many bytes to read each time when `ReadableStreamReader.read()` is\r\n * called. Only applicable for byte streams that we control (e.g. those backed\r\n * by an UInt8Array).\r\n */\n\n\nvar DEFAULT_BYTES_PER_READ = 10240;\n/**\r\n * Builds a `ByteStreamReader` from a UInt8Array.\r\n * @param source - The data source to use.\r\n * @param bytesPerRead - How many bytes each `read()` from the returned reader\r\n *        will read.\r\n */\n\nfunction toByteStreamReaderHelper(source, bytesPerRead) {\n  if (bytesPerRead === void 0) {\n    bytesPerRead = DEFAULT_BYTES_PER_READ;\n  }\n\n  var readFrom = 0;\n  var reader = {\n    read: function () {\n      return tslib.__awaiter(this, void 0, void 0, function () {\n        var result;\n        return tslib.__generator(this, function (_d) {\n          if (readFrom < source.byteLength) {\n            result = {\n              value: source.slice(readFrom, readFrom + bytesPerRead),\n              done: false\n            };\n            readFrom += bytesPerRead;\n            return [2\n            /*return*/\n            , result];\n          }\n\n          return [2\n          /*return*/\n          , {\n            done: true\n          }];\n        });\n      });\n    },\n    cancel: function () {\n      return tslib.__awaiter(this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_d) {\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    },\n    releaseLock: function () {},\n    closed: Promise.reject('unimplemented')\n  };\n  return reader;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction validateNonEmptyArgument(functionName, argumentName, argument) {\n  if (!argument) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() cannot be called with an empty \" + argumentName + \".\");\n  }\n}\n\nfunction validateSetOptions(methodName, options) {\n  if (options === undefined) {\n    return {\n      merge: false\n    };\n  }\n\n  if (options.mergeFields !== undefined && options.merge !== undefined) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid options passed to function \" + methodName + \"(): You cannot \" + 'specify both \"merge\" and \"mergeFields\".');\n  }\n\n  return options;\n}\n/**\r\n * Validates that two boolean options are not set at the same time.\r\n */\n\n\nfunction validateIsNotUsedTogether(optionName1, argument1, optionName2, argument2) {\n  if (argument1 === true && argument2 === true) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, optionName1 + \" and \" + optionName2 + \" cannot be used together.\");\n  }\n}\n/**\r\n * Validates that `path` refers to a document (indicated by the fact it contains\r\n * an even numbers of segments).\r\n */\n\n\nfunction validateDocumentPath(path) {\n  if (!DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid document reference. Document references must have an even number of segments, but \" + path + \" has \" + path.length + \".\");\n  }\n}\n/**\r\n * Validates that `path` refers to a collection (indicated by the fact it\r\n * contains an odd numbers of segments).\r\n */\n\n\nfunction validateCollectionPath(path) {\n  if (DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid collection reference. Collection references must have an odd number of segments, but \" + path + \" has \" + path.length + \".\");\n  }\n}\n/**\r\n * Returns true if it's a non-null object without a custom prototype\r\n * (i.e. excludes Array, Date, etc.).\r\n */\n\n\nfunction isPlainObject(input) {\n  return typeof input === 'object' && input !== null && (Object.getPrototypeOf(input) === Object.prototype || Object.getPrototypeOf(input) === null);\n}\n/** Returns a string describing the type / value of the provided input. */\n\n\nfunction valueDescription(input) {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = input.substring(0, 20) + \"...\";\n    }\n\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      var customObjectName = tryGetCustomObjectType(input);\n\n      if (customObjectName) {\n        return \"a custom \" + customObjectName + \" object\";\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail();\n  }\n}\n/** Hacky method to try to get the constructor name for an object. */\n\n\nfunction tryGetCustomObjectType(input) {\n  if (input.constructor) {\n    var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n    var results = funcNameRegex.exec(input.constructor.toString());\n\n    if (results && results.length > 1) {\n      return results[1];\n    }\n  }\n\n  return null;\n}\n/**\r\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\r\n * underlying instance. Throws if  `obj` is not an instance of `T`.\r\n *\r\n * This cast is used in the Lite and Full SDK to verify instance types for\r\n * arguments passed to the public API.\r\n */\n\n\nfunction cast(obj, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconstructor) {\n  if ('_delegate' in obj) {\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj = obj._delegate;\n  }\n\n  if (!(obj instanceof constructor)) {\n    if (constructor.name === obj.constructor.name) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Type does not match the expected instance. Did you pass a ' + \"reference from a different Firestore SDK?\");\n    } else {\n      var description = valueDescription(obj);\n      throw new FirestoreError(Code.INVALID_ARGUMENT, \"Expected type '\" + constructor.name + \"', but it was: \" + description);\n    }\n  }\n\n  return obj;\n}\n\nfunction validatePositiveNumber(functionName, n) {\n  if (n <= 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a positive number, but it was: \" + n + \".\");\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * On Node, only supported data source is a `Uint8Array` for now.\r\n */\n\n\nfunction toByteStreamReader(source, bytesPerRead) {\n  if (!(source instanceof Uint8Array)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"NodePlatform.toByteStreamReader expects source to be Uint8Array, got \" + valueDescription(source));\n  }\n\n  return toByteStreamReaderHelper(source, bytesPerRead);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/*\r\n * A wrapper implementation of Observer<T> that will dispatch events\r\n * asynchronously. To allow immediate silencing, a mute call is added which\r\n * causes events scheduled to no longer be raised.\r\n */\n\n\nvar AsyncObserver =\n/** @class */\nfunction () {\n  function AsyncObserver(observer) {\n    this.observer = observer;\n    /**\r\n     * When set to true, will not raise future events. Necessary to deal with\r\n     * async detachment of listener.\r\n     */\n\n    this.muted = false;\n  }\n\n  AsyncObserver.prototype.next = function (value) {\n    if (this.observer.next) {\n      this.scheduleEvent(this.observer.next, value);\n    }\n  };\n\n  AsyncObserver.prototype.error = function (error) {\n    if (this.observer.error) {\n      this.scheduleEvent(this.observer.error, error);\n    } else {\n      console.error('Uncaught Error in snapshot listener:', error);\n    }\n  };\n\n  AsyncObserver.prototype.mute = function () {\n    this.muted = true;\n  };\n\n  AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {\n    var _this = this;\n\n    if (!this.muted) {\n      setTimeout(function () {\n        if (!_this.muted) {\n          eventHandler(event);\n        }\n      }, 0);\n    }\n  };\n\n  return AsyncObserver;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A complete element in the bundle stream, together with the byte length it\r\n * occupies in the stream.\r\n */\n\n\nvar SizedBundleElement =\n/** @class */\nfunction () {\n  function SizedBundleElement(payload, // How many bytes this element takes to store in the bundle.\n  byteLength) {\n    this.payload = payload;\n    this.byteLength = byteLength;\n  }\n\n  SizedBundleElement.prototype.isBundleMetadata = function () {\n    return 'metadata' in this.payload;\n  };\n\n  return SizedBundleElement;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A class representing a bundle.\r\n *\r\n * Takes a bundle stream or buffer, and presents abstractions to read bundled\r\n * elements out of the underlying content.\r\n */\n\n\nvar BundleReaderImpl =\n/** @class */\nfunction () {\n  function BundleReaderImpl(\n  /** The reader to read from underlying binary bundle data source. */\n  reader, serializer) {\n    var _this = this;\n\n    this.reader = reader;\n    this.serializer = serializer;\n    /** Cached bundle metadata. */\n\n    this.metadata = new Deferred();\n    /**\r\n     * Internal buffer to hold bundle content, accumulating incomplete element\r\n     * content.\r\n     */\n\n    this.buffer = new Uint8Array();\n    this.textDecoder = newTextDecoder(); // Read the metadata (which is the first element).\n\n    this.nextElementImpl().then(function (element) {\n      if (element && element.isBundleMetadata()) {\n        _this.metadata.resolve(element.payload.metadata);\n      } else {\n        _this.metadata.reject(new Error(\"The first element of the bundle is not a metadata, it is\\n             \" + JSON.stringify(element === null || element === void 0 ? void 0 : element.payload)));\n      }\n    }, function (error) {\n      return _this.metadata.reject(error);\n    });\n  }\n\n  BundleReaderImpl.prototype.close = function () {\n    return this.reader.cancel();\n  };\n\n  BundleReaderImpl.prototype.getMetadata = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_d) {\n        return [2\n        /*return*/\n        , this.metadata.promise];\n      });\n    });\n  };\n\n  BundleReaderImpl.prototype.nextElement = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            // Makes sure metadata is read before proceeding.\n            return [4\n            /*yield*/\n            , this.getMetadata()];\n\n          case 1:\n            // Makes sure metadata is read before proceeding.\n            _d.sent();\n\n            return [2\n            /*return*/\n            , this.nextElementImpl()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads from the head of internal buffer, and pulling more data from\r\n   * underlying stream if a complete element cannot be found, until an\r\n   * element(including the prefixed length and the JSON string) is found.\r\n   *\r\n   * Once a complete element is read, it is dropped from internal buffer.\r\n   *\r\n   * Returns either the bundled element, or null if we have reached the end of\r\n   * the stream.\r\n   */\n\n\n  BundleReaderImpl.prototype.nextElementImpl = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var lengthBuffer, lengthString, length, jsonString;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.readLength()];\n\n          case 1:\n            lengthBuffer = _d.sent();\n\n            if (lengthBuffer === null) {\n              return [2\n              /*return*/\n              , null];\n            }\n\n            lengthString = this.textDecoder.decode(lengthBuffer);\n            length = Number(lengthString);\n\n            if (isNaN(length)) {\n              this.raiseError(\"length string (\" + lengthString + \") is not valid number\");\n            }\n\n            return [4\n            /*yield*/\n            , this.readJsonString(length)];\n\n          case 2:\n            jsonString = _d.sent();\n            return [2\n            /*return*/\n            , new SizedBundleElement(JSON.parse(jsonString), lengthBuffer.length + length)];\n        }\n      });\n    });\n  };\n  /** First index of '{' from the underlying buffer. */\n\n\n  BundleReaderImpl.prototype.indexOfOpenBracket = function () {\n    return this.buffer.findIndex(function (v) {\n      return v === '{'.charCodeAt(0);\n    });\n  };\n  /**\r\n   * Reads from the beginning of the internal buffer, until the first '{', and\r\n   * return the content.\r\n   *\r\n   * If reached end of the stream, returns a null.\r\n   */\n\n\n  BundleReaderImpl.prototype.readLength = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var done, position, result;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (!(this.indexOfOpenBracket() < 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.pullMoreDataToBuffer()];\n\n          case 1:\n            done = _d.sent();\n\n            if (done) {\n              return [3\n              /*break*/\n              , 2];\n            }\n\n            return [3\n            /*break*/\n            , 0];\n\n          case 2:\n            // Broke out of the loop because underlying stream is closed, and there\n            // happens to be no more data to process.\n            if (this.buffer.length === 0) {\n              return [2\n              /*return*/\n              , null];\n            }\n\n            position = this.indexOfOpenBracket(); // Broke out of the loop because underlying stream is closed, but still\n            // cannot find an open bracket.\n\n            if (position < 0) {\n              this.raiseError('Reached the end of bundle when a length string is expected.');\n            }\n\n            result = this.buffer.slice(0, position); // Update the internal buffer to drop the read length.\n\n            this.buffer = this.buffer.slice(position);\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads from a specified position from the internal buffer, for a specified\r\n   * number of bytes, pulling more data from the underlying stream if needed.\r\n   *\r\n   * Returns a string decoded from the read bytes.\r\n   */\n\n\n  BundleReaderImpl.prototype.readJsonString = function (length) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var done, result;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (!(this.buffer.length < length)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.pullMoreDataToBuffer()];\n\n          case 1:\n            done = _d.sent();\n\n            if (done) {\n              this.raiseError('Reached the end of bundle when more is expected.');\n            }\n\n            return [3\n            /*break*/\n            , 0];\n\n          case 2:\n            result = this.textDecoder.decode(this.buffer.slice(0, length)); // Update the internal buffer to drop the read json string.\n\n            this.buffer = this.buffer.slice(length);\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  BundleReaderImpl.prototype.raiseError = function (message) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.reader.cancel();\n    throw new Error(\"Invalid bundle format: \" + message);\n  };\n  /**\r\n   * Pulls more data from underlying stream to internal buffer.\r\n   * Returns a boolean indicating whether the stream is finished.\r\n   */\n\n\n  BundleReaderImpl.prototype.pullMoreDataToBuffer = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var result, newBuffer;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.reader.read()];\n\n          case 1:\n            result = _d.sent();\n\n            if (!result.done) {\n              newBuffer = new Uint8Array(this.buffer.length + result.value.length);\n              newBuffer.set(this.buffer);\n              newBuffer.set(result.value, this.buffer.length);\n              this.buffer = newBuffer;\n            }\n\n            return [2\n            /*return*/\n            , result.done];\n        }\n      });\n    });\n  };\n\n  return BundleReaderImpl;\n}();\n\nfunction newBundleReader(reader, serializer) {\n  return new BundleReaderImpl(reader, serializer);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Internal transaction object responsible for accumulating the mutations to\r\n * perform and the base versions for any documents read.\r\n */\n\n\nvar Transaction$3 =\n/** @class */\nfunction () {\n  function Transaction$3(datastore) {\n    this.datastore = datastore; // The version of each document that was read during this transaction.\n\n    this.readVersions = new Map();\n    this.mutations = [];\n    this.committed = false;\n    /**\r\n     * A deferred usage error that occurred previously in this transaction that\r\n     * will cause the transaction to fail once it actually commits.\r\n     */\n\n    this.lastWriteError = null;\n    /**\r\n     * Set of documents that have been written in the transaction.\r\n     *\r\n     * When there's more than one write to the same key in a transaction, any\r\n     * writes after the first are handled differently.\r\n     */\n\n    this.writtenDocs = new Set();\n  }\n\n  Transaction$3.prototype.lookup = function (keys) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var docs;\n\n      var _this = this;\n\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            this.ensureCommitNotCalled();\n\n            if (this.mutations.length > 0) {\n              throw new FirestoreError(Code.INVALID_ARGUMENT, 'Firestore transactions require all reads to be executed before all writes.');\n            }\n\n            return [4\n            /*yield*/\n            , invokeBatchGetDocumentsRpc(this.datastore, keys)];\n\n          case 1:\n            docs = _d.sent();\n            docs.forEach(function (doc) {\n              return _this.recordVersion(doc);\n            });\n            return [2\n            /*return*/\n            , docs];\n        }\n      });\n    });\n  };\n\n  Transaction$3.prototype.set = function (key, data) {\n    this.write(data.toMutation(key, this.precondition(key)));\n    this.writtenDocs.add(key.toString());\n  };\n\n  Transaction$3.prototype.update = function (key, data) {\n    try {\n      this.write(data.toMutation(key, this.preconditionForUpdate(key)));\n    } catch (e) {\n      this.lastWriteError = e;\n    }\n\n    this.writtenDocs.add(key.toString());\n  };\n\n  Transaction$3.prototype.delete = function (key) {\n    this.write(new DeleteMutation(key, this.precondition(key)));\n    this.writtenDocs.add(key.toString());\n  };\n\n  Transaction$3.prototype.commit = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var unwritten;\n\n      var _this = this;\n\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            this.ensureCommitNotCalled();\n\n            if (this.lastWriteError) {\n              throw this.lastWriteError;\n            }\n\n            unwritten = this.readVersions; // For each mutation, note that the doc was written.\n\n            this.mutations.forEach(function (mutation) {\n              unwritten.delete(mutation.key.toString());\n            }); // For each document that was read but not written to, we want to perform\n            // a `verify` operation.\n\n            unwritten.forEach(function (_, path) {\n              var key = DocumentKey.fromPath(path);\n\n              _this.mutations.push(new VerifyMutation(key, _this.precondition(key)));\n            });\n            return [4\n            /*yield*/\n            , invokeCommitRpc(this.datastore, this.mutations)];\n\n          case 1:\n            _d.sent();\n\n            this.committed = true;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Transaction$3.prototype.recordVersion = function (doc) {\n    var docVersion;\n\n    if (doc.isFoundDocument()) {\n      docVersion = doc.version;\n    } else if (doc.isNoDocument()) {\n      // For deleted docs, we must use baseVersion 0 when we overwrite them.\n      docVersion = SnapshotVersion.min();\n    } else {\n      throw fail();\n    }\n\n    var existingVersion = this.readVersions.get(doc.key.toString());\n\n    if (existingVersion) {\n      if (!docVersion.isEqual(existingVersion)) {\n        // This transaction will fail no matter what.\n        throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\n      }\n    } else {\n      this.readVersions.set(doc.key.toString(), docVersion);\n    }\n  };\n  /**\r\n   * Returns the version of this document when it was read in this transaction,\r\n   * as a precondition, or no precondition if it was not read.\r\n   */\n\n\n  Transaction$3.prototype.precondition = function (key) {\n    var version = this.readVersions.get(key.toString());\n\n    if (!this.writtenDocs.has(key.toString()) && version) {\n      return Precondition.updateTime(version);\n    } else {\n      return Precondition.none();\n    }\n  };\n  /**\r\n   * Returns the precondition for a document if the operation is an update.\r\n   */\n\n\n  Transaction$3.prototype.preconditionForUpdate = function (key) {\n    var version = this.readVersions.get(key.toString()); // The first time a document is written, we want to take into account the\n    // read time and existence\n\n    if (!this.writtenDocs.has(key.toString()) && version) {\n      if (version.isEqual(SnapshotVersion.min())) {\n        // The document doesn't exist, so fail the transaction.\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't update a document that doesn't exist.\");\n      } // Document exists, base precondition on document update time.\n\n\n      return Precondition.updateTime(version);\n    } else {\n      // Document was not read, so we just use the preconditions for a blind\n      // update.\n      return Precondition.exists(true);\n    }\n  };\n\n  Transaction$3.prototype.write = function (mutation) {\n    this.ensureCommitNotCalled();\n    this.mutations.push(mutation);\n  };\n\n  Transaction$3.prototype.ensureCommitNotCalled = function () {};\n\n  return Transaction$3;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_MAX_ATTEMPTS_COUNT = 5;\n/**\r\n * TransactionRunner encapsulates the logic needed to run and retry transactions\r\n * with backoff.\r\n */\n\nvar TransactionRunner =\n/** @class */\nfunction () {\n  function TransactionRunner(asyncQueue, datastore, updateFunction, deferred) {\n    this.asyncQueue = asyncQueue;\n    this.datastore = datastore;\n    this.updateFunction = updateFunction;\n    this.deferred = deferred;\n    this.attemptsRemaining = DEFAULT_MAX_ATTEMPTS_COUNT;\n    this.backoff = new ExponentialBackoff(this.asyncQueue, \"transaction_retry\"\n    /* TransactionRetry */\n    );\n  }\n  /** Runs the transaction and sets the result on deferred. */\n\n\n  TransactionRunner.prototype.run = function () {\n    this.attemptsRemaining -= 1;\n    this.runWithBackOff();\n  };\n\n  TransactionRunner.prototype.runWithBackOff = function () {\n    var _this = this;\n\n    this.backoff.backoffAndRun(function () {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        var transaction, userPromise;\n\n        var _this = this;\n\n        return tslib.__generator(this, function (_d) {\n          transaction = new Transaction$3(this.datastore);\n          userPromise = this.tryRunUpdateFunction(transaction);\n\n          if (userPromise) {\n            userPromise.then(function (result) {\n              _this.asyncQueue.enqueueAndForget(function () {\n                return transaction.commit().then(function () {\n                  _this.deferred.resolve(result);\n                }).catch(function (commitError) {\n                  _this.handleTransactionError(commitError);\n                });\n              });\n            }).catch(function (userPromiseError) {\n              _this.handleTransactionError(userPromiseError);\n            });\n          }\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    });\n  };\n\n  TransactionRunner.prototype.tryRunUpdateFunction = function (transaction) {\n    try {\n      var userPromise = this.updateFunction(transaction);\n\n      if (isNullOrUndefined(userPromise) || !userPromise.catch || !userPromise.then) {\n        this.deferred.reject(Error('Transaction callback must return a Promise'));\n        return null;\n      }\n\n      return userPromise;\n    } catch (error) {\n      // Do not retry errors thrown by user provided updateFunction.\n      this.deferred.reject(error);\n      return null;\n    }\n  };\n\n  TransactionRunner.prototype.handleTransactionError = function (error) {\n    var _this = this;\n\n    if (this.attemptsRemaining > 0 && this.isRetryableTransactionError(error)) {\n      this.attemptsRemaining -= 1;\n      this.asyncQueue.enqueueAndForget(function () {\n        _this.runWithBackOff();\n\n        return Promise.resolve();\n      });\n    } else {\n      this.deferred.reject(error);\n    }\n  };\n\n  TransactionRunner.prototype.isRetryableTransactionError = function (error) {\n    if (error.name === 'FirebaseError') {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      var code = error.code;\n      return code === 'aborted' || code === 'failed-precondition' || !isPermanentError(code);\n    }\n\n    return false;\n  };\n\n  return TransactionRunner;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$2 = 'FirestoreClient';\nvar MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;\n/**\r\n * FirestoreClient is a top-level class that constructs and owns all of the\r\n * pieces of the client SDK architecture. It is responsible for creating the\r\n * async queue that is shared by all of the other components in the system.\r\n */\n\nvar FirestoreClient =\n/** @class */\nfunction () {\n  function FirestoreClient(credentials,\n  /**\r\n   * Asynchronous queue responsible for all of our internal processing. When\r\n   * we get incoming work from the user (via public API) or the network\r\n   * (incoming GRPC messages), we should always schedule onto this queue.\r\n   * This ensures all of our work is properly serialized (e.g. we don't\r\n   * start processing a new operation while the previous one is waiting for\r\n   * an async I/O to complete).\r\n   */\n  asyncQueue, databaseInfo) {\n    var _this = this;\n\n    this.credentials = credentials;\n    this.asyncQueue = asyncQueue;\n    this.databaseInfo = databaseInfo;\n    this.user = User.UNAUTHENTICATED;\n    this.clientId = AutoId.newId();\n\n    this.credentialListener = function () {\n      return Promise.resolve();\n    };\n\n    this.credentials.setChangeListener(asyncQueue, function (user) {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              logDebug(LOG_TAG$2, 'Received user=', user.uid);\n              return [4\n              /*yield*/\n              , this.credentialListener(user)];\n\n            case 1:\n              _d.sent();\n\n              this.user = user;\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  }\n\n  FirestoreClient.prototype.getConfiguration = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_d) {\n        return [2\n        /*return*/\n        , {\n          asyncQueue: this.asyncQueue,\n          databaseInfo: this.databaseInfo,\n          clientId: this.clientId,\n          credentials: this.credentials,\n          initialUser: this.user,\n          maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS\n        }];\n      });\n    });\n  };\n\n  FirestoreClient.prototype.setCredentialChangeListener = function (listener) {\n    this.credentialListener = listener;\n  };\n  /**\r\n   * Checks that the client has not been terminated. Ensures that other methods on\r\n   * this class cannot be called after the client is terminated.\r\n   */\n\n\n  FirestoreClient.prototype.verifyNotTerminated = function () {\n    if (this.asyncQueue.isShuttingDown) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'The client has already been terminated.');\n    }\n  };\n\n  FirestoreClient.prototype.terminate = function () {\n    var _this = this;\n\n    this.asyncQueue.enterRestrictedMode();\n    var deferred = new Deferred();\n    this.asyncQueue.enqueueAndForgetEvenWhileRestricted(function () {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        var e_11, firestoreError;\n        return tslib.__generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              _d.trys.push([0, 5,, 6]);\n\n              if (!this.onlineComponents) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , this.onlineComponents.terminate()];\n\n            case 1:\n              _d.sent();\n\n              _d.label = 2;\n\n            case 2:\n              if (!this.offlineComponents) return [3\n              /*break*/\n              , 4];\n              return [4\n              /*yield*/\n              , this.offlineComponents.terminate()];\n\n            case 3:\n              _d.sent();\n\n              _d.label = 4;\n\n            case 4:\n              // `removeChangeListener` must be called after shutting down the\n              // RemoteStore as it will prevent the RemoteStore from retrieving\n              // auth tokens.\n              this.credentials.removeChangeListener();\n              deferred.resolve();\n              return [3\n              /*break*/\n              , 6];\n\n            case 5:\n              e_11 = _d.sent();\n              firestoreError = wrapInUserErrorIfRecoverable(e_11, \"Failed to shutdown persistence\");\n              deferred.reject(firestoreError);\n              return [3\n              /*break*/\n              , 6];\n\n            case 6:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n    return deferred.promise;\n  };\n\n  return FirestoreClient;\n}();\n\nfunction setOfflineComponentProvider(client, offlineComponentProvider) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var configuration, currentUser;\n\n    var _this = this;\n\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          client.asyncQueue.verifyOperationInProgress();\n          logDebug(LOG_TAG$2, 'Initializing OfflineComponentProvider');\n          return [4\n          /*yield*/\n          , client.getConfiguration()];\n\n        case 1:\n          configuration = _d.sent();\n          return [4\n          /*yield*/\n          , offlineComponentProvider.initialize(configuration)];\n\n        case 2:\n          _d.sent();\n\n          currentUser = configuration.initialUser;\n          client.setCredentialChangeListener(function (user) {\n            return tslib.__awaiter(_this, void 0, void 0, function () {\n              return tslib.__generator(this, function (_d) {\n                switch (_d.label) {\n                  case 0:\n                    if (!!currentUser.isEqual(user)) return [3\n                    /*break*/\n                    , 2];\n                    return [4\n                    /*yield*/\n                    , localStoreHandleUserChange(offlineComponentProvider.localStore, user)];\n\n                  case 1:\n                    _d.sent();\n\n                    currentUser = user;\n                    _d.label = 2;\n\n                  case 2:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }); // When a user calls clearPersistence() in one client, all other clients\n          // need to be terminated to allow the delete to succeed.\n\n          offlineComponentProvider.persistence.setDatabaseDeletedListener(function () {\n            return client.terminate();\n          });\n          client.offlineComponents = offlineComponentProvider;\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction setOnlineComponentProvider(client, onlineComponentProvider) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var offlineComponentProvider, configuration;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          client.asyncQueue.verifyOperationInProgress();\n          return [4\n          /*yield*/\n          , ensureOfflineComponents(client)];\n\n        case 1:\n          offlineComponentProvider = _d.sent();\n          logDebug(LOG_TAG$2, 'Initializing OnlineComponentProvider');\n          return [4\n          /*yield*/\n          , client.getConfiguration()];\n\n        case 2:\n          configuration = _d.sent();\n          return [4\n          /*yield*/\n          , onlineComponentProvider.initialize(offlineComponentProvider, configuration)];\n\n        case 3:\n          _d.sent(); // The CredentialChangeListener of the online component provider takes\n          // precedence over the offline component provider.\n\n\n          client.setCredentialChangeListener(function (user) {\n            return remoteStoreHandleCredentialChange(onlineComponentProvider.remoteStore, user);\n          });\n          client.onlineComponents = onlineComponentProvider;\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction ensureOfflineComponents(client) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          if (!!client.offlineComponents) return [3\n          /*break*/\n          , 2];\n          logDebug(LOG_TAG$2, 'Using default OfflineComponentProvider');\n          return [4\n          /*yield*/\n          , setOfflineComponentProvider(client, new MemoryOfflineComponentProvider())];\n\n        case 1:\n          _d.sent();\n\n          _d.label = 2;\n\n        case 2:\n          return [2\n          /*return*/\n          , client.offlineComponents];\n      }\n    });\n  });\n}\n\nfunction ensureOnlineComponents(client) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          if (!!client.onlineComponents) return [3\n          /*break*/\n          , 2];\n          logDebug(LOG_TAG$2, 'Using default OnlineComponentProvider');\n          return [4\n          /*yield*/\n          , setOnlineComponentProvider(client, new OnlineComponentProvider())];\n\n        case 1:\n          _d.sent();\n\n          _d.label = 2;\n\n        case 2:\n          return [2\n          /*return*/\n          , client.onlineComponents];\n      }\n    });\n  });\n}\n\nfunction getPersistence(client) {\n  return ensureOfflineComponents(client).then(function (c) {\n    return c.persistence;\n  });\n}\n\nfunction getLocalStore(client) {\n  return ensureOfflineComponents(client).then(function (c) {\n    return c.localStore;\n  });\n}\n\nfunction getRemoteStore(client) {\n  return ensureOnlineComponents(client).then(function (c) {\n    return c.remoteStore;\n  });\n}\n\nfunction getSyncEngine(client) {\n  return ensureOnlineComponents(client).then(function (c) {\n    return c.syncEngine;\n  });\n}\n\nfunction getDatastore(client) {\n  return ensureOnlineComponents(client).then(function (c) {\n    return c.datastore;\n  });\n}\n\nfunction getEventManager(client) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var onlineComponentProvider, eventManager;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , ensureOnlineComponents(client)];\n\n        case 1:\n          onlineComponentProvider = _d.sent();\n          eventManager = onlineComponentProvider.eventManager;\n          eventManager.onListen = syncEngineListen.bind(null, onlineComponentProvider.syncEngine);\n          eventManager.onUnlisten = syncEngineUnlisten.bind(null, onlineComponentProvider.syncEngine);\n          return [2\n          /*return*/\n          , eventManager];\n      }\n    });\n  });\n}\n/** Enables the network connection and re-enqueues all pending operations. */\n\n\nfunction firestoreClientEnableNetwork(client) {\n  var _this = this;\n\n  return client.asyncQueue.enqueue(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var persistence, remoteStore;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getPersistence(client)];\n\n          case 1:\n            persistence = _d.sent();\n            return [4\n            /*yield*/\n            , getRemoteStore(client)];\n\n          case 2:\n            remoteStore = _d.sent();\n            persistence.setNetworkEnabled(true);\n            return [2\n            /*return*/\n            , remoteStoreEnableNetwork(remoteStore)];\n        }\n      });\n    });\n  });\n}\n/** Disables the network connection. Pending operations will not complete. */\n\n\nfunction firestoreClientDisableNetwork(client) {\n  var _this = this;\n\n  return client.asyncQueue.enqueue(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var persistence, remoteStore;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getPersistence(client)];\n\n          case 1:\n            persistence = _d.sent();\n            return [4\n            /*yield*/\n            , getRemoteStore(client)];\n\n          case 2:\n            remoteStore = _d.sent();\n            persistence.setNetworkEnabled(false);\n            return [2\n            /*return*/\n            , remoteStoreDisableNetwork(remoteStore)];\n        }\n      });\n    });\n  });\n}\n/**\r\n * Returns a Promise that resolves when all writes that were pending at the time\r\n * this method was called received server acknowledgement. An acknowledgement\r\n * can be either acceptance or rejection.\r\n */\n\n\nfunction firestoreClientWaitForPendingWrites(client) {\n  var _this = this;\n\n  var deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var syncEngine;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getSyncEngine(client)];\n\n          case 1:\n            syncEngine = _d.sent();\n            return [2\n            /*return*/\n            , syncEngineRegisterPendingWritesCallback(syncEngine, deferred)];\n        }\n      });\n    });\n  });\n  return deferred.promise;\n}\n\nfunction firestoreClientListen(client, query, options, observer) {\n  var _this = this;\n\n  var wrappedObserver = new AsyncObserver(observer);\n  var listener = new QueryListener(query, wrappedObserver, options);\n  client.asyncQueue.enqueueAndForget(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var eventManager;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getEventManager(client)];\n\n          case 1:\n            eventManager = _d.sent();\n            return [2\n            /*return*/\n            , eventManagerListen(eventManager, listener)];\n        }\n      });\n    });\n  });\n  return function () {\n    wrappedObserver.mute();\n    client.asyncQueue.enqueueAndForget(function () {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        var eventManager;\n        return tslib.__generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , getEventManager(client)];\n\n            case 1:\n              eventManager = _d.sent();\n              return [2\n              /*return*/\n              , eventManagerUnlisten(eventManager, listener)];\n          }\n        });\n      });\n    });\n  };\n}\n\nfunction firestoreClientGetDocumentFromLocalCache(client, docKey) {\n  var _this = this;\n\n  var deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var localStore;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getLocalStore(client)];\n\n          case 1:\n            localStore = _d.sent();\n            return [2\n            /*return*/\n            , readDocumentFromCache(localStore, docKey, deferred)];\n        }\n      });\n    });\n  });\n  return deferred.promise;\n}\n\nfunction firestoreClientGetDocumentViaSnapshotListener(client, key, options) {\n  var _this = this;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var eventManager;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getEventManager(client)];\n\n          case 1:\n            eventManager = _d.sent();\n            return [2\n            /*return*/\n            , readDocumentViaSnapshotListener(eventManager, client.asyncQueue, key, options, deferred)];\n        }\n      });\n    });\n  });\n  return deferred.promise;\n}\n\nfunction firestoreClientGetDocumentsFromLocalCache(client, query) {\n  var _this = this;\n\n  var deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var localStore;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getLocalStore(client)];\n\n          case 1:\n            localStore = _d.sent();\n            return [2\n            /*return*/\n            , executeQueryFromCache(localStore, query, deferred)];\n        }\n      });\n    });\n  });\n  return deferred.promise;\n}\n\nfunction firestoreClientGetDocumentsViaSnapshotListener(client, query, options) {\n  var _this = this;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var eventManager;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getEventManager(client)];\n\n          case 1:\n            eventManager = _d.sent();\n            return [2\n            /*return*/\n            , executeQueryViaSnapshotListener(eventManager, client.asyncQueue, query, options, deferred)];\n        }\n      });\n    });\n  });\n  return deferred.promise;\n}\n\nfunction firestoreClientWrite(client, mutations) {\n  var _this = this;\n\n  var deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var syncEngine;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getSyncEngine(client)];\n\n          case 1:\n            syncEngine = _d.sent();\n            return [2\n            /*return*/\n            , syncEngineWrite(syncEngine, mutations, deferred)];\n        }\n      });\n    });\n  });\n  return deferred.promise;\n}\n\nfunction firestoreClientAddSnapshotsInSyncListener(client, observer) {\n  var _this = this;\n\n  var wrappedObserver = new AsyncObserver(observer);\n  client.asyncQueue.enqueueAndForget(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var eventManager;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getEventManager(client)];\n\n          case 1:\n            eventManager = _d.sent();\n            return [2\n            /*return*/\n            , addSnapshotsInSyncListener(eventManager, wrappedObserver)];\n        }\n      });\n    });\n  });\n  return function () {\n    wrappedObserver.mute();\n    client.asyncQueue.enqueueAndForget(function () {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        var eventManager;\n        return tslib.__generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , getEventManager(client)];\n\n            case 1:\n              eventManager = _d.sent();\n              return [2\n              /*return*/\n              , removeSnapshotsInSyncListener(eventManager, wrappedObserver)];\n          }\n        });\n      });\n    });\n  };\n}\n/**\r\n * Takes an updateFunction in which a set of reads and writes can be performed\r\n * atomically. In the updateFunction, the client can read and write values\r\n * using the supplied transaction object. After the updateFunction, all\r\n * changes will be committed. If a retryable error occurs (ex: some other\r\n * client has changed any of the data referenced), then the updateFunction\r\n * will be called again after a backoff. If the updateFunction still fails\r\n * after all retries, then the transaction will be rejected.\r\n *\r\n * The transaction object passed to the updateFunction contains methods for\r\n * accessing documents and collections. Unlike other datastore access, data\r\n * accessed with the transaction will not reflect local changes that have not\r\n * been committed. For this reason, it is required that all reads are\r\n * performed before any writes. Transactions must be performed while online.\r\n */\n\n\nfunction firestoreClientTransaction(client, updateFunction) {\n  var _this = this;\n\n  var deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var datastore;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getDatastore(client)];\n\n          case 1:\n            datastore = _d.sent();\n            new TransactionRunner(client.asyncQueue, datastore, updateFunction, deferred).run();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  });\n  return deferred.promise;\n}\n\nfunction readDocumentFromCache(localStore, docKey, result) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var document_4, e_12, firestoreError;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _d.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , localStoreReadDocument(localStore, docKey)];\n\n        case 1:\n          document_4 = _d.sent();\n\n          if (document_4.isFoundDocument()) {\n            result.resolve(document_4);\n          } else if (document_4.isNoDocument()) {\n            result.resolve(null);\n          } else {\n            result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from cache. (However, this document may ' + \"exist on the server. Run again without setting 'source' in \" + 'the GetOptions to attempt to retrieve the document from the ' + 'server.)'));\n          }\n\n          return [3\n          /*break*/\n          , 3];\n\n        case 2:\n          e_12 = _d.sent();\n          firestoreError = wrapInUserErrorIfRecoverable(e_12, \"Failed to get document '\" + docKey + \" from cache\");\n          result.reject(firestoreError);\n          return [3\n          /*break*/\n          , 3];\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Retrieves a latency-compensated document from the backend via a\r\n * SnapshotListener.\r\n */\n\n\nfunction readDocumentViaSnapshotListener(eventManager, asyncQueue, key, options, result) {\n  var wrappedObserver = new AsyncObserver({\n    next: function (snap) {\n      // Remove query first before passing event to user to avoid\n      // user actions affecting the now stale query.\n      asyncQueue.enqueueAndForget(function () {\n        return eventManagerUnlisten(eventManager, listener);\n      });\n      var exists = snap.docs.has(key);\n\n      if (!exists && snap.fromCache) {\n        // TODO(dimond): If we're online and the document doesn't\n        // exist then we resolve with a doc.exists set to false. If\n        // we're offline however, we reject the Promise in this\n        // case. Two options: 1) Cache the negative response from\n        // the server so we can deliver that even when you're\n        // offline 2) Actually reject the Promise in the online case\n        // if the document doesn't exist.\n        result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document because the client is offline.'));\n      } else if (exists && snap.fromCache && options && options.source === 'server') {\n        result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from server. (However, this ' + 'document does exist in the local cache. Run again ' + 'without setting source to \"server\" to ' + 'retrieve the cached document.)'));\n      } else {\n        result.resolve(snap);\n      }\n    },\n    error: function (e) {\n      return result.reject(e);\n    }\n  });\n  var listener = new QueryListener(newQueryForPath(key.path), wrappedObserver, {\n    includeMetadataChanges: true,\n    waitForSyncWhenOnline: true\n  });\n  return eventManagerListen(eventManager, listener);\n}\n\nfunction executeQueryFromCache(localStore, query, result) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var queryResult, view, viewDocChanges, viewChange, e_13, firestoreError;\n    return tslib.__generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _d.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , localStoreExecuteQuery(localStore, query,\n          /* usePreviousResults= */\n          true)];\n\n        case 1:\n          queryResult = _d.sent();\n          view = new View(query, queryResult.remoteKeys);\n          viewDocChanges = view.computeDocChanges(queryResult.documents);\n          viewChange = view.applyChanges(viewDocChanges,\n          /* updateLimboDocuments= */\n          false);\n          result.resolve(viewChange.snapshot);\n          return [3\n          /*break*/\n          , 3];\n\n        case 2:\n          e_13 = _d.sent();\n          firestoreError = wrapInUserErrorIfRecoverable(e_13, \"Failed to execute query '\" + query + \" against cache\");\n          result.reject(firestoreError);\n          return [3\n          /*break*/\n          , 3];\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Retrieves a latency-compensated query snapshot from the backend via a\r\n * SnapshotListener.\r\n */\n\n\nfunction executeQueryViaSnapshotListener(eventManager, asyncQueue, query, options, result) {\n  var wrappedObserver = new AsyncObserver({\n    next: function (snapshot) {\n      // Remove query first before passing event to user to avoid\n      // user actions affecting the now stale query.\n      asyncQueue.enqueueAndForget(function () {\n        return eventManagerUnlisten(eventManager, listener);\n      });\n\n      if (snapshot.fromCache && options.source === 'server') {\n        result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get documents from server. (However, these ' + 'documents may exist in the local cache. Run again ' + 'without setting source to \"server\" to ' + 'retrieve the cached documents.)'));\n      } else {\n        result.resolve(snapshot);\n      }\n    },\n    error: function (e) {\n      return result.reject(e);\n    }\n  });\n  var listener = new QueryListener(query, wrappedObserver, {\n    includeMetadataChanges: true,\n    waitForSyncWhenOnline: true\n  });\n  return eventManagerListen(eventManager, listener);\n}\n\nfunction firestoreClientLoadBundle(client, databaseId, data, resultTask) {\n  var _this = this;\n\n  var reader = createBundleReader(data, newSerializer(databaseId));\n  client.asyncQueue.enqueueAndForget(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var _d;\n\n      return tslib.__generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _d = syncEngineLoadBundle;\n            return [4\n            /*yield*/\n            , getSyncEngine(client)];\n\n          case 1:\n            _d.apply(void 0, [_e.sent(), reader, resultTask]);\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  });\n}\n\nfunction firestoreClientGetNamedQuery(client, queryName) {\n  var _this = this;\n\n  return client.asyncQueue.enqueue(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var _d;\n\n      return tslib.__generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _d = localStoreGetNamedQuery;\n            return [4\n            /*yield*/\n            , getLocalStore(client)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _d.apply(void 0, [_e.sent(), queryName])];\n        }\n      });\n    });\n  });\n}\n\nfunction createBundleReader(data, serializer) {\n  var content;\n\n  if (typeof data === 'string') {\n    content = newTextEncoder().encode(data);\n  } else {\n    content = data;\n  }\n\n  return newBundleReader(toByteStreamReader(content), serializer);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DatabaseInfo =\n/** @class */\nfunction () {\n  /**\r\n   * Constructs a DatabaseInfo using the provided host, databaseId and\r\n   * persistenceKey.\r\n   *\r\n   * @param databaseId - The database to use.\r\n   * @param appId - The Firebase App Id.\r\n   * @param persistenceKey - A unique identifier for this Firestore's local\r\n   * storage (used in conjunction with the databaseId).\r\n   * @param host - The Firestore backend host to connect to.\r\n   * @param ssl - Whether to use SSL when connecting.\r\n   * @param forceLongPolling - Whether to use the forceLongPolling option\r\n   * when using WebChannel as the network transport.\r\n   * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\r\n   * option when using WebChannel as the network transport.\r\n   * @param useFetchStreams Whether to use the Fetch API instead of\r\n   * XMLHTTPRequest\r\n   */\n  function DatabaseInfo(databaseId, appId, persistenceKey, host, ssl, forceLongPolling, autoDetectLongPolling, useFetchStreams) {\n    this.databaseId = databaseId;\n    this.appId = appId;\n    this.persistenceKey = persistenceKey;\n    this.host = host;\n    this.ssl = ssl;\n    this.forceLongPolling = forceLongPolling;\n    this.autoDetectLongPolling = autoDetectLongPolling;\n    this.useFetchStreams = useFetchStreams;\n  }\n\n  return DatabaseInfo;\n}();\n/** The default database name for a project. */\n\n\nvar DEFAULT_DATABASE_NAME = '(default)';\n/** Represents the database ID a Firestore client is associated with. */\n\nvar DatabaseId =\n/** @class */\nfunction () {\n  function DatabaseId(projectId, database) {\n    this.projectId = projectId;\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n\n  Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\n    get: function () {\n      return this.database === DEFAULT_DATABASE_NAME;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DatabaseId.prototype.isEqual = function (other) {\n    return other instanceof DatabaseId && other.projectId === this.projectId && other.database === this.database;\n  };\n\n  return DatabaseId;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG$1 = 'ComponentProvider';\n/**\r\n * An instance map that ensures only one Datastore exists per Firestore\r\n * instance.\r\n */\n\nvar datastoreInstances = new Map();\n/**\r\n * Removes all components associated with the provided instance. Must be called\r\n * when the `Firestore` instance is terminated.\r\n */\n\nfunction removeComponents(firestore) {\n  var datastore = datastoreInstances.get(firestore);\n\n  if (datastore) {\n    logDebug(LOG_TAG$1, 'Removing Datastore');\n    datastoreInstances.delete(firestore);\n    datastore.terminate();\n  }\n}\n\nfunction makeDatabaseInfo(databaseId, appId, persistenceKey, settings) {\n  return new DatabaseInfo(databaseId, appId, persistenceKey, settings.host, settings.ssl, settings.experimentalForceLongPolling, settings.experimentalAutoDetectLongPolling, settings.useFetchStreams);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar OAuthToken =\n/** @class */\nfunction () {\n  function OAuthToken(value, user) {\n    this.user = user;\n    this.type = 'OAuth';\n    this.authHeaders = {}; // Set the headers using Object Literal notation to avoid minification\n\n    this.authHeaders['Authorization'] = \"Bearer \" + value;\n  }\n\n  return OAuthToken;\n}();\n/** A CredentialsProvider that always yields an empty token. */\n\n\nvar EmptyCredentialsProvider =\n/** @class */\nfunction () {\n  function EmptyCredentialsProvider() {\n    /**\r\n     * Stores the listener registered with setChangeListener()\r\n     * This isn't actually necessary since the UID never changes, but we use this\r\n     * to verify the listen contract is adhered to in tests.\r\n     */\n    this.changeListener = null;\n  }\n\n  EmptyCredentialsProvider.prototype.getToken = function () {\n    return Promise.resolve(null);\n  };\n\n  EmptyCredentialsProvider.prototype.invalidateToken = function () {};\n\n  EmptyCredentialsProvider.prototype.setChangeListener = function (asyncQueue, changeListener) {\n    this.changeListener = changeListener; // Fire with initial user.\n\n    asyncQueue.enqueueRetryable(function () {\n      return changeListener(User.UNAUTHENTICATED);\n    });\n  };\n\n  EmptyCredentialsProvider.prototype.removeChangeListener = function () {\n    this.changeListener = null;\n  };\n\n  return EmptyCredentialsProvider;\n}();\n/**\r\n * A CredentialsProvider that always returns a constant token. Used for\r\n * emulator token mocking.\r\n */\n\n\nvar EmulatorCredentialsProvider =\n/** @class */\nfunction () {\n  function EmulatorCredentialsProvider(token) {\n    this.token = token;\n    /**\r\n     * Stores the listener registered with setChangeListener()\r\n     * This isn't actually necessary since the UID never changes, but we use this\r\n     * to verify the listen contract is adhered to in tests.\r\n     */\n\n    this.changeListener = null;\n  }\n\n  EmulatorCredentialsProvider.prototype.getToken = function () {\n    return Promise.resolve(this.token);\n  };\n\n  EmulatorCredentialsProvider.prototype.invalidateToken = function () {};\n\n  EmulatorCredentialsProvider.prototype.setChangeListener = function (asyncQueue, changeListener) {\n    var _this = this;\n\n    this.changeListener = changeListener; // Fire with initial user.\n\n    asyncQueue.enqueueRetryable(function () {\n      return changeListener(_this.token.user);\n    });\n  };\n\n  EmulatorCredentialsProvider.prototype.removeChangeListener = function () {\n    this.changeListener = null;\n  };\n\n  return EmulatorCredentialsProvider;\n}();\n\nvar FirebaseCredentialsProvider =\n/** @class */\nfunction () {\n  function FirebaseCredentialsProvider(authProvider) {\n    var _this = this;\n    /** Tracks the current User. */\n\n\n    this.currentUser = User.UNAUTHENTICATED;\n    /** Promise that allows blocking on the initialization of Firebase Auth. */\n\n    this.authDeferred = new Deferred();\n    /**\r\n     * Counter used to detect if the token changed while a getToken request was\r\n     * outstanding.\r\n     */\n\n    this.tokenCounter = 0;\n    this.forceRefresh = false;\n    this.auth = null;\n    this.asyncQueue = null;\n\n    this.tokenListener = function () {\n      _this.tokenCounter++;\n      _this.currentUser = _this.getUser();\n\n      _this.authDeferred.resolve();\n\n      if (_this.changeListener) {\n        _this.asyncQueue.enqueueRetryable(function () {\n          return _this.changeListener(_this.currentUser);\n        });\n      }\n    };\n\n    var registerAuth = function (auth) {\n      logDebug('FirebaseCredentialsProvider', 'Auth detected');\n      _this.auth = auth;\n\n      _this.auth.addAuthTokenListener(_this.tokenListener);\n    };\n\n    authProvider.onInit(function (auth) {\n      return registerAuth(auth);\n    }); // Our users can initialize Auth right after Firestore, so we give it\n    // a chance to register itself with the component framework before we\n    // determine whether to start up in unauthenticated mode.\n\n    setTimeout(function () {\n      if (!_this.auth) {\n        var auth = authProvider.getImmediate({\n          optional: true\n        });\n\n        if (auth) {\n          registerAuth(auth);\n        } else {\n          // If auth is still not available, proceed with `null` user\n          logDebug('FirebaseCredentialsProvider', 'Auth not yet detected');\n\n          _this.authDeferred.resolve();\n        }\n      }\n    }, 0);\n  }\n\n  FirebaseCredentialsProvider.prototype.getToken = function () {\n    var _this = this; // Take note of the current value of the tokenCounter so that this method\n    // can fail (with an ABORTED error) if there is a token change while the\n    // request is outstanding.\n\n\n    var initialTokenCounter = this.tokenCounter;\n    var forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n\n    if (!this.auth) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth.getToken(forceRefresh).then(function (tokenData) {\n      // Cancel the request since the token changed while the request was\n      // outstanding so the response is potentially for a previous user (which\n      // user, we can't be sure).\n      if (_this.tokenCounter !== initialTokenCounter) {\n        logDebug('FirebaseCredentialsProvider', 'getToken aborted due to token change.');\n        return _this.getToken();\n      } else {\n        if (tokenData) {\n          hardAssert(typeof tokenData.accessToken === 'string');\n          return new OAuthToken(tokenData.accessToken, _this.currentUser);\n        } else {\n          return null;\n        }\n      }\n    });\n  };\n\n  FirebaseCredentialsProvider.prototype.invalidateToken = function () {\n    this.forceRefresh = true;\n  };\n\n  FirebaseCredentialsProvider.prototype.setChangeListener = function (asyncQueue, changeListener) {\n    var _this = this;\n\n    this.asyncQueue = asyncQueue; // Blocks the AsyncQueue until the next user is available.\n\n    this.asyncQueue.enqueueRetryable(function () {\n      return tslib.__awaiter(_this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.authDeferred.promise];\n\n            case 1:\n              _d.sent();\n\n              return [4\n              /*yield*/\n              , changeListener(this.currentUser)];\n\n            case 2:\n              _d.sent();\n\n              this.changeListener = changeListener;\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  FirebaseCredentialsProvider.prototype.removeChangeListener = function () {\n    if (this.auth) {\n      this.auth.removeAuthTokenListener(this.tokenListener);\n    }\n\n    this.changeListener = function () {\n      return Promise.resolve();\n    };\n  }; // Auth.getUid() can return null even with a user logged in. It is because\n  // getUid() is synchronous, but the auth code populating Uid is asynchronous.\n  // This method should only be called in the AuthTokenListener callback\n  // to guarantee to get the actual user.\n\n\n  FirebaseCredentialsProvider.prototype.getUser = function () {\n    var currentUid = this.auth && this.auth.getUid();\n    hardAssert(currentUid === null || typeof currentUid === 'string');\n    return new User(currentUid);\n  };\n\n  return FirebaseCredentialsProvider;\n}();\n/*\r\n * FirstPartyToken provides a fresh token each time its value\r\n * is requested, because if the token is too old, requests will be rejected.\r\n * Technically this may no longer be necessary since the SDK should gracefully\r\n * recover from unauthenticated errors (see b/33147818 for context), but it's\r\n * safer to keep the implementation as-is.\r\n */\n\n\nvar FirstPartyToken =\n/** @class */\nfunction () {\n  function FirstPartyToken(gapi, sessionIndex, iamToken) {\n    this.gapi = gapi;\n    this.sessionIndex = sessionIndex;\n    this.iamToken = iamToken;\n    this.type = 'FirstParty';\n    this.user = User.FIRST_PARTY;\n  }\n\n  Object.defineProperty(FirstPartyToken.prototype, \"authHeaders\", {\n    get: function () {\n      var headers = {\n        'X-Goog-AuthUser': this.sessionIndex\n      }; // Use array notation to prevent minification\n\n      var authHeader = this.gapi['auth']['getAuthHeaderValueForFirstParty']([]);\n\n      if (authHeader) {\n        headers['Authorization'] = authHeader;\n      }\n\n      if (this.iamToken) {\n        headers['X-Goog-Iam-Authorization-Token'] = this.iamToken;\n      }\n\n      return headers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FirstPartyToken;\n}();\n/*\r\n * Provides user credentials required for the Firestore JavaScript SDK\r\n * to authenticate the user, using technique that is only available\r\n * to applications hosted by Google.\r\n */\n\n\nvar FirstPartyCredentialsProvider =\n/** @class */\nfunction () {\n  function FirstPartyCredentialsProvider(gapi, sessionIndex, iamToken) {\n    this.gapi = gapi;\n    this.sessionIndex = sessionIndex;\n    this.iamToken = iamToken;\n  }\n\n  FirstPartyCredentialsProvider.prototype.getToken = function () {\n    return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex, this.iamToken));\n  };\n\n  FirstPartyCredentialsProvider.prototype.setChangeListener = function (asyncQueue, changeListener) {\n    // Fire with initial uid.\n    asyncQueue.enqueueRetryable(function () {\n      return changeListener(User.FIRST_PARTY);\n    });\n  };\n\n  FirstPartyCredentialsProvider.prototype.removeChangeListener = function () {};\n\n  FirstPartyCredentialsProvider.prototype.invalidateToken = function () {};\n\n  return FirstPartyCredentialsProvider;\n}();\n/**\r\n * Builds a CredentialsProvider depending on the type of\r\n * the credentials passed in.\r\n */\n\n\nfunction makeCredentialsProvider(credentials) {\n  if (!credentials) {\n    return new EmptyCredentialsProvider();\n  }\n\n  switch (credentials['type']) {\n    case 'gapi':\n      var client = credentials['client']; // Make sure this really is a Gapi client.\n\n      hardAssert(!!(typeof client === 'object' && client !== null && client['auth'] && client['auth']['getAuthHeaderValueForFirstParty']));\n      return new FirstPartyCredentialsProvider(client, credentials['sessionIndex'] || '0', credentials['iamToken'] || null);\n\n    case 'provider':\n      return credentials['client'];\n\n    default:\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// settings() defaults:\n\n\nvar DEFAULT_HOST = 'firestore.googleapis.com';\nvar DEFAULT_SSL = true;\n/**\r\n * A concrete type describing all the values that can be applied via a\r\n * user-supplied firestore.Settings object. This is a separate type so that\r\n * defaults can be supplied and the value can be checked for equality.\r\n */\n\nvar FirestoreSettingsImpl =\n/** @class */\nfunction () {\n  function FirestoreSettingsImpl(settings) {\n    var _a;\n\n    if (settings.host === undefined) {\n      if (settings.ssl !== undefined) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n      }\n\n      this.host = DEFAULT_HOST;\n      this.ssl = DEFAULT_SSL;\n    } else {\n      this.host = settings.host;\n      this.ssl = (_a = settings.ssl) !== null && _a !== void 0 ? _a : DEFAULT_SSL;\n    }\n\n    this.credentials = settings.credentials;\n    this.ignoreUndefinedProperties = !!settings.ignoreUndefinedProperties;\n\n    if (settings.cacheSizeBytes === undefined) {\n      this.cacheSizeBytes = LRU_DEFAULT_CACHE_SIZE_BYTES;\n    } else {\n      if (settings.cacheSizeBytes !== LRU_COLLECTION_DISABLED && settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"cacheSizeBytes must be at least \" + LRU_MINIMUM_CACHE_SIZE_BYTES);\n      } else {\n        this.cacheSizeBytes = settings.cacheSizeBytes;\n      }\n    }\n\n    this.experimentalForceLongPolling = !!settings.experimentalForceLongPolling;\n    this.experimentalAutoDetectLongPolling = !!settings.experimentalAutoDetectLongPolling;\n    this.useFetchStreams = !!settings.useFetchStreams;\n    validateIsNotUsedTogether('experimentalForceLongPolling', settings.experimentalForceLongPolling, 'experimentalAutoDetectLongPolling', settings.experimentalAutoDetectLongPolling);\n  }\n\n  FirestoreSettingsImpl.prototype.isEqual = function (other) {\n    return this.host === other.host && this.ssl === other.ssl && this.credentials === other.credentials && this.cacheSizeBytes === other.cacheSizeBytes && this.experimentalForceLongPolling === other.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === other.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === other.ignoreUndefinedProperties && this.useFetchStreams === other.useFetchStreams;\n  };\n\n  return FirestoreSettingsImpl;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The Cloud Firestore service interface.\r\n *\r\n * Do not call this constructor directly. Instead, use {@link getFirestore}.\r\n */\n\n\nvar Firestore$2 =\n/** @class */\nfunction () {\n  /** @hideconstructor */\n  function Firestore$2(databaseIdOrApp, authProvider) {\n    /**\r\n     * Whether it's a Firestore or Firestore Lite instance.\r\n     */\n    this.type = 'firestore-lite';\n    this._persistenceKey = '(lite)';\n    this._settings = new FirestoreSettingsImpl({});\n    this._settingsFrozen = false;\n\n    if (databaseIdOrApp instanceof DatabaseId) {\n      this._databaseId = databaseIdOrApp;\n      this._credentials = new EmptyCredentialsProvider();\n    } else {\n      this._app = databaseIdOrApp;\n      this._databaseId = databaseIdFromApp(databaseIdOrApp);\n      this._credentials = new FirebaseCredentialsProvider(authProvider);\n    }\n  }\n\n  Object.defineProperty(Firestore$2.prototype, \"app\", {\n    /**\r\n     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\r\n     * instance.\r\n     */\n    get: function () {\n      if (!this._app) {\n        throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" + 'not available');\n      }\n\n      return this._app;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Firestore$2.prototype, \"_initialized\", {\n    get: function () {\n      return this._settingsFrozen;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Firestore$2.prototype, \"_terminated\", {\n    get: function () {\n      return this._terminateTask !== undefined;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Firestore$2.prototype._setSettings = function (settings) {\n    if (this._settingsFrozen) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' + 'be changed. You can only modify settings before calling any other ' + 'methods on a Firestore object.');\n    }\n\n    this._settings = new FirestoreSettingsImpl(settings);\n\n    if (settings.credentials !== undefined) {\n      this._credentials = makeCredentialsProvider(settings.credentials);\n    }\n  };\n\n  Firestore$2.prototype._getSettings = function () {\n    return this._settings;\n  };\n\n  Firestore$2.prototype._freezeSettings = function () {\n    this._settingsFrozen = true;\n    return this._settings;\n  };\n\n  Firestore$2.prototype._delete = function () {\n    if (!this._terminateTask) {\n      this._terminateTask = this._terminate();\n    }\n\n    return this._terminateTask;\n  };\n  /** Returns a JSON-serializable representation of this Firestore instance. */\n\n\n  Firestore$2.prototype.toJSON = function () {\n    return {\n      app: this._app,\n      databaseId: this._databaseId,\n      settings: this._settings\n    };\n  };\n  /**\r\n   * Terminates all components used by this client. Subclasses can override\r\n   * this method to clean up their own dependencies, but must also call this\r\n   * method.\r\n   *\r\n   * Only ever called once.\r\n   */\n\n\n  Firestore$2.prototype._terminate = function () {\n    removeComponents(this);\n    return Promise.resolve();\n  };\n\n  return Firestore$2;\n}();\n\nfunction databaseIdFromApp(app) {\n  if (!Object.prototype.hasOwnProperty.apply(app.options, ['projectId'])) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n  }\n\n  return new DatabaseId(app.options.projectId);\n}\n/**\r\n * Modify this instance to communicate with the Cloud Firestore emulator.\r\n *\r\n * Note: This must be called before this instance has been used to do any\r\n * operations.\r\n *\r\n * @param firestore - The Firestore instance to configure to connect to the\r\n * emulator.\r\n * @param host - the emulator host (ex: localhost).\r\n * @param port - the emulator port (ex: 9000).\r\n * @param options.mockUserToken - the mock auth token to use for unit testing\r\n * Security Rules.\r\n */\n\n\nfunction connectFirestoreEmulator(firestore, host, port, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  firestore = cast(firestore, Firestore$2);\n\n  var settings = firestore._getSettings();\n\n  if (settings.host !== DEFAULT_HOST && settings.host !== host) {\n    logWarn('Host has been set in both settings() and useEmulator(), emulator host ' + 'will be used');\n  }\n\n  firestore._setSettings(Object.assign(Object.assign({}, settings), {\n    host: host + \":\" + port,\n    ssl: false\n  }));\n\n  if (options.mockUserToken) {\n    // Let createMockUserToken validate first (catches common mistakes like\n    // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n    var token = util.createMockUserToken(options.mockUserToken);\n    var uid = options.mockUserToken.sub || options.mockUserToken.user_id;\n\n    if (!uid) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n    }\n\n    firestore._credentials = new EmulatorCredentialsProvider(new OAuthToken(token, new User(uid)));\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A `DocumentReference` refers to a document location in a Firestore database\r\n * and can be used to write, read, or listen to the location. The document at\r\n * the referenced location may or may not exist.\r\n */\n\n\nvar DocumentReference$1 =\n/** @class */\nfunction () {\n  /** @hideconstructor */\n  function DocumentReference$1(firestore,\n  /**\r\n   * If provided, the `FirestoreDataConverter` associated with this instance.\r\n   */\n  converter, _key) {\n    this.converter = converter;\n    this._key = _key;\n    /** The type of this Firestore reference. */\n\n    this.type = 'document';\n    this.firestore = firestore;\n  }\n\n  Object.defineProperty(DocumentReference$1.prototype, \"_path\", {\n    get: function () {\n      return this._key.path;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DocumentReference$1.prototype, \"id\", {\n    /**\r\n     * The document's identifier within its collection.\r\n     */\n    get: function () {\n      return this._key.path.lastSegment();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DocumentReference$1.prototype, \"path\", {\n    /**\r\n     * A string representing the path of the referenced document (relative\r\n     * to the root of the database).\r\n     */\n    get: function () {\n      return this._key.path.canonicalString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DocumentReference$1.prototype, \"parent\", {\n    /**\r\n     * The collection this `DocumentReference` belongs to.\r\n     */\n    get: function () {\n      return new CollectionReference$1(this.firestore, this.converter, this._key.path.popLast());\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DocumentReference$1.prototype.withConverter = function (converter) {\n    return new DocumentReference$1(this.firestore, converter, this._key);\n  };\n\n  return DocumentReference$1;\n}();\n/**\r\n * A `Query` refers to a Query which you can read or listen to. You can also\r\n * construct refined `Query` objects by adding filters and ordering.\r\n */\n\n\nvar Query$1 =\n/** @class */\nfunction () {\n  // This is the lite version of the Query class in the main SDK.\n\n  /** @hideconstructor protected */\n  function Query$1(firestore,\n  /**\r\n   * If provided, the `FirestoreDataConverter` associated with this instance.\r\n   */\n  converter, _query) {\n    this.converter = converter;\n    this._query = _query;\n    /** The type of this Firestore reference. */\n\n    this.type = 'query';\n    this.firestore = firestore;\n  }\n\n  Query$1.prototype.withConverter = function (converter) {\n    return new Query$1(this.firestore, converter, this._query);\n  };\n\n  return Query$1;\n}();\n/**\r\n * A `CollectionReference` object can be used for adding documents, getting\r\n * document references, and querying for documents (using {@link query}).\r\n */\n\n\nvar CollectionReference$1 =\n/** @class */\nfunction (_super) {\n  tslib.__extends(CollectionReference$1, _super);\n  /** @hideconstructor */\n\n\n  function CollectionReference$1(firestore, converter, _path) {\n    var _this = _super.call(this, firestore, converter, newQueryForPath(_path)) || this;\n\n    _this._path = _path;\n    /** The type of this Firestore reference. */\n\n    _this.type = 'collection';\n    return _this;\n  }\n\n  Object.defineProperty(CollectionReference$1.prototype, \"id\", {\n    /** The collection's identifier. */\n    get: function () {\n      return this._query.path.lastSegment();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CollectionReference$1.prototype, \"path\", {\n    /**\r\n     * A string representing the path of the referenced collection (relative\r\n     * to the root of the database).\r\n     */\n    get: function () {\n      return this._query.path.canonicalString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CollectionReference$1.prototype, \"parent\", {\n    /**\r\n     * A reference to the containing `DocumentReference` if this is a\r\n     * subcollection. If this isn't a subcollection, the reference is null.\r\n     */\n    get: function () {\n      var parentPath = this._path.popLast();\n\n      if (parentPath.isEmpty()) {\n        return null;\n      } else {\n        return new DocumentReference$1(this.firestore,\n        /* converter= */\n        null, new DocumentKey(parentPath));\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  CollectionReference$1.prototype.withConverter = function (converter) {\n    return new CollectionReference$1(this.firestore, converter, this._path);\n  };\n\n  return CollectionReference$1;\n}(Query$1);\n\nfunction collection(parent, path) {\n  var pathSegments = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    pathSegments[_i - 2] = arguments[_i];\n  }\n\n  parent = util.getModularInstance(parent);\n  validateNonEmptyArgument('collection', 'path', path);\n\n  if (parent instanceof Firestore$2) {\n    var absolutePath = ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path], pathSegments));\n    validateCollectionPath(absolutePath);\n    return new CollectionReference$1(parent,\n    /* converter= */\n    null, absolutePath);\n  } else {\n    if (!(parent instanceof DocumentReference$1) && !(parent instanceof CollectionReference$1)) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Expected first argument to collection() to be a CollectionReference, ' + 'a DocumentReference or FirebaseFirestore');\n    }\n\n    var absolutePath = ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([parent.path], pathSegments)).child(ResourcePath.fromString(path));\n    validateCollectionPath(absolutePath);\n    return new CollectionReference$1(parent.firestore,\n    /* converter= */\n    null, absolutePath);\n  }\n} // TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n\n/**\r\n * Creates and returns a new `Query` instance that includes all documents in the\r\n * database that are contained in a collection or subcollection with the\r\n * given `collectionId`.\r\n *\r\n * @param firestore - A reference to the root Firestore instance.\r\n * @param collectionId - Identifies the collections to query over. Every\r\n * collection or subcollection with this ID as the last segment of its path\r\n * will be included. Cannot contain a slash.\r\n * @returns The created `Query`.\r\n */\n\n\nfunction collectionGroup(firestore, collectionId) {\n  firestore = cast(firestore, Firestore$2);\n  validateNonEmptyArgument('collectionGroup', 'collection id', collectionId);\n\n  if (collectionId.indexOf('/') >= 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid collection ID '\" + collectionId + \"' passed to function \" + \"collectionGroup(). Collection IDs must not contain '/'.\");\n  }\n\n  return new Query$1(firestore,\n  /* converter= */\n  null, newQueryForCollectionGroup(collectionId));\n}\n\nfunction doc(parent, path) {\n  var pathSegments = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    pathSegments[_i - 2] = arguments[_i];\n  }\n\n  parent = util.getModularInstance(parent); // We allow omission of 'pathString' but explicitly prohibit passing in both\n  // 'undefined' and 'null'.\n\n  if (arguments.length === 1) {\n    path = AutoId.newId();\n  }\n\n  validateNonEmptyArgument('doc', 'path', path);\n\n  if (parent instanceof Firestore$2) {\n    var absolutePath = ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path], pathSegments));\n    validateDocumentPath(absolutePath);\n    return new DocumentReference$1(parent,\n    /* converter= */\n    null, new DocumentKey(absolutePath));\n  } else {\n    if (!(parent instanceof DocumentReference$1) && !(parent instanceof CollectionReference$1)) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Expected first argument to collection() to be a CollectionReference, ' + 'a DocumentReference or FirebaseFirestore');\n    }\n\n    var absolutePath = parent._path.child(ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path], pathSegments)));\n\n    validateDocumentPath(absolutePath);\n    return new DocumentReference$1(parent.firestore, parent instanceof CollectionReference$1 ? parent.converter : null, new DocumentKey(absolutePath));\n  }\n}\n/**\r\n * Returns true if the provided references are equal.\r\n *\r\n * @param left - A reference to compare.\r\n * @param right - A reference to compare.\r\n * @returns true if the references point to the same location in the same\r\n * Firestore database.\r\n */\n\n\nfunction refEqual(left, right) {\n  left = util.getModularInstance(left);\n  right = util.getModularInstance(right);\n\n  if ((left instanceof DocumentReference$1 || left instanceof CollectionReference$1) && (right instanceof DocumentReference$1 || right instanceof CollectionReference$1)) {\n    return left.firestore === right.firestore && left.path === right.path && left.converter === right.converter;\n  }\n\n  return false;\n}\n/**\r\n * Returns true if the provided queries point to the same collection and apply\r\n * the same constraints.\r\n *\r\n * @param left - A `Query` to compare.\r\n * @param right - A `Query` to compare.\r\n * @returns true if the references point to the same location in the same\r\n * Firestore database.\r\n */\n\n\nfunction queryEqual(left, right) {\n  left = util.getModularInstance(left);\n  right = util.getModularInstance(right);\n\n  if (left instanceof Query$1 && right instanceof Query$1) {\n    return left.firestore === right.firestore && queryEquals(left._query, right._query) && left.converter === right.converter;\n  }\n\n  return false;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_TAG = 'AsyncQueue';\n\nvar AsyncQueueImpl =\n/** @class */\nfunction () {\n  function AsyncQueueImpl() {\n    var _this = this; // The last promise in the queue.\n\n\n    this.tail = Promise.resolve(); // A list of retryable operations. Retryable operations are run in order and\n    // retried with backoff.\n\n    this.retryableOps = []; // Is this AsyncQueue being shut down? Once it is set to true, it will not\n    // be changed again.\n\n    this._isShuttingDown = false; // Operations scheduled to be queued in the future. Operations are\n    // automatically removed after they are run or canceled.\n\n    this.delayedOperations = []; // visible for testing\n\n    this.failure = null; // Flag set while there's an outstanding AsyncQueue operation, used for\n    // assertion sanity-checks.\n\n    this.operationInProgress = false; // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n\n    this.skipNonRestrictedTasks = false; // List of TimerIds to fast-forward delays for.\n\n    this.timerIdsToSkip = []; // Backoff timer used to schedule retries for retryable operations\n\n    this.backoff = new ExponentialBackoff(this, \"async_queue_retry\"\n    /* AsyncQueueRetry */\n    ); // Visibility handler that triggers an immediate retry of all retryable\n    // operations. Meant to speed up recovery when we regain file system access\n    // after page comes into foreground.\n\n    this.visibilityHandler = function () {\n      _this.backoff.skipBackoff();\n    };\n  }\n\n  Object.defineProperty(AsyncQueueImpl.prototype, \"isShuttingDown\", {\n    get: function () {\n      return this._isShuttingDown;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\r\n   * we ignore the Promise result).\r\n   */\n\n  AsyncQueueImpl.prototype.enqueueAndForget = function (op) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(op);\n  };\n\n  AsyncQueueImpl.prototype.enqueueAndForgetEvenWhileRestricted = function (op) {\n    this.verifyNotFailed(); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n    this.enqueueInternal(op);\n  };\n\n  AsyncQueueImpl.prototype.enterRestrictedMode = function (purgeExistingTasks) {\n    if (!this._isShuttingDown) {\n      this._isShuttingDown = true;\n      this.skipNonRestrictedTasks = purgeExistingTasks || false;\n    }\n  };\n\n  AsyncQueueImpl.prototype.enqueue = function (op) {\n    var _this = this;\n\n    this.verifyNotFailed();\n\n    if (this._isShuttingDown) {\n      // Return a Promise which never resolves.\n      return new Promise(function () {});\n    } // Create a deferred Promise that we can return to the callee. This\n    // allows us to return a \"hanging Promise\" only to the callee and still\n    // advance the queue even when the operation is not run.\n\n\n    var task = new Deferred();\n    return this.enqueueInternal(function () {\n      if (_this._isShuttingDown && _this.skipNonRestrictedTasks) {\n        // We do not resolve 'task'\n        return Promise.resolve();\n      }\n\n      op().then(task.resolve, task.reject);\n      return task.promise;\n    }).then(function () {\n      return task.promise;\n    });\n  };\n\n  AsyncQueueImpl.prototype.enqueueRetryable = function (op) {\n    var _this = this;\n\n    this.enqueueAndForget(function () {\n      _this.retryableOps.push(op);\n\n      return _this.retryNextOp();\n    });\n  };\n  /**\r\n   * Runs the next operation from the retryable queue. If the operation fails,\r\n   * reschedules with backoff.\r\n   */\n\n\n  AsyncQueueImpl.prototype.retryNextOp = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var e_14;\n\n      var _this = this;\n\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (this.retryableOps.length === 0) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.retryableOps[0]()];\n\n          case 2:\n            _d.sent();\n\n            this.retryableOps.shift();\n            this.backoff.reset();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_14 = _d.sent();\n\n            if (isIndexedDbTransactionError(e_14)) {\n              logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e_14);\n            } else {\n              throw e_14; // Failure will be handled by AsyncQueue\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            if (this.retryableOps.length > 0) {\n              // If there are additional operations, we re-schedule `retryNextOp()`.\n              // This is necessary to run retryable operations that failed during\n              // their initial attempt since we don't know whether they are already\n              // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n              // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n              // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n              // call scheduled here.\n              // Since `backoffAndRun()` cancels an existing backoff and schedules a\n              // new backoff on every call, there is only ever a single additional\n              // operation in the queue.\n              this.backoff.backoffAndRun(function () {\n                return _this.retryNextOp();\n              });\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncQueueImpl.prototype.enqueueInternal = function (op) {\n    var _this = this;\n\n    var newTail = this.tail.then(function () {\n      _this.operationInProgress = true;\n      return op().catch(function (error) {\n        _this.failure = error;\n        _this.operationInProgress = false;\n        var message = getMessageOrStack(error);\n        logError('INTERNAL UNHANDLED ERROR: ', message); // Re-throw the error so that this.tail becomes a rejected Promise and\n        // all further attempts to chain (via .then) will just short-circuit\n        // and return the rejected Promise.\n\n        throw error;\n      }).then(function (result) {\n        _this.operationInProgress = false;\n        return result;\n      });\n    });\n    this.tail = newTail;\n    return newTail;\n  };\n\n  AsyncQueueImpl.prototype.enqueueAfterDelay = function (timerId, delayMs, op) {\n    var _this = this;\n\n    this.verifyNotFailed(); // Fast-forward delays for timerIds that have been overriden.\n\n    if (this.timerIdsToSkip.indexOf(timerId) > -1) {\n      delayMs = 0;\n    }\n\n    var delayedOp = DelayedOperation.createAndSchedule(this, timerId, delayMs, op, function (removedOp) {\n      return _this.removeDelayedOperation(removedOp);\n    });\n    this.delayedOperations.push(delayedOp);\n    return delayedOp;\n  };\n\n  AsyncQueueImpl.prototype.verifyNotFailed = function () {\n    if (this.failure) {\n      fail();\n    }\n  };\n\n  AsyncQueueImpl.prototype.verifyOperationInProgress = function () {};\n  /**\r\n   * Waits until all currently queued tasks are finished executing. Delayed\r\n   * operations are not run.\r\n   */\n\n\n  AsyncQueueImpl.prototype.drain = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var currentTail;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            currentTail = this.tail;\n            return [4\n            /*yield*/\n            , currentTail];\n\n          case 1:\n            _d.sent();\n\n            _d.label = 2;\n\n          case 2:\n            if (currentTail !== this.tail) return [3\n            /*break*/\n            , 0];\n            _d.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * For Tests: Determine if a delayed operation with a particular TimerId\r\n   * exists.\r\n   */\n\n\n  AsyncQueueImpl.prototype.containsDelayedOperation = function (timerId) {\n    for (var _i = 0, _d = this.delayedOperations; _i < _d.length; _i++) {\n      var op = _d[_i];\n\n      if (op.timerId === timerId) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * For Tests: Runs some or all delayed operations early.\r\n   *\r\n   * @param lastTimerId - Delayed operations up to and including this TimerId\r\n   * will be drained. Pass TimerId.All to run all delayed operations.\r\n   * @returns a Promise that resolves once all operations have been run.\r\n   */\n\n\n  AsyncQueueImpl.prototype.runAllDelayedOperationsUntil = function (lastTimerId) {\n    var _this = this; // Note that draining may generate more delayed ops, so we do that first.\n\n\n    return this.drain().then(function () {\n      // Run ops in the same order they'd run if they ran naturally.\n      _this.delayedOperations.sort(function (a, b) {\n        return a.targetTimeMs - b.targetTimeMs;\n      });\n\n      for (var _i = 0, _d = _this.delayedOperations; _i < _d.length; _i++) {\n        var op = _d[_i];\n        op.skipDelay();\n\n        if (lastTimerId !== \"all\"\n        /* All */\n        && op.timerId === lastTimerId) {\n          break;\n        }\n      }\n\n      return _this.drain();\n    });\n  };\n  /**\r\n   * For Tests: Skip all subsequent delays for a timer id.\r\n   */\n\n\n  AsyncQueueImpl.prototype.skipDelaysForTimerId = function (timerId) {\n    this.timerIdsToSkip.push(timerId);\n  };\n  /** Called once a DelayedOperation is run or canceled. */\n\n\n  AsyncQueueImpl.prototype.removeDelayedOperation = function (op) {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    var index = this.delayedOperations.indexOf(op);\n    this.delayedOperations.splice(index, 1);\n  };\n\n  return AsyncQueueImpl;\n}();\n\nfunction newAsyncQueue() {\n  return new AsyncQueueImpl();\n}\n/**\r\n * Chrome includes Error.message in Error.stack. Other browsers do not.\r\n * This returns expected output of message + stack when available.\r\n * @param error - Error or FirestoreError\r\n */\n\n\nfunction getMessageOrStack(error) {\n  var message = error.message || '';\n\n  if (error.stack) {\n    if (error.stack.includes(error.message)) {\n      message = error.stack;\n    } else {\n      message = error.message + '\\n' + error.stack;\n    }\n  }\n\n  return message;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents the task of loading a Firestore bundle. It provides progress of bundle\r\n * loading, as well as task completion and error events.\r\n *\r\n * The API is compatible with `Promise<LoadBundleTaskProgress>`.\r\n */\n\n\nvar LoadBundleTask =\n/** @class */\nfunction () {\n  function LoadBundleTask() {\n    this._progressObserver = {};\n    this._taskCompletionResolver = new Deferred();\n    this._lastProgress = {\n      taskState: 'Running',\n      totalBytes: 0,\n      totalDocuments: 0,\n      bytesLoaded: 0,\n      documentsLoaded: 0\n    };\n  }\n  /**\r\n   * Registers functions to listen to bundle loading progress events.\r\n   * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur\r\n   *   each time a Firestore document is loaded from the bundle.\r\n   * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the\r\n   *   error, and there should be no more updates after this.\r\n   * @param complete - Called when the loading task is complete.\r\n   */\n\n\n  LoadBundleTask.prototype.onProgress = function (next, error, complete) {\n    this._progressObserver = {\n      next: next,\n      error: error,\n      complete: complete\n    };\n  };\n  /**\r\n   * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.\r\n   *\r\n   * @param onRejected - Called when an error occurs during bundle loading.\r\n   */\n\n\n  LoadBundleTask.prototype.catch = function (onRejected) {\n    return this._taskCompletionResolver.promise.catch(onRejected);\n  };\n  /**\r\n   * Implements the `Promise<LoadBundleTaskProgress>.then` interface.\r\n   *\r\n   * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.\r\n   *   The update will always have its `taskState` set to `\"Success\"`.\r\n   * @param onRejected - Called when an error occurs during bundle loading.\r\n   */\n\n\n  LoadBundleTask.prototype.then = function (onFulfilled, onRejected) {\n    return this._taskCompletionResolver.promise.then(onFulfilled, onRejected);\n  };\n  /**\r\n   * Notifies all observers that bundle loading has completed, with a provided\r\n   * `LoadBundleTaskProgress` object.\r\n   *\r\n   * @private\r\n   */\n\n\n  LoadBundleTask.prototype._completeWith = function (progress) {\n    this._updateProgress(progress);\n\n    if (this._progressObserver.complete) {\n      this._progressObserver.complete();\n    }\n\n    this._taskCompletionResolver.resolve(progress);\n  };\n  /**\r\n   * Notifies all observers that bundle loading has failed, with a provided\r\n   * `Error` as the reason.\r\n   *\r\n   * @private\r\n   */\n\n\n  LoadBundleTask.prototype._failWith = function (error) {\n    this._lastProgress.taskState = 'Error';\n\n    if (this._progressObserver.next) {\n      this._progressObserver.next(this._lastProgress);\n    }\n\n    if (this._progressObserver.error) {\n      this._progressObserver.error(error);\n    }\n\n    this._taskCompletionResolver.reject(error);\n  };\n  /**\r\n   * Notifies a progress update of loading a bundle.\r\n   * @param progress - The new progress.\r\n   *\r\n   * @private\r\n   */\n\n\n  LoadBundleTask.prototype._updateProgress = function (progress) {\n    this._lastProgress = progress;\n\n    if (this._progressObserver.next) {\n      this._progressObserver.next(progress);\n    }\n  };\n\n  return LoadBundleTask;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** DOMException error code constants. */\n\n\nvar DOM_EXCEPTION_INVALID_STATE = 11;\nvar DOM_EXCEPTION_ABORTED = 20;\nvar DOM_EXCEPTION_QUOTA_EXCEEDED = 22;\n/**\r\n * Constant used to indicate the LRU garbage collection should be disabled.\r\n * Set this value as the `cacheSizeBytes` on the settings passed to the\r\n * `Firestore` instance.\r\n */\n\nvar CACHE_SIZE_UNLIMITED = LRU_COLLECTION_DISABLED;\n/**\r\n * The Cloud Firestore service interface.\r\n *\r\n * Do not call this constructor directly. Instead, use {@link getFirestore}.\r\n */\n\nvar Firestore$1 =\n/** @class */\nfunction (_super) {\n  tslib.__extends(Firestore$1, _super);\n  /** @hideconstructor */\n\n\n  function Firestore$1(databaseIdOrApp, authProvider) {\n    var _this = _super.call(this, databaseIdOrApp, authProvider) || this;\n    /**\r\n     * Whether it's a Firestore or Firestore Lite instance.\r\n     */\n\n\n    _this.type = 'firestore';\n    _this._queue = newAsyncQueue();\n    _this._persistenceKey = 'name' in databaseIdOrApp ? databaseIdOrApp.name : '[DEFAULT]';\n    return _this;\n  }\n\n  Firestore$1.prototype._terminate = function () {\n    if (!this._firestoreClient) {\n      // The client must be initialized to ensure that all subsequent API\n      // usage throws an exception.\n      configureFirestore(this);\n    }\n\n    return this._firestoreClient.terminate();\n  };\n\n  return Firestore$1;\n}(Firestore$2);\n/**\r\n * @internal\r\n */\n\n\nfunction ensureFirestoreConfigured(firestore) {\n  if (!firestore._firestoreClient) {\n    configureFirestore(firestore);\n  }\n\n  firestore._firestoreClient.verifyNotTerminated();\n\n  return firestore._firestoreClient;\n}\n\nfunction configureFirestore(firestore) {\n  var _a;\n\n  var settings = firestore._freezeSettings();\n\n  var databaseInfo = makeDatabaseInfo(firestore._databaseId, ((_a = firestore._app) === null || _a === void 0 ? void 0 : _a.options.appId) || '', firestore._persistenceKey, settings);\n  firestore._firestoreClient = new FirestoreClient(firestore._credentials, firestore._queue, databaseInfo);\n}\n/**\r\n * Attempts to enable persistent storage, if possible.\r\n *\r\n * Must be called before any other functions (other than\r\n * {@link initializeFirestore}, {@link getFirestore} or\r\n * {@link clearIndexedDbPersistence}.\r\n *\r\n * If this fails, `enableIndexedDbPersistence()` will reject the promise it\r\n * returns. Note that even after this failure, the `Firestore` instance will\r\n * remain usable, however offline persistence will be disabled.\r\n *\r\n * There are several reasons why this can fail, which can be identified by\r\n * the `code` on the error.\r\n *\r\n *   * failed-precondition: The app is already open in another browser tab.\r\n *   * unimplemented: The browser is incompatible with the offline\r\n *     persistence implementation.\r\n *\r\n * @param firestore - The `Firestore` instance to enable persistence for.\r\n * @param persistenceSettings - Optional settings object to configure\r\n * persistence.\r\n * @returns A promise that represents successfully enabling persistent storage.\r\n */\n\n\nfunction enableIndexedDbPersistence(firestore, persistenceSettings) {\n  firestore = cast(firestore, Firestore$1);\n  verifyNotInitialized(firestore);\n  var client = ensureFirestoreConfigured(firestore);\n\n  var settings = firestore._freezeSettings();\n\n  var onlineComponentProvider = new OnlineComponentProvider();\n  var offlineComponentProvider = new IndexedDbOfflineComponentProvider(onlineComponentProvider, settings.cacheSizeBytes, persistenceSettings === null || persistenceSettings === void 0 ? void 0 : persistenceSettings.forceOwnership);\n  return setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider);\n}\n/**\r\n * Attempts to enable multi-tab persistent storage, if possible. If enabled\r\n * across all tabs, all operations share access to local persistence, including\r\n * shared execution of queries and latency-compensated local document updates\r\n * across all connected instances.\r\n *\r\n * If this fails, `enableMultiTabIndexedDbPersistence()` will reject the promise\r\n * it returns. Note that even after this failure, the `Firestore` instance will\r\n * remain usable, however offline persistence will be disabled.\r\n *\r\n * There are several reasons why this can fail, which can be identified by\r\n * the `code` on the error.\r\n *\r\n *   * failed-precondition: The app is already open in another browser tab and\r\n *     multi-tab is not enabled.\r\n *   * unimplemented: The browser is incompatible with the offline\r\n *     persistence implementation.\r\n *\r\n * @param firestore - The `Firestore` instance to enable persistence for.\r\n * @returns A promise that represents successfully enabling persistent\r\n * storage.\r\n */\n\n\nfunction enableMultiTabIndexedDbPersistence(firestore) {\n  firestore = cast(firestore, Firestore$1);\n  verifyNotInitialized(firestore);\n  var client = ensureFirestoreConfigured(firestore);\n\n  var settings = firestore._freezeSettings();\n\n  var onlineComponentProvider = new OnlineComponentProvider();\n  var offlineComponentProvider = new MultiTabOfflineComponentProvider(onlineComponentProvider, settings.cacheSizeBytes);\n  return setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider);\n}\n/**\r\n * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.\r\n * If the operation fails with a recoverable error (see\r\n * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected\r\n * but the client remains usable.\r\n */\n\n\nfunction setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider) {\n  var _this = this;\n\n  var persistenceResult = new Deferred();\n  return client.asyncQueue.enqueue(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var e_15;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _d.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , setOfflineComponentProvider(client, offlineComponentProvider)];\n\n          case 1:\n            _d.sent();\n\n            return [4\n            /*yield*/\n            , setOnlineComponentProvider(client, onlineComponentProvider)];\n\n          case 2:\n            _d.sent();\n\n            persistenceResult.resolve();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_15 = _d.sent();\n\n            if (!canFallbackFromIndexedDbError(e_15)) {\n              throw e_15;\n            }\n\n            console.warn('Error enabling offline persistence. Falling back to ' + 'persistence disabled: ' + e_15);\n            persistenceResult.reject(e_15);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }).then(function () {\n    return persistenceResult.promise;\n  });\n}\n/**\r\n * Decides whether the provided error allows us to gracefully disable\r\n * persistence (as opposed to crashing the client).\r\n */\n\n\nfunction canFallbackFromIndexedDbError(error) {\n  if (error.name === 'FirebaseError') {\n    return error.code === Code.FAILED_PRECONDITION || error.code === Code.UNIMPLEMENTED;\n  } else if (typeof DOMException !== 'undefined' && error instanceof DOMException) {\n    // There are a few known circumstances where we can open IndexedDb but\n    // trying to read/write will fail (e.g. quota exceeded). For\n    // well-understood cases, we attempt to detect these and then gracefully\n    // fall back to memory persistence.\n    // NOTE: Rather than continue to add to this list, we could decide to\n    // always fall back, with the risk that we might accidentally hide errors\n    // representing actual SDK bugs.\n    return (// When the browser is out of quota we could get either quota exceeded\n      // or an aborted error depending on whether the error happened during\n      // schema migration.\n      error.code === DOM_EXCEPTION_QUOTA_EXCEEDED || error.code === DOM_EXCEPTION_ABORTED || // Firefox Private Browsing mode disables IndexedDb and returns\n      // INVALID_STATE for any usage.\n      error.code === DOM_EXCEPTION_INVALID_STATE\n    );\n  }\n\n  return true;\n}\n/**\r\n * Clears the persistent storage. This includes pending writes and cached\r\n * documents.\r\n *\r\n * Must be called while the `Firestore` instance is not started (after the app is\r\n * terminated or when the app is first initialized). On startup, this function\r\n * must be called before other functions (other than {@link\r\n * initializeFirestore} or {@link getFirestore})). If the `Firestore`\r\n * instance is still running, the promise will be rejected with the error code\r\n * of `failed-precondition`.\r\n *\r\n * Note: `clearIndexedDbPersistence()` is primarily intended to help write\r\n * reliable tests that use Cloud Firestore. It uses an efficient mechanism for\r\n * dropping existing data but does not attempt to securely overwrite or\r\n * otherwise make cached data unrecoverable. For applications that are sensitive\r\n * to the disclosure of cached data in between user sessions, we strongly\r\n * recommend not enabling persistence at all.\r\n *\r\n * @param firestore - The `Firestore` instance to clear persistence for.\r\n * @returns A promise that is resolved when the persistent storage is\r\n * cleared. Otherwise, the promise is rejected with an error.\r\n */\n\n\nfunction clearIndexedDbPersistence(firestore) {\n  var _this = this;\n\n  if (firestore._initialized && !firestore._terminated) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, 'Persistence can only be cleared before a Firestore instance is ' + 'initialized or after it is terminated.');\n  }\n\n  var deferred = new Deferred();\n\n  firestore._queue.enqueueAndForgetEvenWhileRestricted(function () {\n    return tslib.__awaiter(_this, void 0, void 0, function () {\n      var e_16;\n      return tslib.__generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _d.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , indexedDbClearPersistence(indexedDbStoragePrefix(firestore._databaseId, firestore._persistenceKey))];\n\n          case 1:\n            _d.sent();\n\n            deferred.resolve();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            e_16 = _d.sent();\n            deferred.reject(e_16);\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  });\n\n  return deferred.promise;\n}\n/**\r\n * Waits until all currently pending writes for the active user have been\r\n * acknowledged by the backend.\r\n *\r\n * The returned Promise resolves immediately if there are no outstanding writes.\r\n * Otherwise, the Promise waits for all previously issued writes (including\r\n * those written in a previous app session), but it does not wait for writes\r\n * that were added after the function is called. If you want to wait for\r\n * additional writes, call `waitForPendingWrites()` again.\r\n *\r\n * Any outstanding `waitForPendingWrites()` Promises are rejected during user\r\n * changes.\r\n *\r\n * @returns A Promise which resolves when all currently pending writes have been\r\n * acknowledged by the backend.\r\n */\n\n\nfunction waitForPendingWrites(firestore) {\n  firestore = cast(firestore, Firestore$1);\n  var client = ensureFirestoreConfigured(firestore);\n  return firestoreClientWaitForPendingWrites(client);\n}\n/**\r\n * Re-enables use of the network for this Firestore instance after a prior\r\n * call to {@link disableNetwork}.\r\n *\r\n * @returns A promise that is resolved once the network has been enabled.\r\n */\n\n\nfunction enableNetwork(firestore) {\n  firestore = cast(firestore, Firestore$1);\n  var client = ensureFirestoreConfigured(firestore);\n  return firestoreClientEnableNetwork(client);\n}\n/**\r\n * Disables network usage for this instance. It can be re-enabled via {@link\r\n * enableNetwork}. While the network is disabled, any snapshot listeners,\r\n * `getDoc()` or `getDocs()` calls will return results from cache, and any write\r\n * operations will be queued until the network is restored.\r\n *\r\n * @returns A promise that is resolved once the network has been disabled.\r\n */\n\n\nfunction disableNetwork(firestore) {\n  firestore = cast(firestore, Firestore$1);\n  var client = ensureFirestoreConfigured(firestore);\n  return firestoreClientDisableNetwork(client);\n}\n/**\r\n * Loads a Firestore bundle into the local cache.\r\n *\r\n * @param firestore - The `Firestore` instance to load bundles for for.\r\n * @param bundleData - An object representing the bundle to be loaded. Valid objects are\r\n *   `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.\r\n *\r\n * @returns\r\n *   A `LoadBundleTask` object, which notifies callers with progress updates, and completion\r\n *   or error events. It can be used as a `Promise<LoadBundleTaskProgress>`.\r\n */\n\n\nfunction loadBundle(firestore, bundleData) {\n  firestore = cast(firestore, Firestore$1);\n  var client = ensureFirestoreConfigured(firestore);\n  var resultTask = new LoadBundleTask();\n  firestoreClientLoadBundle(client, firestore._databaseId, bundleData, resultTask);\n  return resultTask;\n}\n/**\r\n * Reads a Firestore `Query` from local cache, identified by the given name.\r\n *\r\n * The named queries are packaged  into bundles on the server side (along\r\n * with resulting documents), and loaded to local cache using `loadBundle`. Once in local\r\n * cache, use this method to extract a `Query` by name.\r\n */\n\n\nfunction namedQuery(firestore, name) {\n  firestore = cast(firestore, Firestore$1);\n  var client = ensureFirestoreConfigured(firestore);\n  return firestoreClientGetNamedQuery(client, name).then(function (namedQuery) {\n    if (!namedQuery) {\n      return null;\n    }\n\n    return new Query$1(firestore, null, namedQuery.query);\n  });\n}\n\nfunction verifyNotInitialized(firestore) {\n  if (firestore._initialized || firestore._terminated) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer be ' + 'enabled. You can only enable persistence before calling any other ' + 'methods on a Firestore object.');\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A `FieldPath` refers to a field in a document. The path may consist of a\r\n * single field name (referring to a top-level field in the document), or a\r\n * list of field names (referring to a nested field in the document).\r\n *\r\n * Create a `FieldPath` by providing field names. If more than one field\r\n * name is provided, the path will point to a nested field in a document.\r\n */\n\n\nvar FieldPath =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a FieldPath from the provided field names. If more than one field\r\n   * name is provided, the path will point to a nested field in a document.\r\n   *\r\n   * @param fieldNames - A list of field names.\r\n   */\n  function FieldPath() {\n    var fieldNames = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      fieldNames[_i] = arguments[_i];\n    }\n\n    for (var i = 0; i < fieldNames.length; ++i) {\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" + 'Field names must not be empty.');\n      }\n    }\n\n    this._internalPath = new FieldPath$1(fieldNames);\n  }\n  /**\r\n   * Returns true if this `FieldPath` is equal to the provided one.\r\n   *\r\n   * @param other - The `FieldPath` to compare against.\r\n   * @returns true if this `FieldPath` is equal to the provided one.\r\n   */\n\n\n  FieldPath.prototype.isEqual = function (other) {\n    return this._internalPath.isEqual(other._internalPath);\n  };\n\n  return FieldPath;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An immutable object representing an array of bytes.\r\n */\n\n\nvar Bytes =\n/** @class */\nfunction () {\n  /** @hideconstructor */\n  function Bytes(byteString) {\n    this._byteString = byteString;\n  }\n  /**\r\n   * Creates a new `Bytes` object from the given Base64 string, converting it to\r\n   * bytes.\r\n   *\r\n   * @param base64 - The Base64 string used to create the `Bytes` object.\r\n   */\n\n\n  Bytes.fromBase64String = function (base64) {\n    try {\n      return new Bytes(ByteString.fromBase64String(base64));\n    } catch (e) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct data from Base64 string: ' + e);\n    }\n  };\n  /**\r\n   * Creates a new `Bytes` object from the given Uint8Array.\r\n   *\r\n   * @param array - The Uint8Array used to create the `Bytes` object.\r\n   */\n\n\n  Bytes.fromUint8Array = function (array) {\n    return new Bytes(ByteString.fromUint8Array(array));\n  };\n  /**\r\n   * Returns the underlying bytes as a Base64-encoded string.\r\n   *\r\n   * @returns The Base64-encoded string created from the `Bytes` object.\r\n   */\n\n\n  Bytes.prototype.toBase64 = function () {\n    return this._byteString.toBase64();\n  };\n  /**\r\n   * Returns the underlying bytes in a new `Uint8Array`.\r\n   *\r\n   * @returns The Uint8Array created from the `Bytes` object.\r\n   */\n\n\n  Bytes.prototype.toUint8Array = function () {\n    return this._byteString.toUint8Array();\n  };\n  /**\r\n   * Returns a string representation of the `Bytes` object.\r\n   *\r\n   * @returns A string representation of the `Bytes` object.\r\n   */\n\n\n  Bytes.prototype.toString = function () {\n    return 'Bytes(base64: ' + this.toBase64() + ')';\n  };\n  /**\r\n   * Returns true if this `Bytes` object is equal to the provided one.\r\n   *\r\n   * @param other - The `Bytes` object to compare against.\r\n   * @returns true if this `Bytes` object is equal to the provided one.\r\n   */\n\n\n  Bytes.prototype.isEqual = function (other) {\n    return this._byteString.isEqual(other._byteString);\n  };\n\n  return Bytes;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Sentinel values that can be used when writing document fields with `set()`\r\n * or `update()`.\r\n */\n\n\nvar FieldValue =\n/** @class */\nfunction () {\n  /**\r\n   * @param _methodName - The public API endpoint that returns this class.\r\n   * @hideconstructor\r\n   */\n  function FieldValue(_methodName) {\n    this._methodName = _methodName;\n  }\n\n  return FieldValue;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An immutable object representing a geographic location in Firestore. The\r\n * location is represented as latitude/longitude pair.\r\n *\r\n * Latitude values are in the range of [-90, 90].\r\n * Longitude values are in the range of [-180, 180].\r\n */\n\n\nvar GeoPoint =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new immutable `GeoPoint` object with the provided latitude and\r\n   * longitude values.\r\n   * @param latitude - The latitude as number between -90 and 90.\r\n   * @param longitude - The longitude as number between -180 and 180.\r\n   */\n  function GeoPoint(latitude, longitude) {\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n    }\n\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n    }\n\n    this._lat = latitude;\n    this._long = longitude;\n  }\n\n  Object.defineProperty(GeoPoint.prototype, \"latitude\", {\n    /**\r\n     * The latitude of this `GeoPoint` instance.\r\n     */\n    get: function () {\n      return this._lat;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(GeoPoint.prototype, \"longitude\", {\n    /**\r\n     * The longitude of this `GeoPoint` instance.\r\n     */\n    get: function () {\n      return this._long;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns true if this `GeoPoint` is equal to the provided one.\r\n   *\r\n   * @param other - The `GeoPoint` to compare against.\r\n   * @returns true if this `GeoPoint` is equal to the provided one.\r\n   */\n\n  GeoPoint.prototype.isEqual = function (other) {\n    return this._lat === other._lat && this._long === other._long;\n  };\n  /** Returns a JSON-serializable representation of this GeoPoint. */\n\n\n  GeoPoint.prototype.toJSON = function () {\n    return {\n      latitude: this._lat,\n      longitude: this._long\n    };\n  };\n  /**\r\n   * Actually private to JS consumers of our API, so this function is prefixed\r\n   * with an underscore.\r\n   */\n\n\n  GeoPoint.prototype._compareTo = function (other) {\n    return primitiveComparator(this._lat, other._lat) || primitiveComparator(this._long, other._long);\n  };\n\n  return GeoPoint;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\n\nvar ParsedSetData =\n/** @class */\nfunction () {\n  function ParsedSetData(data, fieldMask, fieldTransforms) {\n    this.data = data;\n    this.fieldMask = fieldMask;\n    this.fieldTransforms = fieldTransforms;\n  }\n\n  ParsedSetData.prototype.toMutation = function (key, precondition) {\n    if (this.fieldMask !== null) {\n      return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);\n    } else {\n      return new SetMutation(key, this.data, precondition, this.fieldTransforms);\n    }\n  };\n\n  return ParsedSetData;\n}();\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\n\n\nvar ParsedUpdateData =\n/** @class */\nfunction () {\n  function ParsedUpdateData(data, // The fieldMask does not include document transforms.\n  fieldMask, fieldTransforms) {\n    this.data = data;\n    this.fieldMask = fieldMask;\n    this.fieldTransforms = fieldTransforms;\n  }\n\n  ParsedUpdateData.prototype.toMutation = function (key, precondition) {\n    return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);\n  };\n\n  return ParsedUpdateData;\n}();\n\nfunction isWrite(dataSource) {\n  switch (dataSource) {\n    case 0\n    /* Set */\n    : // fall through\n\n    case 2\n    /* MergeSet */\n    : // fall through\n\n    case 1\n    /* Update */\n    :\n      return true;\n\n    case 3\n    /* Argument */\n    :\n    case 4\n    /* ArrayArgument */\n    :\n      return false;\n\n    default:\n      throw fail();\n  }\n}\n/** A \"context\" object passed around while parsing user data. */\n\n\nvar ParseContextImpl =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes a ParseContext with the given source and path.\r\n   *\r\n   * @param settings - The settings for the parser.\r\n   * @param databaseId - The database ID of the Firestore instance.\r\n   * @param serializer - The serializer to use to generate the Value proto.\r\n   * @param ignoreUndefinedProperties - Whether to ignore undefined properties\r\n   * rather than throw.\r\n   * @param fieldTransforms - A mutable list of field transforms encountered\r\n   * while parsing the data.\r\n   * @param fieldMask - A mutable list of field paths encountered while parsing\r\n   * the data.\r\n   *\r\n   * TODO(b/34871131): We don't support array paths right now, so path can be\r\n   * null to indicate the context represents any location within an array (in\r\n   * which case certain features will not work and errors will be somewhat\r\n   * compromised).\r\n   */\n  function ParseContextImpl(settings, databaseId, serializer, ignoreUndefinedProperties, fieldTransforms, fieldMask) {\n    this.settings = settings;\n    this.databaseId = databaseId;\n    this.serializer = serializer;\n    this.ignoreUndefinedProperties = ignoreUndefinedProperties; // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n\n    if (fieldTransforms === undefined) {\n      this.validatePath();\n    }\n\n    this.fieldTransforms = fieldTransforms || [];\n    this.fieldMask = fieldMask || [];\n  }\n\n  Object.defineProperty(ParseContextImpl.prototype, \"path\", {\n    get: function () {\n      return this.settings.path;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParseContextImpl.prototype, \"dataSource\", {\n    get: function () {\n      return this.settings.dataSource;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Returns a new context with the specified settings overwritten. */\n\n  ParseContextImpl.prototype.contextWith = function (configuration) {\n    return new ParseContextImpl(Object.assign(Object.assign({}, this.settings), configuration), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n  };\n\n  ParseContextImpl.prototype.childContextForField = function (field) {\n    var _a;\n\n    var childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);\n    var context = this.contextWith({\n      path: childPath,\n      arrayElement: false\n    });\n    context.validatePathSegment(field);\n    return context;\n  };\n\n  ParseContextImpl.prototype.childContextForFieldPath = function (field) {\n    var _a;\n\n    var childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);\n    var context = this.contextWith({\n      path: childPath,\n      arrayElement: false\n    });\n    context.validatePath();\n    return context;\n  };\n\n  ParseContextImpl.prototype.childContextForArray = function (index) {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // undefined.\n    return this.contextWith({\n      path: undefined,\n      arrayElement: true\n    });\n  };\n\n  ParseContextImpl.prototype.createError = function (reason) {\n    return createError(reason, this.settings.methodName, this.settings.hasConverter || false, this.path, this.settings.targetDoc);\n  };\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n\n\n  ParseContextImpl.prototype.contains = function (fieldPath) {\n    return this.fieldMask.find(function (field) {\n      return fieldPath.isPrefixOf(field);\n    }) !== undefined || this.fieldTransforms.find(function (transform) {\n      return fieldPath.isPrefixOf(transform.field);\n    }) !== undefined;\n  };\n\n  ParseContextImpl.prototype.validatePath = function () {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (!this.path) {\n      return;\n    }\n\n    for (var i = 0; i < this.path.length; i++) {\n      this.validatePathSegment(this.path.get(i));\n    }\n  };\n\n  ParseContextImpl.prototype.validatePathSegment = function (segment) {\n    if (segment.length === 0) {\n      throw this.createError('Document fields must not be empty');\n    }\n\n    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n      throw this.createError('Document fields cannot begin and end with \"__\"');\n    }\n  };\n\n  return ParseContextImpl;\n}();\n/**\r\n * Helper for parsing raw user input (provided via the API) into internal model\r\n * classes.\r\n */\n\n\nvar UserDataReader =\n/** @class */\nfunction () {\n  function UserDataReader(databaseId, ignoreUndefinedProperties, serializer) {\n    this.databaseId = databaseId;\n    this.ignoreUndefinedProperties = ignoreUndefinedProperties;\n    this.serializer = serializer || newSerializer(databaseId);\n  }\n  /** Creates a new top-level parse context. */\n\n\n  UserDataReader.prototype.createContext = function (dataSource, methodName, targetDoc, hasConverter) {\n    if (hasConverter === void 0) {\n      hasConverter = false;\n    }\n\n    return new ParseContextImpl({\n      dataSource: dataSource,\n      methodName: methodName,\n      targetDoc: targetDoc,\n      path: FieldPath$1.emptyPath(),\n      arrayElement: false,\n      hasConverter: hasConverter\n    }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\n  };\n\n  return UserDataReader;\n}();\n\nfunction newUserDataReader(firestore) {\n  var settings = firestore._freezeSettings();\n\n  var serializer = newSerializer(firestore._databaseId);\n  return new UserDataReader(firestore._databaseId, !!settings.ignoreUndefinedProperties, serializer);\n}\n/** Parse document data from a set() call. */\n\n\nfunction parseSetData(userDataReader, methodName, targetDoc, input, hasConverter, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var context = userDataReader.createContext(options.merge || options.mergeFields ? 2\n  /* MergeSet */\n  : 0\n  /* Set */\n  , methodName, targetDoc, hasConverter);\n  validatePlainObject('Data must be an object, but it was:', context, input);\n  var updateData = parseObject(input, context);\n  var fieldMask;\n  var fieldTransforms;\n\n  if (options.merge) {\n    fieldMask = new FieldMask(context.fieldMask);\n    fieldTransforms = context.fieldTransforms;\n  } else if (options.mergeFields) {\n    var validatedFieldPaths = [];\n\n    for (var _i = 0, _d = options.mergeFields; _i < _d.length; _i++) {\n      var stringOrFieldPath = _d[_i];\n      var fieldPath = fieldPathFromArgument$1(methodName, stringOrFieldPath, targetDoc);\n\n      if (!context.contains(fieldPath)) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Field '\" + fieldPath + \"' is specified in your field mask but missing from your input data.\");\n      }\n\n      if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {\n        validatedFieldPaths.push(fieldPath);\n      }\n    }\n\n    fieldMask = new FieldMask(validatedFieldPaths);\n    fieldTransforms = context.fieldTransforms.filter(function (transform) {\n      return fieldMask.covers(transform.field);\n    });\n  } else {\n    fieldMask = null;\n    fieldTransforms = context.fieldTransforms;\n  }\n\n  return new ParsedSetData(new ObjectValue(updateData), fieldMask, fieldTransforms);\n}\n\nvar DeleteFieldValueImpl =\n/** @class */\nfunction (_super) {\n  tslib.__extends(DeleteFieldValueImpl, _super);\n\n  function DeleteFieldValueImpl() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DeleteFieldValueImpl.prototype._toFieldTransform = function (context) {\n    if (context.dataSource === 2\n    /* MergeSet */\n    ) {\n        // No transform to add for a delete, but we need to add it to our\n        // fieldMask so it gets deleted.\n        context.fieldMask.push(context.path);\n      } else if (context.dataSource === 1\n    /* Update */\n    ) {\n        throw context.createError(this._methodName + \"() can only appear at the top level \" + 'of your update data');\n      } else {\n      // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n      throw context.createError(this._methodName + \"() cannot be used with set() unless you pass \" + '{merge:true}');\n    }\n\n    return null;\n  };\n\n  DeleteFieldValueImpl.prototype.isEqual = function (other) {\n    return other instanceof DeleteFieldValueImpl;\n  };\n\n  return DeleteFieldValueImpl;\n}(FieldValue);\n/**\r\n * Creates a child context for parsing SerializableFieldValues.\r\n *\r\n * This is different than calling `ParseContext.contextWith` because it keeps\r\n * the fieldTransforms and fieldMask separate.\r\n *\r\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\r\n * Although these values are used with writes, any elements in these FieldValues\r\n * are not considered writes since they cannot contain any FieldValue sentinels,\r\n * etc.\r\n *\r\n * @param fieldValue - The sentinel FieldValue for which to create a child\r\n *     context.\r\n * @param context - The parent context.\r\n * @param arrayElement - Whether or not the FieldValue has an array.\r\n */\n\n\nfunction createSentinelChildContext(fieldValue, context, arrayElement) {\n  return new ParseContextImpl({\n    dataSource: 3\n    /* Argument */\n    ,\n    targetDoc: context.settings.targetDoc,\n    methodName: fieldValue._methodName,\n    arrayElement: arrayElement\n  }, context.databaseId, context.serializer, context.ignoreUndefinedProperties);\n}\n\nvar ServerTimestampFieldValueImpl =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ServerTimestampFieldValueImpl, _super);\n\n  function ServerTimestampFieldValueImpl() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ServerTimestampFieldValueImpl.prototype._toFieldTransform = function (context) {\n    return new FieldTransform(context.path, new ServerTimestampTransform());\n  };\n\n  ServerTimestampFieldValueImpl.prototype.isEqual = function (other) {\n    return other instanceof ServerTimestampFieldValueImpl;\n  };\n\n  return ServerTimestampFieldValueImpl;\n}(FieldValue);\n\nvar ArrayUnionFieldValueImpl =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ArrayUnionFieldValueImpl, _super);\n\n  function ArrayUnionFieldValueImpl(methodName, _elements) {\n    var _this = _super.call(this, methodName) || this;\n\n    _this._elements = _elements;\n    return _this;\n  }\n\n  ArrayUnionFieldValueImpl.prototype._toFieldTransform = function (context) {\n    var parseContext = createSentinelChildContext(this, context,\n    /*array=*/\n    true);\n\n    var parsedElements = this._elements.map(function (element) {\n      return parseData(element, parseContext);\n    });\n\n    var arrayUnion = new ArrayUnionTransformOperation(parsedElements);\n    return new FieldTransform(context.path, arrayUnion);\n  };\n\n  ArrayUnionFieldValueImpl.prototype.isEqual = function (other) {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  };\n\n  return ArrayUnionFieldValueImpl;\n}(FieldValue);\n\nvar ArrayRemoveFieldValueImpl =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ArrayRemoveFieldValueImpl, _super);\n\n  function ArrayRemoveFieldValueImpl(methodName, _elements) {\n    var _this = _super.call(this, methodName) || this;\n\n    _this._elements = _elements;\n    return _this;\n  }\n\n  ArrayRemoveFieldValueImpl.prototype._toFieldTransform = function (context) {\n    var parseContext = createSentinelChildContext(this, context,\n    /*array=*/\n    true);\n\n    var parsedElements = this._elements.map(function (element) {\n      return parseData(element, parseContext);\n    });\n\n    var arrayUnion = new ArrayRemoveTransformOperation(parsedElements);\n    return new FieldTransform(context.path, arrayUnion);\n  };\n\n  ArrayRemoveFieldValueImpl.prototype.isEqual = function (other) {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  };\n\n  return ArrayRemoveFieldValueImpl;\n}(FieldValue);\n\nvar NumericIncrementFieldValueImpl =\n/** @class */\nfunction (_super) {\n  tslib.__extends(NumericIncrementFieldValueImpl, _super);\n\n  function NumericIncrementFieldValueImpl(methodName, _operand) {\n    var _this = _super.call(this, methodName) || this;\n\n    _this._operand = _operand;\n    return _this;\n  }\n\n  NumericIncrementFieldValueImpl.prototype._toFieldTransform = function (context) {\n    var numericIncrement = new NumericIncrementTransformOperation(context.serializer, toNumber(context.serializer, this._operand));\n    return new FieldTransform(context.path, numericIncrement);\n  };\n\n  NumericIncrementFieldValueImpl.prototype.isEqual = function (other) {\n    // TODO(mrschmidt): Implement isEquals\n    return this === other;\n  };\n\n  return NumericIncrementFieldValueImpl;\n}(FieldValue);\n/** Parse update data from an update() call. */\n\n\nfunction parseUpdateData(userDataReader, methodName, targetDoc, input) {\n  var context = userDataReader.createContext(1\n  /* Update */\n  , methodName, targetDoc);\n  validatePlainObject('Data must be an object, but it was:', context, input);\n  var fieldMaskPaths = [];\n  var updateData = ObjectValue.empty();\n  forEach(input, function (key, value) {\n    var path = fieldPathFromDotSeparatedString(methodName, key, targetDoc); // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n\n    value = util.getModularInstance(value);\n    var childContext = context.childContextForFieldPath(path);\n\n    if (value instanceof DeleteFieldValueImpl) {\n      // Add it to the field mask, but don't add anything to updateData.\n      fieldMaskPaths.push(path);\n    } else {\n      var parsedValue = parseData(value, childContext);\n\n      if (parsedValue != null) {\n        fieldMaskPaths.push(path);\n        updateData.set(path, parsedValue);\n      }\n    }\n  });\n  var mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n}\n/** Parse update data from a list of field/value arguments. */\n\n\nfunction parseUpdateVarargs(userDataReader, methodName, targetDoc, field, value, moreFieldsAndValues) {\n  var context = userDataReader.createContext(1\n  /* Update */\n  , methodName, targetDoc);\n  var keys = [fieldPathFromArgument$1(methodName, field, targetDoc)];\n  var values = [value];\n\n  if (moreFieldsAndValues.length % 2 !== 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() needs to be called with an even number \" + 'of arguments that alternate between field names and values.');\n  }\n\n  for (var i = 0; i < moreFieldsAndValues.length; i += 2) {\n    keys.push(fieldPathFromArgument$1(methodName, moreFieldsAndValues[i]));\n    values.push(moreFieldsAndValues[i + 1]);\n  }\n\n  var fieldMaskPaths = [];\n  var updateData = ObjectValue.empty(); // We iterate in reverse order to pick the last value for a field if the\n  // user specified the field multiple times.\n\n  for (var i = keys.length - 1; i >= 0; --i) {\n    if (!fieldMaskContains(fieldMaskPaths, keys[i])) {\n      var path = keys[i];\n      var value_1 = values[i]; // For Compat types, we have to \"extract\" the underlying types before\n      // performing validation.\n\n      value_1 = util.getModularInstance(value_1);\n      var childContext = context.childContextForFieldPath(path);\n\n      if (value_1 instanceof DeleteFieldValueImpl) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths.push(path);\n      } else {\n        var parsedValue = parseData(value_1, childContext);\n\n        if (parsedValue != null) {\n          fieldMaskPaths.push(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    }\n  }\n\n  var mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n}\n/**\r\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\r\n * bound).\r\n *\r\n * @param allowArrays - Whether the query value is an array that may directly\r\n * contain additional arrays (e.g. the operand of an `in` query).\r\n */\n\n\nfunction parseQueryValue(userDataReader, methodName, input, allowArrays) {\n  if (allowArrays === void 0) {\n    allowArrays = false;\n  }\n\n  var context = userDataReader.createContext(allowArrays ? 4\n  /* ArrayArgument */\n  : 3\n  /* Argument */\n  , methodName);\n  var parsed = parseData(input, context);\n  return parsed;\n}\n/**\r\n * Parses user data to Protobuf Values.\r\n *\r\n * @param input - Data to be parsed.\r\n * @param context - A context object representing the current path being parsed,\r\n * the source of the data being parsed, etc.\r\n * @returns The parsed value, or null if the value was a FieldValue sentinel\r\n * that should not be included in the resulting parsed data.\r\n */\n\n\nfunction parseData(input, context) {\n  // Unwrap the API type from the Compat SDK. This will return the API type\n  // from firestore-exp.\n  input = util.getModularInstance(input);\n\n  if (looksLikeJsonObject(input)) {\n    validatePlainObject('Unsupported field value:', context, input);\n    return parseObject(input, context);\n  } else if (input instanceof FieldValue) {\n    // FieldValues usually parse into transforms (except FieldValue.delete())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    parseSentinelFieldValue(input, context);\n    return null;\n  } else if (input === undefined && context.ignoreUndefinedProperties) {\n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n  } else {\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    if (context.path) {\n      context.fieldMask.push(context.path);\n    }\n\n    if (input instanceof Array) {\n      // TODO(b/34871131): Include the path containing the array in the error\n      // message.\n      // In the case of IN queries, the parsed data is an array (representing\n      // the set of values to be included for the IN query) that may directly\n      // contain additional arrays (each representing an individual field\n      // value), so we disable this validation.\n      if (context.settings.arrayElement && context.dataSource !== 4\n      /* ArrayArgument */\n      ) {\n          throw context.createError('Nested arrays are not supported');\n        }\n\n      return parseArray(input, context);\n    } else {\n      return parseScalarValue(input, context);\n    }\n  }\n}\n\nfunction parseObject(obj, context) {\n  var fields = {};\n\n  if (isEmpty(obj)) {\n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    if (context.path && context.path.length > 0) {\n      context.fieldMask.push(context.path);\n    }\n  } else {\n    forEach(obj, function (key, val) {\n      var parsedValue = parseData(val, context.childContextForField(key));\n\n      if (parsedValue != null) {\n        fields[key] = parsedValue;\n      }\n    });\n  }\n\n  return {\n    mapValue: {\n      fields: fields\n    }\n  };\n}\n\nfunction parseArray(array, context) {\n  var values = [];\n  var entryIndex = 0;\n\n  for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n    var entry = array_1[_i];\n    var parsedEntry = parseData(entry, context.childContextForArray(entryIndex));\n\n    if (parsedEntry == null) {\n      // Just include nulls in the array for fields being replaced with a\n      // sentinel.\n      parsedEntry = {\n        nullValue: 'NULL_VALUE'\n      };\n    }\n\n    values.push(parsedEntry);\n    entryIndex++;\n  }\n\n  return {\n    arrayValue: {\n      values: values\n    }\n  };\n}\n/**\r\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\r\n * context.fieldTransforms.\r\n */\n\n\nfunction parseSentinelFieldValue(value, context) {\n  // Sentinels are only supported with writes, and not within arrays.\n  if (!isWrite(context.dataSource)) {\n    throw context.createError(value._methodName + \"() can only be used with update() and set()\");\n  }\n\n  if (!context.path) {\n    throw context.createError(value._methodName + \"() is not currently supported inside arrays\");\n  }\n\n  var fieldTransform = value._toFieldTransform(context);\n\n  if (fieldTransform) {\n    context.fieldTransforms.push(fieldTransform);\n  }\n}\n/**\r\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\r\n *\r\n * @returns The parsed value\r\n */\n\n\nfunction parseScalarValue(value, context) {\n  value = util.getModularInstance(value);\n\n  if (value === null) {\n    return {\n      nullValue: 'NULL_VALUE'\n    };\n  } else if (typeof value === 'number') {\n    return toNumber(context.serializer, value);\n  } else if (typeof value === 'boolean') {\n    return {\n      booleanValue: value\n    };\n  } else if (typeof value === 'string') {\n    return {\n      stringValue: value\n    };\n  } else if (value instanceof Date) {\n    var timestamp = Timestamp.fromDate(value);\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof Timestamp) {\n    // Firestore backend truncates precision down to microseconds. To ensure\n    // offline mode works the same with regards to truncation, perform the\n    // truncation immediately without waiting for the backend to do that.\n    var timestamp = new Timestamp(value.seconds, Math.floor(value.nanoseconds / 1000) * 1000);\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof GeoPoint) {\n    return {\n      geoPointValue: {\n        latitude: value.latitude,\n        longitude: value.longitude\n      }\n    };\n  } else if (value instanceof Bytes) {\n    return {\n      bytesValue: toBytes(context.serializer, value._byteString)\n    };\n  } else if (value instanceof DocumentReference$1) {\n    var thisDb = context.databaseId;\n    var otherDb = value.firestore._databaseId;\n\n    if (!otherDb.isEqual(thisDb)) {\n      throw context.createError('Document reference is for database ' + (otherDb.projectId + \"/\" + otherDb.database + \" but should be \") + (\"for database \" + thisDb.projectId + \"/\" + thisDb.database));\n    }\n\n    return {\n      referenceValue: toResourceName(value.firestore._databaseId || context.databaseId, value._key.path)\n    };\n  } else {\n    throw context.createError(\"Unsupported field value: \" + valueDescription(value));\n  }\n}\n/**\r\n * Checks whether an object looks like a JSON object that should be converted\r\n * into a struct. Normal class/prototype instances are considered to look like\r\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\r\n * GeoPoints, etc. are not considered to look like JSON objects since they map\r\n * to specific FieldValue types other than ObjectValue.\r\n */\n\n\nfunction looksLikeJsonObject(input) {\n  return typeof input === 'object' && input !== null && !(input instanceof Array) && !(input instanceof Date) && !(input instanceof Timestamp) && !(input instanceof GeoPoint) && !(input instanceof Bytes) && !(input instanceof DocumentReference$1) && !(input instanceof FieldValue);\n}\n\nfunction validatePlainObject(message, context, input) {\n  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n    var description = valueDescription(input);\n\n    if (description === 'an object') {\n      // Massage the error if it was an object.\n      throw context.createError(message + ' a custom object');\n    } else {\n      throw context.createError(message + ' ' + description);\n    }\n  }\n}\n/**\r\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\r\n */\n\n\nfunction fieldPathFromArgument$1(methodName, path, targetDoc) {\n  // If required, replace the FieldPath Compat class with with the firestore-exp\n  // FieldPath.\n  path = util.getModularInstance(path);\n\n  if (path instanceof FieldPath) {\n    return path._internalPath;\n  } else if (typeof path === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, path);\n  } else {\n    var message = 'Field path arguments must be of type string or FieldPath.';\n    throw createError(message, methodName,\n    /* hasConverter= */\n    false,\n    /* path= */\n    undefined, targetDoc);\n  }\n}\n/**\r\n * Matches any characters in a field path string that are reserved.\r\n */\n\n\nvar FIELD_PATH_RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\r\n * Wraps fromDotSeparatedString with an error message about the method that\r\n * was thrown.\r\n * @param methodName - The publicly visible method name\r\n * @param path - The dot-separated string form of a field path which will be\r\n * split on dots.\r\n * @param targetDoc - The document against which the field path will be\r\n * evaluated.\r\n */\n\nfunction fieldPathFromDotSeparatedString(methodName, path, targetDoc) {\n  var found = path.search(FIELD_PATH_RESERVED);\n\n  if (found >= 0) {\n    throw createError(\"Invalid field path (\" + path + \"). Paths must not contain \" + \"'~', '*', '/', '[', or ']'\", methodName,\n    /* hasConverter= */\n    false,\n    /* path= */\n    undefined, targetDoc);\n  }\n\n  try {\n    return new (FieldPath.bind.apply(FieldPath, tslib.__spreadArray([void 0], path.split('.'))))()._internalPath;\n  } catch (e) {\n    throw createError(\"Invalid field path (\" + path + \"). Paths must not be empty, \" + \"begin with '.', end with '.', or contain '..'\", methodName,\n    /* hasConverter= */\n    false,\n    /* path= */\n    undefined, targetDoc);\n  }\n}\n\nfunction createError(reason, methodName, hasConverter, path, targetDoc) {\n  var hasPath = path && !path.isEmpty();\n  var hasDocument = targetDoc !== undefined;\n  var message = \"Function \" + methodName + \"() called with invalid data\";\n\n  if (hasConverter) {\n    message += ' (via `toFirestore()`)';\n  }\n\n  message += '. ';\n  var description = '';\n\n  if (hasPath || hasDocument) {\n    description += ' (found';\n\n    if (hasPath) {\n      description += \" in field \" + path;\n    }\n\n    if (hasDocument) {\n      description += \" in document \" + targetDoc;\n    }\n\n    description += ')';\n  }\n\n  return new FirestoreError(Code.INVALID_ARGUMENT, message + reason + description);\n}\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\n\n\nfunction fieldMaskContains(haystack, needle) {\n  return haystack.some(function (v) {\n    return v.isEqual(needle);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A `DocumentSnapshot` contains data read from a document in your Firestore\r\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\r\n * get a specific field.\r\n *\r\n * For a `DocumentSnapshot` that points to a non-existing document, any data\r\n * access will return 'undefined'. You can use the `exists()` method to\r\n * explicitly verify a document's existence.\r\n */\n\n\nvar DocumentSnapshot$2 =\n/** @class */\nfunction () {\n  // Note: This class is stripped down version of the DocumentSnapshot in\n  // the legacy SDK. The changes are:\n  // - No support for SnapshotMetadata.\n  // - No support for SnapshotOptions.\n\n  /** @hideconstructor protected */\n  function DocumentSnapshot$2(_firestore, _userDataWriter, _key, _document, _converter) {\n    this._firestore = _firestore;\n    this._userDataWriter = _userDataWriter;\n    this._key = _key;\n    this._document = _document;\n    this._converter = _converter;\n  }\n\n  Object.defineProperty(DocumentSnapshot$2.prototype, \"id\", {\n    /** Property of the `DocumentSnapshot` that provides the document's ID. */\n    get: function () {\n      return this._key.path.lastSegment();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DocumentSnapshot$2.prototype, \"ref\", {\n    /**\r\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\r\n     */\n    get: function () {\n      return new DocumentReference$1(this._firestore, this._converter, this._key);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Signals whether or not the document at the snapshot's location exists.\r\n   *\r\n   * @returns true if the document exists.\r\n   */\n\n  DocumentSnapshot$2.prototype.exists = function () {\n    return this._document !== null;\n  };\n  /**\r\n   * Retrieves all fields in the document as an `Object`. Returns `undefined` if\r\n   * the document doesn't exist.\r\n   *\r\n   * @returns An `Object` containing all fields in the document or `undefined`\r\n   * if the document doesn't exist.\r\n   */\n\n\n  DocumentSnapshot$2.prototype.data = function () {\n    if (!this._document) {\n      return undefined;\n    } else if (this._converter) {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      var snapshot = new QueryDocumentSnapshot$2(this._firestore, this._userDataWriter, this._key, this._document,\n      /* converter= */\n      null);\n      return this._converter.fromFirestore(snapshot);\n    } else {\n      return this._userDataWriter.convertValue(this._document.data.value);\n    }\n  };\n  /**\r\n   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\r\n   * document or field doesn't exist.\r\n   *\r\n   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\r\n   * field.\r\n   * @returns The data at the specified field location or undefined if no such\r\n   * field exists in the document.\r\n   */\n  // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  DocumentSnapshot$2.prototype.get = function (fieldPath) {\n    if (this._document) {\n      var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n\n      if (value !== null) {\n        return this._userDataWriter.convertValue(value);\n      }\n    }\n\n    return undefined;\n  };\n\n  return DocumentSnapshot$2;\n}();\n/**\r\n * A `QueryDocumentSnapshot` contains data read from a document in your\r\n * Firestore database as part of a query. The document is guaranteed to exist\r\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\r\n * specific field.\r\n *\r\n * A `QueryDocumentSnapshot` offers the same API surface as a\r\n * `DocumentSnapshot`. Since query results contain only existing documents, the\r\n * `exists` property will always be true and `data()` will never return\r\n * 'undefined'.\r\n */\n\n\nvar QueryDocumentSnapshot$2 =\n/** @class */\nfunction (_super) {\n  tslib.__extends(QueryDocumentSnapshot$2, _super);\n\n  function QueryDocumentSnapshot$2() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Retrieves all fields in the document as an `Object`.\r\n   *\r\n   * @override\r\n   * @returns An `Object` containing all fields in the document.\r\n   */\n\n\n  QueryDocumentSnapshot$2.prototype.data = function () {\n    return _super.prototype.data.call(this);\n  };\n\n  return QueryDocumentSnapshot$2;\n}(DocumentSnapshot$2);\n/**\r\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\r\n */\n\n\nfunction fieldPathFromArgument(methodName, arg) {\n  if (typeof arg === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, arg);\n  } else if (arg instanceof FieldPath) {\n    return arg._internalPath;\n  } else {\n    return arg._delegate._internalPath;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Metadata about a snapshot, describing the state of the snapshot.\r\n */\n\n\nvar SnapshotMetadata =\n/** @class */\nfunction () {\n  /** @hideconstructor */\n  function SnapshotMetadata(hasPendingWrites, fromCache) {\n    this.hasPendingWrites = hasPendingWrites;\n    this.fromCache = fromCache;\n  }\n  /**\r\n   * Returns true if this `SnapshotMetadata` is equal to the provided one.\r\n   *\r\n   * @param other - The `SnapshotMetadata` to compare against.\r\n   * @returns true if this `SnapshotMetadata` is equal to the provided one.\r\n   */\n\n\n  SnapshotMetadata.prototype.isEqual = function (other) {\n    return this.hasPendingWrites === other.hasPendingWrites && this.fromCache === other.fromCache;\n  };\n\n  return SnapshotMetadata;\n}();\n/**\r\n * A `DocumentSnapshot` contains data read from a document in your Firestore\r\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\r\n * get a specific field.\r\n *\r\n * For a `DocumentSnapshot` that points to a non-existing document, any data\r\n * access will return 'undefined'. You can use the `exists()` method to\r\n * explicitly verify a document's existence.\r\n */\n\n\nvar DocumentSnapshot$1 =\n/** @class */\nfunction (_super) {\n  tslib.__extends(DocumentSnapshot$1, _super);\n  /** @hideconstructor protected */\n\n\n  function DocumentSnapshot$1(_firestore, userDataWriter, key, document, metadata, converter) {\n    var _this = _super.call(this, _firestore, userDataWriter, key, document, converter) || this;\n\n    _this._firestore = _firestore;\n    _this._firestoreImpl = _firestore;\n    _this.metadata = metadata;\n    return _this;\n  }\n  /**\r\n   * Property of the `DocumentSnapshot` that signals whether or not the data\r\n   * exists. True if the document exists.\r\n   */\n\n\n  DocumentSnapshot$1.prototype.exists = function () {\n    return _super.prototype.exists.call(this);\n  };\n  /**\r\n   * Retrieves all fields in the document as an `Object`. Returns `undefined` if\r\n   * the document doesn't exist.\r\n   *\r\n   * By default, `FieldValue.serverTimestamp()` values that have not yet been\r\n   * set to their final value will be returned as `null`. You can override\r\n   * this by passing an options object.\r\n   *\r\n   * @param options - An options object to configure how data is retrieved from\r\n   * the snapshot (for example the desired behavior for server timestamps that\r\n   * have not yet been set to their final value).\r\n   * @returns An `Object` containing all fields in the document or `undefined` if\r\n   * the document doesn't exist.\r\n   */\n\n\n  DocumentSnapshot$1.prototype.data = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!this._document) {\n      return undefined;\n    } else if (this._converter) {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      var snapshot = new QueryDocumentSnapshot$1(this._firestore, this._userDataWriter, this._key, this._document, this.metadata,\n      /* converter= */\n      null);\n      return this._converter.fromFirestore(snapshot, options);\n    } else {\n      return this._userDataWriter.convertValue(this._document.data.value, options.serverTimestamps);\n    }\n  };\n  /**\r\n   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\r\n   * document or field doesn't exist.\r\n   *\r\n   * By default, a `FieldValue.serverTimestamp()` that has not yet been set to\r\n   * its final value will be returned as `null`. You can override this by\r\n   * passing an options object.\r\n   *\r\n   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\r\n   * field.\r\n   * @param options - An options object to configure how the field is retrieved\r\n   * from the snapshot (for example the desired behavior for server timestamps\r\n   * that have not yet been set to their final value).\r\n   * @returns The data at the specified field location or undefined if no such\r\n   * field exists in the document.\r\n   */\n  // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  DocumentSnapshot$1.prototype.get = function (fieldPath, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (this._document) {\n      var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n\n      if (value !== null) {\n        return this._userDataWriter.convertValue(value, options.serverTimestamps);\n      }\n    }\n\n    return undefined;\n  };\n\n  return DocumentSnapshot$1;\n}(DocumentSnapshot$2);\n/**\r\n * A `QueryDocumentSnapshot` contains data read from a document in your\r\n * Firestore database as part of a query. The document is guaranteed to exist\r\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\r\n * specific field.\r\n *\r\n * A `QueryDocumentSnapshot` offers the same API surface as a\r\n * `DocumentSnapshot`. Since query results contain only existing documents, the\r\n * `exists` property will always be true and `data()` will never return\r\n * 'undefined'.\r\n */\n\n\nvar QueryDocumentSnapshot$1 =\n/** @class */\nfunction (_super) {\n  tslib.__extends(QueryDocumentSnapshot$1, _super);\n\n  function QueryDocumentSnapshot$1() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Retrieves all fields in the document as an `Object`.\r\n   *\r\n   * By default, `FieldValue.serverTimestamp()` values that have not yet been\r\n   * set to their final value will be returned as `null`. You can override\r\n   * this by passing an options object.\r\n   *\r\n   * @override\r\n   * @param options - An options object to configure how data is retrieved from\r\n   * the snapshot (for example the desired behavior for server timestamps that\r\n   * have not yet been set to their final value).\r\n   * @returns An `Object` containing all fields in the document.\r\n   */\n\n\n  QueryDocumentSnapshot$1.prototype.data = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return _super.prototype.data.call(this, options);\n  };\n\n  return QueryDocumentSnapshot$1;\n}(DocumentSnapshot$1);\n/**\r\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\r\n * representing the results of a query. The documents can be accessed as an\r\n * array via the `docs` property or enumerated using the `forEach` method. The\r\n * number of documents can be determined via the `empty` and `size`\r\n * properties.\r\n */\n\n\nvar QuerySnapshot$1 =\n/** @class */\nfunction () {\n  /** @hideconstructor */\n  function QuerySnapshot$1(_firestore, _userDataWriter, query, _snapshot) {\n    this._firestore = _firestore;\n    this._userDataWriter = _userDataWriter;\n    this._snapshot = _snapshot;\n    this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);\n    this.query = query;\n  }\n\n  Object.defineProperty(QuerySnapshot$1.prototype, \"docs\", {\n    /** An array of all the documents in the `QuerySnapshot`. */\n    get: function () {\n      var result = [];\n      this.forEach(function (doc) {\n        return result.push(doc);\n      });\n      return result;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(QuerySnapshot$1.prototype, \"size\", {\n    /** The number of documents in the `QuerySnapshot`. */\n    get: function () {\n      return this._snapshot.docs.size;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(QuerySnapshot$1.prototype, \"empty\", {\n    /** True if there are no documents in the `QuerySnapshot`. */\n    get: function () {\n      return this.size === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Enumerates all of the documents in the `QuerySnapshot`.\r\n   *\r\n   * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\r\n   * each document in the snapshot.\r\n   * @param thisArg - The `this` binding for the callback.\r\n   */\n\n  QuerySnapshot$1.prototype.forEach = function (callback, thisArg) {\n    var _this = this;\n\n    this._snapshot.docs.forEach(function (doc) {\n      callback.call(thisArg, new QueryDocumentSnapshot$1(_this._firestore, _this._userDataWriter, doc.key, doc, new SnapshotMetadata(_this._snapshot.mutatedKeys.has(doc.key), _this._snapshot.fromCache), _this.query.converter));\n    });\n  };\n  /**\r\n   * Returns an array of the documents changes since the last snapshot. If this\r\n   * is the first snapshot, all documents will be in the list as 'added'\r\n   * changes.\r\n   *\r\n   * @param options - `SnapshotListenOptions` that control whether metadata-only\r\n   * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger\r\n   * snapshot events.\r\n   */\n\n\n  QuerySnapshot$1.prototype.docChanges = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var includeMetadataChanges = !!options.includeMetadataChanges;\n\n    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'To include metadata changes with your document changes, you must ' + 'also pass { includeMetadataChanges:true } to onSnapshot().');\n    }\n\n    if (!this._cachedChanges || this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges) {\n      this._cachedChanges = changesFromSnapshot(this, includeMetadataChanges);\n      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;\n    }\n\n    return this._cachedChanges;\n  };\n\n  return QuerySnapshot$1;\n}();\n/** Calculates the array of DocumentChanges for a given ViewSnapshot. */\n\n\nfunction changesFromSnapshot(querySnapshot, includeMetadataChanges) {\n  if (querySnapshot._snapshot.oldDocs.isEmpty()) {\n    var index_1 = 0;\n    return querySnapshot._snapshot.docChanges.map(function (change) {\n      var doc = new QueryDocumentSnapshot$1(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query.converter);\n      return {\n        type: 'added',\n        doc: doc,\n        oldIndex: -1,\n        newIndex: index_1++\n      };\n    });\n  } else {\n    // A DocumentSet that is updated incrementally as changes are applied to use\n    // to lookup the index of a document.\n    var indexTracker_1 = querySnapshot._snapshot.oldDocs;\n    return querySnapshot._snapshot.docChanges.filter(function (change) {\n      return includeMetadataChanges || change.type !== 3;\n    }\n    /* Metadata */\n    ).map(function (change) {\n      var doc = new QueryDocumentSnapshot$1(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query.converter);\n      var oldIndex = -1;\n      var newIndex = -1;\n\n      if (change.type !== 0\n      /* Added */\n      ) {\n          oldIndex = indexTracker_1.indexOf(change.doc.key);\n          indexTracker_1 = indexTracker_1.delete(change.doc.key);\n        }\n\n      if (change.type !== 1\n      /* Removed */\n      ) {\n          indexTracker_1 = indexTracker_1.add(change.doc);\n          newIndex = indexTracker_1.indexOf(change.doc.key);\n        }\n\n      return {\n        type: resultChangeType(change.type),\n        doc: doc,\n        oldIndex: oldIndex,\n        newIndex: newIndex\n      };\n    });\n  }\n}\n\nfunction resultChangeType(type) {\n  switch (type) {\n    case 0\n    /* Added */\n    :\n      return 'added';\n\n    case 2\n    /* Modified */\n    :\n    case 3\n    /* Metadata */\n    :\n      return 'modified';\n\n    case 1\n    /* Removed */\n    :\n      return 'removed';\n\n    default:\n      return fail();\n  }\n} // TODO(firestoreexp): Add tests for snapshotEqual with different snapshot\n// metadata\n\n/**\r\n * Returns true if the provided snapshots are equal.\r\n *\r\n * @param left - A snapshot to compare.\r\n * @param right - A snapshot to compare.\r\n * @returns true if the snapshots are equal.\r\n */\n\n\nfunction snapshotEqual(left, right) {\n  if (left instanceof DocumentSnapshot$1 && right instanceof DocumentSnapshot$1) {\n    return left._firestore === right._firestore && left._key.isEqual(right._key) && (left._document === null ? right._document === null : left._document.isEqual(right._document)) && left._converter === right._converter;\n  } else if (left instanceof QuerySnapshot$1 && right instanceof QuerySnapshot$1) {\n    return left._firestore === right._firestore && queryEqual(left.query, right.query) && left.metadata.isEqual(right.metadata) && left._snapshot.isEqual(right._snapshot);\n  }\n\n  return false;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction validateHasExplicitOrderByForLimitToLast(query) {\n  if (hasLimitToLast(query) && query.explicitOrderBy.length === 0) {\n    throw new FirestoreError(Code.UNIMPLEMENTED, 'limitToLast() queries require specifying at least one orderBy() clause');\n  }\n}\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\r\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\r\n * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\n\n\nvar QueryConstraint =\n/** @class */\nfunction () {\n  function QueryConstraint() {}\n\n  return QueryConstraint;\n}();\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\n\n\nfunction query(query) {\n  var queryConstraints = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    queryConstraints[_i - 1] = arguments[_i];\n  }\n\n  for (var _d = 0, queryConstraints_1 = queryConstraints; _d < queryConstraints_1.length; _d++) {\n    var constraint = queryConstraints_1[_d];\n    query = constraint._apply(query);\n  }\n\n  return query;\n}\n\nvar QueryFilterConstraint =\n/** @class */\nfunction (_super) {\n  tslib.__extends(QueryFilterConstraint, _super);\n\n  function QueryFilterConstraint(_field, _op, _value) {\n    var _this = _super.call(this) || this;\n\n    _this._field = _field;\n    _this._op = _op;\n    _this._value = _value;\n    _this.type = 'where';\n    return _this;\n  }\n\n  QueryFilterConstraint.prototype._apply = function (query) {\n    var reader = newUserDataReader(query.firestore);\n    var filter = newQueryFilter(query._query, 'where', reader, query.firestore._databaseId, this._field, this._op, this._value);\n    return new Query$1(query.firestore, query.converter, queryWithAddedFilter(query._query, filter));\n  };\n\n  return QueryFilterConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` that enforces that documents must contain the\r\n * specified field and that the value should satisfy the relation constraint\r\n * provided.\r\n *\r\n * @param fieldPath - The path to compare\r\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\r\n *   \"&lt;=\", \"!=\").\r\n * @param value - The value for comparison\r\n * @returns The created `Query`.\r\n */\n\n\nfunction where(fieldPath, opStr, value) {\n  var op = opStr;\n  var field = fieldPathFromArgument('where', fieldPath);\n  return new QueryFilterConstraint(field, op, value);\n}\n\nvar QueryOrderByConstraint =\n/** @class */\nfunction (_super) {\n  tslib.__extends(QueryOrderByConstraint, _super);\n\n  function QueryOrderByConstraint(_field, _direction) {\n    var _this = _super.call(this) || this;\n\n    _this._field = _field;\n    _this._direction = _direction;\n    _this.type = 'orderBy';\n    return _this;\n  }\n\n  QueryOrderByConstraint.prototype._apply = function (query) {\n    var orderBy = newQueryOrderBy(query._query, this._field, this._direction);\n    return new Query$1(query.firestore, query.converter, queryWithAddedOrderBy(query._query, orderBy));\n  };\n\n  return QueryOrderByConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` that sorts the query result by the\r\n * specified field, optionally in descending order instead of ascending.\r\n *\r\n * @param fieldPath - The field to sort by.\r\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\r\n * not specified, order will be ascending.\r\n * @returns The created `Query`.\r\n */\n\n\nfunction orderBy(fieldPath, directionStr) {\n  if (directionStr === void 0) {\n    directionStr = 'asc';\n  }\n\n  var direction = directionStr;\n  var path = fieldPathFromArgument('orderBy', fieldPath);\n  return new QueryOrderByConstraint(path, direction);\n}\n\nvar QueryLimitConstraint =\n/** @class */\nfunction (_super) {\n  tslib.__extends(QueryLimitConstraint, _super);\n\n  function QueryLimitConstraint(type, _limit, _limitType) {\n    var _this = _super.call(this) || this;\n\n    _this.type = type;\n    _this._limit = _limit;\n    _this._limitType = _limitType;\n    return _this;\n  }\n\n  QueryLimitConstraint.prototype._apply = function (query) {\n    return new Query$1(query.firestore, query.converter, queryWithLimit(query._query, this._limit, this._limitType));\n  };\n\n  return QueryLimitConstraint;\n}(QueryConstraint);\n/**\r\n * Creates a `QueryConstraint` that only returns the first matching documents.\r\n *\r\n * @param limit - The maximum number of items to return.\r\n * @returns The created `Query`.\r\n */\n\n\nfunction limit(limit) {\n  validatePositiveNumber('limit', limit);\n  return new QueryLimitConstraint('limit', limit, \"F\"\n  /* First */\n  );\n}\n/**\r\n * Creates a `QueryConstraint` that only returns the last matching documents.\r\n *\r\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\r\n * otherwise an exception will be thrown during execution.\r\n *\r\n * @param limit - The maximum number of items to return.\r\n * @returns The created `Query`.\r\n */\n\n\nfunction limitToLast(limit) {\n  validatePositiveNumber('limitToLast', limit);\n  return new QueryLimitConstraint('limitToLast', limit, \"L\"\n  /* Last */\n  );\n}\n\nvar QueryStartAtConstraint =\n/** @class */\nfunction (_super) {\n  tslib.__extends(QueryStartAtConstraint, _super);\n\n  function QueryStartAtConstraint(type, _docOrFields, _before) {\n    var _this = _super.call(this) || this;\n\n    _this.type = type;\n    _this._docOrFields = _docOrFields;\n    _this._before = _before;\n    return _this;\n  }\n\n  QueryStartAtConstraint.prototype._apply = function (query) {\n    var bound = newQueryBoundFromDocOrFields(query, this.type, this._docOrFields, this._before);\n    return new Query$1(query.firestore, query.converter, queryWithStartAt(query._query, bound));\n  };\n\n  return QueryStartAtConstraint;\n}(QueryConstraint);\n\nfunction startAt() {\n  var docOrFields = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    docOrFields[_i] = arguments[_i];\n  }\n\n  return new QueryStartAtConstraint('startAt', docOrFields,\n  /*before=*/\n  true);\n}\n\nfunction startAfter() {\n  var docOrFields = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    docOrFields[_i] = arguments[_i];\n  }\n\n  return new QueryStartAtConstraint('startAfter', docOrFields,\n  /*before=*/\n  false);\n}\n\nvar QueryEndAtConstraint =\n/** @class */\nfunction (_super) {\n  tslib.__extends(QueryEndAtConstraint, _super);\n\n  function QueryEndAtConstraint(type, _docOrFields, _before) {\n    var _this = _super.call(this) || this;\n\n    _this.type = type;\n    _this._docOrFields = _docOrFields;\n    _this._before = _before;\n    return _this;\n  }\n\n  QueryEndAtConstraint.prototype._apply = function (query) {\n    var bound = newQueryBoundFromDocOrFields(query, this.type, this._docOrFields, this._before);\n    return new Query$1(query.firestore, query.converter, queryWithEndAt(query._query, bound));\n  };\n\n  return QueryEndAtConstraint;\n}(QueryConstraint);\n\nfunction endBefore() {\n  var docOrFields = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    docOrFields[_i] = arguments[_i];\n  }\n\n  return new QueryEndAtConstraint('endBefore', docOrFields,\n  /*before=*/\n  true);\n}\n\nfunction endAt() {\n  var docOrFields = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    docOrFields[_i] = arguments[_i];\n  }\n\n  return new QueryEndAtConstraint('endAt', docOrFields,\n  /*before=*/\n  false);\n}\n/** Helper function to create a bound from a document or fields */\n\n\nfunction newQueryBoundFromDocOrFields(query, methodName, docOrFields, before) {\n  docOrFields[0] = util.getModularInstance(docOrFields[0]);\n\n  if (docOrFields[0] instanceof DocumentSnapshot$2) {\n    return newQueryBoundFromDocument(query._query, query.firestore._databaseId, methodName, docOrFields[0]._document, before);\n  } else {\n    var reader = newUserDataReader(query.firestore);\n    return newQueryBoundFromFields(query._query, query.firestore._databaseId, reader, methodName, docOrFields, before);\n  }\n}\n\nfunction newQueryFilter(query, methodName, dataReader, databaseId, fieldPath, op, value) {\n  var fieldValue;\n\n  if (fieldPath.isKeyField()) {\n    if (op === \"array-contains\"\n    /* ARRAY_CONTAINS */\n    || op === \"array-contains-any\"\n    /* ARRAY_CONTAINS_ANY */\n    ) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. You can't perform '\" + op + \"' \" + 'queries on FieldPath.documentId().');\n      } else if (op === \"in\"\n    /* IN */\n    || op === \"not-in\"\n    /* NOT_IN */\n    ) {\n        validateDisjunctiveFilterElements(value, op);\n        var referenceList = [];\n\n        for (var _i = 0, value_2 = value; _i < value_2.length; _i++) {\n          var arrayValue = value_2[_i];\n          referenceList.push(parseDocumentIdValue(databaseId, query, arrayValue));\n        }\n\n        fieldValue = {\n          arrayValue: {\n            values: referenceList\n          }\n        };\n      } else {\n      fieldValue = parseDocumentIdValue(databaseId, query, value);\n    }\n  } else {\n    if (op === \"in\"\n    /* IN */\n    || op === \"not-in\"\n    /* NOT_IN */\n    || op === \"array-contains-any\"\n    /* ARRAY_CONTAINS_ANY */\n    ) {\n        validateDisjunctiveFilterElements(value, op);\n      }\n\n    fieldValue = parseQueryValue(dataReader, methodName, value,\n    /* allowArrays= */\n    op === \"in\"\n    /* IN */\n    || op === \"not-in\"\n    /* NOT_IN */\n    );\n  }\n\n  var filter = FieldFilter.create(fieldPath, op, fieldValue);\n  validateNewFilter(query, filter);\n  return filter;\n}\n\nfunction newQueryOrderBy(query, fieldPath, direction) {\n  if (query.startAt !== null) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call startAt() or startAfter() before ' + 'calling orderBy().');\n  }\n\n  if (query.endAt !== null) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call endAt() or endBefore() before ' + 'calling orderBy().');\n  }\n\n  var orderBy = new OrderBy(fieldPath, direction);\n  validateNewOrderBy(query, orderBy);\n  return orderBy;\n}\n/**\r\n * Create a Bound from a query and a document.\r\n *\r\n * Note that the Bound will always include the key of the document\r\n * and so only the provided document will compare equal to the returned\r\n * position.\r\n *\r\n * Will throw if the document does not contain all fields of the order by\r\n * of the query or if any of the fields in the order by are an uncommitted\r\n * server timestamp.\r\n */\n\n\nfunction newQueryBoundFromDocument(query, databaseId, methodName, doc, before) {\n  if (!doc) {\n    throw new FirestoreError(Code.NOT_FOUND, \"Can't use a DocumentSnapshot that doesn't exist for \" + (methodName + \"().\"));\n  }\n\n  var components = []; // Because people expect to continue/end a query at the exact document\n  // provided, we need to use the implicit sort order rather than the explicit\n  // sort order, because it's guaranteed to contain the document key. That way\n  // the position becomes unambiguous and the query continues/ends exactly at\n  // the provided document. Without the key (by using the explicit sort\n  // orders), multiple documents could match the position, yielding duplicate\n  // results.\n\n  for (var _i = 0, _d = queryOrderBy(query); _i < _d.length; _i++) {\n    var orderBy_5 = _d[_i];\n\n    if (orderBy_5.field.isKeyField()) {\n      components.push(refValue(databaseId, doc.key));\n    } else {\n      var value = doc.data.field(orderBy_5.field);\n\n      if (isServerTimestamp(value)) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a ' + 'document for which the field \"' + orderBy_5.field + '\" is an uncommitted server timestamp. (Since the value of ' + 'this field is unknown, you cannot start/end a query with it.)');\n      } else if (value !== null) {\n        components.push(value);\n      } else {\n        var field = orderBy_5.field.canonicalString();\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You are trying to start or end a query using a \" + (\"document for which the field '\" + field + \"' (used as the \") + \"orderBy) does not exist.\");\n      }\n    }\n  }\n\n  return new Bound(components, before);\n}\n/**\r\n * Converts a list of field values to a Bound for the given query.\r\n */\n\n\nfunction newQueryBoundFromFields(query, databaseId, dataReader, methodName, values, before) {\n  // Use explicit order by's because it has to match the query the user made\n  var orderBy = query.explicitOrderBy;\n\n  if (values.length > orderBy.length) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"(). \" + \"The number of arguments must be less than or equal to the \" + \"number of orderBy() clauses\");\n  }\n\n  var components = [];\n\n  for (var i = 0; i < values.length; i++) {\n    var rawValue = values[i];\n    var orderByComponent = orderBy[i];\n\n    if (orderByComponent.field.isKeyField()) {\n      if (typeof rawValue !== 'string') {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Expected a string for document ID in \" + (methodName + \"(), but got a \" + typeof rawValue));\n      }\n\n      if (!isCollectionGroupQuery(query) && rawValue.indexOf('/') !== -1) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. When querying a collection and ordering by FieldPath.documentId(), \" + (\"the value passed to \" + methodName + \"() must be a plain document ID, but \") + (\"'\" + rawValue + \"' contains a slash.\"));\n      }\n\n      var path = query.path.child(ResourcePath.fromString(rawValue));\n\n      if (!DocumentKey.isDocumentKey(path)) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. When querying a collection group and ordering by \" + (\"FieldPath.documentId(), the value passed to \" + methodName + \"() must result in a \") + (\"valid document path, but '\" + path + \"' is not because it contains an odd number \") + \"of segments.\");\n      }\n\n      var key = new DocumentKey(path);\n      components.push(refValue(databaseId, key));\n    } else {\n      var wrapped = parseQueryValue(dataReader, methodName, rawValue);\n      components.push(wrapped);\n    }\n  }\n\n  return new Bound(components, before);\n}\n/**\r\n * Parses the given documentIdValue into a ReferenceValue, throwing\r\n * appropriate errors if the value is anything other than a DocumentReference\r\n * or String, or if the string is malformed.\r\n */\n\n\nfunction parseDocumentIdValue(databaseId, query, documentIdValue) {\n  documentIdValue = util.getModularInstance(documentIdValue);\n\n  if (typeof documentIdValue === 'string') {\n    if (documentIdValue === '') {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. When querying with FieldPath.documentId(), you ' + 'must provide a valid document ID, but it was an empty string.');\n    }\n\n    if (!isCollectionGroupQuery(query) && documentIdValue.indexOf('/') !== -1) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. When querying a collection by \" + \"FieldPath.documentId(), you must provide a plain document ID, but \" + (\"'\" + documentIdValue + \"' contains a '/' character.\"));\n    }\n\n    var path = query.path.child(ResourcePath.fromString(documentIdValue));\n\n    if (!DocumentKey.isDocumentKey(path)) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. When querying a collection group by \" + \"FieldPath.documentId(), the value provided must result in a valid document path, \" + (\"but '\" + path + \"' is not because it has an odd number of segments (\" + path.length + \").\"));\n    }\n\n    return refValue(databaseId, new DocumentKey(path));\n  } else if (documentIdValue instanceof DocumentReference$1) {\n    return refValue(databaseId, documentIdValue._key);\n  } else {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. When querying with FieldPath.documentId(), you must provide a valid \" + \"string or a DocumentReference, but it was: \" + (valueDescription(documentIdValue) + \".\"));\n  }\n}\n/**\r\n * Validates that the value passed into a disjunctive filter satisfies all\r\n * array requirements.\r\n */\n\n\nfunction validateDisjunctiveFilterElements(value, operator) {\n  if (!Array.isArray(value) || value.length === 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid Query. A non-empty array is required for ' + (\"'\" + operator.toString() + \"' filters.\"));\n  }\n\n  if (value.length > 10) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. '\" + operator.toString() + \"' filters support a \" + 'maximum of 10 elements in the value array.');\n  }\n}\n/**\r\n * Given an operator, returns the set of operators that cannot be used with it.\r\n *\r\n * Operators in a query must adhere to the following set of rules:\r\n * 1. Only one array operator is allowed.\r\n * 2. Only one disjunctive operator is allowed.\r\n * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.\r\n * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.\r\n *\r\n * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY\r\n * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN\r\n */\n\n\nfunction conflictingOps(op) {\n  switch (op) {\n    case \"!=\"\n    /* NOT_EQUAL */\n    :\n      return [\"!=\"\n      /* NOT_EQUAL */\n      , \"not-in\"\n      /* NOT_IN */\n      ];\n\n    case \"array-contains\"\n    /* ARRAY_CONTAINS */\n    :\n      return [\"array-contains\"\n      /* ARRAY_CONTAINS */\n      , \"array-contains-any\"\n      /* ARRAY_CONTAINS_ANY */\n      , \"not-in\"\n      /* NOT_IN */\n      ];\n\n    case \"in\"\n    /* IN */\n    :\n      return [\"array-contains-any\"\n      /* ARRAY_CONTAINS_ANY */\n      , \"in\"\n      /* IN */\n      , \"not-in\"\n      /* NOT_IN */\n      ];\n\n    case \"array-contains-any\"\n    /* ARRAY_CONTAINS_ANY */\n    :\n      return [\"array-contains\"\n      /* ARRAY_CONTAINS */\n      , \"array-contains-any\"\n      /* ARRAY_CONTAINS_ANY */\n      , \"in\"\n      /* IN */\n      , \"not-in\"\n      /* NOT_IN */\n      ];\n\n    case \"not-in\"\n    /* NOT_IN */\n    :\n      return [\"array-contains\"\n      /* ARRAY_CONTAINS */\n      , \"array-contains-any\"\n      /* ARRAY_CONTAINS_ANY */\n      , \"in\"\n      /* IN */\n      , \"not-in\"\n      /* NOT_IN */\n      , \"!=\"\n      /* NOT_EQUAL */\n      ];\n\n    default:\n      return [];\n  }\n}\n\nfunction validateNewFilter(query, filter) {\n  if (filter.isInequality()) {\n    var existingField = getInequalityFilterField(query);\n\n    if (existingField !== null && !existingField.isEqual(filter.field)) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' + ' (<, <=, !=, not-in, >, or >=) must be on the same field. But you have' + (\" inequality filters on '\" + existingField.toString() + \"'\") + (\" and '\" + filter.field.toString() + \"'\"));\n    }\n\n    var firstOrderByField = getFirstOrderByField(query);\n\n    if (firstOrderByField !== null) {\n      validateOrderByAndInequalityMatch(query, filter.field, firstOrderByField);\n    }\n  }\n\n  var conflictingOp = findFilterOperator(query, conflictingOps(filter.op));\n\n  if (conflictingOp !== null) {\n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    if (conflictingOp === filter.op) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You cannot use more than one ' + (\"'\" + filter.op.toString() + \"' filter.\"));\n    } else {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You cannot use '\" + filter.op.toString() + \"' filters \" + (\"with '\" + conflictingOp.toString() + \"' filters.\"));\n    }\n  }\n}\n\nfunction validateNewOrderBy(query, orderBy) {\n  if (getFirstOrderByField(query) === null) {\n    // This is the first order by. It must match any inequality.\n    var inequalityField = getInequalityFilterField(query);\n\n    if (inequalityField !== null) {\n      validateOrderByAndInequalityMatch(query, inequalityField, orderBy.field);\n    }\n  }\n}\n\nfunction validateOrderByAndInequalityMatch(baseQuery, inequality, orderBy) {\n  if (!orderBy.isEqual(inequality)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You have a where filter with an inequality \" + (\"(<, <=, !=, not-in, >, or >=) on field '\" + inequality.toString() + \"' \") + (\"and so you must also use '\" + inequality.toString() + \"' \") + \"as your first argument to orderBy(), but your first orderBy() \" + (\"is on field '\" + orderBy.toString() + \"' instead.\"));\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Converts Firestore's internal types to the JavaScript types that we expose\r\n * to the user.\r\n *\r\n * @internal\r\n */\n\n\nvar AbstractUserDataWriter =\n/** @class */\nfunction () {\n  function AbstractUserDataWriter() {}\n\n  AbstractUserDataWriter.prototype.convertValue = function (value, serverTimestampBehavior) {\n    if (serverTimestampBehavior === void 0) {\n      serverTimestampBehavior = 'none';\n    }\n\n    switch (typeOrder(value)) {\n      case 0\n      /* NullValue */\n      :\n        return null;\n\n      case 1\n      /* BooleanValue */\n      :\n        return value.booleanValue;\n\n      case 2\n      /* NumberValue */\n      :\n        return normalizeNumber(value.integerValue || value.doubleValue);\n\n      case 3\n      /* TimestampValue */\n      :\n        return this.convertTimestamp(value.timestampValue);\n\n      case 4\n      /* ServerTimestampValue */\n      :\n        return this.convertServerTimestamp(value, serverTimestampBehavior);\n\n      case 5\n      /* StringValue */\n      :\n        return value.stringValue;\n\n      case 6\n      /* BlobValue */\n      :\n        return this.convertBytes(normalizeByteString(value.bytesValue));\n\n      case 7\n      /* RefValue */\n      :\n        return this.convertReference(value.referenceValue);\n\n      case 8\n      /* GeoPointValue */\n      :\n        return this.convertGeoPoint(value.geoPointValue);\n\n      case 9\n      /* ArrayValue */\n      :\n        return this.convertArray(value.arrayValue, serverTimestampBehavior);\n\n      case 10\n      /* ObjectValue */\n      :\n        return this.convertObject(value.mapValue, serverTimestampBehavior);\n\n      default:\n        throw fail();\n    }\n  };\n\n  AbstractUserDataWriter.prototype.convertObject = function (mapValue, serverTimestampBehavior) {\n    var _this = this;\n\n    var result = {};\n    forEach(mapValue.fields, function (key, value) {\n      result[key] = _this.convertValue(value, serverTimestampBehavior);\n    });\n    return result;\n  };\n\n  AbstractUserDataWriter.prototype.convertGeoPoint = function (value) {\n    return new GeoPoint(normalizeNumber(value.latitude), normalizeNumber(value.longitude));\n  };\n\n  AbstractUserDataWriter.prototype.convertArray = function (arrayValue, serverTimestampBehavior) {\n    var _this = this;\n\n    return (arrayValue.values || []).map(function (value) {\n      return _this.convertValue(value, serverTimestampBehavior);\n    });\n  };\n\n  AbstractUserDataWriter.prototype.convertServerTimestamp = function (value, serverTimestampBehavior) {\n    switch (serverTimestampBehavior) {\n      case 'previous':\n        var previousValue = getPreviousValue(value);\n\n        if (previousValue == null) {\n          return null;\n        }\n\n        return this.convertValue(previousValue, serverTimestampBehavior);\n\n      case 'estimate':\n        return this.convertTimestamp(getLocalWriteTime(value));\n\n      default:\n        return null;\n    }\n  };\n\n  AbstractUserDataWriter.prototype.convertTimestamp = function (value) {\n    var normalizedValue = normalizeTimestamp(value);\n    return new Timestamp(normalizedValue.seconds, normalizedValue.nanos);\n  };\n\n  AbstractUserDataWriter.prototype.convertDocumentKey = function (name, expectedDatabaseId) {\n    var resourcePath = ResourcePath.fromString(name);\n    hardAssert(isValidResourceName(resourcePath));\n    var databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\n    var key = new DocumentKey(resourcePath.popFirst(5));\n\n    if (!databaseId.isEqual(expectedDatabaseId)) {\n      // TODO(b/64130202): Somehow support foreign references.\n      logError(\"Document \" + key + \" contains a document \" + \"reference within a different database (\" + (databaseId.projectId + \"/\" + databaseId.database + \") which is not \") + \"supported. It will be treated as a reference in the current \" + (\"database (\" + expectedDatabaseId.projectId + \"/\" + expectedDatabaseId.database + \") \") + \"instead.\");\n    }\n\n    return key;\n  };\n\n  return AbstractUserDataWriter;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Converts custom model object of type T into DocumentData by applying the\r\n * converter if it exists.\r\n *\r\n * This function is used when converting user objects to DocumentData\r\n * because we want to provide the user with a more specific error message if\r\n * their set() or fails due to invalid data originating from a toFirestore()\r\n * call.\r\n */\n\n\nfunction applyFirestoreDataConverter(converter, value, options) {\n  var convertedValue;\n\n  if (converter) {\n    if (options && (options.merge || options.mergeFields)) {\n      // Cast to `any` in order to satisfy the union type constraint on\n      // toFirestore().\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      convertedValue = converter.toFirestore(value, options);\n    } else {\n      convertedValue = converter.toFirestore(value);\n    }\n  } else {\n    convertedValue = value;\n  }\n\n  return convertedValue;\n}\n\nvar LiteUserDataWriter =\n/** @class */\nfunction (_super) {\n  tslib.__extends(LiteUserDataWriter, _super);\n\n  function LiteUserDataWriter(firestore) {\n    var _this = _super.call(this) || this;\n\n    _this.firestore = firestore;\n    return _this;\n  }\n\n  LiteUserDataWriter.prototype.convertBytes = function (bytes) {\n    return new Bytes(bytes);\n  };\n\n  LiteUserDataWriter.prototype.convertReference = function (name) {\n    var key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return new DocumentReference$1(this.firestore,\n    /* converter= */\n    null, key);\n  };\n\n  return LiteUserDataWriter;\n}(AbstractUserDataWriter);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A write batch, used to perform multiple writes as a single atomic unit.\r\n *\r\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\r\n * provides methods for adding writes to the write batch. None of the writes\r\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\r\n * called.\r\n */\n\n\nvar WriteBatch$1 =\n/** @class */\nfunction () {\n  /** @hideconstructor */\n  function WriteBatch$1(_firestore, _commitHandler) {\n    this._firestore = _firestore;\n    this._commitHandler = _commitHandler;\n    this._mutations = [];\n    this._committed = false;\n    this._dataReader = newUserDataReader(_firestore);\n  }\n\n  WriteBatch$1.prototype.set = function (documentRef, data, options) {\n    this._verifyNotCommitted();\n\n    var ref = validateReference(documentRef, this._firestore);\n    var convertedValue = applyFirestoreDataConverter(ref.converter, data, options);\n    var parsed = parseSetData(this._dataReader, 'WriteBatch.set', ref._key, convertedValue, ref.converter !== null, options);\n\n    this._mutations.push(parsed.toMutation(ref._key, Precondition.none()));\n\n    return this;\n  };\n\n  WriteBatch$1.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n    var moreFieldsAndValues = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      moreFieldsAndValues[_i - 3] = arguments[_i];\n    }\n\n    this._verifyNotCommitted();\n\n    var ref = validateReference(documentRef, this._firestore); // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n\n    fieldOrUpdateData = util.getModularInstance(fieldOrUpdateData);\n    var parsed;\n\n    if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath) {\n      parsed = parseUpdateVarargs(this._dataReader, 'WriteBatch.update', ref._key, fieldOrUpdateData, value, moreFieldsAndValues);\n    } else {\n      parsed = parseUpdateData(this._dataReader, 'WriteBatch.update', ref._key, fieldOrUpdateData);\n    }\n\n    this._mutations.push(parsed.toMutation(ref._key, Precondition.exists(true)));\n\n    return this;\n  };\n  /**\r\n   * Deletes the document referred to by the provided {@link DocumentReference}.\r\n   *\r\n   * @param documentRef - A reference to the document to be deleted.\r\n   * @returns This `WriteBatch` instance. Used for chaining method calls.\r\n   */\n\n\n  WriteBatch$1.prototype.delete = function (documentRef) {\n    this._verifyNotCommitted();\n\n    var ref = validateReference(documentRef, this._firestore);\n    this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.none()));\n    return this;\n  };\n  /**\r\n   * Commits all of the writes in this write batch as a single atomic unit.\r\n   *\r\n   * The result of these writes will only be reflected in document reads that\r\n   * occur after the returned Promise resolves. If the client is offline, the\r\n   * write fails. If you would like to see local modifications or buffer writes\r\n   * until the client is online, use the full Firestore SDK.\r\n   *\r\n   * @returns A Promise resolved once all of the writes in the batch have been\r\n   * successfully written to the backend as an atomic unit (note that it won't\r\n   * resolve while you're offline).\r\n   */\n\n\n  WriteBatch$1.prototype.commit = function () {\n    this._verifyNotCommitted();\n\n    this._committed = true;\n\n    if (this._mutations.length > 0) {\n      return this._commitHandler(this._mutations);\n    }\n\n    return Promise.resolve();\n  };\n\n  WriteBatch$1.prototype._verifyNotCommitted = function () {\n    if (this._committed) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' + 'has been called.');\n    }\n  };\n\n  return WriteBatch$1;\n}();\n\nfunction validateReference(documentRef, firestore) {\n  documentRef = util.getModularInstance(documentRef);\n\n  if (documentRef.firestore !== firestore) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n  } else {\n    return documentRef;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n// legacy SDK.\n\n/**\r\n * A reference to a transaction.\r\n *\r\n * The `Transaction` object passed to a transaction's `updateFunction` provides\r\n * the methods to read and write data within the transaction context. See\r\n * {@link runTransaction}.\r\n */\n\n\nvar Transaction$2 =\n/** @class */\nfunction () {\n  /** @hideconstructor */\n  function Transaction$2(_firestore, _transaction) {\n    this._firestore = _firestore;\n    this._transaction = _transaction;\n    this._dataReader = newUserDataReader(_firestore);\n  }\n  /**\r\n   * Reads the document referenced by the provided {@link DocumentReference}.\r\n   *\r\n   * @param documentRef - A reference to the document to be read.\r\n   * @returns A `DocumentSnapshot` with the read data.\r\n   */\n\n\n  Transaction$2.prototype.get = function (documentRef) {\n    var _this = this;\n\n    var ref = validateReference(documentRef, this._firestore);\n    var userDataWriter = new LiteUserDataWriter(this._firestore);\n    return this._transaction.lookup([ref._key]).then(function (docs) {\n      if (!docs || docs.length !== 1) {\n        return fail();\n      }\n\n      var doc = docs[0];\n\n      if (doc.isFoundDocument()) {\n        return new DocumentSnapshot$2(_this._firestore, userDataWriter, doc.key, doc, ref.converter);\n      } else if (doc.isNoDocument()) {\n        return new DocumentSnapshot$2(_this._firestore, userDataWriter, ref._key, null, ref.converter);\n      } else {\n        throw fail();\n      }\n    });\n  };\n\n  Transaction$2.prototype.set = function (documentRef, value, options) {\n    var ref = validateReference(documentRef, this._firestore);\n    var convertedValue = applyFirestoreDataConverter(ref.converter, value, options);\n    var parsed = parseSetData(this._dataReader, 'Transaction.set', ref._key, convertedValue, ref.converter !== null, options);\n\n    this._transaction.set(ref._key, parsed);\n\n    return this;\n  };\n\n  Transaction$2.prototype.update = function (documentRef, fieldOrUpdateData, value) {\n    var moreFieldsAndValues = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      moreFieldsAndValues[_i - 3] = arguments[_i];\n    }\n\n    var ref = validateReference(documentRef, this._firestore); // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n\n    fieldOrUpdateData = util.getModularInstance(fieldOrUpdateData);\n    var parsed;\n\n    if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath) {\n      parsed = parseUpdateVarargs(this._dataReader, 'Transaction.update', ref._key, fieldOrUpdateData, value, moreFieldsAndValues);\n    } else {\n      parsed = parseUpdateData(this._dataReader, 'Transaction.update', ref._key, fieldOrUpdateData);\n    }\n\n    this._transaction.update(ref._key, parsed);\n\n    return this;\n  };\n  /**\r\n   * Deletes the document referred to by the provided {@link DocumentReference}.\r\n   *\r\n   * @param documentRef - A reference to the document to be deleted.\r\n   * @returns This `Transaction` instance. Used for chaining method calls.\r\n   */\n\n\n  Transaction$2.prototype.delete = function (documentRef) {\n    var ref = validateReference(documentRef, this._firestore);\n\n    this._transaction.delete(ref._key);\n\n    return this;\n  };\n\n  return Transaction$2;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isPartialObserver(obj) {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\r\n * Returns true if obj is an object and contains at least one of the specified\r\n * methods.\r\n */\n\n\nfunction implementsAnyMethods(obj, methods) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  var object = obj;\n\n  for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n    var method = methods_1[_i];\n\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Reads the document referred to by this `DocumentReference`.\r\n *\r\n * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting\r\n * for data from the server, but it may return cached data or fail if you are\r\n * offline and the server cannot be reached. To specify this behavior, invoke\r\n * {@link getDocFromCache} or {@link getDocFromServer}.\r\n *\r\n * @param reference - The reference of the document to fetch.\r\n * @returns A Promise resolved with a `DocumentSnapshot` containing the\r\n * current document contents.\r\n */\n\n\nfunction getDoc(reference) {\n  reference = cast(reference, DocumentReference$1);\n  var firestore = cast(reference.firestore, Firestore$1);\n  var client = ensureFirestoreConfigured(firestore);\n  return firestoreClientGetDocumentViaSnapshotListener(client, reference._key).then(function (snapshot) {\n    return convertToDocSnapshot(firestore, reference, snapshot);\n  });\n}\n\nvar ExpUserDataWriter =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ExpUserDataWriter, _super);\n\n  function ExpUserDataWriter(firestore) {\n    var _this = _super.call(this) || this;\n\n    _this.firestore = firestore;\n    return _this;\n  }\n\n  ExpUserDataWriter.prototype.convertBytes = function (bytes) {\n    return new Bytes(bytes);\n  };\n\n  ExpUserDataWriter.prototype.convertReference = function (name) {\n    var key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return new DocumentReference$1(this.firestore,\n    /* converter= */\n    null, key);\n  };\n\n  return ExpUserDataWriter;\n}(AbstractUserDataWriter);\n/**\r\n * Reads the document referred to by this `DocumentReference` from cache.\r\n * Returns an error if the document is not currently cached.\r\n *\r\n * @returns A Promise resolved with a `DocumentSnapshot` containing the\r\n * current document contents.\r\n */\n\n\nfunction getDocFromCache(reference) {\n  reference = cast(reference, DocumentReference$1);\n  var firestore = cast(reference.firestore, Firestore$1);\n  var client = ensureFirestoreConfigured(firestore);\n  var userDataWriter = new ExpUserDataWriter(firestore);\n  return firestoreClientGetDocumentFromLocalCache(client, reference._key).then(function (doc) {\n    return new DocumentSnapshot$1(firestore, userDataWriter, reference._key, doc, new SnapshotMetadata(doc !== null && doc.hasLocalMutations,\n    /* fromCache= */\n    true), reference.converter);\n  });\n}\n/**\r\n * Reads the document referred to by this `DocumentReference` from the server.\r\n * Returns an error if the network is not available.\r\n *\r\n * @returns A Promise resolved with a `DocumentSnapshot` containing the\r\n * current document contents.\r\n */\n\n\nfunction getDocFromServer(reference) {\n  reference = cast(reference, DocumentReference$1);\n  var firestore = cast(reference.firestore, Firestore$1);\n  var client = ensureFirestoreConfigured(firestore);\n  return firestoreClientGetDocumentViaSnapshotListener(client, reference._key, {\n    source: 'server'\n  }).then(function (snapshot) {\n    return convertToDocSnapshot(firestore, reference, snapshot);\n  });\n}\n/**\r\n * Executes the query and returns the results as a `QuerySnapshot`.\r\n *\r\n * Note: `getDocs()` attempts to provide up-to-date data when possible by\r\n * waiting for data from the server, but it may return cached data or fail if\r\n * you are offline and the server cannot be reached. To specify this behavior,\r\n * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.\r\n *\r\n * @returns A Promise that will be resolved with the results of the query.\r\n */\n\n\nfunction getDocs(query) {\n  query = cast(query, Query$1);\n  var firestore = cast(query.firestore, Firestore$1);\n  var client = ensureFirestoreConfigured(firestore);\n  var userDataWriter = new ExpUserDataWriter(firestore);\n  validateHasExplicitOrderByForLimitToLast(query._query);\n  return firestoreClientGetDocumentsViaSnapshotListener(client, query._query).then(function (snapshot) {\n    return new QuerySnapshot$1(firestore, userDataWriter, query, snapshot);\n  });\n}\n/**\r\n * Executes the query and returns the results as a `QuerySnapshot` from cache.\r\n * Returns an error if the document is not currently cached.\r\n *\r\n * @returns A Promise that will be resolved with the results of the query.\r\n */\n\n\nfunction getDocsFromCache(query) {\n  query = cast(query, Query$1);\n  var firestore = cast(query.firestore, Firestore$1);\n  var client = ensureFirestoreConfigured(firestore);\n  var userDataWriter = new ExpUserDataWriter(firestore);\n  return firestoreClientGetDocumentsFromLocalCache(client, query._query).then(function (snapshot) {\n    return new QuerySnapshot$1(firestore, userDataWriter, query, snapshot);\n  });\n}\n/**\r\n * Executes the query and returns the results as a `QuerySnapshot` from the\r\n * server. Returns an error if the network is not available.\r\n *\r\n * @returns A Promise that will be resolved with the results of the query.\r\n */\n\n\nfunction getDocsFromServer(query) {\n  query = cast(query, Query$1);\n  var firestore = cast(query.firestore, Firestore$1);\n  var client = ensureFirestoreConfigured(firestore);\n  var userDataWriter = new ExpUserDataWriter(firestore);\n  return firestoreClientGetDocumentsViaSnapshotListener(client, query._query, {\n    source: 'server'\n  }).then(function (snapshot) {\n    return new QuerySnapshot$1(firestore, userDataWriter, query, snapshot);\n  });\n}\n\nfunction setDoc(reference, data, options) {\n  reference = cast(reference, DocumentReference$1);\n  var firestore = cast(reference.firestore, Firestore$1);\n  var convertedValue = applyFirestoreDataConverter(reference.converter, data, options);\n  var dataReader = newUserDataReader(firestore);\n  var parsed = parseSetData(dataReader, 'setDoc', reference._key, convertedValue, reference.converter !== null, options);\n  var mutation = parsed.toMutation(reference._key, Precondition.none());\n  return executeWrite(firestore, [mutation]);\n}\n\nfunction updateDoc(reference, fieldOrUpdateData, value) {\n  var moreFieldsAndValues = [];\n\n  for (var _i = 3; _i < arguments.length; _i++) {\n    moreFieldsAndValues[_i - 3] = arguments[_i];\n  }\n\n  reference = cast(reference, DocumentReference$1);\n  var firestore = cast(reference.firestore, Firestore$1);\n  var dataReader = newUserDataReader(firestore); // For Compat types, we have to \"extract\" the underlying types before\n  // performing validation.\n\n  fieldOrUpdateData = util.getModularInstance(fieldOrUpdateData);\n  var parsed;\n\n  if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath) {\n    parsed = parseUpdateVarargs(dataReader, 'updateDoc', reference._key, fieldOrUpdateData, value, moreFieldsAndValues);\n  } else {\n    parsed = parseUpdateData(dataReader, 'updateDoc', reference._key, fieldOrUpdateData);\n  }\n\n  var mutation = parsed.toMutation(reference._key, Precondition.exists(true));\n  return executeWrite(firestore, [mutation]);\n}\n/**\r\n * Deletes the document referred to by the specified `DocumentReference`.\r\n *\r\n * @param reference - A reference to the document to delete.\r\n * @returns A Promise resolved once the document has been successfully\r\n * deleted from the backend (note that it won't resolve while you're offline).\r\n */\n\n\nfunction deleteDoc(reference) {\n  var firestore = cast(reference.firestore, Firestore$1);\n  var mutations = [new DeleteMutation(reference._key, Precondition.none())];\n  return executeWrite(firestore, mutations);\n}\n/**\r\n * Add a new document to specified `CollectionReference` with the given data,\r\n * assigning it a document ID automatically.\r\n *\r\n * @param reference - A reference to the collection to add this document to.\r\n * @param data - An Object containing the data for the new document.\r\n * @returns A Promise resolved with a `DocumentReference` pointing to the\r\n * newly created document after it has been written to the backend (Note that it\r\n * won't resolve while you're offline).\r\n */\n\n\nfunction addDoc(reference, data) {\n  var firestore = cast(reference.firestore, Firestore$1);\n  var docRef = doc(reference);\n  var convertedValue = applyFirestoreDataConverter(reference.converter, data);\n  var dataReader = newUserDataReader(reference.firestore);\n  var parsed = parseSetData(dataReader, 'addDoc', docRef._key, convertedValue, reference.converter !== null, {});\n  var mutation = parsed.toMutation(docRef._key, Precondition.exists(false));\n  return executeWrite(firestore, [mutation]).then(function () {\n    return docRef;\n  });\n}\n\nfunction onSnapshot(reference) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  var _a, _b, _c;\n\n  reference = util.getModularInstance(reference);\n  var options = {\n    includeMetadataChanges: false\n  };\n  var currArg = 0;\n\n  if (typeof args[currArg] === 'object' && !isPartialObserver(args[currArg])) {\n    options = args[currArg];\n    currArg++;\n  }\n\n  var internalOptions = {\n    includeMetadataChanges: options.includeMetadataChanges\n  };\n\n  if (isPartialObserver(args[currArg])) {\n    var userObserver = args[currArg];\n    args[currArg] = (_a = userObserver.next) === null || _a === void 0 ? void 0 : _a.bind(userObserver);\n    args[currArg + 1] = (_b = userObserver.error) === null || _b === void 0 ? void 0 : _b.bind(userObserver);\n    args[currArg + 2] = (_c = userObserver.complete) === null || _c === void 0 ? void 0 : _c.bind(userObserver);\n  }\n\n  var observer;\n  var firestore;\n  var internalQuery;\n\n  if (reference instanceof DocumentReference$1) {\n    firestore = cast(reference.firestore, Firestore$1);\n    internalQuery = newQueryForPath(reference._key.path);\n    observer = {\n      next: function (snapshot) {\n        if (args[currArg]) {\n          args[currArg](convertToDocSnapshot(firestore, reference, snapshot));\n        }\n      },\n      error: args[currArg + 1],\n      complete: args[currArg + 2]\n    };\n  } else {\n    var query_5 = cast(reference, Query$1);\n    firestore = cast(query_5.firestore, Firestore$1);\n    internalQuery = query_5._query;\n    var userDataWriter_1 = new ExpUserDataWriter(firestore);\n    observer = {\n      next: function (snapshot) {\n        if (args[currArg]) {\n          args[currArg](new QuerySnapshot$1(firestore, userDataWriter_1, query_5, snapshot));\n        }\n      },\n      error: args[currArg + 1],\n      complete: args[currArg + 2]\n    };\n    validateHasExplicitOrderByForLimitToLast(reference._query);\n  }\n\n  var client = ensureFirestoreConfigured(firestore);\n  return firestoreClientListen(client, internalQuery, internalOptions, observer);\n}\n\nfunction onSnapshotsInSync(firestore, arg) {\n  firestore = cast(firestore, Firestore$1);\n  var client = ensureFirestoreConfigured(firestore);\n  var observer = isPartialObserver(arg) ? arg : {\n    next: arg\n  };\n  return firestoreClientAddSnapshotsInSyncListener(client, observer);\n}\n/**\r\n * Locally writes `mutations` on the async queue.\r\n * @internal\r\n */\n\n\nfunction executeWrite(firestore, mutations) {\n  var client = ensureFirestoreConfigured(firestore);\n  return firestoreClientWrite(client, mutations);\n}\n/**\r\n * Converts a ViewSnapshot that contains the single document specified by `ref`\r\n * to a DocumentSnapshot.\r\n */\n\n\nfunction convertToDocSnapshot(firestore, ref, snapshot) {\n  var doc = snapshot.docs.get(ref._key);\n  var userDataWriter = new ExpUserDataWriter(firestore);\n  return new DocumentSnapshot$1(firestore, userDataWriter, ref._key, doc, new SnapshotMetadata(snapshot.hasPendingWrites, snapshot.fromCache), ref.converter);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A reference to a transaction.\r\n *\r\n * The `Transaction` object passed to a transaction's `updateFunction` provides\r\n * the methods to read and write data within the transaction context. See\r\n * {@link runTransaction}.\r\n */\n\n\nvar Transaction$1 =\n/** @class */\nfunction (_super) {\n  tslib.__extends(Transaction$1, _super); // This class implements the same logic as the Transaction API in the Lite SDK\n  // but is subclassed in order to return its own DocumentSnapshot types.\n\n  /** @hideconstructor */\n\n\n  function Transaction$1(_firestore, _transaction) {\n    var _this = _super.call(this, _firestore, _transaction) || this;\n\n    _this._firestore = _firestore;\n    return _this;\n  }\n  /**\r\n   * Reads the document referenced by the provided {@link DocumentReference}.\r\n   *\r\n   * @param documentRef - A reference to the document to be read.\r\n   * @returns A `DocumentSnapshot` with the read data.\r\n   */\n\n\n  Transaction$1.prototype.get = function (documentRef) {\n    var _this = this;\n\n    var ref = validateReference(documentRef, this._firestore);\n    var userDataWriter = new ExpUserDataWriter(this._firestore);\n    return _super.prototype.get.call(this, documentRef).then(function (liteDocumentSnapshot) {\n      return new DocumentSnapshot$1(_this._firestore, userDataWriter, ref._key, liteDocumentSnapshot._document, new SnapshotMetadata(\n      /* hasPendingWrites= */\n      false,\n      /* fromCache= */\n      false), ref.converter);\n    });\n  };\n\n  return Transaction$1;\n}(Transaction$2);\n/**\r\n * Executes the given `updateFunction` and then attempts to commit the changes\r\n * applied within the transaction. If any document read within the transaction\r\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\r\n * commit after 5 attempts, the transaction fails.\r\n *\r\n * The maximum number of writes allowed in a single transaction is 500.\r\n *\r\n * @param firestore - A reference to the Firestore database to run this\r\n * transaction against.\r\n * @param updateFunction - The function to execute within the transaction\r\n * context.\r\n * @returns If the transaction completed successfully or was explicitly aborted\r\n * (the `updateFunction` returned a failed promise), the promise returned by the\r\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\r\n * rejected promise with the corresponding failure error is returned.\r\n */\n\n\nfunction runTransaction(firestore, updateFunction) {\n  var client = ensureFirestoreConfigured(firestore);\n  return firestoreClientTransaction(client, function (internalTransaction) {\n    return updateFunction(new Transaction$1(firestore, internalTransaction));\n  });\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Helper function to assert Uint8Array is available at runtime. */\n\n\nfunction assertUint8ArrayAvailable() {\n  if (typeof Uint8Array === 'undefined') {\n    throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\n  }\n}\n/** Immutable class holding a blob (binary data) */\n\n\nvar Blob =\n/** @class */\nfunction () {\n  function Blob(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  Blob.fromBase64String = function (base64) {\n    return new Blob(Bytes.fromBase64String(base64));\n  };\n\n  Blob.fromUint8Array = function (array) {\n    assertUint8ArrayAvailable();\n    return new Blob(Bytes.fromUint8Array(array));\n  };\n\n  Blob.prototype.toBase64 = function () {\n    return this._delegate.toBase64();\n  };\n\n  Blob.prototype.toUint8Array = function () {\n    assertUint8ArrayAvailable();\n    return this._delegate.toUint8Array();\n  };\n\n  Blob.prototype.isEqual = function (other) {\n    return this._delegate.isEqual(other._delegate);\n  };\n\n  Blob.prototype.toString = function () {\n    return 'Blob(base64: ' + this.toBase64() + ')';\n  };\n\n  return Blob;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The persistence provider included with the full Firestore SDK.\r\n */\n\n\nvar IndexedDbPersistenceProvider =\n/** @class */\nfunction () {\n  function IndexedDbPersistenceProvider() {}\n\n  IndexedDbPersistenceProvider.prototype.enableIndexedDbPersistence = function (firestore, forceOwnership) {\n    return enableIndexedDbPersistence(firestore._delegate, {\n      forceOwnership: forceOwnership\n    });\n  };\n\n  IndexedDbPersistenceProvider.prototype.enableMultiTabIndexedDbPersistence = function (firestore) {\n    return enableMultiTabIndexedDbPersistence(firestore._delegate);\n  };\n\n  IndexedDbPersistenceProvider.prototype.clearIndexedDbPersistence = function (firestore) {\n    return clearIndexedDbPersistence(firestore._delegate);\n  };\n\n  return IndexedDbPersistenceProvider;\n}();\n/**\r\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\r\n * to the functional API of firestore-exp.\r\n */\n\n\nvar Firestore =\n/** @class */\nfunction () {\n  function Firestore(databaseIdOrApp, _delegate, _persistenceProvider) {\n    var _this = this;\n\n    this._delegate = _delegate;\n    this._persistenceProvider = _persistenceProvider;\n    this.INTERNAL = {\n      delete: function () {\n        return _this.terminate();\n      }\n    };\n\n    if (!(databaseIdOrApp instanceof DatabaseId)) {\n      this._appCompat = databaseIdOrApp;\n    }\n  }\n\n  Object.defineProperty(Firestore.prototype, \"_databaseId\", {\n    get: function () {\n      return this._delegate._databaseId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Firestore.prototype.settings = function (settingsLiteral) {\n    var currentSettings = this._delegate._getSettings();\n\n    if (!settingsLiteral.merge && currentSettings.host !== settingsLiteral.host) {\n      logWarn('You are overriding the original host. If you did not intend ' + 'to override your settings, use {merge: true}.');\n    }\n\n    if (settingsLiteral.merge) {\n      settingsLiteral = Object.assign(Object.assign({}, currentSettings), settingsLiteral); // Remove the property from the settings once the merge is completed\n\n      delete settingsLiteral.merge;\n    }\n\n    this._delegate._setSettings(settingsLiteral);\n  };\n\n  Firestore.prototype.useEmulator = function (host, port, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    connectFirestoreEmulator(this._delegate, host, port, options);\n  };\n\n  Firestore.prototype.enableNetwork = function () {\n    return enableNetwork(this._delegate);\n  };\n\n  Firestore.prototype.disableNetwork = function () {\n    return disableNetwork(this._delegate);\n  };\n\n  Firestore.prototype.enablePersistence = function (settings) {\n    var synchronizeTabs = false;\n    var experimentalForceOwningTab = false;\n\n    if (settings) {\n      synchronizeTabs = !!settings.synchronizeTabs;\n      experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\n      validateIsNotUsedTogether('synchronizeTabs', synchronizeTabs, 'experimentalForceOwningTab', experimentalForceOwningTab);\n    }\n\n    return synchronizeTabs ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this) : this._persistenceProvider.enableIndexedDbPersistence(this, experimentalForceOwningTab);\n  };\n\n  Firestore.prototype.clearPersistence = function () {\n    return this._persistenceProvider.clearIndexedDbPersistence(this);\n  };\n\n  Firestore.prototype.terminate = function () {\n    if (this._appCompat) {\n      this._appCompat._removeServiceInstance('firestore');\n\n      this._appCompat._removeServiceInstance('firestore-exp');\n    }\n\n    return this._delegate._delete();\n  };\n\n  Firestore.prototype.waitForPendingWrites = function () {\n    return waitForPendingWrites(this._delegate);\n  };\n\n  Firestore.prototype.onSnapshotsInSync = function (arg) {\n    return onSnapshotsInSync(this._delegate, arg);\n  };\n\n  Object.defineProperty(Firestore.prototype, \"app\", {\n    get: function () {\n      if (!this._appCompat) {\n        throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" + 'not available');\n      }\n\n      return this._appCompat;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Firestore.prototype.collection = function (pathString) {\n    try {\n      return new CollectionReference(this, collection(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');\n    }\n  };\n\n  Firestore.prototype.doc = function (pathString) {\n    try {\n      return new DocumentReference(this, doc(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');\n    }\n  };\n\n  Firestore.prototype.collectionGroup = function (collectionId) {\n    try {\n      return new Query(this, collectionGroup(this._delegate, collectionId));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collectionGroup()', 'Firestore.collectionGroup()');\n    }\n  };\n\n  Firestore.prototype.runTransaction = function (updateFunction) {\n    var _this = this;\n\n    return runTransaction(this._delegate, function (transaction) {\n      return updateFunction(new Transaction(_this, transaction));\n    });\n  };\n\n  Firestore.prototype.batch = function () {\n    var _this = this;\n\n    ensureFirestoreConfigured(this._delegate);\n    return new WriteBatch(new WriteBatch$1(this._delegate, function (mutations) {\n      return executeWrite(_this._delegate, mutations);\n    }));\n  };\n\n  Firestore.prototype.loadBundle = function (bundleData) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, '\"loadBundle()\" does not exist, have you imported \"firebase/firestore/bundle\"?');\n  };\n\n  Firestore.prototype.namedQuery = function (name) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, '\"namedQuery()\" does not exist, have you imported \"firebase/firestore/bundle\"?');\n  };\n\n  return Firestore;\n}();\n\nvar UserDataWriter =\n/** @class */\nfunction (_super) {\n  tslib.__extends(UserDataWriter, _super);\n\n  function UserDataWriter(firestore) {\n    var _this = _super.call(this) || this;\n\n    _this.firestore = firestore;\n    return _this;\n  }\n\n  UserDataWriter.prototype.convertBytes = function (bytes) {\n    return new Blob(new Bytes(bytes));\n  };\n\n  UserDataWriter.prototype.convertReference = function (name) {\n    var key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return DocumentReference.forKey(key, this.firestore,\n    /* converter= */\n    null);\n  };\n\n  return UserDataWriter;\n}(AbstractUserDataWriter);\n\nfunction setLogLevel(level) {\n  setLogLevel$1(level);\n}\n/**\r\n * A reference to a transaction.\r\n */\n\n\nvar Transaction =\n/** @class */\nfunction () {\n  function Transaction(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(_firestore);\n  }\n\n  Transaction.prototype.get = function (documentRef) {\n    var _this = this;\n\n    var ref = castReference(documentRef);\n    return this._delegate.get(ref).then(function (result) {\n      return new DocumentSnapshot(_this._firestore, new DocumentSnapshot$1(_this._firestore._delegate, _this._userDataWriter, result._key, result._document, result.metadata, ref.converter));\n    });\n  };\n\n  Transaction.prototype.set = function (documentRef, data, options) {\n    var ref = castReference(documentRef);\n\n    if (options) {\n      validateSetOptions('Transaction.set', options);\n\n      this._delegate.set(ref, data, options);\n    } else {\n      this._delegate.set(ref, data);\n    }\n\n    return this;\n  };\n\n  Transaction.prototype.update = function (documentRef, dataOrField, value) {\n    var _d;\n\n    var moreFieldsAndValues = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      moreFieldsAndValues[_i - 3] = arguments[_i];\n    }\n\n    var ref = castReference(documentRef);\n\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField);\n    } else {\n      (_d = this._delegate).update.apply(_d, tslib.__spreadArray([ref, dataOrField, value], moreFieldsAndValues));\n    }\n\n    return this;\n  };\n\n  Transaction.prototype.delete = function (documentRef) {\n    var ref = castReference(documentRef);\n\n    this._delegate.delete(ref);\n\n    return this;\n  };\n\n  return Transaction;\n}();\n\nvar WriteBatch =\n/** @class */\nfunction () {\n  function WriteBatch(_delegate) {\n    this._delegate = _delegate;\n  }\n\n  WriteBatch.prototype.set = function (documentRef, data, options) {\n    var ref = castReference(documentRef);\n\n    if (options) {\n      validateSetOptions('WriteBatch.set', options);\n\n      this._delegate.set(ref, data, options);\n    } else {\n      this._delegate.set(ref, data);\n    }\n\n    return this;\n  };\n\n  WriteBatch.prototype.update = function (documentRef, dataOrField, value) {\n    var _d;\n\n    var moreFieldsAndValues = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      moreFieldsAndValues[_i - 3] = arguments[_i];\n    }\n\n    var ref = castReference(documentRef);\n\n    if (arguments.length === 2) {\n      this._delegate.update(ref, dataOrField);\n    } else {\n      (_d = this._delegate).update.apply(_d, tslib.__spreadArray([ref, dataOrField, value], moreFieldsAndValues));\n    }\n\n    return this;\n  };\n\n  WriteBatch.prototype.delete = function (documentRef) {\n    var ref = castReference(documentRef);\n\n    this._delegate.delete(ref);\n\n    return this;\n  };\n\n  WriteBatch.prototype.commit = function () {\n    return this._delegate.commit();\n  };\n\n  return WriteBatch;\n}();\n/**\r\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\r\n * experimental SDK into corresponding types from the Classic SDK before passing\r\n * them to the wrapped converter.\r\n */\n\n\nvar FirestoreDataConverter =\n/** @class */\nfunction () {\n  function FirestoreDataConverter(_firestore, _userDataWriter, _delegate) {\n    this._firestore = _firestore;\n    this._userDataWriter = _userDataWriter;\n    this._delegate = _delegate;\n  }\n\n  FirestoreDataConverter.prototype.fromFirestore = function (snapshot, options) {\n    var expSnapshot = new QueryDocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, snapshot._key, snapshot._document, snapshot.metadata,\n    /* converter= */\n    null);\n    return this._delegate.fromFirestore(new QueryDocumentSnapshot(this._firestore, expSnapshot), options !== null && options !== void 0 ? options : {});\n  };\n\n  FirestoreDataConverter.prototype.toFirestore = function (modelObject, options) {\n    if (!options) {\n      return this._delegate.toFirestore(modelObject);\n    } else {\n      return this._delegate.toFirestore(modelObject, options);\n    }\n  }; // Use the same instance of `FirestoreDataConverter` for the given instances\n  // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\n  // compare equal for two objects created with the same converter instance.\n\n\n  FirestoreDataConverter.getInstance = function (firestore, converter) {\n    var converterMapByFirestore = FirestoreDataConverter.INSTANCES;\n    var untypedConverterByConverter = converterMapByFirestore.get(firestore);\n\n    if (!untypedConverterByConverter) {\n      untypedConverterByConverter = new WeakMap();\n      converterMapByFirestore.set(firestore, untypedConverterByConverter);\n    }\n\n    var instance = untypedConverterByConverter.get(converter);\n\n    if (!instance) {\n      instance = new FirestoreDataConverter(firestore, new UserDataWriter(firestore), converter);\n      untypedConverterByConverter.set(converter, instance);\n    }\n\n    return instance;\n  };\n\n  return FirestoreDataConverter;\n}();\n\nFirestoreDataConverter.INSTANCES = new WeakMap();\n/**\r\n * A reference to a particular document in a collection in the database.\r\n */\n\nvar DocumentReference =\n/** @class */\nfunction () {\n  function DocumentReference(firestore, _delegate) {\n    this.firestore = firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  DocumentReference.forPath = function (path, firestore, converter) {\n    if (path.length % 2 !== 0) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' + 'references must have an even number of segments, but ' + (path.canonicalString() + \" has \" + path.length));\n    }\n\n    return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, new DocumentKey(path)));\n  };\n\n  DocumentReference.forKey = function (key, firestore, converter) {\n    return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, key));\n  };\n\n  Object.defineProperty(DocumentReference.prototype, \"id\", {\n    get: function () {\n      return this._delegate.id;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DocumentReference.prototype, \"parent\", {\n    get: function () {\n      return new CollectionReference(this.firestore, this._delegate.parent);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DocumentReference.prototype, \"path\", {\n    get: function () {\n      return this._delegate.path;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DocumentReference.prototype.collection = function (pathString) {\n    try {\n      return new CollectionReference(this.firestore, collection(this._delegate, pathString));\n    } catch (e) {\n      throw replaceFunctionName(e, 'collection()', 'DocumentReference.collection()');\n    }\n  };\n\n  DocumentReference.prototype.isEqual = function (other) {\n    other = util.getModularInstance(other);\n\n    if (!(other instanceof DocumentReference$1)) {\n      return false;\n    }\n\n    return refEqual(this._delegate, other);\n  };\n\n  DocumentReference.prototype.set = function (value, options) {\n    options = validateSetOptions('DocumentReference.set', options);\n\n    try {\n      return setDoc(this._delegate, value, options);\n    } catch (e) {\n      throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');\n    }\n  };\n\n  DocumentReference.prototype.update = function (fieldOrUpdateData, value) {\n    var moreFieldsAndValues = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      moreFieldsAndValues[_i - 2] = arguments[_i];\n    }\n\n    try {\n      if (arguments.length === 1) {\n        return updateDoc(this._delegate, fieldOrUpdateData);\n      } else {\n        return updateDoc.apply(void 0, tslib.__spreadArray([this._delegate, fieldOrUpdateData, value], moreFieldsAndValues));\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');\n    }\n  };\n\n  DocumentReference.prototype.delete = function () {\n    return deleteDoc(this._delegate);\n  };\n\n  DocumentReference.prototype.onSnapshot = function () {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var options = extractSnapshotOptions(args);\n    var observer = wrapObserver(args, function (result) {\n      return new DocumentSnapshot(_this.firestore, new DocumentSnapshot$1(_this.firestore._delegate, _this._userDataWriter, result._key, result._document, result.metadata, _this._delegate.converter));\n    });\n    return onSnapshot(this._delegate, options, observer);\n  };\n\n  DocumentReference.prototype.get = function (options) {\n    var _this = this;\n\n    var snap;\n\n    if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\n      snap = getDocFromCache(this._delegate);\n    } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\n      snap = getDocFromServer(this._delegate);\n    } else {\n      snap = getDoc(this._delegate);\n    }\n\n    return snap.then(function (result) {\n      return new DocumentSnapshot(_this.firestore, new DocumentSnapshot$1(_this.firestore._delegate, _this._userDataWriter, result._key, result._document, result.metadata, _this._delegate.converter));\n    });\n  };\n\n  DocumentReference.prototype.withConverter = function (converter) {\n    return new DocumentReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  };\n\n  return DocumentReference;\n}();\n/**\r\n * Replaces the function name in an error thrown by the firestore-exp API\r\n * with the function names used in the classic API.\r\n */\n\n\nfunction replaceFunctionName(e, original, updated) {\n  e.message = e.message.replace(original, updated);\n  return e;\n}\n/**\r\n * Iterates the list of arguments from an `onSnapshot` call and returns the\r\n * first argument that may be an `SnapshotListenOptions` object. Returns an\r\n * empty object if none is found.\r\n */\n\n\nfunction extractSnapshotOptions(args) {\n  for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {\n    var arg = args_1[_i];\n\n    if (typeof arg === 'object' && !isPartialObserver(arg)) {\n      return arg;\n    }\n  }\n\n  return {};\n}\n/**\r\n * Creates an observer that can be passed to the firestore-exp SDK. The\r\n * observer converts all observed values into the format expected by the classic\r\n * SDK.\r\n *\r\n * @param args - The list of arguments from an `onSnapshot` call.\r\n * @param wrapper - The function that converts the firestore-exp type into the\r\n * type used by this shim.\r\n */\n\n\nfunction wrapObserver(args, wrapper) {\n  var _a, _b;\n\n  var userObserver;\n\n  if (isPartialObserver(args[0])) {\n    userObserver = args[0];\n  } else if (isPartialObserver(args[1])) {\n    userObserver = args[1];\n  } else if (typeof args[0] === 'function') {\n    userObserver = {\n      next: args[0],\n      error: args[1],\n      complete: args[2]\n    };\n  } else {\n    userObserver = {\n      next: args[1],\n      error: args[2],\n      complete: args[3]\n    };\n  }\n\n  return {\n    next: function (val) {\n      if (userObserver.next) {\n        userObserver.next(wrapper(val));\n      }\n    },\n    error: (_a = userObserver.error) === null || _a === void 0 ? void 0 : _a.bind(userObserver),\n    complete: (_b = userObserver.complete) === null || _b === void 0 ? void 0 : _b.bind(userObserver)\n  };\n}\n\nvar DocumentSnapshot =\n/** @class */\nfunction () {\n  function DocumentSnapshot(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  Object.defineProperty(DocumentSnapshot.prototype, \"ref\", {\n    get: function () {\n      return new DocumentReference(this._firestore, this._delegate.ref);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DocumentSnapshot.prototype, \"id\", {\n    get: function () {\n      return this._delegate.id;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DocumentSnapshot.prototype, \"metadata\", {\n    get: function () {\n      return this._delegate.metadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DocumentSnapshot.prototype, \"exists\", {\n    get: function () {\n      return this._delegate.exists();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DocumentSnapshot.prototype.data = function (options) {\n    return this._delegate.data(options);\n  };\n\n  DocumentSnapshot.prototype.get = function (fieldPath, options // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) {\n    return this._delegate.get(fieldPath, options);\n  };\n\n  DocumentSnapshot.prototype.isEqual = function (other) {\n    return snapshotEqual(this._delegate, other._delegate);\n  };\n\n  return DocumentSnapshot;\n}();\n\nvar QueryDocumentSnapshot =\n/** @class */\nfunction (_super) {\n  tslib.__extends(QueryDocumentSnapshot, _super);\n\n  function QueryDocumentSnapshot() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  QueryDocumentSnapshot.prototype.data = function (options) {\n    var data = this._delegate.data(options);\n\n    return data;\n  };\n\n  return QueryDocumentSnapshot;\n}(DocumentSnapshot);\n\nvar Query =\n/** @class */\nfunction () {\n  function Query(firestore, _delegate) {\n    this.firestore = firestore;\n    this._delegate = _delegate;\n    this._userDataWriter = new UserDataWriter(firestore);\n  }\n\n  Query.prototype.where = function (fieldPath, opStr, value) {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `where` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query(this.firestore, query(this._delegate, where(fieldPath, opStr, value)));\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  };\n\n  Query.prototype.orderBy = function (fieldPath, directionStr) {\n    try {\n      // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\n      // FieldPath Compat type as input, but is not typed as such in order to\n      // not expose this via our public typings file.\n      return new Query(this.firestore, query(this._delegate, orderBy(fieldPath, directionStr)));\n    } catch (e) {\n      throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\n    }\n  };\n\n  Query.prototype.limit = function (n) {\n    try {\n      return new Query(this.firestore, query(this._delegate, limit(n)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'limit()', 'Query.limit()');\n    }\n  };\n\n  Query.prototype.limitToLast = function (n) {\n    try {\n      return new Query(this.firestore, query(this._delegate, limitToLast(n)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');\n    }\n  };\n\n  Query.prototype.startAt = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    try {\n      return new Query(this.firestore, query(this._delegate, startAt.apply(void 0, args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');\n    }\n  };\n\n  Query.prototype.startAfter = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    try {\n      return new Query(this.firestore, query(this._delegate, startAfter.apply(void 0, args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');\n    }\n  };\n\n  Query.prototype.endBefore = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    try {\n      return new Query(this.firestore, query(this._delegate, endBefore.apply(void 0, args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');\n    }\n  };\n\n  Query.prototype.endAt = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    try {\n      return new Query(this.firestore, query(this._delegate, endAt.apply(void 0, args)));\n    } catch (e) {\n      throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');\n    }\n  };\n\n  Query.prototype.isEqual = function (other) {\n    return queryEqual(this._delegate, other._delegate);\n  };\n\n  Query.prototype.get = function (options) {\n    var _this = this;\n\n    var query;\n\n    if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\n      query = getDocsFromCache(this._delegate);\n    } else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\n      query = getDocsFromServer(this._delegate);\n    } else {\n      query = getDocs(this._delegate);\n    }\n\n    return query.then(function (result) {\n      return new QuerySnapshot(_this.firestore, new QuerySnapshot$1(_this.firestore._delegate, _this._userDataWriter, _this._delegate, result._snapshot));\n    });\n  };\n\n  Query.prototype.onSnapshot = function () {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var options = extractSnapshotOptions(args);\n    var observer = wrapObserver(args, function (snap) {\n      return new QuerySnapshot(_this.firestore, new QuerySnapshot$1(_this.firestore._delegate, _this._userDataWriter, _this._delegate, snap._snapshot));\n    });\n    return onSnapshot(this._delegate, options, observer);\n  };\n\n  Query.prototype.withConverter = function (converter) {\n    return new Query(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  };\n\n  return Query;\n}();\n\nvar DocumentChange =\n/** @class */\nfunction () {\n  function DocumentChange(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  Object.defineProperty(DocumentChange.prototype, \"type\", {\n    get: function () {\n      return this._delegate.type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DocumentChange.prototype, \"doc\", {\n    get: function () {\n      return new QueryDocumentSnapshot(this._firestore, this._delegate.doc);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DocumentChange.prototype, \"oldIndex\", {\n    get: function () {\n      return this._delegate.oldIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DocumentChange.prototype, \"newIndex\", {\n    get: function () {\n      return this._delegate.newIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return DocumentChange;\n}();\n\nvar QuerySnapshot =\n/** @class */\nfunction () {\n  function QuerySnapshot(_firestore, _delegate) {\n    this._firestore = _firestore;\n    this._delegate = _delegate;\n  }\n\n  Object.defineProperty(QuerySnapshot.prototype, \"query\", {\n    get: function () {\n      return new Query(this._firestore, this._delegate.query);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(QuerySnapshot.prototype, \"metadata\", {\n    get: function () {\n      return this._delegate.metadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(QuerySnapshot.prototype, \"size\", {\n    get: function () {\n      return this._delegate.size;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(QuerySnapshot.prototype, \"empty\", {\n    get: function () {\n      return this._delegate.empty;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(QuerySnapshot.prototype, \"docs\", {\n    get: function () {\n      var _this = this;\n\n      return this._delegate.docs.map(function (doc) {\n        return new QueryDocumentSnapshot(_this._firestore, doc);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  QuerySnapshot.prototype.docChanges = function (options) {\n    var _this = this;\n\n    return this._delegate.docChanges(options).map(function (docChange) {\n      return new DocumentChange(_this._firestore, docChange);\n    });\n  };\n\n  QuerySnapshot.prototype.forEach = function (callback, thisArg) {\n    var _this = this;\n\n    this._delegate.forEach(function (snapshot) {\n      callback.call(thisArg, new QueryDocumentSnapshot(_this._firestore, snapshot));\n    });\n  };\n\n  QuerySnapshot.prototype.isEqual = function (other) {\n    return snapshotEqual(this._delegate, other._delegate);\n  };\n\n  return QuerySnapshot;\n}();\n\nvar CollectionReference =\n/** @class */\nfunction (_super) {\n  tslib.__extends(CollectionReference, _super);\n\n  function CollectionReference(firestore, _delegate) {\n    var _this = _super.call(this, firestore, _delegate) || this;\n\n    _this.firestore = firestore;\n    _this._delegate = _delegate;\n    return _this;\n  }\n\n  Object.defineProperty(CollectionReference.prototype, \"id\", {\n    get: function () {\n      return this._delegate.id;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CollectionReference.prototype, \"path\", {\n    get: function () {\n      return this._delegate.path;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CollectionReference.prototype, \"parent\", {\n    get: function () {\n      var docRef = this._delegate.parent;\n      return docRef ? new DocumentReference(this.firestore, docRef) : null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  CollectionReference.prototype.doc = function (documentPath) {\n    try {\n      if (documentPath === undefined) {\n        // Call `doc` without `documentPath` if `documentPath` is `undefined`\n        // as `doc` validates the number of arguments to prevent users from\n        // accidentally passing `undefined`.\n        return new DocumentReference(this.firestore, doc(this._delegate));\n      } else {\n        return new DocumentReference(this.firestore, doc(this._delegate, documentPath));\n      }\n    } catch (e) {\n      throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');\n    }\n  };\n\n  CollectionReference.prototype.add = function (data) {\n    var _this = this;\n\n    return addDoc(this._delegate, data).then(function (docRef) {\n      return new DocumentReference(_this.firestore, docRef);\n    });\n  };\n\n  CollectionReference.prototype.isEqual = function (other) {\n    return refEqual(this._delegate, other._delegate);\n  };\n\n  CollectionReference.prototype.withConverter = function (converter) {\n    return new CollectionReference(this.firestore, converter ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter)) : this._delegate.withConverter(null));\n  };\n\n  return CollectionReference;\n}(Query);\n\nfunction castReference(documentRef) {\n  return cast(documentRef, DocumentReference$1);\n}\n\nexports.ArrayRemoveFieldValueImpl = ArrayRemoveFieldValueImpl;\nexports.ArrayUnionFieldValueImpl = ArrayUnionFieldValueImpl;\nexports.Blob = Blob;\nexports.CACHE_SIZE_UNLIMITED = CACHE_SIZE_UNLIMITED;\nexports.CollectionReference = CollectionReference;\nexports.DeleteFieldValueImpl = DeleteFieldValueImpl;\nexports.DocumentReference = DocumentReference;\nexports.DocumentSnapshot = DocumentSnapshot;\nexports.FieldPath = FieldPath;\nexports.FieldPath$1 = FieldPath$1;\nexports.Firestore = Firestore;\nexports.Firestore$1 = Firestore$1;\nexports.GeoPoint = GeoPoint;\nexports.IndexedDbPersistenceProvider = IndexedDbPersistenceProvider;\nexports.NumericIncrementFieldValueImpl = NumericIncrementFieldValueImpl;\nexports.Query = Query;\nexports.QueryDocumentSnapshot = QueryDocumentSnapshot;\nexports.QuerySnapshot = QuerySnapshot;\nexports.ServerTimestampFieldValueImpl = ServerTimestampFieldValueImpl;\nexports.Timestamp = Timestamp;\nexports.Transaction = Transaction;\nexports.WriteBatch = WriteBatch;\nexports.loadBundle = loadBundle;\nexports.namedQuery = namedQuery;\nexports.setLogLevel = setLogLevel; //# sourceMappingURL=database-c96156d6-f0f0e10d.js.map","map":{"version":3,"sources":["/Users/artakoroushnia/Desktop/thred-web/node_modules/@firebase/firestore/dist/node-cjs/database-c96156d6-f0f0e10d.js"],"names":["tslib","require","util","logger","util$1","crypto","grpcJs","package_json","path","protoLoader","version","SDK_VERSION","ListenSequence","previousValue","sequenceNumberSyncer","_this","sequenceNumberHandler","sequenceNumber","setPreviousValue","writeNewSequenceNumber","writeSequenceNumber","prototype","externalPreviousValue","Math","max","next","nextValue","INVALID","formatJSON","value","inspect","depth","logClient","Logger","getLogLevel","logLevel","setLogLevel$1","setLogLevel","logDebug","msg","obj","_i","arguments","length","LogLevel","DEBUG","args","map","argToString","debug","apply","__spreadArray","logError","ERROR","error","logWarn","WARN","warn","e","fail","failure","message","Error","hardAssert","assertion","debugCast","constructor","Code","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","FirestoreError","_super","__extends","code","call","name","toString","DOCUMENT_KEY_NAME","BasePath","segments","offset","undefined","len","Object","defineProperty","get","enumerable","configurable","isEqual","other","comparator","child","nameOrPath","slice","limit","forEach","segment","push","construct","popFirst","size","popLast","firstSegment","lastSegment","index","isEmpty","isPrefixOf","i","isImmediateParentOf","potentialChild","fn","end","toArray","p1","p2","min","left","right","ResourcePath","canonicalString","join","fromString","pathComponents","_d","pathComponents_1","indexOf","split","filter","emptyPath","identifierRegExp","FieldPath$1","isValidIdentifier","test","str","replace","isKeyField","keyField","fromServerFormat","current","addCurrentSegment","inBackticks","c","escapeChar","encodedSeparatorChar","encodedNul","encodedEscape","encodeResourcePath","result","encodeSeparator","encodeSegment","resultBuf","charAt","decodeResourcePath","lastReasonableEscapeIndex","segmentBuilder","start","currentPiece","substring","SCHEMA_VERSION","DbTimestamp","seconds","nanoseconds","DbPrimaryClient","ownerId","allowTabSynchronization","leaseTimestampMs","store","key","DbMutationQueue","userId","lastAcknowledgedBatchId","lastStreamToken","keyPath","DbMutationBatch","batchId","localWriteTimeMs","baseMutations","mutations","userMutationsIndex","userMutationsKeyPath","DbDocumentMutation","prefixForUser","prefixForPath","PLACEHOLDER","DbNoDocument","readTime","DbUnknownDocument","DbRemoteDocument","unknownDocument","noDocument","document","hasCommittedMutations","parentPath","readTimeIndex","readTimeIndexPath","collectionReadTimeIndex","collectionReadTimeIndexPath","DbRemoteDocumentGlobal","byteSize","DbTarget","targetId","canonicalId","resumeToken","lastListenSequenceNumber","lastLimboFreeSnapshotVersion","query","queryTargetsIndexName","queryTargetsKeyPath","DbTargetDocument","documentTargetsIndex","documentTargetsKeyPath","DbTargetGlobal","highestTargetId","highestListenSequenceNumber","lastRemoteSnapshotVersion","targetCount","DbCollectionParent","collectionId","parent","DbClientMetadata","clientId","updateTimeMs","networkEnabled","inForeground","DbBundle","bundleId","createTime","DbNamedQuery","bundledQuery","V1_STORES","V3_STORES","V4_STORES","V6_STORES","V8_STORES","V11_STORES","ALL_STORES","PRIMARY_LEASE_LOST_ERROR_MSG","PersistenceTransaction","onCommittedListeners","addOnCommittedListener","listener","raiseOnCommittedEvent","Deferred","promise","Promise","resolve","reject","PersistencePromise","callback","nextCallback","catchCallback","isDone","callbackAttached","catch","nextFn","catchFn","wrapSuccess","wrapFailure","toPromise","wrapUserFunction","waitFor","all","expectedCount","resolvedCount","done","element","err","or","predicates","p","_loop_1","predicate","isTrue","predicates_1","collection","f","promises","r","s","LOG_TAG$g","TRANSACTION_RETRY_COUNT","SimpleDbTransaction","action","transaction","aborted","completionDeferred","oncomplete","onabort","IndexedDbTransactionError","onerror","event","checkForAndReportiOSError","target","open","db","mode","objectStoreNames","abort","storeName","objectStore","SimpleDbStore","SimpleDb","schemaConverter","iOSVersion","getIOSVersion","getUA","delete","wrapRequest","window","indexedDB","deleteDatabase","isAvailable","isMockPersistence","ua","isUnsupportedIOS","androidVersion","getAndroidVersion","isUnsupportedAndroid","_a","process","env","USE_MOCK_PERSISTENCE","getStore","txn","iOSVersionRegex","match","Number","androidVersionRegex","ensureDb","__awaiter","__generator","_e","label","request","onsuccess","onblocked","onupgradeneeded","oldVersion","createOrUpgrade","sent","versionchangelistener","onversionchange","setVersionChangeListener","versionChangeListener","runTransaction","objectStores","transactionFn","readonly","attemptNumber","_loop_2","this_1","state_1","transaction_1","transactionFnResult","error_1","retryable","trys","completionPromise","close","IterationController","dbCursor","shouldStop","nextKey","set","skip","actionName","cause","isIndexedDbTransactionError","put","keyOrValue","add","count","loadAll","indexOrRange","range","cursor","options","results","iterateCursor","deleteAll","keysOnly","control","iterate","optionsOrCallback","iterateSerial","cursorRequest","primaryKey","shouldContinue","continue","controller","userResult","userPromise","skipToKey","indexName","direction","reverse","openKeyCursor","openCursor","reportedIOSError","IOS_ERROR","newError_1","setTimeout","IndexedDbTransaction","simpleDbTransaction","currentSequenceNumber","indexedDbTransaction","randomBytes","nBytes","AutoId","newId","chars","maxMultiple","floor","autoId","targetLength","bytes","primitiveComparator","arrayEquals","every","immediateSuccessor","MIN_SECONDS","MS_TO_NANOS","Timestamp","now","fromMillis","Date","fromDate","date","getTime","milliseconds","nanos","toDate","toMillis","_compareTo","toJSON","valueOf","adjustedSeconds","formattedSeconds","String","padStart","formattedNanoseconds","SnapshotVersion","timestamp","fromTimestamp","compareTo","toMicroseconds","toTimestamp","objectSize","hasOwnProperty","FieldMask","fields","sort","covers","fieldPath","fieldMaskPath","l","decodeBase64","encoded","Buffer","encodeBase64","raw","ByteString","binaryString","fromBase64String","base64","fromUint8Array","array","binaryStringFromUint8Array","toBase64","toUint8Array","uint8ArrayFromBinaryString","approximateByteSize","EMPTY_BYTE_STRING","fromCharCode","buffer","Uint8Array","charCodeAt","ISO_TIMESTAMP_REG_EXP","RegExp","normalizeTimestamp","fraction","exec","nanoStr","substr","parsedDate","normalizeNumber","normalizeByteString","blob","SERVER_TIMESTAMP_SENTINEL","TYPE_KEY","PREVIOUS_VALUE_KEY","LOCAL_WRITE_TIME_KEY","isServerTimestamp","_b","type","mapValue","stringValue","serverTimestamp","localWriteTime","timestampValue","getPreviousValue","getLocalWriteTime","BATCHID_UNKNOWN","isNullOrUndefined","isNegativeZero","isSafeInteger","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","DocumentKey","fromPath","fromName","hasCollectionId","k1","k2","isDocumentKey","fromSegments","typeOrder","valueEquals","leftType","rightType","booleanValue","timestampEquals","blobEquals","referenceValue","geoPointEquals","numberEquals","arrayValue","values","objectEquals","leftTimestamp","rightTimestamp","geoPointValue","latitude","longitude","bytesValue","integerValue","n1","doubleValue","n2","isNaN","leftMap","rightMap","arrayValueContains","haystack","needle","find","v","valueCompare","compareNumbers","compareTimestamps","compareBlobs","compareReferences","compareGeoPoints","compareArrays","compareMaps","leftNumber","rightNumber","comparison","leftPath","rightPath","leftSegments","rightSegments","leftBytes","rightBytes","leftArray","rightArray","compare","leftKeys","keys","rightKeys","keyCompare","canonifyValue","canonifyTimestamp","canonifyByteString","canonifyReference","canonifyGeoPoint","canonifyArray","canonifyMap","byteString","normalizedTimestamp","geoPoint","sortedKeys","first","sortedKeys_1","refValue","databaseId","projectId","database","isDouble","isNumber","isArray","isNullValue","isNanValue","isMapValue","deepClone","source","assign","target_1","val","ObjectValue","empty","field","currentLevel","fieldsMap","getFieldsMap","setAll","data","upserts","deletes","fieldsMap_1","applyChanges","nestedValue","inserts","deletes_1","clone","extractFieldMask","currentPath","nestedMask","nestedFields","nestedFields_1","nestedPath","MutableDocument","documentType","documentState","newInvalidDocument","documentKey","newFoundDocument","newNoDocument","newUnknownDocument","convertToFoundDocument","convertToNoDocument","convertToUnknownDocument","setHasCommittedMutations","setHasLocalMutations","hasLocalMutations","isValidDocument","isFoundDocument","isNoDocument","isUnknownDocument","JSON","stringify","compareDocumentsByField","d1","d2","v1","v2","TargetImpl","collectionGroup","orderBy","filters","startAt","endAt","memoizedCanonicalId","newTarget","canonifyTarget","targetImpl","canonicalId_1","canonifyFilter","o","canonifyOrderBy","canonifyBound","stringifyTarget","stringifyFilter","stringifyOrderBy","targetEquals","orderByEquals","filterEquals","boundEquals","isDocumentTarget","Filter","FieldFilter","op","create","createKeyFieldInFilter","KeyFieldFilter","ArrayContainsFilter","InFilter","NotInFilter","ArrayContainsAnyFilter","KeyFieldInFilter","KeyFieldNotInFilter","matches","doc","matchesComparison","isInequality","f1","f2","extractDocumentKeysFromArrayValue","some","nullValue","Bound","position","before","bound","OrderBy","dir","sortsBeforeDocument","orderByComponent","component","docValue","leftPosition","rightPosition","QueryImpl","explicitOrderBy","limitType","memoizedOrderBy","memoizedTarget","newQuery","newQueryForPath","asCollectionQueryAtPath","matchesAllDocuments","hasLimitToFirst","hasLimitToLast","getFirstOrderByField","getInequalityFilterField","findFilterOperator","operators","newQueryForCollectionGroup","isDocumentQuery$1","isCollectionGroupQuery","queryOrderBy","queryImpl","inequalityField","firstOrderByField","foundKeyOrdering","orderBy_1","lastDirection","queryToTarget","orderBys","orderBy_2","startAt_1","endAt_1","queryWithAddedFilter","newFilters","concat","queryWithAddedOrderBy","newOrderBy","queryWithLimit","queryWithStartAt","queryWithEndAt","queryEquals","canonifyQuery","stringifyQuery","queryMatches","queryMatchesPathAndCollectionGroup","queryMatchesOrderBy","queryMatchesFilters","queryMatchesBounds","docPath","orderBy_3","newQueryComparator","comparedOnKeyField","orderBy_4","comp","compareDocs","SortedMap","root","LLRBNode","EMPTY","insert","copy","BLACK","remove","node","cmp","prunedNodes","minKey","maxKey","inorderTraversal","k","descriptions","reverseTraversal","getIterator","SortedMapIterator","getIteratorFrom","getReverseIterator","getReverseIteratorFrom","startKey","isReverse","nodeStack","getNext","pop","hasNext","peek","color","RED","n","fixUp","removeMin","isRed","moveRedLeft","smallest","rotateRight","moveRedRight","rotateLeft","colorFlip","nl","nr","checkMaxDepth","blackDepth","check","pow","LLRBEmptyNode","SortedSet","has","elem","last","cb","forEachInRange","iter","forEachWhile","firstAfterOrEqual","SortedSetIterator","unionWith","thisIt","otherIt","thisElem","otherElem","res","EMPTY_MUTABLE_DOCUMENT_MAP","mutableDocumentMap","EMPTY_DOCUMENT_MAP","documentMap","EMPTY_DOCUMENT_VERSION_MAP","documentVersionMap","EMPTY_DOCUMENT_KEY_SET","documentKeySet","keys_1","EMPTY_TARGET_ID_SET","targetIdSet","toDouble","serializer","useProto3Json","Infinity","toInteger","toNumber","TransformOperation","_","applyTransformOperationToLocalView","transform","ServerTimestampTransform","ArrayUnionTransformOperation","applyArrayUnionTransformOperation","ArrayRemoveTransformOperation","applyArrayRemoveTransformOperation","applyNumericIncrementTransformOperationToLocalView","applyTransformOperationToRemoteDocument","transformResult","computeTransformOperationBaseValue","NumericIncrementTransformOperation","transformOperationEquals","elements","operand","coercedFieldValuesArray","_loop_3","toUnion","_loop_4","toRemove","baseValue","sum","asNumber","FieldTransform","fieldTransformEquals","fieldTransformsAreEqual","MutationResult","transformResults","Precondition","updateTime","exists","none","preconditionIsValidForDocument","precondition","Mutation","applyMutationToRemoteDocument","mutation","mutationResult","SetMutation","applySetMutationToRemoteDocument","PatchMutation","applyPatchMutationToRemoteDocument","applyDeleteMutationToRemoteDocument","applyMutationToLocalView","applySetMutationToLocalView","applyPatchMutationToLocalView","applyDeleteMutationToLocalView","extractMutationBaseValue","baseObject","fieldTransforms","fieldTransform","existingValue","coercedValue","mutationEquals","fieldMask","getPostMutationVersion","newData","serverTransformResults","localTransformResults","getPatch","Map","newValue","mutableDocument","fieldTransforms_1","DeleteMutation","VerifyMutation","MutationBatch","applyToRemoteDocument","batchResult","mutationResults","applyToLocalView","_f","applyToLocalDocumentSet","m","reduce","MutationBatchResult","batch","commitVersion","docVersions","from","versionMap","ExistenceFilter","RpcCode","isPermanentError","isPermanentWriteError","mapCodeFromRpcCode","RemoteEvent","snapshotVersion","targetChanges","targetMismatches","documentUpdates","resolvedLimboDocuments","createSynthesizedRemoteEventForCurrentChange","TargetChange","createSynthesizedTargetChangeForCurrentChange","addedDocuments","modifiedDocuments","removedDocuments","DocumentWatchChange","updatedTargetIds","removedTargetIds","newDoc","ExistenceFilterChange","existenceFilter","WatchTargetChange","state","targetIds","TargetState","pendingResponses","documentChanges","snapshotChangesMap","_resumeToken","_current","_hasPendingChanges","updateResumeToken","toTargetChange","changeType","clearPendingChanges","addDocumentChange","removeDocumentChange","recordPendingTargetRequest","recordTargetResponse","markCurrent","LOG_TAG$f","WatchChangeAggregator","metadataProvider","targetStates","pendingDocumentUpdates","pendingDocumentTargetMapping","documentTargetMap","pendingTargetResets","handleDocumentChange","docChange","addDocumentToTarget","removeDocumentFromTarget","handleTargetChange","targetChange","forEachTarget","targetState","ensureTargetState","isActiveTarget","isPending","removeTarget","resetTarget","handleExistenceFilter","watchChange","targetData","targetDataForActiveTarget","currentSize","getCurrentDocumentCountForTarget","createRemoteEvent","targetContainsDocument","hasPendingChanges","targets","isOnlyLimboTarget","purpose","remoteEvent","ensureDocumentTargetMapping","updatedDocument","getRemoteKeysForTarget","targetMapping","targetActive","getTargetDataForTarget","existingKeys","DIRECTIONS","dirs","OPERATORS","ops","assertPresent","description","JsonProtoSerializer","fromRpcStatus","status","toInt32Proto","fromInt32Proto","jsDateStr","toISOString","strUntilSeconds","toBytes","fromBytes","toVersion","fromVersion","toResourceName","fullyQualifiedPrefixPath","fromResourceName","resource","isValidResourceName","toName","extractLocalPathFromResourceName","toQueryPath","fromQueryPath","resourceName","getEncodedDatabaseId","toMutationDocument","toDocument","fromDocument","fromFound","found","fromMissing","missing","fromBatchGetDocumentsResponse","fromWatchChange","change","fromWatchTargetChangeState","targetChangeType","causeProto","documentChange","entityChange","version_1","doc_1","documentDelete","docDelete","version_2","doc_2","documentRemove","docRemove","versionFromListenResponse","toMutation","update","updateMask","toDocumentMask","verify","updateTransforms","toFieldTransform","isNone","currentDocument","toPrecondition","fromMutation","proto","fromPrecondition","fromFieldTransform","fromDocumentMask","fromWriteResult","commitTime","fromWriteResults","protos","setToServerValue","appendMissingElements","removeAllFromArray","increment","toDocumentsTarget","documents","fromDocumentsTarget","documentsTarget","toQueryTarget","structuredQuery","allDescendants","where","toFilter","toOrder","toCursor","convertQueryTargetToQuery","fromCount","filterBy","fromFilter","fromOrder","fromCursor","fromQueryTarget","toListenRequestLabels","toLabel","toTarget","toUnaryOrFieldFilter","compositeFilter","unaryFilter","fromUnaryFilter","fieldFilter","fromFieldFilter","accum","order","toPropertyOrder","fromPropertyOrder","toDirection","fromDirection","toOperatorName","fromOperatorName","toFieldPathReference","fromFieldPathReference","fieldReference","nanField","NaN","nullField","notNanField","notNullField","canonicalFields","fieldPaths","paths","TargetData","withSequenceNumber","withResumeToken","withLastLimboFreeSnapshotVersion","LocalSerializer","remoteSerializer","fromDbRemoteDocument","localSerializer","remoteDoc","version_3","fromDbTimestamp","document_1","version_4","toDbRemoteDocument","dbReadTime","toDbTimestampKey","doc_3","readTime_1","toDbTimestamp","readTime_2","fromDbTimestampKey","dbTimestampKey","dbTimestamp","toDbMutationBatch","serializedBaseMutations","serializedMutations","fromDbMutationBatch","dbBatch","currentMutation","hasTransform","transformMutation","splice","fromDbTarget","dbTarget","isDocumentQuery","toDbTarget","dbLastLimboFreeTimestamp","queryProto","dbQuery","fromDbBundle","dbBundle","id","toDbBundle","metadata","fromDbNamedQuery","dbNamedQuery","fromBundledQuery","toDbNamedQuery","fromProtoNamedQuery","namedQuery","fromBundleMetadata","IndexedDbBundleCache","getBundleMetadata","bundlesStore","bundle","saveBundleMetadata","bundleMetadata","getNamedQuery","queryName","namedQueriesStore","saveNamedQuery","MemoryIndexManager","collectionParentIndex","MemoryCollectionParentIndex","addToCollectionParentIndex","collectionPath","getCollectionParents","getEntries","existingParents","added","parentPaths","IndexedDbIndexManager","collectionParentsCache","collectionParent","collectionParentsStore","IDBKeyRange","entries","entries_1","entry","removeMutationBatch","mutationStore","indexTxn","only","numDeleted","removePromise","indexKey","dbDocumentSize","IndexedDbMutationQueue","indexManager","referenceDelegate","documentKeysByBatchId","forUser","user","uid","isAuthenticated","checkEmpty","NEGATIVE_INFINITY","POSITIVE_INFINITY","mutationsStore","addMutationBatch","documentStore","documentMutationsStore","collectionParents","mutations_1","lookupMutationBatch","lookupMutationKeys","getNextMutationBatchAfterBatchId","nextBatchId","lowerBound","foundBatch","getHighestUnacknowledgedBatchId","upperBound","getAllMutationBatches","dbBatches","getAllMutationBatchesAffectingDocumentKey","indexPrefix","indexStart","userID","encodedPath","getAllMutationBatchesAffectingDocumentKeys","documentKeys","uniqueBatchIDs","batchID","lookupMutationBatches","getAllMutationBatchesAffectingQuery","queryPath","immediateChildrenLength","batchIDs","removeCachedMutationKeys","markPotentiallyOrphaned","performConsistencyCheck","startRange","danglingMutationReferences","containsKey","mutationQueueContainsKey","getMutationQueueMetadata","mutationQueuesStore","mutationQueuesContainKey","docKey","OFFSET","TargetIdGenerator","lastId","forTargetCache","forSyncEngine","IndexedDbTargetCache","allocateTargetId","retrieveMetadata","targetIdGenerator","saveMetadata","getLastRemoteSnapshotVersion","getHighestSequenceNumber","targetGlobal","setTargetsMetadata","addTargetData","saveTargetData","updateMetadataFromTargetData","updateTargetData","removeTargetData","removeMatchingKeysForTargetId","targetsStore","removeTargets","activeTargetIds","globalTargetStore","updated","getTargetCount","getTargetData","addMatchingKeys","documentTargetStore","addReference","removeMatchingKeys","removeReference","getMatchingKeysForTargetId","ignoreIfPrimaryLeaseLoss","GC_DID_NOT_RUN","didRun","sequenceNumbersCollected","targetsRemoved","documentsRemoved","LRU_COLLECTION_DISABLED","LRU_DEFAULT_CACHE_SIZE_BYTES","LruParams","cacheSizeCollectionThreshold","percentileToCollect","maximumSequenceNumbersToCollect","withCacheSize","cacheSize","DEFAULT_COLLECTION_PERCENTILE","DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT","DEFAULT","DISABLED","LOG_TAG$e","LRU_MINIMUM_CACHE_SIZE_BYTES","INITIAL_GC_DELAY_MS","REGULAR_GC_DELAY_MS","bufferEntryComparator","aSequence","aIndex","bSequence","bIndex","seqCmp","RollingSequenceNumberBuffer","maxElements","previousIndex","nextIndex","addElement","highestValue","LruScheduler","garbageCollector","asyncQueue","hasRun","gcTask","localStore","params","scheduleGC","stop","cancel","delay","enqueueAfterDelay","e_1","collectGarbage","LruGarbageCollectorImpl","delegate","calculateTargetCount","percentile","getSequenceNumberCount","nthSequenceNumber","forEachOrphanedDocumentSequenceNumber","maxValue","removeOrphanedDocuments","collect","getCacheSize","runGarbageCollection","upperBoundSequenceNumber","sequenceNumbersToCollect","countedTargetsTs","foundUpperBoundTs","removedTargetsTs","removedDocumentsTs","startTs","sequenceNumbers","numTargetsRemoved","desc","newLruGarbageCollector","IndexedDbLruDelegateImpl","docCountPromise","orphanedDocumentCount","targetCountPromise","getTargetCache","docCount","orphanedCount","forEachOrphanedDocument","writeSentinelKey","isPinned","documentCache","getRemoteDocumentCache","changeBuffer","newChangeBuffer","documentCount","iteration","getEntry","removeEntry","sentinelKey$1","updateLimboDocument","nextToReport","nextPath","getSize","sentinelRow","ObjectMap","mapKeyFn","equalsFn","inner","matches_1","otherKey","entries_2","RemoteDocumentChangeBuffer","changes","changesApplied","getReadTime","addEntry","assertNotApplied","bufferedEntry","getFromCache","getAllFromCache","IndexedDbRemoteDocumentCacheImpl","remoteDocumentsStore","dbKey","updateMetadata","sizeDelta","getMetadata","setMetadata","dbRemoteDoc","maybeDecodeDocument","getSizedEntry","forEachDbEntry","getSizedEntries","sizeMap","keyIter","potentialKeyRaw","potentialKey","getDocumentsMatchingQuery","sinceReadTime","immediateChildrenPathLength","iterationOptions","collectionKey","readTimeKey","IndexedDbRemoteDocumentChangeBuffer","trackRemovals","documentGlobalStore","doc_4","isSentinelRemoval","newIndexedDbRemoteDocumentCache","remoteDocumentCacheGetNewDocumentChanges","remoteDocumentCache","remoteDocumentCacheImpl","changedDocs","lastReadTime","documentsStore","remoteDocumentCacheGetLastReadTime","documentSizes","previousSize","doc_5","deletedDoc","getResult","SchemaConverter","createPrimaryClientStore","createMutationQueue","createQueryCache","createRemoteDocumentCache","dropQueryCache","writeEmptyTargetGlobalEntry","upgradeMutationBatchSchemaAndMigrateData","createClientMetadataStore","removeAcknowledgedMutations","createDocumentGlobalStore","addDocumentGlobal","ensureSequenceNumbers","createCollectionParentIndex","dropRemoteDocumentChangesStore","createRemoteDocumentReadTimeIndex","rewriteCanonicalIds","createBundlesStore","createNamedQueriesStore","byteCount","queuesStore","queues","queue","docSentinelKey","sentinelKey","maybeSentinel","createObjectStore","cache","pathSegments","targetStore","originalDbTarget","originalTargetData","updatedDbTarget","mutationBatchesStore","autoIncrement","createIndex","unique","v1MutationsStore","existingMutations","deleteObjectStore","v3MutationsStore","writeAll","targetDocumentsStore","contains","globalStore","remoteDocumentStore","LOG_TAG$d","MAX_CLIENT_AGE_MS","MAX_PRIMARY_ELIGIBLE_AGE_MS","CLIENT_METADATA_REFRESH_INTERVAL_MS","PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG","UNSUPPORTED_PLATFORM_ERROR_MSG","ZOMBIED_CLIENTS_KEY_PREFIX","MAIN_DATABASE","IndexedDbPersistence","persistenceKey","lruParams","forceOwningTab","listenSequence","_started","isPrimary","windowUnloadHandler","documentVisibilityHandler","clientMetadataRefresher","lastGarbageCollectionTime","primaryStateListener","dbName","simpleDb","targetCache","bundleCache","localStorage","webStorage","updateClientMetadataAndTryBecomePrimary","then","attachVisibilityHandler","attachWindowUnloadHook","scheduleClientMetadataAndPrimaryLeaseRefreshes","reason","setPrimaryStateListener","primaryState","started","setDatabaseDeletedListener","databaseDeletedListener","newVersion","setNetworkEnabled","enqueueAndForget","metadataStore","clientMetadataStore","verifyPrimaryLease","success","enqueueRetryable","canActAsPrimary","releasePrimaryLeaseIfHeld","acquireOrExtendPrimaryLease","primaryClientStore","primaryClient","isLocalClient","removeClientMetadata","maybeGarbageCollectMultiClientState","inactiveClients","inactiveClients_1","inactiveClient","isWithinAge","existingClients","active","filterActiveClients","inactive","client","removeItem","zombiedClientLocalStorageKey","currentPrimary","currentLeaseIsValid","isClientZombied","preferredCandidate","otherClient","otherClientHasBetterNetworkState","otherClientHasBetterVisibility","otherClientHasSameNetworkState","shutdown","markClientZombied","detachVisibilityHandler","detachWindowUnloadHook","simpleDbTxn","persistenceTransaction","removeClientZombiedEntry","clients","activityThresholdMs","getActiveClients","clientMetadata","getMutationQueue","getIndexManager","getBundleCache","transactionOperation","simpleDbMode","holdsPrimaryLease","verifyAllowTabSynchronization","newPrimary","maxAgeMs","minAcceptable","maxAcceptable","addEventListener","visibilityState","removeEventListener","isSafari","navigator","appVersion","enterRestrictedMode","isZombied","getItem","setItem","indexedDbStoragePrefix","isDefaultDatabase","indexedDbClearPersistence","LocalDocumentsView","mutationQueue","getDocument","batches","getDocumentInternal","inBatches","inBatches_1","applyLocalMutationsToDocuments","docs","localView","batches_1","getDocuments","applyLocalViewToDocuments","baseDocs","getDocumentsMatchingDocumentQuery","getDocumentsMatchingCollectionGroupQuery","getDocumentsMatchingCollectionQuery","parents","collectionQuery","mutationBatches","queryResults","matchingMutationBatches","addMissingBaseDocuments","mergedDocuments","mutationBatches_1","document_2","existingDocuments","missingBaseDocEntriesForPatching","matchingMutationBatches_1","missingBaseDocs","LOG_TAG$c","RESUME_TOKEN_MAX_AGE_MICROS","LocalStoreImpl","persistence","queryEngine","initialUser","targetDataByTarget","targetIdByTarget","t","lastDocumentChangeReadTime","remoteDocuments","localDocuments","setLocalDocumentsView","newLocalStore","localStoreHandleUserChange","localStoreImpl","newMutationQueue","newLocalDocuments","oldBatches","promisedOldBatches","newBatches","removedBatchIds","addedBatchIds","changedKeys","oldBatches_1","newBatches_1","_g","_h","affectedDocuments","localStoreWriteLocally","existingDocs","mutations_2","localStoreAcknowledgeBatch","affected","documentBuffer","applyWriteToRemoteDocuments","localStoreRejectBatch","affectedKeys","localStoreGetHighestUnacknowledgedBatchId","localStoreGetLastRemoteSnapshotVersion","localStoreApplyRemoteEventToLocalCache","remoteVersion","newTargetDataByTargetMap","oldTargetData","newTargetData","shouldPersistTargetData","populateDocumentChangeBuffer","updateRemoteVersion","globalVersion","documentVersions","updatedKeys","existingDoc","docReadTime","hasPendingWrites","timeDelta","localStoreNotifyLocalViewChanges","viewChanges","e_2","viewChanges_1","viewChange","updatedTargetData","addedKeys","removedKeys","fromCache","localStoreGetNextMutationBatch","afterBatchId","localStoreReadDocument","localStoreAllocateTarget","cached","cachedTargetData","localStoreGetTargetData","localStoreReleaseTarget","keepPersistedTargetData","e_3","localStoreExecuteQuery","usePreviousResults","remoteKeys","docKeys","promiseChain","ackVersion","localStoreLookupMutationDocuments","mutationQueueImpl","localStoreRemoveCachedMutationBatchMetadata","localStoreGetActiveClients","persistenceImpl","localStoreGetCachedTarget","targetCacheImpl","localStoreGetNewDocumentChanges","localStoreSynchronizeLastDocumentChangeReadTime","umbrellaTarget","bundleName","localStoreApplyBundledDocuments","bundleConverter","documents_1","bundleDoc","umbrellaTargetData","toDocumentKey","toMutableDocument","toSnapshotVersion","localStoreHasNewerBundle","currentReadTime","localStoreSaveBundle","localStoreGetNamedQuery","localStoreSaveNamedQuery","allocated","MemoryBundleCache","bundles","namedQueries","ReferenceSet","refsByKey","DocReference","compareByKey","refsByTarget","compareByTargetId","ref","addReferences","removeRef","removeReferences","removeReferencesForId","emptyKey","startRef","endRef","removeAllReferences","referencesForId","firstRef","targetOrBatchId","MemoryMutationQueue","batchesByDocumentKey","mutations_3","findMutationBatch","rawIndex","indexOfBatchId","findMutationBatches","prefix","startPath","rowKeyPath","batchIndex","indexOfExistingBatchId","shift","references","firstBatchId","documentEntryMap","MemoryRemoteDocumentCacheImpl","sizer","iterator","document_3","forEachDocumentKey","MemoryRemoteDocumentChangeBuffer","newMemoryRemoteDocumentCache","MemoryTargetCache","highestSequenceNumber","removals","matchingKeys","LOG_TAG$b","MemoryPersistence","referenceDelegateFactory","mutationQueues","documentSize","toKey","MemoryTransaction","onTransactionStarted","onTransactionCommitted","MemoryEagerDelegate","localViewReferences","_orphanedDocuments","factory","orphanedDocuments","orphaned","Set","isReferenced","QueryEngine","localDocumentsView","executeFullCollectionScan","previousResults","applyQuery","needsRefill","updatedResults","maybeDoc","sortedPreviousResults","limboFreeSnapshotVersion","docAtLimitEdge","User","otherUser","GOOGLE_CREDENTIALS","FIRST_PARTY","CLIENT_STATE_KEY_PREFIX","createWebStorageClientStateKey","MUTATION_BATCH_KEY_PREFIX","createWebStorageMutationBatchKey","mutationKey","QUERY_TARGET_KEY_PREFIX","createWebStorageQueryTargetMetadataKey","ONLINE_STATE_KEY_PREFIX","createWebStorageOnlineStateKey","BUNDLE_LOADED_KEY_PREFIX","createBundleLoadedKey","SEQUENCE_NUMBER_KEY_PREFIX","createWebStorageSequenceNumberKey","LOG_TAG$a","MutationMetadata","fromWebStorageEntry","mutationBatch","parse","validData","firestoreError","toWebStorageJSON","batchMetadata","QueryTargetMetadata","RemoteClientState","clientState","Array","activeTargetIdsSet","SharedOnlineState","onlineState","LocalClientState","addQueryTarget","removeQueryTarget","WebStorageSharedClientState","localClientId","syncEngine","onlineStateHandler","storageListener","handleWebStorageEvent","bind","activeClients","earlyEvents","escapedPersistenceKey","storage","currentUser","localClientStorageKey","sequenceNumberKey","clientStateKeyRe","mutationBatchKeyRe","queryTargetKeyRe","onlineStateKey","bundleLoadedKey","existingClients_1","storageItem","onlineStateJSON","event_1","persistClientState","fromWebStorageOnlineState","handleOnlineStateEvent","getAllActiveQueryTargets","extractActiveQueryTargets","isActiveQueryTarget","addPendingMutation","persistMutationState","updateMutationState","removeMutationState","addLocalQueryTarget","queryState","localClientState","removeLocalQueryTarget","isLocalQueryTarget","clearQueryState","updateQueryState","persistQueryTargetState","handleUserChange","setOnlineState","persistOnlineState","notifyBundleLoaded","persistBundleLoadedState","storageEvent","storageArea","mutationMetadata","queryTargetMetadata","fromWebStorageClientState","handleClientStateEvent","fromWebStorageClientStateKey","fromWebStorageMutationMetadata","handleMutationBatchEvent","fromWebStorageQueryTargetMetadata","handleQueryTargetEvent","fromWebStorageSequenceNumber","synchronizeWithChangedDocuments","mutationState","targetKey","targetMetadata","applyBatchState","applyTargetState","updatedClients","existingTargets","newTargets","addedTargets","removedTargets","applyActiveTargetsChange","activeTargets","kev","seqString","parsed","MemorySharedClientState","localState","NoopConnectivityMonitor","addCallback","StreamBridge","sendFn","closeFn","onOpen","wrappedOnOpen","onClose","wrappedOnClose","onMessage","wrappedOnMessage","send","callOnOpen","callOnClose","callOnMessage","nodePromise","LOG_TAG$9","X_GOOG_API_CLIENT_VALUE","versions","createMetadata","databasePath","token","appId","Metadata","header","authHeaders","GrpcConnection","databaseInfo","cachedStub","firestore","ensureActiveStub","credentials$1","ssl","credentials","createSsl","createInsecure","Firestore","host","invokeRPC","rpcName","stub","jsonRequest","grpcError","invokeStreamingRPC","responseDeferred","stream","on","response","openStream","grpcStream","closed","write","protoLoaderOptions","longs","enums","defaults","oneofs","loadProtos","__dirname","firestoreProtoFile","packageDefinition","loadSync","includeDirs","loadPackageDefinition","newConnection","newConnectivityMonitor","getWindow","newSerializer","newTextEncoder","TextEncoder","newTextDecoder","TextDecoder","LOG_TAG$8","DEFAULT_BACKOFF_INITIAL_DELAY_MS","DEFAULT_BACKOFF_FACTOR","DEFAULT_BACKOFF_MAX_DELAY_MS","ExponentialBackoff","timerId","initialDelayMs","backoffFactor","maxDelayMs","currentBaseMs","timerPromise","lastAttemptTime","reset","resetToMax","backoffAndRun","desiredDelayWithJitterMs","jitterDelayMs","delaySoFarMs","remainingDelayMs","skipBackoff","skipDelay","random","LOG_TAG$7","IDLE_TIMEOUT_MS","PersistentStream","connectionTimerId","idleTimerId","connection","credentialsProvider","closeCount","idleTimer","backoff","isStarted","isOpen","performBackoff","auth","inhibitBackoff","markIdle","handleIdleCloseTimer","sendRequest","cancelIdleCheck","finalState","invalidateToken","tearDown","dispatchIfNotClosed","getCloseGuardedDispatcher","getToken","startStream","rpcError","handleStreamClose","startRpc","startCloseCount","PersistentListenStream","watchChangeProto","snapshot","onWatchChange","watch","addTarget","labels","unwatch","PersistentWriteStream","handshakeComplete_","writeMutations","responseProto","streamToken","writeResults","onHandshakeComplete","onMutationResult","writeHandshake","writes","Datastore","DatastoreImpl","terminated","verifyInitialized","terminate","newDatastore","invokeCommitRpc","datastore","datastoreImpl","invokeBatchGetDocumentsRpc","newPersistentWriteStream","newPersistentWatchStream","LOG_TAG$6","MAX_WATCH_STREAM_FAILURES","ONLINE_STATE_TIMEOUT_MS","OnlineStateTracker","watchStreamFailures","onlineStateTimer","shouldWarnClientIsOffline","handleWatchStreamStart","setAndBroadcast","logClientOfflineWarningIfNecessary","handleWatchStreamFailure","clearOnlineStateTimer","newState","details","LOG_TAG$5","MAX_PENDING_WRITES","RemoteStoreImpl","connectivityMonitor","remoteSyncer","writePipeline","listenTargets","offlineCauses","onNetworkStatusChange","canUseNetwork","restartNetwork","onlineStateTracker","newRemoteStore","remoteStoreEnableNetwork","remoteStore","remoteStoreImpl","enableNetworkInternal","networkStatusHandler","remoteStoreDisableNetwork","disableNetworkInternal","remoteStoreShutdown","remoteStoreListen","shouldStartWatchStream","startWatchStream","ensureWatchStream","sendWatchRequest","remoteStoreUnlisten","watchStream","sendUnwatchRequest","watchChangeAggregator","cleanUpWatchStreamState","onWatchStreamOpen","onWatchStreamClose","onWatchStreamChange","e_4","e_5","handleTargetError","disableNetworkUntilRecovery","raiseWatchSnapshot","executeWithRecovery","requestTargetData","applyRemoteEvent","rejectListen","fillWritePipeline","writeStream","lastBatchIdRetrieved","e_6","ensureWriteStream","canAddToWritePipeline","addToWritePipeline","shouldStartWriteStream","startWriteStream","handshakeComplete","onWriteStreamOpen","onWriteHandshakeComplete","applySuccessfulWrite","onWriteStreamClose","handleWriteError","batch_1","rejectFailedWrite","remoteStoreHandleCredentialChange","usesNetwork","verifyOperationInProgress","handleCredentialChange","remoteStoreApplyPrimaryState","enabled","LOG_TAG$4","DelayedOperation","targetTimeMs","removalCallback","deferred","createAndSchedule","delayMs","targetTime","delayedOp","timerHandle","handleDelayElapsed","clearTimeout","wrapInUserErrorIfRecoverable","DocumentSet","keyedMap","sortedSet","emptySet","oldSet","thisDoc","otherDoc","docStrings","newSet","DocumentChangeSet","changeMap","track","oldChange","getChanges","ViewSnapshot","oldDocs","docChanges","mutatedKeys","syncStateChanged","excludesMetadataChanges","fromInitialDocuments","otherChanges","QueryListenersInfo","viewSnap","listeners","newEventManager","EventManagerImpl","queries","q","snapshotsInSyncListeners","eventManagerListen","eventManager","eventManagerImpl","firstListen","queryInfo","e_7","raisedEvent","onListen","onError","applyOnlineStateChange","onViewSnapshot","raiseSnapshotsInSyncEvent","eventManagerUnlisten","lastListen","onUnlisten","eventManagerOnWatchChange","viewSnaps","viewSnaps_1","query_1","eventManagerOnWatchError","eventManagerOnOnlineStateChange","addSnapshotsInSyncListener","observer","removeSnapshotsInSyncListener","QueryListener","queryObserver","raisedInitialEvent","snap","includeMetadataChanges","shouldRaiseInitialEvent","raiseInitialEvent","shouldRaiseEvent","maybeOnline","waitForSyncWhenOnline","hasPendingWritesChanged","LocalViewChanges","fromSnapshot","viewSnapshot","BundleLoadResult","progress","BundleConverterImpl","bundledDoc","time","BundleLoader","bundleInitialProgress","addSizedElement","bytesLoaded","byteLength","documentsLoaded","payload","documentMetadata","getQueryDocumentMapping","queryDocumentMap","documents_2","complete","changedDocuments","taskState","totalDocuments","totalBytes","bundleSuccessProgress","AddedLimboDocument","RemovedLimboDocument","View","_syncedDocuments","syncState","limboDocuments","docComparator","documentSet","computeDocChanges","previousChanges","changeSet","oldDocumentSet","newMutatedKeys","newDocumentSet","lastDocInLimit","firstDocInLimit","oldDoc","oldDocHadPendingMutations","newDocHasPendingMutations","changeApplied","docsEqual","shouldWaitForSyncedDocument","updateLimboDocuments","c1","c2","compareChangeType","applyTargetChange","limboChanges","synced","newSyncState","shouldBeInLimbo","oldLimboDocuments","synchronizeWithPersistedState","queryResult","computeInitialSnapshot","LOG_TAG$3","QueryView","view","LimboResolution","receivedDocument","SyncEngineImpl","sharedClientState","maxConcurrentLimboResolutions","syncEngineListener","queryViewsByQuery","queriesByTarget","enqueuedLimboResolutions","activeLimboTargetsByKey","activeLimboResolutionsByTarget","limboDocumentRefs","mutationUserCallbacks","pendingWritesCallbacks","limboTargetIdGenerator","_isPrimaryClient","newSyncEngine","syncEngineListen","syncEngineImpl","queryView","status_1","ensureWatchCallbacks","initializeViewAndComputeSnapshot","isPrimaryClient","viewDocChanges","synthesizedTargetChange","applyDocChanges","updateTrackedLimbos","syncEngineUnlisten","targetRemainsActive","removeAndCleanupTarget","syncEngineWrite","userCallback","e_8","syncEngineEnsureWriteCallbacks","addMutationCallback","syncEngineEmitNewSnapsAndNotifyLocalStore","syncEngineApplyRemoteEvent","error_2","limboResolution","syncEngineApplyOnlineStateChange","newViewSnapshots_1","syncEngineRejectListen","limboKey","event_2","pumpEnqueuedLimboResolutions","syncEngineApplySuccessfulWrite","mutationBatchResult","error_3","processUserCallback","triggerPendingWritesCallbacks","syncEngineRejectFailedWrite","error_4","syncEngineRegisterPendingWritesCallback","highestBatchId","callbacks","e_9","rejectOutstandingPendingWritesCallbacks","errorMessage","clear","newCallbacks","query_2","onWatchError","limboKeys","removeLimboTarget","limboTargetId","limboChanges_1","limboChange","trackLimboChange","keyString","newSnaps","docChangesInAllViews","queriesProcessed","syncEngineHandleCredentialChange","userChanged","syncEngineGetRemoteKeysForTarget","keySet","queries_1","query_3","syncedDocuments","synchronizeViewAndComputeSnapshot","syncEngineSynchronizeWithChangedDocuments","syncEngineApplyBatchState","batchState","syncEngineApplyPrimaryState","activeQueries","activeQueries_1","activeTargets_1","p_1","synchronizeQueryViewsAndRaiseSnapshots","resetLimboDocuments","transitionToPrimary","newViewSnapshots","targets_1","queries_2","query_4","synthesizeTargetToQuery","syncEngineGetActiveClients","syncEngineApplyTargetState","synthesizedRemoteEvent","syncEngineApplyActiveTargetsChange","removed","added_1","_loop_5","removed_1","syncEngineLoadBundle","bundleReader","task","loadBundleImpl","reader","loader","e_10","_completeWith","_updateProgress","nextElement","_failWith","MemoryOfflineComponentProvider","synchronizeTabs","initialize","cfg","createSharedClientState","createPersistence","gcScheduler","createGarbageCollectionScheduler","createLocalStore","IndexedDbOfflineComponentProvider","onlineComponentProvider","cacheSizeBytes","forceOwnership","MultiTabOfflineComponentProvider","OnlineComponentProvider","offlineComponentProvider","createDatastore","createRemoteStore","createEventManager","createSyncEngine","startAsPrimary","DEFAULT_BYTES_PER_READ","toByteStreamReaderHelper","bytesPerRead","readFrom","read","releaseLock","validateNonEmptyArgument","functionName","argumentName","argument","validateSetOptions","methodName","merge","mergeFields","validateIsNotUsedTogether","optionName1","argument1","optionName2","argument2","validateDocumentPath","validateCollectionPath","isPlainObject","input","getPrototypeOf","valueDescription","customObjectName","tryGetCustomObjectType","funcNameRegex","cast","_delegate","validatePositiveNumber","toByteStreamReader","AsyncObserver","muted","scheduleEvent","console","mute","eventHandler","SizedBundleElement","isBundleMetadata","BundleReaderImpl","textDecoder","nextElementImpl","lengthBuffer","lengthString","jsonString","readLength","decode","raiseError","readJsonString","indexOfOpenBracket","findIndex","pullMoreDataToBuffer","newBuffer","newBundleReader","Transaction$3","readVersions","committed","lastWriteError","writtenDocs","lookup","ensureCommitNotCalled","recordVersion","preconditionForUpdate","commit","unwritten","docVersion","existingVersion","DEFAULT_MAX_ATTEMPTS_COUNT","TransactionRunner","updateFunction","attemptsRemaining","run","runWithBackOff","tryRunUpdateFunction","commitError","handleTransactionError","userPromiseError","isRetryableTransactionError","LOG_TAG$2","MAX_CONCURRENT_LIMBO_RESOLUTIONS","FirestoreClient","credentialListener","setChangeListener","getConfiguration","setCredentialChangeListener","verifyNotTerminated","isShuttingDown","enqueueAndForgetEvenWhileRestricted","e_11","onlineComponents","offlineComponents","removeChangeListener","setOfflineComponentProvider","configuration","setOnlineComponentProvider","ensureOfflineComponents","ensureOnlineComponents","getPersistence","getLocalStore","getRemoteStore","getSyncEngine","getDatastore","getEventManager","firestoreClientEnableNetwork","enqueue","firestoreClientDisableNetwork","firestoreClientWaitForPendingWrites","firestoreClientListen","wrappedObserver","firestoreClientGetDocumentFromLocalCache","readDocumentFromCache","firestoreClientGetDocumentViaSnapshotListener","readDocumentViaSnapshotListener","firestoreClientGetDocumentsFromLocalCache","executeQueryFromCache","firestoreClientGetDocumentsViaSnapshotListener","executeQueryViaSnapshotListener","firestoreClientWrite","firestoreClientAddSnapshotsInSyncListener","firestoreClientTransaction","document_4","e_12","e_13","firestoreClientLoadBundle","resultTask","createBundleReader","firestoreClientGetNamedQuery","content","encode","DatabaseInfo","forceLongPolling","autoDetectLongPolling","useFetchStreams","DEFAULT_DATABASE_NAME","DatabaseId","LOG_TAG$1","datastoreInstances","removeComponents","makeDatabaseInfo","settings","experimentalForceLongPolling","experimentalAutoDetectLongPolling","OAuthToken","EmptyCredentialsProvider","changeListener","EmulatorCredentialsProvider","FirebaseCredentialsProvider","authProvider","authDeferred","tokenCounter","forceRefresh","tokenListener","getUser","registerAuth","addAuthTokenListener","onInit","getImmediate","optional","initialTokenCounter","tokenData","accessToken","removeAuthTokenListener","currentUid","getUid","FirstPartyToken","gapi","sessionIndex","iamToken","headers","authHeader","FirstPartyCredentialsProvider","makeCredentialsProvider","DEFAULT_HOST","DEFAULT_SSL","FirestoreSettingsImpl","ignoreUndefinedProperties","Firestore$2","databaseIdOrApp","_persistenceKey","_settings","_settingsFrozen","_databaseId","_credentials","_app","databaseIdFromApp","_terminateTask","_setSettings","_getSettings","_freezeSettings","_delete","_terminate","app","connectFirestoreEmulator","port","mockUserToken","createMockUserToken","sub","user_id","DocumentReference$1","converter","_key","CollectionReference$1","withConverter","Query$1","_query","_path","getModularInstance","absolutePath","refEqual","queryEqual","LOG_TAG","AsyncQueueImpl","tail","retryableOps","_isShuttingDown","delayedOperations","operationInProgress","skipNonRestrictedTasks","timerIdsToSkip","visibilityHandler","verifyNotFailed","enqueueInternal","purgeExistingTasks","retryNextOp","e_14","newTail","getMessageOrStack","removedOp","removeDelayedOperation","drain","currentTail","containsDelayedOperation","runAllDelayedOperationsUntil","lastTimerId","a","b","skipDelaysForTimerId","newAsyncQueue","stack","includes","LoadBundleTask","_progressObserver","_taskCompletionResolver","_lastProgress","onProgress","onRejected","onFulfilled","DOM_EXCEPTION_INVALID_STATE","DOM_EXCEPTION_ABORTED","DOM_EXCEPTION_QUOTA_EXCEEDED","CACHE_SIZE_UNLIMITED","Firestore$1","_queue","_firestoreClient","configureFirestore","ensureFirestoreConfigured","enableIndexedDbPersistence","persistenceSettings","verifyNotInitialized","setPersistenceProviders","enableMultiTabIndexedDbPersistence","persistenceResult","e_15","canFallbackFromIndexedDbError","DOMException","clearIndexedDbPersistence","_initialized","_terminated","e_16","waitForPendingWrites","enableNetwork","disableNetwork","loadBundle","bundleData","FieldPath","fieldNames","_internalPath","Bytes","_byteString","FieldValue","_methodName","GeoPoint","isFinite","_lat","_long","RESERVED_FIELD_REGEX","ParsedSetData","ParsedUpdateData","isWrite","dataSource","ParseContextImpl","validatePath","contextWith","childContextForField","childPath","context","arrayElement","validatePathSegment","childContextForFieldPath","childContextForArray","createError","hasConverter","targetDoc","UserDataReader","createContext","newUserDataReader","parseSetData","userDataReader","validatePlainObject","updateData","parseObject","validatedFieldPaths","stringOrFieldPath","fieldPathFromArgument$1","fieldMaskContains","DeleteFieldValueImpl","_toFieldTransform","createSentinelChildContext","fieldValue","ServerTimestampFieldValueImpl","ArrayUnionFieldValueImpl","_elements","parseContext","parsedElements","parseData","arrayUnion","ArrayRemoveFieldValueImpl","NumericIncrementFieldValueImpl","_operand","numericIncrement","parseUpdateData","fieldMaskPaths","fieldPathFromDotSeparatedString","childContext","parsedValue","mask","parseUpdateVarargs","moreFieldsAndValues","value_1","parseQueryValue","allowArrays","looksLikeJsonObject","parseSentinelFieldValue","parseArray","parseScalarValue","entryIndex","array_1","parsedEntry","thisDb","otherDb","FIELD_PATH_RESERVED","search","hasPath","hasDocument","DocumentSnapshot$2","_firestore","_userDataWriter","_document","_converter","QueryDocumentSnapshot$2","fromFirestore","convertValue","fieldPathFromArgument","arg","SnapshotMetadata","DocumentSnapshot$1","userDataWriter","_firestoreImpl","QueryDocumentSnapshot$1","serverTimestamps","QuerySnapshot$1","_snapshot","thisArg","_cachedChanges","_cachedChangesIncludeMetadataChanges","changesFromSnapshot","querySnapshot","index_1","oldIndex","newIndex","indexTracker_1","resultChangeType","snapshotEqual","validateHasExplicitOrderByForLimitToLast","QueryConstraint","queryConstraints","queryConstraints_1","constraint","_apply","QueryFilterConstraint","_field","_op","_value","newQueryFilter","opStr","QueryOrderByConstraint","_direction","newQueryOrderBy","directionStr","QueryLimitConstraint","_limit","_limitType","limitToLast","QueryStartAtConstraint","_docOrFields","_before","newQueryBoundFromDocOrFields","docOrFields","startAfter","QueryEndAtConstraint","endBefore","newQueryBoundFromDocument","newQueryBoundFromFields","dataReader","validateDisjunctiveFilterElements","referenceList","value_2","parseDocumentIdValue","validateNewFilter","validateNewOrderBy","components","orderBy_5","rawValue","wrapped","documentIdValue","operator","conflictingOps","existingField","validateOrderByAndInequalityMatch","conflictingOp","baseQuery","inequality","AbstractUserDataWriter","serverTimestampBehavior","convertTimestamp","convertServerTimestamp","convertBytes","convertReference","convertGeoPoint","convertArray","convertObject","normalizedValue","convertDocumentKey","expectedDatabaseId","resourcePath","applyFirestoreDataConverter","convertedValue","toFirestore","LiteUserDataWriter","WriteBatch$1","_commitHandler","_mutations","_committed","_dataReader","documentRef","_verifyNotCommitted","validateReference","fieldOrUpdateData","Transaction$2","_transaction","isPartialObserver","implementsAnyMethods","methods","object","methods_1","method","getDoc","reference","convertToDocSnapshot","ExpUserDataWriter","getDocFromCache","getDocFromServer","getDocs","getDocsFromCache","getDocsFromServer","setDoc","executeWrite","updateDoc","deleteDoc","addDoc","docRef","onSnapshot","_c","currArg","internalOptions","userObserver","internalQuery","query_5","userDataWriter_1","onSnapshotsInSync","Transaction$1","liteDocumentSnapshot","internalTransaction","assertUint8ArrayAvailable","Blob","IndexedDbPersistenceProvider","_persistenceProvider","_appCompat","settingsLiteral","currentSettings","useEmulator","enablePersistence","experimentalForceOwningTab","clearPersistence","_removeServiceInstance","pathString","CollectionReference","replaceFunctionName","DocumentReference","Query","Transaction","WriteBatch","UserDataWriter","forKey","level","castReference","DocumentSnapshot","dataOrField","FirestoreDataConverter","expSnapshot","QueryDocumentSnapshot","modelObject","getInstance","converterMapByFirestore","INSTANCES","untypedConverterByConverter","WeakMap","instance","forPath","extractSnapshotOptions","wrapObserver","original","args_1","wrapper","QuerySnapshot","DocumentChange","documentPath","exports"],"mappings":"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D,CAAzC,CAAxB;AACA,SAAO9vB,MAAM,CAAC48D,qBAAP,CAA6BH,iBAA7B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAASI,aAAT,CAAuBrC,YAAvB,EAAqC;AACjC,MAAI72B,MAAM,GAAG24B,UAAU,EAAvB;AACA,SAAO,IAAI/B,cAAJ,CAAmB52B,MAAnB,EAA2B62B,YAA3B,CAAP;AACH;AACD;;;AACA,SAASsC,sBAAT,GAAkC;AAC9B,SAAO,IAAIjE,uBAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,SAASkE,SAAT,GAAqB;AACjB,MAAIvoD,OAAO,CAACC,GAAR,CAAYC,oBAAZ,KAAqC,KAAzC,EAAgD;AAC5C;AACA,WAAOb,MAAP;AACH;;AACD,SAAO,IAAP;AACH;AACD;;;AACA,SAAS+wC,WAAT,GAAuB;AACnB,SAAO,IAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoY,aAAT,CAAuB73C,UAAvB,EAAmC;AAC/B,SAAO,IAAIua,mBAAJ,CAAwBva,UAAxB;AAAoC;AAAqB,OAAzD,CAAP;AACH;AACD;AACA;AACA;;;AACA,SAAS83C,cAAT,GAA0B;AACtB,SAAO,IAAIn9D,MAAM,CAACo9D,WAAX,EAAP;AACH;AACD;AACA;AACA;;;AACA,SAASC,cAAT,GAA0B;AACtB,SAAO,IAAIr9D,MAAM,CAACs9D,WAAX,CAAuB,OAAvB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,SAAS,GAAG,oBAAhB;AACA;AACA;AACA;AACA;;AACA,IAAIC,gCAAgC,GAAG,IAAvC;AACA,IAAIC,sBAAsB,GAAG,GAA7B;AACA;;AAC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","sourcesContent":["'use strict';\n\nvar tslib = require('tslib');\nvar util = require('@firebase/util');\nvar logger = require('@firebase/logger');\nvar util$1 = require('util');\nvar crypto = require('crypto');\nvar grpcJs = require('@grpc/grpc-js');\nvar package_json = require('@grpc/grpc-js/package.json');\nvar path = require('path');\nvar protoLoader = require('@grpc/proto-loader');\n\nvar version = \"8.8.1\";\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar SDK_VERSION = version;\r\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to\r\n * exceed. All subsequent calls to next will return increasing values. If provided with a\r\n * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as\r\n * well as write out sequence numbers that it produces via `next()`.\r\n */\r\nvar ListenSequence = /** @class */ (function () {\r\n    function ListenSequence(previousValue, sequenceNumberSyncer) {\r\n        var _this = this;\r\n        this.previousValue = previousValue;\r\n        if (sequenceNumberSyncer) {\r\n            sequenceNumberSyncer.sequenceNumberHandler = function (sequenceNumber) { return _this.setPreviousValue(sequenceNumber); };\r\n            this.writeNewSequenceNumber = function (sequenceNumber) { return sequenceNumberSyncer.writeSequenceNumber(sequenceNumber); };\r\n        }\r\n    }\r\n    ListenSequence.prototype.setPreviousValue = function (externalPreviousValue) {\r\n        this.previousValue = Math.max(externalPreviousValue, this.previousValue);\r\n        return this.previousValue;\r\n    };\r\n    ListenSequence.prototype.next = function () {\r\n        var nextValue = ++this.previousValue;\r\n        if (this.writeNewSequenceNumber) {\r\n            this.writeNewSequenceNumber(nextValue);\r\n        }\r\n        return nextValue;\r\n    };\r\n    return ListenSequence;\r\n}());\r\nListenSequence.INVALID = -1;\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Formats an object as a JSON string, suitable for logging. */\r\nfunction formatJSON(value) {\r\n    // util.inspect() results in much more readable output than JSON.stringify()\r\n    return util$1.inspect(value, { depth: 100 });\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logClient = new logger.Logger('@firebase/firestore');\r\n// Helper methods are needed because variables can't be exported as read/write\r\nfunction getLogLevel() {\r\n    return logClient.logLevel;\r\n}\r\n/**\r\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\r\n *\r\n * @param logLevel - The verbosity you set for activity and error logging. Can\r\n *   be any of the following values:\r\n *\r\n *   <ul>\r\n *     <li>`debug` for the most verbose logging level, primarily for\r\n *     debugging.</li>\r\n *     <li>`error` to log errors only.</li>\r\n *     <li><code>`silent` to turn off logging.</li>\r\n *   </ul>\r\n */\r\nfunction setLogLevel$1(logLevel) {\r\n    logClient.setLogLevel(logLevel);\r\n}\r\nfunction logDebug(msg) {\r\n    var obj = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        obj[_i - 1] = arguments[_i];\r\n    }\r\n    if (logClient.logLevel <= logger.LogLevel.DEBUG) {\r\n        var args = obj.map(argToString);\r\n        logClient.debug.apply(logClient, tslib.__spreadArray([\"Firestore (\" + SDK_VERSION + \"): \" + msg], args));\r\n    }\r\n}\r\nfunction logError(msg) {\r\n    var obj = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        obj[_i - 1] = arguments[_i];\r\n    }\r\n    if (logClient.logLevel <= logger.LogLevel.ERROR) {\r\n        var args = obj.map(argToString);\r\n        logClient.error.apply(logClient, tslib.__spreadArray([\"Firestore (\" + SDK_VERSION + \"): \" + msg], args));\r\n    }\r\n}\r\nfunction logWarn(msg) {\r\n    var obj = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        obj[_i - 1] = arguments[_i];\r\n    }\r\n    if (logClient.logLevel <= logger.LogLevel.WARN) {\r\n        var args = obj.map(argToString);\r\n        logClient.warn.apply(logClient, tslib.__spreadArray([\"Firestore (\" + SDK_VERSION + \"): \" + msg], args));\r\n    }\r\n}\r\n/**\r\n * Converts an additional log parameter to a string representation.\r\n */\r\nfunction argToString(obj) {\r\n    if (typeof obj === 'string') {\r\n        return obj;\r\n    }\r\n    else {\r\n        try {\r\n            return formatJSON(obj);\r\n        }\r\n        catch (e) {\r\n            // Converting to JSON failed, just log the object directly\r\n            return obj;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Unconditionally fails, throwing an Error with the given message.\r\n * Messages are stripped in production builds.\r\n *\r\n * Returns `never` and can be used in expressions:\r\n * @example\r\n * let futureVar = fail('not implemented yet');\r\n */\r\nfunction fail(failure) {\r\n    if (failure === void 0) { failure = 'Unexpected state'; }\r\n    // Log the failure in addition to throw an exception, just in case the\r\n    // exception is swallowed.\r\n    var message = \"FIRESTORE (\" + SDK_VERSION + \") INTERNAL ASSERTION FAILED: \" + failure;\r\n    logError(message);\r\n    // NOTE: We don't use FirestoreError here because these are internal failures\r\n    // that cannot be handled by the user. (Also it would create a circular\r\n    // dependency between the error and assert modules which doesn't work.)\r\n    throw new Error(message);\r\n}\r\n/**\r\n * Fails if the given assertion condition is false, throwing an Error with the\r\n * given message if it did.\r\n *\r\n * Messages are stripped in production builds.\r\n */\r\nfunction hardAssert(assertion, message) {\r\n    if (!assertion) {\r\n        fail();\r\n    }\r\n}\r\n/**\r\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\r\n * instance of `T` before casting.\r\n */\r\nfunction debugCast(obj, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconstructor) {\r\n    return obj;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Code = {\r\n    // Causes are copied from:\r\n    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\r\n    /** Not an error; returned on success. */\r\n    OK: 'ok',\r\n    /** The operation was cancelled (typically by the caller). */\r\n    CANCELLED: 'cancelled',\r\n    /** Unknown error or an error from a different error domain. */\r\n    UNKNOWN: 'unknown',\r\n    /**\r\n     * Client specified an invalid argument. Note that this differs from\r\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\r\n     * problematic regardless of the state of the system (e.g., a malformed file\r\n     * name).\r\n     */\r\n    INVALID_ARGUMENT: 'invalid-argument',\r\n    /**\r\n     * Deadline expired before operation could complete. For operations that\r\n     * change the state of the system, this error may be returned even if the\r\n     * operation has completed successfully. For example, a successful response\r\n     * from a server could have been delayed long enough for the deadline to\r\n     * expire.\r\n     */\r\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\r\n    /** Some requested entity (e.g., file or directory) was not found. */\r\n    NOT_FOUND: 'not-found',\r\n    /**\r\n     * Some entity that we attempted to create (e.g., file or directory) already\r\n     * exists.\r\n     */\r\n    ALREADY_EXISTS: 'already-exists',\r\n    /**\r\n     * The caller does not have permission to execute the specified operation.\r\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\r\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\r\n     * PERMISSION_DENIED must not be used if the caller can not be identified\r\n     * (use UNAUTHENTICATED instead for those errors).\r\n     */\r\n    PERMISSION_DENIED: 'permission-denied',\r\n    /**\r\n     * The request does not have valid authentication credentials for the\r\n     * operation.\r\n     */\r\n    UNAUTHENTICATED: 'unauthenticated',\r\n    /**\r\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\r\n     * entire file system is out of space.\r\n     */\r\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\r\n    /**\r\n     * Operation was rejected because the system is not in a state required for\r\n     * the operation's execution. For example, directory to be deleted may be\r\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\r\n     *\r\n     * A litmus test that may help a service implementor in deciding\r\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\r\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\r\n     *  (b) Use ABORTED if the client should retry at a higher-level\r\n     *      (e.g., restarting a read-modify-write sequence).\r\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\r\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\r\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\r\n     *      should be returned since the client should not retry unless\r\n     *      they have first fixed up the directory by deleting files from it.\r\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\r\n     *      REST Get/Update/Delete on a resource and the resource on the\r\n     *      server does not match the condition. E.g., conflicting\r\n     *      read-modify-write on the same resource.\r\n     */\r\n    FAILED_PRECONDITION: 'failed-precondition',\r\n    /**\r\n     * The operation was aborted, typically due to a concurrency issue like\r\n     * sequencer check failures, transaction aborts, etc.\r\n     *\r\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\r\n     * and UNAVAILABLE.\r\n     */\r\n    ABORTED: 'aborted',\r\n    /**\r\n     * Operation was attempted past the valid range. E.g., seeking or reading\r\n     * past end of file.\r\n     *\r\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\r\n     * if the system state changes. For example, a 32-bit file system will\r\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\r\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\r\n     * an offset past the current file size.\r\n     *\r\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\r\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\r\n     * when it applies so that callers who are iterating through a space can\r\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\r\n     */\r\n    OUT_OF_RANGE: 'out-of-range',\r\n    /** Operation is not implemented or not supported/enabled in this service. */\r\n    UNIMPLEMENTED: 'unimplemented',\r\n    /**\r\n     * Internal errors. Means some invariants expected by underlying System has\r\n     * been broken. If you see one of these errors, Something is very broken.\r\n     */\r\n    INTERNAL: 'internal',\r\n    /**\r\n     * The service is currently unavailable. This is a most likely a transient\r\n     * condition and may be corrected by retrying with a backoff.\r\n     *\r\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\r\n     * and UNAVAILABLE.\r\n     */\r\n    UNAVAILABLE: 'unavailable',\r\n    /** Unrecoverable data loss or corruption. */\r\n    DATA_LOSS: 'data-loss'\r\n};\r\n/** An error returned by a Firestore operation. */\r\nvar FirestoreError = /** @class */ (function (_super) {\r\n    tslib.__extends(FirestoreError, _super);\r\n    /** @hideconstructor */\r\n    function FirestoreError(\r\n    /**\r\n     * The backend error code associated with this error.\r\n     */\r\n    code, \r\n    /**\r\n     * A custom error description.\r\n     */\r\n    message) {\r\n        var _this = _super.call(this, message) || this;\r\n        _this.code = code;\r\n        _this.message = message;\r\n        /** The custom name for all FirestoreErrors. */\r\n        _this.name = 'FirebaseError';\r\n        // HACK: We write a toString property directly because Error is not a real\r\n        // class and so inheritance does not work correctly. We could alternatively\r\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\r\n        _this.toString = function () { return _this.name + \": [code=\" + _this.code + \"]: \" + _this.message; };\r\n        return _this;\r\n    }\r\n    return FirestoreError;\r\n}(Error));\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DOCUMENT_KEY_NAME = '__name__';\r\n/**\r\n * Path represents an ordered sequence of string segments.\r\n */\r\nvar BasePath = /** @class */ (function () {\r\n    function BasePath(segments, offset, length) {\r\n        if (offset === undefined) {\r\n            offset = 0;\r\n        }\r\n        else if (offset > segments.length) {\r\n            fail();\r\n        }\r\n        if (length === undefined) {\r\n            length = segments.length - offset;\r\n        }\r\n        else if (length > segments.length - offset) {\r\n            fail();\r\n        }\r\n        this.segments = segments;\r\n        this.offset = offset;\r\n        this.len = length;\r\n    }\r\n    Object.defineProperty(BasePath.prototype, \"length\", {\r\n        get: function () {\r\n            return this.len;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    BasePath.prototype.isEqual = function (other) {\r\n        return BasePath.comparator(this, other) === 0;\r\n    };\r\n    BasePath.prototype.child = function (nameOrPath) {\r\n        var segments = this.segments.slice(this.offset, this.limit());\r\n        if (nameOrPath instanceof BasePath) {\r\n            nameOrPath.forEach(function (segment) {\r\n                segments.push(segment);\r\n            });\r\n        }\r\n        else {\r\n            segments.push(nameOrPath);\r\n        }\r\n        return this.construct(segments);\r\n    };\r\n    /** The index of one past the last segment of the path. */\r\n    BasePath.prototype.limit = function () {\r\n        return this.offset + this.length;\r\n    };\r\n    BasePath.prototype.popFirst = function (size) {\r\n        size = size === undefined ? 1 : size;\r\n        return this.construct(this.segments, this.offset + size, this.length - size);\r\n    };\r\n    BasePath.prototype.popLast = function () {\r\n        return this.construct(this.segments, this.offset, this.length - 1);\r\n    };\r\n    BasePath.prototype.firstSegment = function () {\r\n        return this.segments[this.offset];\r\n    };\r\n    BasePath.prototype.lastSegment = function () {\r\n        return this.get(this.length - 1);\r\n    };\r\n    BasePath.prototype.get = function (index) {\r\n        return this.segments[this.offset + index];\r\n    };\r\n    BasePath.prototype.isEmpty = function () {\r\n        return this.length === 0;\r\n    };\r\n    BasePath.prototype.isPrefixOf = function (other) {\r\n        if (other.length < this.length) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < this.length; i++) {\r\n            if (this.get(i) !== other.get(i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    BasePath.prototype.isImmediateParentOf = function (potentialChild) {\r\n        if (this.length + 1 !== potentialChild.length) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < this.length; i++) {\r\n            if (this.get(i) !== potentialChild.get(i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    BasePath.prototype.forEach = function (fn) {\r\n        for (var i = this.offset, end = this.limit(); i < end; i++) {\r\n            fn(this.segments[i]);\r\n        }\r\n    };\r\n    BasePath.prototype.toArray = function () {\r\n        return this.segments.slice(this.offset, this.limit());\r\n    };\r\n    BasePath.comparator = function (p1, p2) {\r\n        var len = Math.min(p1.length, p2.length);\r\n        for (var i = 0; i < len; i++) {\r\n            var left = p1.get(i);\r\n            var right = p2.get(i);\r\n            if (left < right) {\r\n                return -1;\r\n            }\r\n            if (left > right) {\r\n                return 1;\r\n            }\r\n        }\r\n        if (p1.length < p2.length) {\r\n            return -1;\r\n        }\r\n        if (p1.length > p2.length) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    };\r\n    return BasePath;\r\n}());\r\n/**\r\n * A slash-separated path for navigating resources (documents and collections)\r\n * within Firestore.\r\n */\r\nvar ResourcePath = /** @class */ (function (_super) {\r\n    tslib.__extends(ResourcePath, _super);\r\n    function ResourcePath() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ResourcePath.prototype.construct = function (segments, offset, length) {\r\n        return new ResourcePath(segments, offset, length);\r\n    };\r\n    ResourcePath.prototype.canonicalString = function () {\r\n        // NOTE: The client is ignorant of any path segments containing escape\r\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\r\n        // for legacy reasons and should not be used frequently).\r\n        return this.toArray().join('/');\r\n    };\r\n    ResourcePath.prototype.toString = function () {\r\n        return this.canonicalString();\r\n    };\r\n    /**\r\n     * Creates a resource path from the given slash-delimited string. If multiple\r\n     * arguments are provided, all components are combined. Leading and trailing\r\n     * slashes from all components are ignored.\r\n     */\r\n    ResourcePath.fromString = function () {\r\n        var pathComponents = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            pathComponents[_i] = arguments[_i];\r\n        }\r\n        // NOTE: The client is ignorant of any path segments containing escape\r\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\r\n        // for legacy reasons and should not be used frequently).\r\n        var segments = [];\r\n        for (var _d = 0, pathComponents_1 = pathComponents; _d < pathComponents_1.length; _d++) {\r\n            var path = pathComponents_1[_d];\r\n            if (path.indexOf('//') >= 0) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid segment (\" + path + \"). Paths must not contain // in them.\");\r\n            }\r\n            // Strip leading and traling slashed.\r\n            segments.push.apply(segments, path.split('/').filter(function (segment) { return segment.length > 0; }));\r\n        }\r\n        return new ResourcePath(segments);\r\n    };\r\n    ResourcePath.emptyPath = function () {\r\n        return new ResourcePath([]);\r\n    };\r\n    return ResourcePath;\r\n}(BasePath));\r\nvar identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\r\n/** A dot-separated path for navigating sub-objects within a document. */\r\nvar FieldPath$1 = /** @class */ (function (_super) {\r\n    tslib.__extends(FieldPath$1, _super);\r\n    function FieldPath$1() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    FieldPath$1.prototype.construct = function (segments, offset, length) {\r\n        return new FieldPath$1(segments, offset, length);\r\n    };\r\n    /**\r\n     * Returns true if the string could be used as a segment in a field path\r\n     * without escaping.\r\n     */\r\n    FieldPath$1.isValidIdentifier = function (segment) {\r\n        return identifierRegExp.test(segment);\r\n    };\r\n    FieldPath$1.prototype.canonicalString = function () {\r\n        return this.toArray()\r\n            .map(function (str) {\r\n            str = str.replace(/\\\\/g, '\\\\\\\\').replace(/`/g, '\\\\`');\r\n            if (!FieldPath$1.isValidIdentifier(str)) {\r\n                str = '`' + str + '`';\r\n            }\r\n            return str;\r\n        })\r\n            .join('.');\r\n    };\r\n    FieldPath$1.prototype.toString = function () {\r\n        return this.canonicalString();\r\n    };\r\n    /**\r\n     * Returns true if this field references the key of a document.\r\n     */\r\n    FieldPath$1.prototype.isKeyField = function () {\r\n        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\r\n    };\r\n    /**\r\n     * The field designating the key of a document.\r\n     */\r\n    FieldPath$1.keyField = function () {\r\n        return new FieldPath$1([DOCUMENT_KEY_NAME]);\r\n    };\r\n    /**\r\n     * Parses a field string from the given server-formatted string.\r\n     *\r\n     * - Splitting the empty string is not allowed (for now at least).\r\n     * - Empty segments within the string (e.g. if there are two consecutive\r\n     *   separators) are not allowed.\r\n     *\r\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\r\n     * non-identifier path components, even if they aren't escaped.\r\n     */\r\n    FieldPath$1.fromServerFormat = function (path) {\r\n        var segments = [];\r\n        var current = '';\r\n        var i = 0;\r\n        var addCurrentSegment = function () {\r\n            if (current.length === 0) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field path (\" + path + \"). Paths must not be empty, begin \" +\r\n                    \"with '.', end with '.', or contain '..'\");\r\n            }\r\n            segments.push(current);\r\n            current = '';\r\n        };\r\n        var inBackticks = false;\r\n        while (i < path.length) {\r\n            var c = path[i];\r\n            if (c === '\\\\') {\r\n                if (i + 1 === path.length) {\r\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\r\n                }\r\n                var next = path[i + 1];\r\n                if (!(next === '\\\\' || next === '.' || next === '`')) {\r\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\r\n                }\r\n                current += next;\r\n                i += 2;\r\n            }\r\n            else if (c === '`') {\r\n                inBackticks = !inBackticks;\r\n                i++;\r\n            }\r\n            else if (c === '.' && !inBackticks) {\r\n                addCurrentSegment();\r\n                i++;\r\n            }\r\n            else {\r\n                current += c;\r\n                i++;\r\n            }\r\n        }\r\n        addCurrentSegment();\r\n        if (inBackticks) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\r\n        }\r\n        return new FieldPath$1(segments);\r\n    };\r\n    FieldPath$1.emptyPath = function () {\r\n        return new FieldPath$1([]);\r\n    };\r\n    return FieldPath$1;\r\n}(BasePath));\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar escapeChar = '\\u0001';\r\nvar encodedSeparatorChar = '\\u0001';\r\nvar encodedNul = '\\u0010';\r\nvar encodedEscape = '\\u0011';\r\n/**\r\n * Encodes a resource path into a IndexedDb-compatible string form.\r\n */\r\nfunction encodeResourcePath(path) {\r\n    var result = '';\r\n    for (var i = 0; i < path.length; i++) {\r\n        if (result.length > 0) {\r\n            result = encodeSeparator(result);\r\n        }\r\n        result = encodeSegment(path.get(i), result);\r\n    }\r\n    return encodeSeparator(result);\r\n}\r\n/** Encodes a single segment of a resource path into the given result */\r\nfunction encodeSegment(segment, resultBuf) {\r\n    var result = resultBuf;\r\n    var length = segment.length;\r\n    for (var i = 0; i < length; i++) {\r\n        var c = segment.charAt(i);\r\n        switch (c) {\r\n            case '\\0':\r\n                result += escapeChar + encodedNul;\r\n                break;\r\n            case escapeChar:\r\n                result += escapeChar + encodedEscape;\r\n                break;\r\n            default:\r\n                result += c;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/** Encodes a path separator into the given result */\r\nfunction encodeSeparator(result) {\r\n    return result + escapeChar + encodedSeparatorChar;\r\n}\r\n/**\r\n * Decodes the given IndexedDb-compatible string form of a resource path into\r\n * a ResourcePath instance. Note that this method is not suitable for use with\r\n * decoding resource names from the server; those are One Platform format\r\n * strings.\r\n */\r\nfunction decodeResourcePath(path) {\r\n    // Event the empty path must encode as a path of at least length 2. A path\r\n    // with exactly 2 must be the empty path.\r\n    var length = path.length;\r\n    hardAssert(length >= 2);\r\n    if (length === 2) {\r\n        hardAssert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar);\r\n        return ResourcePath.emptyPath();\r\n    }\r\n    // Escape characters cannot exist past the second-to-last position in the\r\n    // source value.\r\n    var lastReasonableEscapeIndex = length - 2;\r\n    var segments = [];\r\n    var segmentBuilder = '';\r\n    for (var start = 0; start < length;) {\r\n        // The last two characters of a valid encoded path must be a separator, so\r\n        // there must be an end to this segment.\r\n        var end = path.indexOf(escapeChar, start);\r\n        if (end < 0 || end > lastReasonableEscapeIndex) {\r\n            fail();\r\n        }\r\n        var next = path.charAt(end + 1);\r\n        switch (next) {\r\n            case encodedSeparatorChar:\r\n                var currentPiece = path.substring(start, end);\r\n                var segment = void 0;\r\n                if (segmentBuilder.length === 0) {\r\n                    // Avoid copying for the common case of a segment that excludes \\0\r\n                    // and \\001\r\n                    segment = currentPiece;\r\n                }\r\n                else {\r\n                    segmentBuilder += currentPiece;\r\n                    segment = segmentBuilder;\r\n                    segmentBuilder = '';\r\n                }\r\n                segments.push(segment);\r\n                break;\r\n            case encodedNul:\r\n                segmentBuilder += path.substring(start, end);\r\n                segmentBuilder += '\\0';\r\n                break;\r\n            case encodedEscape:\r\n                // The escape character can be used in the output to encode itself.\r\n                segmentBuilder += path.substring(start, end + 1);\r\n                break;\r\n            default:\r\n                fail();\r\n        }\r\n        start = end + 2;\r\n    }\r\n    return new ResourcePath(segments);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Schema Version for the Web client:\r\n * 1.  Initial version including Mutation Queue, Query Cache, and Remote\r\n *     Document Cache\r\n * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No\r\n *     longer required because migration 3 unconditionally clears it.\r\n * 3.  Dropped and re-created Query Cache to deal with cache corruption related\r\n *     to limbo resolution. Addresses\r\n *     https://github.com/firebase/firebase-ios-sdk/issues/1548\r\n * 4.  Multi-Tab Support.\r\n * 5.  Removal of held write acks.\r\n * 6.  Create document global for tracking document cache size.\r\n * 7.  Ensure every cached document has a sentinel row with a sequence number.\r\n * 8.  Add collection-parent index for Collection Group queries.\r\n * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than\r\n *     an auto-incrementing ID. This is required for Index-Free queries.\r\n * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.\r\n * 11. Add bundles and named_queries for bundle support.\r\n */\r\nvar SCHEMA_VERSION = 11;\r\n/**\r\n * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.\r\n */\r\nvar DbTimestamp = /** @class */ (function () {\r\n    function DbTimestamp(seconds, nanoseconds) {\r\n        this.seconds = seconds;\r\n        this.nanoseconds = nanoseconds;\r\n    }\r\n    return DbTimestamp;\r\n}());\r\n/**\r\n * A singleton object to be stored in the 'owner' store in IndexedDb.\r\n *\r\n * A given database can have a single primary tab assigned at a given time. That\r\n * tab must validate that it is still holding the primary lease before every\r\n * operation that requires locked access. The primary tab should regularly\r\n * write an updated timestamp to this lease to prevent other tabs from\r\n * \"stealing\" the primary lease\r\n */\r\nvar DbPrimaryClient = /** @class */ (function () {\r\n    function DbPrimaryClient(ownerId, \r\n    /** Whether to allow shared access from multiple tabs. */\r\n    allowTabSynchronization, leaseTimestampMs) {\r\n        this.ownerId = ownerId;\r\n        this.allowTabSynchronization = allowTabSynchronization;\r\n        this.leaseTimestampMs = leaseTimestampMs;\r\n    }\r\n    return DbPrimaryClient;\r\n}());\r\n/**\r\n * Name of the IndexedDb object store.\r\n *\r\n * Note that the name 'owner' is chosen to ensure backwards compatibility with\r\n * older clients that only supported single locked access to the persistence\r\n * layer.\r\n */\r\nDbPrimaryClient.store = 'owner';\r\n/**\r\n * The key string used for the single object that exists in the\r\n * DbPrimaryClient store.\r\n */\r\nDbPrimaryClient.key = 'owner';\r\n/**\r\n * An object to be stored in the 'mutationQueues' store in IndexedDb.\r\n *\r\n * Each user gets a single queue of MutationBatches to apply to the server.\r\n * DbMutationQueue tracks the metadata about the queue.\r\n */\r\nvar DbMutationQueue = /** @class */ (function () {\r\n    function DbMutationQueue(\r\n    /**\r\n     * The normalized user ID to which this queue belongs.\r\n     */\r\n    userId, \r\n    /**\r\n     * An identifier for the highest numbered batch that has been acknowledged\r\n     * by the server. All MutationBatches in this queue with batchIds less\r\n     * than or equal to this value are considered to have been acknowledged by\r\n     * the server.\r\n     *\r\n     * NOTE: this is deprecated and no longer used by the code.\r\n     */\r\n    lastAcknowledgedBatchId, \r\n    /**\r\n     * A stream token that was previously sent by the server.\r\n     *\r\n     * See StreamingWriteRequest in datastore.proto for more details about\r\n     * usage.\r\n     *\r\n     * After sending this token, earlier tokens may not be used anymore so\r\n     * only a single stream token is retained.\r\n     *\r\n     * NOTE: this is deprecated and no longer used by the code.\r\n     */\r\n    lastStreamToken) {\r\n        this.userId = userId;\r\n        this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;\r\n        this.lastStreamToken = lastStreamToken;\r\n    }\r\n    return DbMutationQueue;\r\n}());\r\n/** Name of the IndexedDb object store.  */\r\nDbMutationQueue.store = 'mutationQueues';\r\n/** Keys are automatically assigned via the userId property. */\r\nDbMutationQueue.keyPath = 'userId';\r\n/**\r\n * An object to be stored in the 'mutations' store in IndexedDb.\r\n *\r\n * Represents a batch of user-level mutations intended to be sent to the server\r\n * in a single write. Each user-level batch gets a separate DbMutationBatch\r\n * with a new batchId.\r\n */\r\nvar DbMutationBatch = /** @class */ (function () {\r\n    function DbMutationBatch(\r\n    /**\r\n     * The normalized user ID to which this batch belongs.\r\n     */\r\n    userId, \r\n    /**\r\n     * An identifier for this batch, allocated using an auto-generated key.\r\n     */\r\n    batchId, \r\n    /**\r\n     * The local write time of the batch, stored as milliseconds since the\r\n     * epoch.\r\n     */\r\n    localWriteTimeMs, \r\n    /**\r\n     * A list of \"mutations\" that represent a partial base state from when this\r\n     * write batch was initially created. During local application of the write\r\n     * batch, these baseMutations are applied prior to the real writes in order\r\n     * to override certain document fields from the remote document cache. This\r\n     * is necessary in the case of non-idempotent writes (e.g. `increment()`\r\n     * transforms) to make sure that the local view of the modified documents\r\n     * doesn't flicker if the remote document cache receives the result of the\r\n     * non-idempotent write before the write is removed from the queue.\r\n     *\r\n     * These mutations are never sent to the backend.\r\n     */\r\n    baseMutations, \r\n    /**\r\n     * A list of mutations to apply. All mutations will be applied atomically.\r\n     *\r\n     * Mutations are serialized via toMutation().\r\n     */\r\n    mutations) {\r\n        this.userId = userId;\r\n        this.batchId = batchId;\r\n        this.localWriteTimeMs = localWriteTimeMs;\r\n        this.baseMutations = baseMutations;\r\n        this.mutations = mutations;\r\n    }\r\n    return DbMutationBatch;\r\n}());\r\n/** Name of the IndexedDb object store.  */\r\nDbMutationBatch.store = 'mutations';\r\n/** Keys are automatically assigned via the userId, batchId properties. */\r\nDbMutationBatch.keyPath = 'batchId';\r\n/** The index name for lookup of mutations by user. */\r\nDbMutationBatch.userMutationsIndex = 'userMutationsIndex';\r\n/** The user mutations index is keyed by [userId, batchId] pairs. */\r\nDbMutationBatch.userMutationsKeyPath = ['userId', 'batchId'];\r\n/**\r\n * An object to be stored in the 'documentMutations' store in IndexedDb.\r\n *\r\n * A manually maintained index of all the mutation batches that affect a given\r\n * document key. The rows in this table are references based on the contents of\r\n * DbMutationBatch.mutations.\r\n */\r\nvar DbDocumentMutation = /** @class */ (function () {\r\n    function DbDocumentMutation() {\r\n    }\r\n    /**\r\n     * Creates a [userId] key for use in the DbDocumentMutations index to iterate\r\n     * over all of a user's document mutations.\r\n     */\r\n    DbDocumentMutation.prefixForUser = function (userId) {\r\n        return [userId];\r\n    };\r\n    /**\r\n     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\r\n     * index to iterate over all at document mutations for a given path or lower.\r\n     */\r\n    DbDocumentMutation.prefixForPath = function (userId, path) {\r\n        return [userId, encodeResourcePath(path)];\r\n    };\r\n    /**\r\n     * Creates a full index key of [userId, encodedPath, batchId] for inserting\r\n     * and deleting into the DbDocumentMutations index.\r\n     */\r\n    DbDocumentMutation.key = function (userId, path, batchId) {\r\n        return [userId, encodeResourcePath(path), batchId];\r\n    };\r\n    return DbDocumentMutation;\r\n}());\r\nDbDocumentMutation.store = 'documentMutations';\r\n/**\r\n * Because we store all the useful information for this store in the key,\r\n * there is no useful information to store as the value. The raw (unencoded)\r\n * path cannot be stored because IndexedDb doesn't store prototype\r\n * information.\r\n */\r\nDbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();\r\n/**\r\n * Represents the known absence of a document at a particular version.\r\n * Stored in IndexedDb as part of a DbRemoteDocument object.\r\n */\r\nvar DbNoDocument = /** @class */ (function () {\r\n    function DbNoDocument(path, readTime) {\r\n        this.path = path;\r\n        this.readTime = readTime;\r\n    }\r\n    return DbNoDocument;\r\n}());\r\n/**\r\n * Represents a document that is known to exist but whose data is unknown.\r\n * Stored in IndexedDb as part of a DbRemoteDocument object.\r\n */\r\nvar DbUnknownDocument = /** @class */ (function () {\r\n    function DbUnknownDocument(path, version) {\r\n        this.path = path;\r\n        this.version = version;\r\n    }\r\n    return DbUnknownDocument;\r\n}());\r\n/**\r\n * An object to be stored in the 'remoteDocuments' store in IndexedDb.\r\n * It represents either:\r\n *\r\n * - A complete document.\r\n * - A \"no document\" representing a document that is known not to exist (at\r\n * some version).\r\n * - An \"unknown document\" representing a document that is known to exist (at\r\n * some version) but whose contents are unknown.\r\n *\r\n * Note: This is the persisted equivalent of a MaybeDocument and could perhaps\r\n * be made more general if necessary.\r\n */\r\nvar DbRemoteDocument = /** @class */ (function () {\r\n    // TODO: We are currently storing full document keys almost three times\r\n    // (once as part of the primary key, once - partly - as `parentPath` and once\r\n    // inside the encoded documents). During our next migration, we should\r\n    // rewrite the primary key as parentPath + document ID which would allow us\r\n    // to drop one value.\r\n    function DbRemoteDocument(\r\n    /**\r\n     * Set to an instance of DbUnknownDocument if the data for a document is\r\n     * not known, but it is known that a document exists at the specified\r\n     * version (e.g. it had a successful update applied to it)\r\n     */\r\n    unknownDocument, \r\n    /**\r\n     * Set to an instance of a DbNoDocument if it is known that no document\r\n     * exists.\r\n     */\r\n    noDocument, \r\n    /**\r\n     * Set to an instance of a Document if there's a cached version of the\r\n     * document.\r\n     */\r\n    document, \r\n    /**\r\n     * Documents that were written to the remote document store based on\r\n     * a write acknowledgment are marked with `hasCommittedMutations`. These\r\n     * documents are potentially inconsistent with the backend's copy and use\r\n     * the write's commit version as their document version.\r\n     */\r\n    hasCommittedMutations, \r\n    /**\r\n     * When the document was read from the backend. Undefined for data written\r\n     * prior to schema version 9.\r\n     */\r\n    readTime, \r\n    /**\r\n     * The path of the collection this document is part of. Undefined for data\r\n     * written prior to schema version 9.\r\n     */\r\n    parentPath) {\r\n        this.unknownDocument = unknownDocument;\r\n        this.noDocument = noDocument;\r\n        this.document = document;\r\n        this.hasCommittedMutations = hasCommittedMutations;\r\n        this.readTime = readTime;\r\n        this.parentPath = parentPath;\r\n    }\r\n    return DbRemoteDocument;\r\n}());\r\nDbRemoteDocument.store = 'remoteDocuments';\r\n/**\r\n * An index that provides access to all entries sorted by read time (which\r\n * corresponds to the last modification time of each row).\r\n *\r\n * This index is used to provide a changelog for Multi-Tab.\r\n */\r\nDbRemoteDocument.readTimeIndex = 'readTimeIndex';\r\nDbRemoteDocument.readTimeIndexPath = 'readTime';\r\n/**\r\n * An index that provides access to documents in a collection sorted by read\r\n * time.\r\n *\r\n * This index is used to allow the RemoteDocumentCache to fetch newly changed\r\n * documents in a collection.\r\n */\r\nDbRemoteDocument.collectionReadTimeIndex = 'collectionReadTimeIndex';\r\nDbRemoteDocument.collectionReadTimeIndexPath = ['parentPath', 'readTime'];\r\n/**\r\n * Contains a single entry that has metadata about the remote document cache.\r\n */\r\nvar DbRemoteDocumentGlobal = /** @class */ (function () {\r\n    /**\r\n     * @param byteSize - Approximately the total size in bytes of all the\r\n     * documents in the document cache.\r\n     */\r\n    function DbRemoteDocumentGlobal(byteSize) {\r\n        this.byteSize = byteSize;\r\n    }\r\n    return DbRemoteDocumentGlobal;\r\n}());\r\nDbRemoteDocumentGlobal.store = 'remoteDocumentGlobal';\r\nDbRemoteDocumentGlobal.key = 'remoteDocumentGlobalKey';\r\n/**\r\n * An object to be stored in the 'targets' store in IndexedDb.\r\n *\r\n * This is based on and should be kept in sync with the proto used in the iOS\r\n * client.\r\n *\r\n * Each query the client listens to against the server is tracked on disk so\r\n * that the query can be efficiently resumed on restart.\r\n */\r\nvar DbTarget = /** @class */ (function () {\r\n    function DbTarget(\r\n    /**\r\n     * An auto-generated sequential numeric identifier for the query.\r\n     *\r\n     * Queries are stored using their canonicalId as the key, but these\r\n     * canonicalIds can be quite long so we additionally assign a unique\r\n     * queryId which can be used by referenced data structures (e.g.\r\n     * indexes) to minimize the on-disk cost.\r\n     */\r\n    targetId, \r\n    /**\r\n     * The canonical string representing this query. This is not unique.\r\n     */\r\n    canonicalId, \r\n    /**\r\n     * The last readTime received from the Watch Service for this query.\r\n     *\r\n     * This is the same value as TargetChange.read_time in the protos.\r\n     */\r\n    readTime, \r\n    /**\r\n     * An opaque, server-assigned token that allows watching a query to be\r\n     * resumed after disconnecting without retransmitting all the data\r\n     * that matches the query. The resume token essentially identifies a\r\n     * point in time from which the server should resume sending results.\r\n     *\r\n     * This is related to the snapshotVersion in that the resumeToken\r\n     * effectively also encodes that value, but the resumeToken is opaque\r\n     * and sometimes encodes additional information.\r\n     *\r\n     * A consequence of this is that the resumeToken should be used when\r\n     * asking the server to reason about where this client is in the watch\r\n     * stream, but the client should use the snapshotVersion for its own\r\n     * purposes.\r\n     *\r\n     * This is the same value as TargetChange.resume_token in the protos.\r\n     */\r\n    resumeToken, \r\n    /**\r\n     * A sequence number representing the last time this query was\r\n     * listened to, used for garbage collection purposes.\r\n     *\r\n     * Conventionally this would be a timestamp value, but device-local\r\n     * clocks are unreliable and they must be able to create new listens\r\n     * even while disconnected. Instead this should be a monotonically\r\n     * increasing number that's incremented on each listen call.\r\n     *\r\n     * This is different from the queryId since the queryId is an\r\n     * immutable identifier assigned to the Query on first use while\r\n     * lastListenSequenceNumber is updated every time the query is\r\n     * listened to.\r\n     */\r\n    lastListenSequenceNumber, \r\n    /**\r\n     * Denotes the maximum snapshot version at which the associated query view\r\n     * contained no limbo documents.  Undefined for data written prior to\r\n     * schema version 9.\r\n     */\r\n    lastLimboFreeSnapshotVersion, \r\n    /**\r\n     * The query for this target.\r\n     *\r\n     * Because canonical ids are not unique we must store the actual query. We\r\n     * use the proto to have an object we can persist without having to\r\n     * duplicate translation logic to and from a `Query` object.\r\n     */\r\n    query) {\r\n        this.targetId = targetId;\r\n        this.canonicalId = canonicalId;\r\n        this.readTime = readTime;\r\n        this.resumeToken = resumeToken;\r\n        this.lastListenSequenceNumber = lastListenSequenceNumber;\r\n        this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;\r\n        this.query = query;\r\n    }\r\n    return DbTarget;\r\n}());\r\nDbTarget.store = 'targets';\r\n/** Keys are automatically assigned via the targetId property. */\r\nDbTarget.keyPath = 'targetId';\r\n/** The name of the queryTargets index. */\r\nDbTarget.queryTargetsIndexName = 'queryTargetsIndex';\r\n/**\r\n * The index of all canonicalIds to the targets that they match. This is not\r\n * a unique mapping because canonicalId does not promise a unique name for all\r\n * possible queries, so we append the targetId to make the mapping unique.\r\n */\r\nDbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];\r\n/**\r\n * An object representing an association between a target and a document, or a\r\n * sentinel row marking the last sequence number at which a document was used.\r\n * Each document cached must have a corresponding sentinel row before lru\r\n * garbage collection is enabled.\r\n *\r\n * The target associations and sentinel rows are co-located so that orphaned\r\n * documents and their sequence numbers can be identified efficiently via a scan\r\n * of this store.\r\n */\r\nvar DbTargetDocument = /** @class */ (function () {\r\n    function DbTargetDocument(\r\n    /**\r\n     * The targetId identifying a target or 0 for a sentinel row.\r\n     */\r\n    targetId, \r\n    /**\r\n     * The path to the document, as encoded in the key.\r\n     */\r\n    path, \r\n    /**\r\n     * If this is a sentinel row, this should be the sequence number of the last\r\n     * time the document specified by `path` was used. Otherwise, it should be\r\n     * `undefined`.\r\n     */\r\n    sequenceNumber) {\r\n        this.targetId = targetId;\r\n        this.path = path;\r\n        this.sequenceNumber = sequenceNumber;\r\n    }\r\n    return DbTargetDocument;\r\n}());\r\n/** Name of the IndexedDb object store.  */\r\nDbTargetDocument.store = 'targetDocuments';\r\n/** Keys are automatically assigned via the targetId, path properties. */\r\nDbTargetDocument.keyPath = ['targetId', 'path'];\r\n/** The index name for the reverse index. */\r\nDbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';\r\n/** We also need to create the reverse index for these properties. */\r\nDbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];\r\n/**\r\n * A record of global state tracked across all Targets, tracked separately\r\n * to avoid the need for extra indexes.\r\n *\r\n * This should be kept in-sync with the proto used in the iOS client.\r\n */\r\nvar DbTargetGlobal = /** @class */ (function () {\r\n    function DbTargetGlobal(\r\n    /**\r\n     * The highest numbered target id across all targets.\r\n     *\r\n     * See DbTarget.targetId.\r\n     */\r\n    highestTargetId, \r\n    /**\r\n     * The highest numbered lastListenSequenceNumber across all targets.\r\n     *\r\n     * See DbTarget.lastListenSequenceNumber.\r\n     */\r\n    highestListenSequenceNumber, \r\n    /**\r\n     * A global snapshot version representing the last consistent snapshot we\r\n     * received from the backend. This is monotonically increasing and any\r\n     * snapshots received from the backend prior to this version (e.g. for\r\n     * targets resumed with a resumeToken) should be suppressed (buffered)\r\n     * until the backend has caught up to this snapshot version again. This\r\n     * prevents our cache from ever going backwards in time.\r\n     */\r\n    lastRemoteSnapshotVersion, \r\n    /**\r\n     * The number of targets persisted.\r\n     */\r\n    targetCount) {\r\n        this.highestTargetId = highestTargetId;\r\n        this.highestListenSequenceNumber = highestListenSequenceNumber;\r\n        this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\r\n        this.targetCount = targetCount;\r\n    }\r\n    return DbTargetGlobal;\r\n}());\r\n/**\r\n * The key string used for the single object that exists in the\r\n * DbTargetGlobal store.\r\n */\r\nDbTargetGlobal.key = 'targetGlobalKey';\r\nDbTargetGlobal.store = 'targetGlobal';\r\n/**\r\n * An object representing an association between a Collection id (e.g. 'messages')\r\n * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.\r\n * This is used to efficiently find all collections to query when performing\r\n * a Collection Group query.\r\n */\r\nvar DbCollectionParent = /** @class */ (function () {\r\n    function DbCollectionParent(\r\n    /**\r\n     * The collectionId (e.g. 'messages')\r\n     */\r\n    collectionId, \r\n    /**\r\n     * The path to the parent (either a document location or an empty path for\r\n     * a root-level collection).\r\n     */\r\n    parent) {\r\n        this.collectionId = collectionId;\r\n        this.parent = parent;\r\n    }\r\n    return DbCollectionParent;\r\n}());\r\n/** Name of the IndexedDb object store. */\r\nDbCollectionParent.store = 'collectionParents';\r\n/** Keys are automatically assigned via the collectionId, parent properties. */\r\nDbCollectionParent.keyPath = ['collectionId', 'parent'];\r\n/**\r\n * A record of the metadata state of each client.\r\n *\r\n * PORTING NOTE: This is used to synchronize multi-tab state and does not need\r\n * to be ported to iOS or Android.\r\n */\r\nvar DbClientMetadata = /** @class */ (function () {\r\n    function DbClientMetadata(\r\n    // Note: Previous schema versions included a field\r\n    // \"lastProcessedDocumentChangeId\". Don't use anymore.\r\n    /** The auto-generated client id assigned at client startup. */\r\n    clientId, \r\n    /** The last time this state was updated. */\r\n    updateTimeMs, \r\n    /** Whether the client's network connection is enabled. */\r\n    networkEnabled, \r\n    /** Whether this client is running in a foreground tab. */\r\n    inForeground) {\r\n        this.clientId = clientId;\r\n        this.updateTimeMs = updateTimeMs;\r\n        this.networkEnabled = networkEnabled;\r\n        this.inForeground = inForeground;\r\n    }\r\n    return DbClientMetadata;\r\n}());\r\n/** Name of the IndexedDb object store. */\r\nDbClientMetadata.store = 'clientMetadata';\r\n/** Keys are automatically assigned via the clientId properties. */\r\nDbClientMetadata.keyPath = 'clientId';\r\n/**\r\n * A object representing a bundle loaded by the SDK.\r\n */\r\nvar DbBundle = /** @class */ (function () {\r\n    function DbBundle(\r\n    /** The ID of the loaded bundle. */\r\n    bundleId, \r\n    /** The create time of the loaded bundle. */\r\n    createTime, \r\n    /** The schema version of the loaded bundle. */\r\n    version) {\r\n        this.bundleId = bundleId;\r\n        this.createTime = createTime;\r\n        this.version = version;\r\n    }\r\n    return DbBundle;\r\n}());\r\n/** Name of the IndexedDb object store. */\r\nDbBundle.store = 'bundles';\r\nDbBundle.keyPath = 'bundleId';\r\n/**\r\n * A object representing a named query loaded by the SDK via a bundle.\r\n */\r\nvar DbNamedQuery = /** @class */ (function () {\r\n    function DbNamedQuery(\r\n    /** The name of the query. */\r\n    name, \r\n    /** The read time of the results saved in the bundle from the named query. */\r\n    readTime, \r\n    /** The query saved in the bundle. */\r\n    bundledQuery) {\r\n        this.name = name;\r\n        this.readTime = readTime;\r\n        this.bundledQuery = bundledQuery;\r\n    }\r\n    return DbNamedQuery;\r\n}());\r\n/** Name of the IndexedDb object store. */\r\nDbNamedQuery.store = 'namedQueries';\r\nDbNamedQuery.keyPath = 'name';\r\n// Visible for testing\r\nvar V1_STORES = [\r\n    DbMutationQueue.store,\r\n    DbMutationBatch.store,\r\n    DbDocumentMutation.store,\r\n    DbRemoteDocument.store,\r\n    DbTarget.store,\r\n    DbPrimaryClient.store,\r\n    DbTargetGlobal.store,\r\n    DbTargetDocument.store\r\n];\r\n// V2 is no longer usable (see comment at top of file)\r\n// Visible for testing\r\nvar V3_STORES = V1_STORES;\r\n// Visible for testing\r\n// Note: DbRemoteDocumentChanges is no longer used and dropped with v9.\r\nvar V4_STORES = tslib.__spreadArray(tslib.__spreadArray([], V3_STORES), [DbClientMetadata.store]);\r\n// V5 does not change the set of stores.\r\nvar V6_STORES = tslib.__spreadArray(tslib.__spreadArray([], V4_STORES), [DbRemoteDocumentGlobal.store]);\r\n// V7 does not change the set of stores.\r\nvar V8_STORES = tslib.__spreadArray(tslib.__spreadArray([], V6_STORES), [DbCollectionParent.store]);\r\n// V9 does not change the set of stores.\r\n// V10 does not change the set of stores.\r\nvar V11_STORES = tslib.__spreadArray(tslib.__spreadArray([], V8_STORES), [DbBundle.store, DbNamedQuery.store]);\r\n/**\r\n * The list of all default IndexedDB stores used throughout the SDK. This is\r\n * used when creating transactions so that access across all stores is done\r\n * atomically.\r\n */\r\nvar ALL_STORES = V11_STORES;\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PRIMARY_LEASE_LOST_ERROR_MSG = 'The current tab is not in the required state to perform this operation. ' +\r\n    'It might be necessary to refresh the browser tab.';\r\n/**\r\n * A base class representing a persistence transaction, encapsulating both the\r\n * transaction's sequence numbers as well as a list of onCommitted listeners.\r\n *\r\n * When you call Persistence.runTransaction(), it will create a transaction and\r\n * pass it to your callback. You then pass it to any method that operates\r\n * on persistence.\r\n */\r\nvar PersistenceTransaction = /** @class */ (function () {\r\n    function PersistenceTransaction() {\r\n        this.onCommittedListeners = [];\r\n    }\r\n    PersistenceTransaction.prototype.addOnCommittedListener = function (listener) {\r\n        this.onCommittedListeners.push(listener);\r\n    };\r\n    PersistenceTransaction.prototype.raiseOnCommittedEvent = function () {\r\n        this.onCommittedListeners.forEach(function (listener) { return listener(); });\r\n    };\r\n    return PersistenceTransaction;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Deferred = /** @class */ (function () {\r\n    function Deferred() {\r\n        var _this = this;\r\n        this.promise = new Promise(function (resolve, reject) {\r\n            _this.resolve = resolve;\r\n            _this.reject = reject;\r\n        });\r\n    }\r\n    return Deferred;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * PersistencePromise is essentially a re-implementation of Promise except\r\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\r\n * are executed synchronously when a PersistencePromise resolves rather than\r\n * asynchronously (Promise implementations use setImmediate() or similar).\r\n *\r\n * This is necessary to interoperate with IndexedDB which will automatically\r\n * commit transactions if control is returned to the event loop without\r\n * synchronously initiating another operation on the transaction.\r\n *\r\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\r\n * Promises.\r\n */\r\nvar PersistencePromise = /** @class */ (function () {\r\n    function PersistencePromise(callback) {\r\n        var _this = this;\r\n        // NOTE: next/catchCallback will always point to our own wrapper functions,\r\n        // not the user's raw next() or catch() callbacks.\r\n        this.nextCallback = null;\r\n        this.catchCallback = null;\r\n        // When the operation resolves, we'll set result or error and mark isDone.\r\n        this.result = undefined;\r\n        this.error = undefined;\r\n        this.isDone = false;\r\n        // Set to true when .then() or .catch() are called and prevents additional\r\n        // chaining.\r\n        this.callbackAttached = false;\r\n        callback(function (value) {\r\n            _this.isDone = true;\r\n            _this.result = value;\r\n            if (_this.nextCallback) {\r\n                // value should be defined unless T is Void, but we can't express\r\n                // that in the type system.\r\n                _this.nextCallback(value);\r\n            }\r\n        }, function (error) {\r\n            _this.isDone = true;\r\n            _this.error = error;\r\n            if (_this.catchCallback) {\r\n                _this.catchCallback(error);\r\n            }\r\n        });\r\n    }\r\n    PersistencePromise.prototype.catch = function (fn) {\r\n        return this.next(undefined, fn);\r\n    };\r\n    PersistencePromise.prototype.next = function (nextFn, catchFn) {\r\n        var _this = this;\r\n        if (this.callbackAttached) {\r\n            fail();\r\n        }\r\n        this.callbackAttached = true;\r\n        if (this.isDone) {\r\n            if (!this.error) {\r\n                return this.wrapSuccess(nextFn, this.result);\r\n            }\r\n            else {\r\n                return this.wrapFailure(catchFn, this.error);\r\n            }\r\n        }\r\n        else {\r\n            return new PersistencePromise(function (resolve, reject) {\r\n                _this.nextCallback = function (value) {\r\n                    _this.wrapSuccess(nextFn, value).next(resolve, reject);\r\n                };\r\n                _this.catchCallback = function (error) {\r\n                    _this.wrapFailure(catchFn, error).next(resolve, reject);\r\n                };\r\n            });\r\n        }\r\n    };\r\n    PersistencePromise.prototype.toPromise = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            _this.next(resolve, reject);\r\n        });\r\n    };\r\n    PersistencePromise.prototype.wrapUserFunction = function (fn) {\r\n        try {\r\n            var result = fn();\r\n            if (result instanceof PersistencePromise) {\r\n                return result;\r\n            }\r\n            else {\r\n                return PersistencePromise.resolve(result);\r\n            }\r\n        }\r\n        catch (e) {\r\n            return PersistencePromise.reject(e);\r\n        }\r\n    };\r\n    PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {\r\n        if (nextFn) {\r\n            return this.wrapUserFunction(function () { return nextFn(value); });\r\n        }\r\n        else {\r\n            // If there's no nextFn, then R must be the same as T\r\n            return PersistencePromise.resolve(value);\r\n        }\r\n    };\r\n    PersistencePromise.prototype.wrapFailure = function (catchFn, error) {\r\n        if (catchFn) {\r\n            return this.wrapUserFunction(function () { return catchFn(error); });\r\n        }\r\n        else {\r\n            return PersistencePromise.reject(error);\r\n        }\r\n    };\r\n    PersistencePromise.resolve = function (result) {\r\n        return new PersistencePromise(function (resolve, reject) {\r\n            resolve(result);\r\n        });\r\n    };\r\n    PersistencePromise.reject = function (error) {\r\n        return new PersistencePromise(function (resolve, reject) {\r\n            reject(error);\r\n        });\r\n    };\r\n    PersistencePromise.waitFor = function (\r\n    // Accept all Promise types in waitFor().\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    all) {\r\n        return new PersistencePromise(function (resolve, reject) {\r\n            var expectedCount = 0;\r\n            var resolvedCount = 0;\r\n            var done = false;\r\n            all.forEach(function (element) {\r\n                ++expectedCount;\r\n                element.next(function () {\r\n                    ++resolvedCount;\r\n                    if (done && resolvedCount === expectedCount) {\r\n                        resolve();\r\n                    }\r\n                }, function (err) { return reject(err); });\r\n            });\r\n            done = true;\r\n            if (resolvedCount === expectedCount) {\r\n                resolve();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Given an array of predicate functions that asynchronously evaluate to a\r\n     * boolean, implements a short-circuiting `or` between the results. Predicates\r\n     * will be evaluated until one of them returns `true`, then stop. The final\r\n     * result will be whether any of them returned `true`.\r\n     */\r\n    PersistencePromise.or = function (predicates) {\r\n        var p = PersistencePromise.resolve(false);\r\n        var _loop_1 = function (predicate) {\r\n            p = p.next(function (isTrue) {\r\n                if (isTrue) {\r\n                    return PersistencePromise.resolve(isTrue);\r\n                }\r\n                else {\r\n                    return predicate();\r\n                }\r\n            });\r\n        };\r\n        for (var _i = 0, predicates_1 = predicates; _i < predicates_1.length; _i++) {\r\n            var predicate = predicates_1[_i];\r\n            _loop_1(predicate);\r\n        }\r\n        return p;\r\n    };\r\n    PersistencePromise.forEach = function (collection, f) {\r\n        var _this = this;\r\n        var promises = [];\r\n        collection.forEach(function (r, s) {\r\n            promises.push(f.call(_this, r, s));\r\n        });\r\n        return this.waitFor(promises);\r\n    };\r\n    return PersistencePromise;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// References to `window` are guarded by SimpleDb.isAvailable()\r\n/* eslint-disable no-restricted-globals */\r\nvar LOG_TAG$g = 'SimpleDb';\r\n/**\r\n * The maximum number of retry attempts for an IndexedDb transaction that fails\r\n * with a DOMException.\r\n */\r\nvar TRANSACTION_RETRY_COUNT = 3;\r\n/**\r\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\r\n * specific object store.\r\n */\r\nvar SimpleDbTransaction = /** @class */ (function () {\r\n    function SimpleDbTransaction(action, transaction) {\r\n        var _this = this;\r\n        this.action = action;\r\n        this.transaction = transaction;\r\n        this.aborted = false;\r\n        /**\r\n         * A promise that resolves with the result of the IndexedDb transaction.\r\n         */\r\n        this.completionDeferred = new Deferred();\r\n        this.transaction.oncomplete = function () {\r\n            _this.completionDeferred.resolve();\r\n        };\r\n        this.transaction.onabort = function () {\r\n            if (transaction.error) {\r\n                _this.completionDeferred.reject(new IndexedDbTransactionError(action, transaction.error));\r\n            }\r\n            else {\r\n                _this.completionDeferred.resolve();\r\n            }\r\n        };\r\n        this.transaction.onerror = function (event) {\r\n            var error = checkForAndReportiOSError(event.target.error);\r\n            _this.completionDeferred.reject(new IndexedDbTransactionError(action, error));\r\n        };\r\n    }\r\n    SimpleDbTransaction.open = function (db, action, mode, objectStoreNames) {\r\n        try {\r\n            return new SimpleDbTransaction(action, db.transaction(objectStoreNames, mode));\r\n        }\r\n        catch (e) {\r\n            throw new IndexedDbTransactionError(action, e);\r\n        }\r\n    };\r\n    Object.defineProperty(SimpleDbTransaction.prototype, \"completionPromise\", {\r\n        get: function () {\r\n            return this.completionDeferred.promise;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    SimpleDbTransaction.prototype.abort = function (error) {\r\n        if (error) {\r\n            this.completionDeferred.reject(error);\r\n        }\r\n        if (!this.aborted) {\r\n            logDebug(LOG_TAG$g, 'Aborting transaction:', error ? error.message : 'Client-initiated abort');\r\n            this.aborted = true;\r\n            this.transaction.abort();\r\n        }\r\n    };\r\n    /**\r\n     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\r\n     * operations performed on the SimpleDbStore happen within the context of this\r\n     * transaction and it cannot be used anymore once the transaction is\r\n     * completed.\r\n     *\r\n     * Note that we can't actually enforce that the KeyType and ValueType are\r\n     * correct, but they allow type safety through the rest of the consuming code.\r\n     */\r\n    SimpleDbTransaction.prototype.store = function (storeName) {\r\n        var store = this.transaction.objectStore(storeName);\r\n        return new SimpleDbStore(store);\r\n    };\r\n    return SimpleDbTransaction;\r\n}());\r\n/**\r\n * Provides a wrapper around IndexedDb with a simplified interface that uses\r\n * Promise-like return values to chain operations. Real promises cannot be used\r\n * since .then() continuations are executed asynchronously (e.g. via\r\n * .setImmediate), which would cause IndexedDB to end the transaction.\r\n * See PersistencePromise for more details.\r\n */\r\nvar SimpleDb = /** @class */ (function () {\r\n    /*\r\n     * Creates a new SimpleDb wrapper for IndexedDb database `name`.\r\n     *\r\n     * Note that `version` must not be a downgrade. IndexedDB does not support\r\n     * downgrading the schema version. We currently do not support any way to do\r\n     * versioning outside of IndexedDB's versioning mechanism, as only\r\n     * version-upgrade transactions are allowed to do things like create\r\n     * objectstores.\r\n     */\r\n    function SimpleDb(name, version, schemaConverter) {\r\n        this.name = name;\r\n        this.version = version;\r\n        this.schemaConverter = schemaConverter;\r\n        var iOSVersion = SimpleDb.getIOSVersion(util.getUA());\r\n        // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the\r\n        // bug we're checking for should exist in iOS >= 12.2 and < 13, but for\r\n        // whatever reason it's much harder to hit after 12.2 so we only proactively\r\n        // log on 12.2.\r\n        if (iOSVersion === 12.2) {\r\n            logError('Firestore persistence suffers from a bug in iOS 12.2 ' +\r\n                'Safari that may cause your app to stop working. See ' +\r\n                'https://stackoverflow.com/q/56496296/110915 for details ' +\r\n                'and a potential workaround.');\r\n        }\r\n    }\r\n    /** Deletes the specified database. */\r\n    SimpleDb.delete = function (name) {\r\n        logDebug(LOG_TAG$g, 'Removing database:', name);\r\n        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\r\n    };\r\n    /** Returns true if IndexedDB is available in the current environment. */\r\n    SimpleDb.isAvailable = function () {\r\n        if (typeof indexedDB === 'undefined') {\r\n            return false;\r\n        }\r\n        if (SimpleDb.isMockPersistence()) {\r\n            return true;\r\n        }\r\n        // We extensively use indexed array values and compound keys,\r\n        // which IE and Edge do not support. However, they still have indexedDB\r\n        // defined on the window, so we need to check for them here and make sure\r\n        // to return that persistence is not enabled for those browsers.\r\n        // For tracking support of this feature, see here:\r\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\r\n        // Check the UA string to find out the browser.\r\n        var ua = util.getUA();\r\n        // IE 10\r\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\r\n        // IE 11\r\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\r\n        // Edge\r\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\r\n        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\r\n        // iOS Safari: Disable for users running iOS version < 10.\r\n        var iOSVersion = SimpleDb.getIOSVersion(ua);\r\n        var isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;\r\n        // Android browser: Disable for userse running version < 4.5.\r\n        var androidVersion = SimpleDb.getAndroidVersion(ua);\r\n        var isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;\r\n        if (ua.indexOf('MSIE ') > 0 ||\r\n            ua.indexOf('Trident/') > 0 ||\r\n            ua.indexOf('Edge/') > 0 ||\r\n            isUnsupportedIOS ||\r\n            isUnsupportedAndroid) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if the backing IndexedDB store is the Node IndexedDBShim\r\n     * (see https://github.com/axemclion/IndexedDBShim).\r\n     */\r\n    SimpleDb.isMockPersistence = function () {\r\n        var _a;\r\n        return (typeof process !== 'undefined' &&\r\n            ((_a = process.env) === null || _a === void 0 ? void 0 : _a.USE_MOCK_PERSISTENCE) === 'YES');\r\n    };\r\n    /** Helper to get a typed SimpleDbStore from a transaction. */\r\n    SimpleDb.getStore = function (txn, store) {\r\n        return txn.store(store);\r\n    };\r\n    // visible for testing\r\n    /** Parse User Agent to determine iOS version. Returns -1 if not found. */\r\n    SimpleDb.getIOSVersion = function (ua) {\r\n        var iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\\d_]+)/i);\r\n        var version = iOSVersionRegex\r\n            ? iOSVersionRegex[1].split('_').slice(0, 2).join('.')\r\n            : '-1';\r\n        return Number(version);\r\n    };\r\n    // visible for testing\r\n    /** Parse User Agent to determine Android version. Returns -1 if not found. */\r\n    SimpleDb.getAndroidVersion = function (ua) {\r\n        var androidVersionRegex = ua.match(/Android ([\\d.]+)/i);\r\n        var version = androidVersionRegex\r\n            ? androidVersionRegex[1].split('.').slice(0, 2).join('.')\r\n            : '-1';\r\n        return Number(version);\r\n    };\r\n    /**\r\n     * Opens the specified database, creating or upgrading it if necessary.\r\n     */\r\n    SimpleDb.prototype.ensureDb = function (action) {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var _d;\r\n            var _this = this;\r\n            return tslib.__generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        if (!!this.db) return [3 /*break*/, 2];\r\n                        logDebug(LOG_TAG$g, 'Opening database:', this.name);\r\n                        _d = this;\r\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\r\n                                // TODO(mikelehen): Investigate browser compatibility.\r\n                                // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\r\n                                // suggests IE9 and older WebKit browsers handle upgrade\r\n                                // differently. They expect setVersion, as described here:\r\n                                // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion\r\n                                var request = indexedDB.open(_this.name, _this.version);\r\n                                request.onsuccess = function (event) {\r\n                                    var db = event.target.result;\r\n                                    resolve(db);\r\n                                };\r\n                                request.onblocked = function () {\r\n                                    reject(new IndexedDbTransactionError(action, 'Cannot upgrade IndexedDB schema while another tab is open. ' +\r\n                                        'Close all tabs that access Firestore and reload this page to proceed.'));\r\n                                };\r\n                                request.onerror = function (event) {\r\n                                    var error = event.target.error;\r\n                                    if (error.name === 'VersionError') {\r\n                                        reject(new FirestoreError(Code.FAILED_PRECONDITION, 'A newer version of the Firestore SDK was previously used and so the persisted ' +\r\n                                            'data is not compatible with the version of the SDK you are now using. The SDK ' +\r\n                                            'will operate with persistence disabled. If you need persistence, please ' +\r\n                                            're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' +\r\n                                            'data for your app to start fresh.'));\r\n                                    }\r\n                                    else {\r\n                                        reject(new IndexedDbTransactionError(action, error));\r\n                                    }\r\n                                };\r\n                                request.onupgradeneeded = function (event) {\r\n                                    logDebug(LOG_TAG$g, 'Database \"' + _this.name + '\" requires upgrade from version:', event.oldVersion);\r\n                                    var db = event.target.result;\r\n                                    _this.schemaConverter\r\n                                        .createOrUpgrade(db, request.transaction, event.oldVersion, _this.version)\r\n                                        .next(function () {\r\n                                        logDebug(LOG_TAG$g, 'Database upgrade to version ' + _this.version + ' complete');\r\n                                    });\r\n                                };\r\n                            })];\r\n                    case 1:\r\n                        _d.db = _e.sent();\r\n                        _e.label = 2;\r\n                    case 2:\r\n                        if (this.versionchangelistener) {\r\n                            this.db.onversionchange = function (event) { return _this.versionchangelistener(event); };\r\n                        }\r\n                        return [2 /*return*/, this.db];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SimpleDb.prototype.setVersionChangeListener = function (versionChangeListener) {\r\n        this.versionchangelistener = versionChangeListener;\r\n        if (this.db) {\r\n            this.db.onversionchange = function (event) {\r\n                return versionChangeListener(event);\r\n            };\r\n        }\r\n    };\r\n    SimpleDb.prototype.runTransaction = function (action, mode, objectStores, transactionFn) {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var readonly, attemptNumber, _loop_2, this_1, state_1;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        readonly = mode === 'readonly';\r\n                        attemptNumber = 0;\r\n                        _loop_2 = function () {\r\n                            var transaction_1, transactionFnResult, error_1, retryable;\r\n                            return tslib.__generator(this, function (_e) {\r\n                                switch (_e.label) {\r\n                                    case 0:\r\n                                        ++attemptNumber;\r\n                                        _e.label = 1;\r\n                                    case 1:\r\n                                        _e.trys.push([1, 4, , 5]);\r\n                                        return [4 /*yield*/, this_1.ensureDb(action)];\r\n                                    case 2:\r\n                                        this_1.db = _e.sent();\r\n                                        transaction_1 = SimpleDbTransaction.open(this_1.db, action, readonly ? 'readonly' : 'readwrite', objectStores);\r\n                                        transactionFnResult = transactionFn(transaction_1)\r\n                                            .catch(function (error) {\r\n                                            // Abort the transaction if there was an error.\r\n                                            transaction_1.abort(error);\r\n                                            // We cannot actually recover, and calling `abort()` will cause the transaction's\r\n                                            // completion promise to be rejected. This in turn means that we won't use\r\n                                            // `transactionFnResult` below. We return a rejection here so that we don't add the\r\n                                            // possibility of returning `void` to the type of `transactionFnResult`.\r\n                                            return PersistencePromise.reject(error);\r\n                                        })\r\n                                            .toPromise();\r\n                                        // As noted above, errors are propagated by aborting the transaction. So\r\n                                        // we swallow any error here to avoid the browser logging it as unhandled.\r\n                                        transactionFnResult.catch(function () { });\r\n                                        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\r\n                                        // fire), but still return the original transactionFnResult back to the\r\n                                        // caller.\r\n                                        return [4 /*yield*/, transaction_1.completionPromise];\r\n                                    case 3:\r\n                                        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\r\n                                        // fire), but still return the original transactionFnResult back to the\r\n                                        // caller.\r\n                                        _e.sent();\r\n                                        return [2 /*return*/, { value: transactionFnResult }];\r\n                                    case 4:\r\n                                        error_1 = _e.sent();\r\n                                        retryable = error_1.name !== 'FirebaseError' &&\r\n                                            attemptNumber < TRANSACTION_RETRY_COUNT;\r\n                                        logDebug(LOG_TAG$g, 'Transaction failed with error:', error_1.message, 'Retrying:', retryable);\r\n                                        this_1.close();\r\n                                        if (!retryable) {\r\n                                            return [2 /*return*/, { value: Promise.reject(error_1) }];\r\n                                        }\r\n                                        return [3 /*break*/, 5];\r\n                                    case 5: return [2 /*return*/];\r\n                                }\r\n                            });\r\n                        };\r\n                        this_1 = this;\r\n                        _d.label = 1;\r\n                    case 1:\r\n                        return [5 /*yield**/, _loop_2()];\r\n                    case 2:\r\n                        state_1 = _d.sent();\r\n                        if (typeof state_1 === \"object\")\r\n                            return [2 /*return*/, state_1.value];\r\n                        return [3 /*break*/, 1];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SimpleDb.prototype.close = function () {\r\n        if (this.db) {\r\n            this.db.close();\r\n        }\r\n        this.db = undefined;\r\n    };\r\n    return SimpleDb;\r\n}());\r\n/**\r\n * A controller for iterating over a key range or index. It allows an iterate\r\n * callback to delete the currently-referenced object, or jump to a new key\r\n * within the key range or index.\r\n */\r\nvar IterationController = /** @class */ (function () {\r\n    function IterationController(dbCursor) {\r\n        this.dbCursor = dbCursor;\r\n        this.shouldStop = false;\r\n        this.nextKey = null;\r\n    }\r\n    Object.defineProperty(IterationController.prototype, \"isDone\", {\r\n        get: function () {\r\n            return this.shouldStop;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IterationController.prototype, \"skipToKey\", {\r\n        get: function () {\r\n            return this.nextKey;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(IterationController.prototype, \"cursor\", {\r\n        set: function (value) {\r\n            this.dbCursor = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * This function can be called to stop iteration at any point.\r\n     */\r\n    IterationController.prototype.done = function () {\r\n        this.shouldStop = true;\r\n    };\r\n    /**\r\n     * This function can be called to skip to that next key, which could be\r\n     * an index or a primary key.\r\n     */\r\n    IterationController.prototype.skip = function (key) {\r\n        this.nextKey = key;\r\n    };\r\n    /**\r\n     * Delete the current cursor value from the object store.\r\n     *\r\n     * NOTE: You CANNOT do this with a keysOnly query.\r\n     */\r\n    IterationController.prototype.delete = function () {\r\n        return wrapRequest(this.dbCursor.delete());\r\n    };\r\n    return IterationController;\r\n}());\r\n/** An error that wraps exceptions that thrown during IndexedDB execution. */\r\nvar IndexedDbTransactionError = /** @class */ (function (_super) {\r\n    tslib.__extends(IndexedDbTransactionError, _super);\r\n    function IndexedDbTransactionError(actionName, cause) {\r\n        var _this = _super.call(this, Code.UNAVAILABLE, \"IndexedDB transaction '\" + actionName + \"' failed: \" + cause) || this;\r\n        _this.name = 'IndexedDbTransactionError';\r\n        return _this;\r\n    }\r\n    return IndexedDbTransactionError;\r\n}(FirestoreError));\r\n/** Verifies whether `e` is an IndexedDbTransactionError. */\r\nfunction isIndexedDbTransactionError(e) {\r\n    // Use name equality, as instanceof checks on errors don't work with errors\r\n    // that wrap other errors.\r\n    return e.name === 'IndexedDbTransactionError';\r\n}\r\n/**\r\n * A wrapper around an IDBObjectStore providing an API that:\r\n *\r\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\r\n * methods for acting against the object store.\r\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\r\n * method return a PersistencePromise instead.\r\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\r\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\r\n */\r\nvar SimpleDbStore = /** @class */ (function () {\r\n    function SimpleDbStore(store) {\r\n        this.store = store;\r\n    }\r\n    SimpleDbStore.prototype.put = function (keyOrValue, value) {\r\n        var request;\r\n        if (value !== undefined) {\r\n            logDebug(LOG_TAG$g, 'PUT', this.store.name, keyOrValue, value);\r\n            request = this.store.put(value, keyOrValue);\r\n        }\r\n        else {\r\n            logDebug(LOG_TAG$g, 'PUT', this.store.name, '<auto-key>', keyOrValue);\r\n            request = this.store.put(keyOrValue);\r\n        }\r\n        return wrapRequest(request);\r\n    };\r\n    /**\r\n     * Adds a new value into an Object Store and returns the new key. Similar to\r\n     * IndexedDb's `add()`, this method will fail on primary key collisions.\r\n     *\r\n     * @param value - The object to write.\r\n     * @returns The key of the value to add.\r\n     */\r\n    SimpleDbStore.prototype.add = function (value) {\r\n        logDebug(LOG_TAG$g, 'ADD', this.store.name, value, value);\r\n        var request = this.store.add(value);\r\n        return wrapRequest(request);\r\n    };\r\n    /**\r\n     * Gets the object with the specified key from the specified store, or null\r\n     * if no object exists with the specified key.\r\n     *\r\n     * @key The key of the object to get.\r\n     * @returns The object with the specified key or null if no object exists.\r\n     */\r\n    SimpleDbStore.prototype.get = function (key) {\r\n        var _this = this;\r\n        var request = this.store.get(key);\r\n        // We're doing an unsafe cast to ValueType.\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return wrapRequest(request).next(function (result) {\r\n            // Normalize nonexistence to null.\r\n            if (result === undefined) {\r\n                result = null;\r\n            }\r\n            logDebug(LOG_TAG$g, 'GET', _this.store.name, key, result);\r\n            return result;\r\n        });\r\n    };\r\n    SimpleDbStore.prototype.delete = function (key) {\r\n        logDebug(LOG_TAG$g, 'DELETE', this.store.name, key);\r\n        var request = this.store.delete(key);\r\n        return wrapRequest(request);\r\n    };\r\n    /**\r\n     * If we ever need more of the count variants, we can add overloads. For now,\r\n     * all we need is to count everything in a store.\r\n     *\r\n     * Returns the number of rows in the store.\r\n     */\r\n    SimpleDbStore.prototype.count = function () {\r\n        logDebug(LOG_TAG$g, 'COUNT', this.store.name);\r\n        var request = this.store.count();\r\n        return wrapRequest(request);\r\n    };\r\n    SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {\r\n        var cursor = this.cursor(this.options(indexOrRange, range));\r\n        var results = [];\r\n        return this.iterateCursor(cursor, function (key, value) {\r\n            results.push(value);\r\n        }).next(function () {\r\n            return results;\r\n        });\r\n    };\r\n    SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {\r\n        logDebug(LOG_TAG$g, 'DELETE ALL', this.store.name);\r\n        var options = this.options(indexOrRange, range);\r\n        options.keysOnly = false;\r\n        var cursor = this.cursor(options);\r\n        return this.iterateCursor(cursor, function (key, value, control) {\r\n            // NOTE: Calling delete() on a cursor is documented as more efficient than\r\n            // calling delete() on an object store with a single key\r\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\r\n            // however, this requires us *not* to use a keysOnly cursor\r\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\r\n            // may want to compare the performance of each method.\r\n            return control.delete();\r\n        });\r\n    };\r\n    SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {\r\n        var options;\r\n        if (!callback) {\r\n            options = {};\r\n            callback = optionsOrCallback;\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        var cursor = this.cursor(options);\r\n        return this.iterateCursor(cursor, callback);\r\n    };\r\n    /**\r\n     * Iterates over a store, but waits for the given callback to complete for\r\n     * each entry before iterating the next entry. This allows the callback to do\r\n     * asynchronous work to determine if this iteration should continue.\r\n     *\r\n     * The provided callback should return `true` to continue iteration, and\r\n     * `false` otherwise.\r\n     */\r\n    SimpleDbStore.prototype.iterateSerial = function (callback) {\r\n        var cursorRequest = this.cursor({});\r\n        return new PersistencePromise(function (resolve, reject) {\r\n            cursorRequest.onerror = function (event) {\r\n                var error = checkForAndReportiOSError(event.target.error);\r\n                reject(error);\r\n            };\r\n            cursorRequest.onsuccess = function (event) {\r\n                var cursor = event.target.result;\r\n                if (!cursor) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n                callback(cursor.primaryKey, cursor.value).next(function (shouldContinue) {\r\n                    if (shouldContinue) {\r\n                        cursor.continue();\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            };\r\n        });\r\n    };\r\n    SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {\r\n        var results = [];\r\n        return new PersistencePromise(function (resolve, reject) {\r\n            cursorRequest.onerror = function (event) {\r\n                reject(event.target.error);\r\n            };\r\n            cursorRequest.onsuccess = function (event) {\r\n                var cursor = event.target.result;\r\n                if (!cursor) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n                var controller = new IterationController(cursor);\r\n                var userResult = fn(cursor.primaryKey, cursor.value, controller);\r\n                if (userResult instanceof PersistencePromise) {\r\n                    var userPromise = userResult.catch(function (err) {\r\n                        controller.done();\r\n                        return PersistencePromise.reject(err);\r\n                    });\r\n                    results.push(userPromise);\r\n                }\r\n                if (controller.isDone) {\r\n                    resolve();\r\n                }\r\n                else if (controller.skipToKey === null) {\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    cursor.continue(controller.skipToKey);\r\n                }\r\n            };\r\n        }).next(function () {\r\n            return PersistencePromise.waitFor(results);\r\n        });\r\n    };\r\n    SimpleDbStore.prototype.options = function (indexOrRange, range) {\r\n        var indexName = undefined;\r\n        if (indexOrRange !== undefined) {\r\n            if (typeof indexOrRange === 'string') {\r\n                indexName = indexOrRange;\r\n            }\r\n            else {\r\n                range = indexOrRange;\r\n            }\r\n        }\r\n        return { index: indexName, range: range };\r\n    };\r\n    SimpleDbStore.prototype.cursor = function (options) {\r\n        var direction = 'next';\r\n        if (options.reverse) {\r\n            direction = 'prev';\r\n        }\r\n        if (options.index) {\r\n            var index = this.store.index(options.index);\r\n            if (options.keysOnly) {\r\n                return index.openKeyCursor(options.range, direction);\r\n            }\r\n            else {\r\n                return index.openCursor(options.range, direction);\r\n            }\r\n        }\r\n        else {\r\n            return this.store.openCursor(options.range, direction);\r\n        }\r\n    };\r\n    return SimpleDbStore;\r\n}());\r\n/**\r\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\r\n * handlers to resolve / reject the PersistencePromise as appropriate.\r\n */\r\nfunction wrapRequest(request) {\r\n    return new PersistencePromise(function (resolve, reject) {\r\n        request.onsuccess = function (event) {\r\n            var result = event.target.result;\r\n            resolve(result);\r\n        };\r\n        request.onerror = function (event) {\r\n            var error = checkForAndReportiOSError(event.target.error);\r\n            reject(error);\r\n        };\r\n    });\r\n}\r\n// Guard so we only report the error once.\r\nvar reportedIOSError = false;\r\nfunction checkForAndReportiOSError(error) {\r\n    var iOSVersion = SimpleDb.getIOSVersion(util.getUA());\r\n    if (iOSVersion >= 12.2 && iOSVersion < 13) {\r\n        var IOS_ERROR = 'An internal error was encountered in the Indexed Database server';\r\n        if (error.message.indexOf(IOS_ERROR) >= 0) {\r\n            // Wrap error in a more descriptive one.\r\n            var newError_1 = new FirestoreError('internal', \"IOS_INDEXEDDB_BUG1: IndexedDb has thrown '\" + IOS_ERROR + \"'. This is likely \" +\r\n                \"due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 \" +\r\n                \"for details and a potential workaround.\");\r\n            if (!reportedIOSError) {\r\n                reportedIOSError = true;\r\n                // Throw a global exception outside of this promise chain, for the user to\r\n                // potentially catch.\r\n                setTimeout(function () {\r\n                    throw newError_1;\r\n                }, 0);\r\n            }\r\n            return newError_1;\r\n        }\r\n    }\r\n    return error;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar IndexedDbTransaction = /** @class */ (function (_super) {\r\n    tslib.__extends(IndexedDbTransaction, _super);\r\n    function IndexedDbTransaction(simpleDbTransaction, currentSequenceNumber) {\r\n        var _this = _super.call(this) || this;\r\n        _this.simpleDbTransaction = simpleDbTransaction;\r\n        _this.currentSequenceNumber = currentSequenceNumber;\r\n        return _this;\r\n    }\r\n    return IndexedDbTransaction;\r\n}(PersistenceTransaction));\r\nfunction getStore(txn, store) {\r\n    var indexedDbTransaction = debugCast(txn);\r\n    return SimpleDb.getStore(indexedDbTransaction.simpleDbTransaction, store);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Generates `nBytes` of random bytes.\r\n *\r\n * If `nBytes < 0` , an error will be thrown.\r\n */\r\nfunction randomBytes(nBytes) {\r\n    return crypto.randomBytes(nBytes);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AutoId = /** @class */ (function () {\r\n    function AutoId() {\r\n    }\r\n    AutoId.newId = function () {\r\n        // Alphanumeric characters\r\n        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        // The largest byte value that is a multiple of `char.length`.\r\n        var maxMultiple = Math.floor(256 / chars.length) * chars.length;\r\n        var autoId = '';\r\n        var targetLength = 20;\r\n        while (autoId.length < targetLength) {\r\n            var bytes = randomBytes(40);\r\n            for (var i = 0; i < bytes.length; ++i) {\r\n                // Only accept values that are [0, maxMultiple), this ensures they can\r\n                // be evenly mapped to indices of `chars` via a modulo operation.\r\n                if (autoId.length < targetLength && bytes[i] < maxMultiple) {\r\n                    autoId += chars.charAt(bytes[i] % chars.length);\r\n                }\r\n            }\r\n        }\r\n        return autoId;\r\n    };\r\n    return AutoId;\r\n}());\r\nfunction primitiveComparator(left, right) {\r\n    if (left < right) {\r\n        return -1;\r\n    }\r\n    if (left > right) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n/** Helper to compare arrays using isEqual(). */\r\nfunction arrayEquals(left, right, comparator) {\r\n    if (left.length !== right.length) {\r\n        return false;\r\n    }\r\n    return left.every(function (value, index) { return comparator(value, right[index]); });\r\n}\r\n/**\r\n * Returns the immediate lexicographically-following string. This is useful to\r\n * construct an inclusive range for indexeddb iterators.\r\n */\r\nfunction immediateSuccessor(s) {\r\n    // Return the input string, with an additional NUL byte appended.\r\n    return s + '\\0';\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\r\nvar MIN_SECONDS = -62135596800;\r\n// Number of nanoseconds in a millisecond.\r\nvar MS_TO_NANOS = 1e6;\r\n/**\r\n * A `Timestamp` represents a point in time independent of any time zone or\r\n * calendar, represented as seconds and fractions of seconds at nanosecond\r\n * resolution in UTC Epoch time.\r\n *\r\n * It is encoded using the Proleptic Gregorian Calendar which extends the\r\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\r\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\r\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\r\n * 9999-12-31T23:59:59.999999999Z.\r\n *\r\n * For examples and further specifications, refer to the\r\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\r\n */\r\nvar Timestamp = /** @class */ (function () {\r\n    /**\r\n     * Creates a new timestamp.\r\n     *\r\n     * @param seconds - The number of seconds of UTC time since Unix epoch\r\n     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\r\n     *     9999-12-31T23:59:59Z inclusive.\r\n     * @param nanoseconds - The non-negative fractions of a second at nanosecond\r\n     *     resolution. Negative second values with fractions must still have\r\n     *     non-negative nanoseconds values that count forward in time. Must be\r\n     *     from 0 to 999,999,999 inclusive.\r\n     */\r\n    function Timestamp(\r\n    /**\r\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\r\n     */\r\n    seconds, \r\n    /**\r\n     * The fractions of a second at nanosecond resolution.*\r\n     */\r\n    nanoseconds) {\r\n        this.seconds = seconds;\r\n        this.nanoseconds = nanoseconds;\r\n        if (nanoseconds < 0) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);\r\n        }\r\n        if (nanoseconds >= 1e9) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);\r\n        }\r\n        if (seconds < MIN_SECONDS) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);\r\n        }\r\n        // This will break in the year 10,000.\r\n        if (seconds >= 253402300800) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new timestamp with the current date, with millisecond precision.\r\n     *\r\n     * @returns a new timestamp representing the current date.\r\n     */\r\n    Timestamp.now = function () {\r\n        return Timestamp.fromMillis(Date.now());\r\n    };\r\n    /**\r\n     * Creates a new timestamp from the given date.\r\n     *\r\n     * @param date - The date to initialize the `Timestamp` from.\r\n     * @returns A new `Timestamp` representing the same point in time as the given\r\n     *     date.\r\n     */\r\n    Timestamp.fromDate = function (date) {\r\n        return Timestamp.fromMillis(date.getTime());\r\n    };\r\n    /**\r\n     * Creates a new timestamp from the given number of milliseconds.\r\n     *\r\n     * @param milliseconds - Number of milliseconds since Unix epoch\r\n     *     1970-01-01T00:00:00Z.\r\n     * @returns A new `Timestamp` representing the same point in time as the given\r\n     *     number of milliseconds.\r\n     */\r\n    Timestamp.fromMillis = function (milliseconds) {\r\n        var seconds = Math.floor(milliseconds / 1000);\r\n        var nanos = Math.floor((milliseconds - seconds * 1000) * MS_TO_NANOS);\r\n        return new Timestamp(seconds, nanos);\r\n    };\r\n    /**\r\n     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\r\n     * causes a loss of precision since `Date` objects only support millisecond\r\n     * precision.\r\n     *\r\n     * @returns JavaScript `Date` object representing the same point in time as\r\n     *     this `Timestamp`, with millisecond precision.\r\n     */\r\n    Timestamp.prototype.toDate = function () {\r\n        return new Date(this.toMillis());\r\n    };\r\n    /**\r\n     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\r\n     * epoch). This operation causes a loss of precision.\r\n     *\r\n     * @returns The point in time corresponding to this timestamp, represented as\r\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\r\n     */\r\n    Timestamp.prototype.toMillis = function () {\r\n        return this.seconds * 1000 + this.nanoseconds / MS_TO_NANOS;\r\n    };\r\n    Timestamp.prototype._compareTo = function (other) {\r\n        if (this.seconds === other.seconds) {\r\n            return primitiveComparator(this.nanoseconds, other.nanoseconds);\r\n        }\r\n        return primitiveComparator(this.seconds, other.seconds);\r\n    };\r\n    /**\r\n     * Returns true if this `Timestamp` is equal to the provided one.\r\n     *\r\n     * @param other - The `Timestamp` to compare against.\r\n     * @returns true if this `Timestamp` is equal to the provided one.\r\n     */\r\n    Timestamp.prototype.isEqual = function (other) {\r\n        return (other.seconds === this.seconds && other.nanoseconds === this.nanoseconds);\r\n    };\r\n    /** Returns a textual representation of this Timestamp. */\r\n    Timestamp.prototype.toString = function () {\r\n        return ('Timestamp(seconds=' +\r\n            this.seconds +\r\n            ', nanoseconds=' +\r\n            this.nanoseconds +\r\n            ')');\r\n    };\r\n    /** Returns a JSON-serializable representation of this Timestamp. */\r\n    Timestamp.prototype.toJSON = function () {\r\n        return { seconds: this.seconds, nanoseconds: this.nanoseconds };\r\n    };\r\n    /**\r\n     * Converts this object to a primitive string, which allows Timestamp objects\r\n     * to be compared using the `>`, `<=`, `>=` and `>` operators.\r\n     */\r\n    Timestamp.prototype.valueOf = function () {\r\n        // This method returns a string of the form <seconds>.<nanoseconds> where\r\n        // <seconds> is translated to have a non-negative value and both <seconds>\r\n        // and <nanoseconds> are left-padded with zeroes to be a consistent length.\r\n        // Strings with this format then have a lexiographical ordering that matches\r\n        // the expected ordering. The <seconds> translation is done to avoid having\r\n        // a leading negative sign (i.e. a leading '-' character) in its string\r\n        // representation, which would affect its lexiographical ordering.\r\n        var adjustedSeconds = this.seconds - MIN_SECONDS;\r\n        // Note: Up to 12 decimal digits are required to represent all valid\r\n        // 'seconds' values.\r\n        var formattedSeconds = String(adjustedSeconds).padStart(12, '0');\r\n        var formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\r\n        return formattedSeconds + '.' + formattedNanoseconds;\r\n    };\r\n    return Timestamp;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A version of a document in Firestore. This corresponds to the version\r\n * timestamp, such as update_time or read_time.\r\n */\r\nvar SnapshotVersion = /** @class */ (function () {\r\n    function SnapshotVersion(timestamp) {\r\n        this.timestamp = timestamp;\r\n    }\r\n    SnapshotVersion.fromTimestamp = function (value) {\r\n        return new SnapshotVersion(value);\r\n    };\r\n    SnapshotVersion.min = function () {\r\n        return new SnapshotVersion(new Timestamp(0, 0));\r\n    };\r\n    SnapshotVersion.prototype.compareTo = function (other) {\r\n        return this.timestamp._compareTo(other.timestamp);\r\n    };\r\n    SnapshotVersion.prototype.isEqual = function (other) {\r\n        return this.timestamp.isEqual(other.timestamp);\r\n    };\r\n    /** Returns a number representation of the version for use in spec tests. */\r\n    SnapshotVersion.prototype.toMicroseconds = function () {\r\n        // Convert to microseconds.\r\n        return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\r\n    };\r\n    SnapshotVersion.prototype.toString = function () {\r\n        return 'SnapshotVersion(' + this.timestamp.toString() + ')';\r\n    };\r\n    SnapshotVersion.prototype.toTimestamp = function () {\r\n        return this.timestamp;\r\n    };\r\n    return SnapshotVersion;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction objectSize(obj) {\r\n    var count = 0;\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}\r\nfunction forEach(obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\nfunction isEmpty(obj) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides a set of fields that can be used to partially patch a document.\r\n * FieldMask is used in conjunction with ObjectValue.\r\n * Examples:\r\n *   foo - Overwrites foo entirely with the provided value. If foo is not\r\n *         present in the companion ObjectValue, the field is deleted.\r\n *   foo.bar - Overwrites only the field bar of the object foo.\r\n *             If foo is not an object, foo is replaced with an object\r\n *             containing foo\r\n */\r\nvar FieldMask = /** @class */ (function () {\r\n    function FieldMask(fields) {\r\n        this.fields = fields;\r\n        // TODO(dimond): validation of FieldMask\r\n        // Sort the field mask to support `FieldMask.isEqual()` and assert below.\r\n        fields.sort(FieldPath$1.comparator);\r\n    }\r\n    /**\r\n     * Verifies that `fieldPath` is included by at least one field in this field\r\n     * mask.\r\n     *\r\n     * This is an O(n) operation, where `n` is the size of the field mask.\r\n     */\r\n    FieldMask.prototype.covers = function (fieldPath) {\r\n        for (var _i = 0, _d = this.fields; _i < _d.length; _i++) {\r\n            var fieldMaskPath = _d[_i];\r\n            if (fieldMaskPath.isPrefixOf(fieldPath)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    FieldMask.prototype.isEqual = function (other) {\r\n        return arrayEquals(this.fields, other.fields, function (l, r) { return l.isEqual(r); });\r\n    };\r\n    return FieldMask;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodeBase64(encoded) {\r\n    // Node actually doesn't validate base64 strings.\r\n    // A quick sanity check that is not a fool-proof validation\r\n    if (/[^-A-Za-z0-9+/=]/.test(encoded)) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Not a valid Base64 string: ' + encoded);\r\n    }\r\n    return new Buffer(encoded, 'base64').toString('binary');\r\n}\r\n/** Converts a binary string to a Base64 encoded string. */\r\nfunction encodeBase64(raw) {\r\n    return new Buffer(raw, 'binary').toString('base64');\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Immutable class that represents a \"proto\" byte string.\r\n *\r\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\r\n * sent on the wire. This class abstracts away this differentiation by holding\r\n * the proto byte string in a common class that must be converted into a string\r\n * before being sent as a proto.\r\n */\r\nvar ByteString = /** @class */ (function () {\r\n    function ByteString(binaryString) {\r\n        this.binaryString = binaryString;\r\n    }\r\n    ByteString.fromBase64String = function (base64) {\r\n        var binaryString = decodeBase64(base64);\r\n        return new ByteString(binaryString);\r\n    };\r\n    ByteString.fromUint8Array = function (array) {\r\n        var binaryString = binaryStringFromUint8Array(array);\r\n        return new ByteString(binaryString);\r\n    };\r\n    ByteString.prototype.toBase64 = function () {\r\n        return encodeBase64(this.binaryString);\r\n    };\r\n    ByteString.prototype.toUint8Array = function () {\r\n        return uint8ArrayFromBinaryString(this.binaryString);\r\n    };\r\n    ByteString.prototype.approximateByteSize = function () {\r\n        return this.binaryString.length * 2;\r\n    };\r\n    ByteString.prototype.compareTo = function (other) {\r\n        return primitiveComparator(this.binaryString, other.binaryString);\r\n    };\r\n    ByteString.prototype.isEqual = function (other) {\r\n        return this.binaryString === other.binaryString;\r\n    };\r\n    return ByteString;\r\n}());\r\nByteString.EMPTY_BYTE_STRING = new ByteString('');\r\n/**\r\n * Helper function to convert an Uint8array to a binary string.\r\n */\r\nfunction binaryStringFromUint8Array(array) {\r\n    var binaryString = '';\r\n    for (var i = 0; i < array.length; ++i) {\r\n        binaryString += String.fromCharCode(array[i]);\r\n    }\r\n    return binaryString;\r\n}\r\n/**\r\n * Helper function to convert a binary string to an Uint8Array.\r\n */\r\nfunction uint8ArrayFromBinaryString(binaryString) {\r\n    var buffer = new Uint8Array(binaryString.length);\r\n    for (var i = 0; i < binaryString.length; i++) {\r\n        buffer[i] = binaryString.charCodeAt(i);\r\n    }\r\n    return buffer;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\r\nvar ISO_TIMESTAMP_REG_EXP = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\r\n/**\r\n * Converts the possible Proto values for a timestamp value into a \"seconds and\r\n * nanos\" representation.\r\n */\r\nfunction normalizeTimestamp(date) {\r\n    hardAssert(!!date);\r\n    // The json interface (for the browser) will return an iso timestamp string,\r\n    // while the proto js library (for node) will return a\r\n    // google.protobuf.Timestamp instance.\r\n    if (typeof date === 'string') {\r\n        // The date string can have higher precision (nanos) than the Date class\r\n        // (millis), so we do some custom parsing here.\r\n        // Parse the nanos right out of the string.\r\n        var nanos = 0;\r\n        var fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\r\n        hardAssert(!!fraction);\r\n        if (fraction[1]) {\r\n            // Pad the fraction out to 9 digits (nanos).\r\n            var nanoStr = fraction[1];\r\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\r\n            nanos = Number(nanoStr);\r\n        }\r\n        // Parse the date to get the seconds.\r\n        var parsedDate = new Date(date);\r\n        var seconds = Math.floor(parsedDate.getTime() / 1000);\r\n        return { seconds: seconds, nanos: nanos };\r\n    }\r\n    else {\r\n        // TODO(b/37282237): Use strings for Proto3 timestamps\r\n        // assert(!this.options.useProto3Json,\r\n        //   'The timestamp instance format requires Proto JS.');\r\n        var seconds = normalizeNumber(date.seconds);\r\n        var nanos = normalizeNumber(date.nanos);\r\n        return { seconds: seconds, nanos: nanos };\r\n    }\r\n}\r\n/**\r\n * Converts the possible Proto types for numbers into a JavaScript number.\r\n * Returns 0 if the value is not numeric.\r\n */\r\nfunction normalizeNumber(value) {\r\n    // TODO(bjornick): Handle int64 greater than 53 bits.\r\n    if (typeof value === 'number') {\r\n        return value;\r\n    }\r\n    else if (typeof value === 'string') {\r\n        return Number(value);\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n/** Converts the possible Proto types for Blobs into a ByteString. */\r\nfunction normalizeByteString(blob) {\r\n    if (typeof blob === 'string') {\r\n        return ByteString.fromBase64String(blob);\r\n    }\r\n    else {\r\n        return ByteString.fromUint8Array(blob);\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a locally-applied ServerTimestamp.\r\n *\r\n * Server Timestamps are backed by MapValues that contain an internal field\r\n * `__type__` with a value of `server_timestamp`. The previous value and local\r\n * write time are stored in its `__previous_value__` and `__local_write_time__`\r\n * fields respectively.\r\n *\r\n * Notes:\r\n * - ServerTimestampValue instances are created as the result of applying a\r\n *   transform. They can only exist in the local view of a document. Therefore\r\n *   they do not need to be parsed or serialized.\r\n * - When evaluated locally (e.g. for snapshot.data()), they by default\r\n *   evaluate to `null`. This behavior can be configured by passing custom\r\n *   FieldValueOptions to value().\r\n * - With respect to other ServerTimestampValues, they sort by their\r\n *   localWriteTime.\r\n */\r\nvar SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\r\nvar TYPE_KEY = '__type__';\r\nvar PREVIOUS_VALUE_KEY = '__previous_value__';\r\nvar LOCAL_WRITE_TIME_KEY = '__local_write_time__';\r\nfunction isServerTimestamp(value) {\r\n    var _a, _b;\r\n    var type = (_b = (((_a = value === null || value === void 0 ? void 0 : value.mapValue) === null || _a === void 0 ? void 0 : _a.fields) || {})[TYPE_KEY]) === null || _b === void 0 ? void 0 : _b.stringValue;\r\n    return type === SERVER_TIMESTAMP_SENTINEL;\r\n}\r\n/**\r\n * Creates a new ServerTimestamp proto value (using the internal format).\r\n */\r\nfunction serverTimestamp(localWriteTime, previousValue) {\r\n    var _d;\r\n    var mapValue = {\r\n        fields: (_d = {},\r\n            _d[TYPE_KEY] = {\r\n                stringValue: SERVER_TIMESTAMP_SENTINEL\r\n            },\r\n            _d[LOCAL_WRITE_TIME_KEY] = {\r\n                timestampValue: {\r\n                    seconds: localWriteTime.seconds,\r\n                    nanos: localWriteTime.nanoseconds\r\n                }\r\n            },\r\n            _d)\r\n    };\r\n    if (previousValue) {\r\n        mapValue.fields[PREVIOUS_VALUE_KEY] = previousValue;\r\n    }\r\n    return { mapValue: mapValue };\r\n}\r\n/**\r\n * Returns the value of the field before this ServerTimestamp was set.\r\n *\r\n * Preserving the previous values allows the user to display the last resoled\r\n * value until the backend responds with the timestamp.\r\n */\r\nfunction getPreviousValue(value) {\r\n    var previousValue = value.mapValue.fields[PREVIOUS_VALUE_KEY];\r\n    if (isServerTimestamp(previousValue)) {\r\n        return getPreviousValue(previousValue);\r\n    }\r\n    return previousValue;\r\n}\r\n/**\r\n * Returns the local time at which this timestamp was first set.\r\n */\r\nfunction getLocalWriteTime(value) {\r\n    var localWriteTime = normalizeTimestamp(value.mapValue.fields[LOCAL_WRITE_TIME_KEY].timestampValue);\r\n    return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Sentinel value that sorts before any Mutation Batch ID. */\r\nvar BATCHID_UNKNOWN = -1;\r\n/**\r\n * Returns whether a variable is either undefined or null.\r\n */\r\nfunction isNullOrUndefined(value) {\r\n    return value === null || value === undefined;\r\n}\r\n/** Returns whether the value represents -0. */\r\nfunction isNegativeZero(value) {\r\n    // Detect if the value is -0.0. Based on polyfill from\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\r\n    return value === 0 && 1 / value === 1 / -0;\r\n}\r\n/**\r\n * Returns whether a value is an integer and in the safe integer range\r\n * @param value - The value to test for being an integer and in the safe range\r\n */\r\nfunction isSafeInteger(value) {\r\n    return (typeof value === 'number' &&\r\n        Number.isInteger(value) &&\r\n        !isNegativeZero(value) &&\r\n        value <= Number.MAX_SAFE_INTEGER &&\r\n        value >= Number.MIN_SAFE_INTEGER);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DocumentKey = /** @class */ (function () {\r\n    function DocumentKey(path) {\r\n        this.path = path;\r\n    }\r\n    DocumentKey.fromPath = function (path) {\r\n        return new DocumentKey(ResourcePath.fromString(path));\r\n    };\r\n    DocumentKey.fromName = function (name) {\r\n        return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\r\n    };\r\n    /** Returns true if the document is in the specified collectionId. */\r\n    DocumentKey.prototype.hasCollectionId = function (collectionId) {\r\n        return (this.path.length >= 2 &&\r\n            this.path.get(this.path.length - 2) === collectionId);\r\n    };\r\n    DocumentKey.prototype.isEqual = function (other) {\r\n        return (other !== null && ResourcePath.comparator(this.path, other.path) === 0);\r\n    };\r\n    DocumentKey.prototype.toString = function () {\r\n        return this.path.toString();\r\n    };\r\n    DocumentKey.comparator = function (k1, k2) {\r\n        return ResourcePath.comparator(k1.path, k2.path);\r\n    };\r\n    DocumentKey.isDocumentKey = function (path) {\r\n        return path.length % 2 === 0;\r\n    };\r\n    /**\r\n     * Creates and returns a new document key with the given segments.\r\n     *\r\n     * @param segments - The segments of the path to the document\r\n     * @returns A new instance of DocumentKey\r\n     */\r\n    DocumentKey.fromSegments = function (segments) {\r\n        return new DocumentKey(new ResourcePath(segments.slice()));\r\n    };\r\n    return DocumentKey;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Extracts the backend's type order for the provided value. */\r\nfunction typeOrder(value) {\r\n    if ('nullValue' in value) {\r\n        return 0 /* NullValue */;\r\n    }\r\n    else if ('booleanValue' in value) {\r\n        return 1 /* BooleanValue */;\r\n    }\r\n    else if ('integerValue' in value || 'doubleValue' in value) {\r\n        return 2 /* NumberValue */;\r\n    }\r\n    else if ('timestampValue' in value) {\r\n        return 3 /* TimestampValue */;\r\n    }\r\n    else if ('stringValue' in value) {\r\n        return 5 /* StringValue */;\r\n    }\r\n    else if ('bytesValue' in value) {\r\n        return 6 /* BlobValue */;\r\n    }\r\n    else if ('referenceValue' in value) {\r\n        return 7 /* RefValue */;\r\n    }\r\n    else if ('geoPointValue' in value) {\r\n        return 8 /* GeoPointValue */;\r\n    }\r\n    else if ('arrayValue' in value) {\r\n        return 9 /* ArrayValue */;\r\n    }\r\n    else if ('mapValue' in value) {\r\n        if (isServerTimestamp(value)) {\r\n            return 4 /* ServerTimestampValue */;\r\n        }\r\n        return 10 /* ObjectValue */;\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\n/** Tests `left` and `right` for equality based on the backend semantics. */\r\nfunction valueEquals(left, right) {\r\n    var leftType = typeOrder(left);\r\n    var rightType = typeOrder(right);\r\n    if (leftType !== rightType) {\r\n        return false;\r\n    }\r\n    switch (leftType) {\r\n        case 0 /* NullValue */:\r\n            return true;\r\n        case 1 /* BooleanValue */:\r\n            return left.booleanValue === right.booleanValue;\r\n        case 4 /* ServerTimestampValue */:\r\n            return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\r\n        case 3 /* TimestampValue */:\r\n            return timestampEquals(left, right);\r\n        case 5 /* StringValue */:\r\n            return left.stringValue === right.stringValue;\r\n        case 6 /* BlobValue */:\r\n            return blobEquals(left, right);\r\n        case 7 /* RefValue */:\r\n            return left.referenceValue === right.referenceValue;\r\n        case 8 /* GeoPointValue */:\r\n            return geoPointEquals(left, right);\r\n        case 2 /* NumberValue */:\r\n            return numberEquals(left, right);\r\n        case 9 /* ArrayValue */:\r\n            return arrayEquals(left.arrayValue.values || [], right.arrayValue.values || [], valueEquals);\r\n        case 10 /* ObjectValue */:\r\n            return objectEquals(left, right);\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\nfunction timestampEquals(left, right) {\r\n    if (typeof left.timestampValue === 'string' &&\r\n        typeof right.timestampValue === 'string' &&\r\n        left.timestampValue.length === right.timestampValue.length) {\r\n        // Use string equality for ISO 8601 timestamps\r\n        return left.timestampValue === right.timestampValue;\r\n    }\r\n    var leftTimestamp = normalizeTimestamp(left.timestampValue);\r\n    var rightTimestamp = normalizeTimestamp(right.timestampValue);\r\n    return (leftTimestamp.seconds === rightTimestamp.seconds &&\r\n        leftTimestamp.nanos === rightTimestamp.nanos);\r\n}\r\nfunction geoPointEquals(left, right) {\r\n    return (normalizeNumber(left.geoPointValue.latitude) ===\r\n        normalizeNumber(right.geoPointValue.latitude) &&\r\n        normalizeNumber(left.geoPointValue.longitude) ===\r\n            normalizeNumber(right.geoPointValue.longitude));\r\n}\r\nfunction blobEquals(left, right) {\r\n    return normalizeByteString(left.bytesValue).isEqual(normalizeByteString(right.bytesValue));\r\n}\r\nfunction numberEquals(left, right) {\r\n    if ('integerValue' in left && 'integerValue' in right) {\r\n        return (normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue));\r\n    }\r\n    else if ('doubleValue' in left && 'doubleValue' in right) {\r\n        var n1 = normalizeNumber(left.doubleValue);\r\n        var n2 = normalizeNumber(right.doubleValue);\r\n        if (n1 === n2) {\r\n            return isNegativeZero(n1) === isNegativeZero(n2);\r\n        }\r\n        else {\r\n            return isNaN(n1) && isNaN(n2);\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction objectEquals(left, right) {\r\n    var leftMap = left.mapValue.fields || {};\r\n    var rightMap = right.mapValue.fields || {};\r\n    if (objectSize(leftMap) !== objectSize(rightMap)) {\r\n        return false;\r\n    }\r\n    for (var key in leftMap) {\r\n        if (leftMap.hasOwnProperty(key)) {\r\n            if (rightMap[key] === undefined ||\r\n                !valueEquals(leftMap[key], rightMap[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/** Returns true if the ArrayValue contains the specified element. */\r\nfunction arrayValueContains(haystack, needle) {\r\n    return ((haystack.values || []).find(function (v) { return valueEquals(v, needle); }) !== undefined);\r\n}\r\nfunction valueCompare(left, right) {\r\n    var leftType = typeOrder(left);\r\n    var rightType = typeOrder(right);\r\n    if (leftType !== rightType) {\r\n        return primitiveComparator(leftType, rightType);\r\n    }\r\n    switch (leftType) {\r\n        case 0 /* NullValue */:\r\n            return 0;\r\n        case 1 /* BooleanValue */:\r\n            return primitiveComparator(left.booleanValue, right.booleanValue);\r\n        case 2 /* NumberValue */:\r\n            return compareNumbers(left, right);\r\n        case 3 /* TimestampValue */:\r\n            return compareTimestamps(left.timestampValue, right.timestampValue);\r\n        case 4 /* ServerTimestampValue */:\r\n            return compareTimestamps(getLocalWriteTime(left), getLocalWriteTime(right));\r\n        case 5 /* StringValue */:\r\n            return primitiveComparator(left.stringValue, right.stringValue);\r\n        case 6 /* BlobValue */:\r\n            return compareBlobs(left.bytesValue, right.bytesValue);\r\n        case 7 /* RefValue */:\r\n            return compareReferences(left.referenceValue, right.referenceValue);\r\n        case 8 /* GeoPointValue */:\r\n            return compareGeoPoints(left.geoPointValue, right.geoPointValue);\r\n        case 9 /* ArrayValue */:\r\n            return compareArrays(left.arrayValue, right.arrayValue);\r\n        case 10 /* ObjectValue */:\r\n            return compareMaps(left.mapValue, right.mapValue);\r\n        default:\r\n            throw fail();\r\n    }\r\n}\r\nfunction compareNumbers(left, right) {\r\n    var leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\r\n    var rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\r\n    if (leftNumber < rightNumber) {\r\n        return -1;\r\n    }\r\n    else if (leftNumber > rightNumber) {\r\n        return 1;\r\n    }\r\n    else if (leftNumber === rightNumber) {\r\n        return 0;\r\n    }\r\n    else {\r\n        // one or both are NaN.\r\n        if (isNaN(leftNumber)) {\r\n            return isNaN(rightNumber) ? 0 : -1;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n}\r\nfunction compareTimestamps(left, right) {\r\n    if (typeof left === 'string' &&\r\n        typeof right === 'string' &&\r\n        left.length === right.length) {\r\n        return primitiveComparator(left, right);\r\n    }\r\n    var leftTimestamp = normalizeTimestamp(left);\r\n    var rightTimestamp = normalizeTimestamp(right);\r\n    var comparison = primitiveComparator(leftTimestamp.seconds, rightTimestamp.seconds);\r\n    if (comparison !== 0) {\r\n        return comparison;\r\n    }\r\n    return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\r\n}\r\nfunction compareReferences(leftPath, rightPath) {\r\n    var leftSegments = leftPath.split('/');\r\n    var rightSegments = rightPath.split('/');\r\n    for (var i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\r\n        var comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\r\n        if (comparison !== 0) {\r\n            return comparison;\r\n        }\r\n    }\r\n    return primitiveComparator(leftSegments.length, rightSegments.length);\r\n}\r\nfunction compareGeoPoints(left, right) {\r\n    var comparison = primitiveComparator(normalizeNumber(left.latitude), normalizeNumber(right.latitude));\r\n    if (comparison !== 0) {\r\n        return comparison;\r\n    }\r\n    return primitiveComparator(normalizeNumber(left.longitude), normalizeNumber(right.longitude));\r\n}\r\nfunction compareBlobs(left, right) {\r\n    var leftBytes = normalizeByteString(left);\r\n    var rightBytes = normalizeByteString(right);\r\n    return leftBytes.compareTo(rightBytes);\r\n}\r\nfunction compareArrays(left, right) {\r\n    var leftArray = left.values || [];\r\n    var rightArray = right.values || [];\r\n    for (var i = 0; i < leftArray.length && i < rightArray.length; ++i) {\r\n        var compare = valueCompare(leftArray[i], rightArray[i]);\r\n        if (compare) {\r\n            return compare;\r\n        }\r\n    }\r\n    return primitiveComparator(leftArray.length, rightArray.length);\r\n}\r\nfunction compareMaps(left, right) {\r\n    var leftMap = left.fields || {};\r\n    var leftKeys = Object.keys(leftMap);\r\n    var rightMap = right.fields || {};\r\n    var rightKeys = Object.keys(rightMap);\r\n    // Even though MapValues are likely sorted correctly based on their insertion\r\n    // order (e.g. when received from the backend), local modifications can bring\r\n    // elements out of order. We need to re-sort the elements to ensure that\r\n    // canonical IDs are independent of insertion order.\r\n    leftKeys.sort();\r\n    rightKeys.sort();\r\n    for (var i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\r\n        var keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\r\n        if (keyCompare !== 0) {\r\n            return keyCompare;\r\n        }\r\n        var compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\r\n        if (compare !== 0) {\r\n            return compare;\r\n        }\r\n    }\r\n    return primitiveComparator(leftKeys.length, rightKeys.length);\r\n}\r\n/**\r\n * Generates the canonical ID for the provided field value (as used in Target\r\n * serialization).\r\n */\r\nfunction canonicalId(value) {\r\n    return canonifyValue(value);\r\n}\r\nfunction canonifyValue(value) {\r\n    if ('nullValue' in value) {\r\n        return 'null';\r\n    }\r\n    else if ('booleanValue' in value) {\r\n        return '' + value.booleanValue;\r\n    }\r\n    else if ('integerValue' in value) {\r\n        return '' + value.integerValue;\r\n    }\r\n    else if ('doubleValue' in value) {\r\n        return '' + value.doubleValue;\r\n    }\r\n    else if ('timestampValue' in value) {\r\n        return canonifyTimestamp(value.timestampValue);\r\n    }\r\n    else if ('stringValue' in value) {\r\n        return value.stringValue;\r\n    }\r\n    else if ('bytesValue' in value) {\r\n        return canonifyByteString(value.bytesValue);\r\n    }\r\n    else if ('referenceValue' in value) {\r\n        return canonifyReference(value.referenceValue);\r\n    }\r\n    else if ('geoPointValue' in value) {\r\n        return canonifyGeoPoint(value.geoPointValue);\r\n    }\r\n    else if ('arrayValue' in value) {\r\n        return canonifyArray(value.arrayValue);\r\n    }\r\n    else if ('mapValue' in value) {\r\n        return canonifyMap(value.mapValue);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction canonifyByteString(byteString) {\r\n    return normalizeByteString(byteString).toBase64();\r\n}\r\nfunction canonifyTimestamp(timestamp) {\r\n    var normalizedTimestamp = normalizeTimestamp(timestamp);\r\n    return \"time(\" + normalizedTimestamp.seconds + \",\" + normalizedTimestamp.nanos + \")\";\r\n}\r\nfunction canonifyGeoPoint(geoPoint) {\r\n    return \"geo(\" + geoPoint.latitude + \",\" + geoPoint.longitude + \")\";\r\n}\r\nfunction canonifyReference(referenceValue) {\r\n    return DocumentKey.fromName(referenceValue).toString();\r\n}\r\nfunction canonifyMap(mapValue) {\r\n    // Iteration order in JavaScript is not guaranteed. To ensure that we generate\r\n    // matching canonical IDs for identical maps, we need to sort the keys.\r\n    var sortedKeys = Object.keys(mapValue.fields || {}).sort();\r\n    var result = '{';\r\n    var first = true;\r\n    for (var _i = 0, sortedKeys_1 = sortedKeys; _i < sortedKeys_1.length; _i++) {\r\n        var key = sortedKeys_1[_i];\r\n        if (!first) {\r\n            result += ',';\r\n        }\r\n        else {\r\n            first = false;\r\n        }\r\n        result += key + \":\" + canonifyValue(mapValue.fields[key]);\r\n    }\r\n    return result + '}';\r\n}\r\nfunction canonifyArray(arrayValue) {\r\n    var result = '[';\r\n    var first = true;\r\n    for (var _i = 0, _d = arrayValue.values || []; _i < _d.length; _i++) {\r\n        var value = _d[_i];\r\n        if (!first) {\r\n            result += ',';\r\n        }\r\n        else {\r\n            first = false;\r\n        }\r\n        result += canonifyValue(value);\r\n    }\r\n    return result + ']';\r\n}\r\n/** Returns a reference value for the provided database and key. */\r\nfunction refValue(databaseId, key) {\r\n    return {\r\n        referenceValue: \"projects/\" + databaseId.projectId + \"/databases/\" + databaseId.database + \"/documents/\" + key.path.canonicalString()\r\n    };\r\n}\r\n/** Returns true if `value` is an IntegerValue . */\r\nfunction isInteger(value) {\r\n    return !!value && 'integerValue' in value;\r\n}\r\n/** Returns true if `value` is a DoubleValue. */\r\nfunction isDouble(value) {\r\n    return !!value && 'doubleValue' in value;\r\n}\r\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\r\nfunction isNumber(value) {\r\n    return isInteger(value) || isDouble(value);\r\n}\r\n/** Returns true if `value` is an ArrayValue. */\r\nfunction isArray(value) {\r\n    return !!value && 'arrayValue' in value;\r\n}\r\n/** Returns true if `value` is a NullValue. */\r\nfunction isNullValue(value) {\r\n    return !!value && 'nullValue' in value;\r\n}\r\n/** Returns true if `value` is NaN. */\r\nfunction isNanValue(value) {\r\n    return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\r\n}\r\n/** Returns true if `value` is a MapValue. */\r\nfunction isMapValue(value) {\r\n    return !!value && 'mapValue' in value;\r\n}\r\n/** Creates a deep copy of `source`. */\r\nfunction deepClone(source) {\r\n    if (source.geoPointValue) {\r\n        return { geoPointValue: Object.assign({}, source.geoPointValue) };\r\n    }\r\n    else if (source.timestampValue &&\r\n        typeof source.timestampValue === 'object') {\r\n        return { timestampValue: Object.assign({}, source.timestampValue) };\r\n    }\r\n    else if (source.mapValue) {\r\n        var target_1 = { mapValue: { fields: {} } };\r\n        forEach(source.mapValue.fields, function (key, val) { return (target_1.mapValue.fields[key] = deepClone(val)); });\r\n        return target_1;\r\n    }\r\n    else if (source.arrayValue) {\r\n        var target = { arrayValue: { values: [] } };\r\n        for (var i = 0; i < (source.arrayValue.values || []).length; ++i) {\r\n            target.arrayValue.values[i] = deepClone(source.arrayValue.values[i]);\r\n        }\r\n        return target;\r\n    }\r\n    else {\r\n        return Object.assign({}, source);\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\r\n * ability to add and remove fields (via the ObjectValueBuilder).\r\n */\r\nvar ObjectValue = /** @class */ (function () {\r\n    function ObjectValue(value) {\r\n        this.value = value;\r\n    }\r\n    ObjectValue.empty = function () {\r\n        return new ObjectValue({ mapValue: {} });\r\n    };\r\n    /**\r\n     * Returns the value at the given path or null.\r\n     *\r\n     * @param path - the path to search\r\n     * @returns The value at the path or null if the path is not set.\r\n     */\r\n    ObjectValue.prototype.field = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            var currentLevel = this.value;\r\n            for (var i = 0; i < path.length - 1; ++i) {\r\n                currentLevel = (currentLevel.mapValue.fields || {})[path.get(i)];\r\n                if (!isMapValue(currentLevel)) {\r\n                    return null;\r\n                }\r\n            }\r\n            currentLevel = (currentLevel.mapValue.fields || {})[path.lastSegment()];\r\n            return currentLevel || null;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field to the provided value.\r\n     *\r\n     * @param path - The field path to set.\r\n     * @param value - The value to set.\r\n     */\r\n    ObjectValue.prototype.set = function (path, value) {\r\n        var fieldsMap = this.getFieldsMap(path.popLast());\r\n        fieldsMap[path.lastSegment()] = deepClone(value);\r\n    };\r\n    /**\r\n     * Sets the provided fields to the provided values.\r\n     *\r\n     * @param data - A map of fields to values (or null for deletes).\r\n     */\r\n    ObjectValue.prototype.setAll = function (data) {\r\n        var _this = this;\r\n        var parent = FieldPath$1.emptyPath();\r\n        var upserts = {};\r\n        var deletes = [];\r\n        data.forEach(function (value, path) {\r\n            if (!parent.isImmediateParentOf(path)) {\r\n                // Insert the accumulated changes at this parent location\r\n                var fieldsMap_1 = _this.getFieldsMap(parent);\r\n                _this.applyChanges(fieldsMap_1, upserts, deletes);\r\n                upserts = {};\r\n                deletes = [];\r\n                parent = path.popLast();\r\n            }\r\n            if (value) {\r\n                upserts[path.lastSegment()] = deepClone(value);\r\n            }\r\n            else {\r\n                deletes.push(path.lastSegment());\r\n            }\r\n        });\r\n        var fieldsMap = this.getFieldsMap(parent);\r\n        this.applyChanges(fieldsMap, upserts, deletes);\r\n    };\r\n    /**\r\n     * Removes the field at the specified path. If there is no field at the\r\n     * specified path, nothing is changed.\r\n     *\r\n     * @param path - The field path to remove.\r\n     */\r\n    ObjectValue.prototype.delete = function (path) {\r\n        var nestedValue = this.field(path.popLast());\r\n        if (isMapValue(nestedValue) && nestedValue.mapValue.fields) {\r\n            delete nestedValue.mapValue.fields[path.lastSegment()];\r\n        }\r\n    };\r\n    ObjectValue.prototype.isEqual = function (other) {\r\n        return valueEquals(this.value, other.value);\r\n    };\r\n    /**\r\n     * Returns the map that contains the leaf element of `path`. If the parent\r\n     * entry does not yet exist, or if it is not a map, a new map will be created.\r\n     */\r\n    ObjectValue.prototype.getFieldsMap = function (path) {\r\n        var current = this.value;\r\n        if (!current.mapValue.fields) {\r\n            current.mapValue = { fields: {} };\r\n        }\r\n        for (var i = 0; i < path.length; ++i) {\r\n            var next = current.mapValue.fields[path.get(i)];\r\n            if (!isMapValue(next) || !next.mapValue.fields) {\r\n                next = { mapValue: { fields: {} } };\r\n                current.mapValue.fields[path.get(i)] = next;\r\n            }\r\n            current = next;\r\n        }\r\n        return current.mapValue.fields;\r\n    };\r\n    /**\r\n     * Modifies `fieldsMap` by adding, replacing or deleting the specified\r\n     * entries.\r\n     */\r\n    ObjectValue.prototype.applyChanges = function (fieldsMap, inserts, deletes) {\r\n        forEach(inserts, function (key, val) { return (fieldsMap[key] = val); });\r\n        for (var _i = 0, deletes_1 = deletes; _i < deletes_1.length; _i++) {\r\n            var field = deletes_1[_i];\r\n            delete fieldsMap[field];\r\n        }\r\n    };\r\n    ObjectValue.prototype.clone = function () {\r\n        return new ObjectValue(deepClone(this.value));\r\n    };\r\n    return ObjectValue;\r\n}());\r\n/**\r\n * Returns a FieldMask built from all fields in a MapValue.\r\n */\r\nfunction extractFieldMask(value) {\r\n    var fields = [];\r\n    forEach(value.fields, function (key, value) {\r\n        var currentPath = new FieldPath$1([key]);\r\n        if (isMapValue(value)) {\r\n            var nestedMask = extractFieldMask(value.mapValue);\r\n            var nestedFields = nestedMask.fields;\r\n            if (nestedFields.length === 0) {\r\n                // Preserve the empty map by adding it to the FieldMask.\r\n                fields.push(currentPath);\r\n            }\r\n            else {\r\n                // For nested and non-empty ObjectValues, add the FieldPath of the\r\n                // leaf nodes.\r\n                for (var _i = 0, nestedFields_1 = nestedFields; _i < nestedFields_1.length; _i++) {\r\n                    var nestedPath = nestedFields_1[_i];\r\n                    fields.push(currentPath.child(nestedPath));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // For nested and non-empty ObjectValues, add the FieldPath of the leaf\r\n            // nodes.\r\n            fields.push(currentPath);\r\n        }\r\n    });\r\n    return new FieldMask(fields);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a document in Firestore with a key, version, data and whether it\r\n * has local mutations applied to it.\r\n *\r\n * Documents can transition between states via `convertToFoundDocument()`,\r\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\r\n * not transition to one of these states even after all mutations have been\r\n * applied, `isValidDocument()` returns false and the document should be removed\r\n * from all views.\r\n */\r\nvar MutableDocument = /** @class */ (function () {\r\n    function MutableDocument(key, documentType, version, data, documentState) {\r\n        this.key = key;\r\n        this.documentType = documentType;\r\n        this.version = version;\r\n        this.data = data;\r\n        this.documentState = documentState;\r\n    }\r\n    /**\r\n     * Creates a document with no known version or data, but which can serve as\r\n     * base document for mutations.\r\n     */\r\n    MutableDocument.newInvalidDocument = function (documentKey) {\r\n        return new MutableDocument(documentKey, 0 /* INVALID */, SnapshotVersion.min(), ObjectValue.empty(), 0 /* SYNCED */);\r\n    };\r\n    /**\r\n     * Creates a new document that is known to exist with the given data at the\r\n     * given version.\r\n     */\r\n    MutableDocument.newFoundDocument = function (documentKey, version, value) {\r\n        return new MutableDocument(documentKey, 1 /* FOUND_DOCUMENT */, version, value, 0 /* SYNCED */);\r\n    };\r\n    /** Creates a new document that is known to not exist at the given version. */\r\n    MutableDocument.newNoDocument = function (documentKey, version) {\r\n        return new MutableDocument(documentKey, 2 /* NO_DOCUMENT */, version, ObjectValue.empty(), 0 /* SYNCED */);\r\n    };\r\n    /**\r\n     * Creates a new document that is known to exist at the given version but\r\n     * whose data is not known (e.g. a document that was updated without a known\r\n     * base document).\r\n     */\r\n    MutableDocument.newUnknownDocument = function (documentKey, version) {\r\n        return new MutableDocument(documentKey, 3 /* UNKNOWN_DOCUMENT */, version, ObjectValue.empty(), 2 /* HAS_COMMITTED_MUTATIONS */);\r\n    };\r\n    /**\r\n     * Changes the document type to indicate that it exists and that its version\r\n     * and data are known.\r\n     */\r\n    MutableDocument.prototype.convertToFoundDocument = function (version, value) {\r\n        this.version = version;\r\n        this.documentType = 1 /* FOUND_DOCUMENT */;\r\n        this.data = value;\r\n        this.documentState = 0 /* SYNCED */;\r\n        return this;\r\n    };\r\n    /**\r\n     * Changes the document type to indicate that it doesn't exist at the given\r\n     * version.\r\n     */\r\n    MutableDocument.prototype.convertToNoDocument = function (version) {\r\n        this.version = version;\r\n        this.documentType = 2 /* NO_DOCUMENT */;\r\n        this.data = ObjectValue.empty();\r\n        this.documentState = 0 /* SYNCED */;\r\n        return this;\r\n    };\r\n    /**\r\n     * Changes the document type to indicate that it exists at a given version but\r\n     * that its data is not known (e.g. a document that was updated without a known\r\n     * base document).\r\n     */\r\n    MutableDocument.prototype.convertToUnknownDocument = function (version) {\r\n        this.version = version;\r\n        this.documentType = 3 /* UNKNOWN_DOCUMENT */;\r\n        this.data = ObjectValue.empty();\r\n        this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */;\r\n        return this;\r\n    };\r\n    MutableDocument.prototype.setHasCommittedMutations = function () {\r\n        this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */;\r\n        return this;\r\n    };\r\n    MutableDocument.prototype.setHasLocalMutations = function () {\r\n        this.documentState = 1 /* HAS_LOCAL_MUTATIONS */;\r\n        return this;\r\n    };\r\n    Object.defineProperty(MutableDocument.prototype, \"hasLocalMutations\", {\r\n        get: function () {\r\n            return this.documentState === 1 /* HAS_LOCAL_MUTATIONS */;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MutableDocument.prototype, \"hasCommittedMutations\", {\r\n        get: function () {\r\n            return this.documentState === 2 /* HAS_COMMITTED_MUTATIONS */;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MutableDocument.prototype, \"hasPendingWrites\", {\r\n        get: function () {\r\n            return this.hasLocalMutations || this.hasCommittedMutations;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    MutableDocument.prototype.isValidDocument = function () {\r\n        return this.documentType !== 0 /* INVALID */;\r\n    };\r\n    MutableDocument.prototype.isFoundDocument = function () {\r\n        return this.documentType === 1 /* FOUND_DOCUMENT */;\r\n    };\r\n    MutableDocument.prototype.isNoDocument = function () {\r\n        return this.documentType === 2 /* NO_DOCUMENT */;\r\n    };\r\n    MutableDocument.prototype.isUnknownDocument = function () {\r\n        return this.documentType === 3 /* UNKNOWN_DOCUMENT */;\r\n    };\r\n    MutableDocument.prototype.isEqual = function (other) {\r\n        return (other instanceof MutableDocument &&\r\n            this.key.isEqual(other.key) &&\r\n            this.version.isEqual(other.version) &&\r\n            this.documentType === other.documentType &&\r\n            this.documentState === other.documentState &&\r\n            this.data.isEqual(other.data));\r\n    };\r\n    MutableDocument.prototype.clone = function () {\r\n        return new MutableDocument(this.key, this.documentType, this.version, this.data.clone(), this.documentState);\r\n    };\r\n    MutableDocument.prototype.toString = function () {\r\n        return (\"Document(\" + this.key + \", \" + this.version + \", \" + JSON.stringify(this.data.value) + \", \" +\r\n            (\"{documentType: \" + this.documentType + \"}), \") +\r\n            (\"{documentState: \" + this.documentState + \"})\"));\r\n    };\r\n    return MutableDocument;\r\n}());\r\n/**\r\n * Compares the value for field `field` in the provided documents. Throws if\r\n * the field does not exist in both documents.\r\n */\r\nfunction compareDocumentsByField(field, d1, d2) {\r\n    var v1 = d1.data.field(field);\r\n    var v2 = d2.data.field(field);\r\n    if (v1 !== null && v2 !== null) {\r\n        return valueCompare(v1, v2);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Visible for testing\r\nvar TargetImpl = /** @class */ (function () {\r\n    function TargetImpl(path, collectionGroup, orderBy, filters, limit, startAt, endAt) {\r\n        if (collectionGroup === void 0) { collectionGroup = null; }\r\n        if (orderBy === void 0) { orderBy = []; }\r\n        if (filters === void 0) { filters = []; }\r\n        if (limit === void 0) { limit = null; }\r\n        if (startAt === void 0) { startAt = null; }\r\n        if (endAt === void 0) { endAt = null; }\r\n        this.path = path;\r\n        this.collectionGroup = collectionGroup;\r\n        this.orderBy = orderBy;\r\n        this.filters = filters;\r\n        this.limit = limit;\r\n        this.startAt = startAt;\r\n        this.endAt = endAt;\r\n        this.memoizedCanonicalId = null;\r\n    }\r\n    return TargetImpl;\r\n}());\r\n/**\r\n * Initializes a Target with a path and optional additional query constraints.\r\n * Path must currently be empty if this is a collection group query.\r\n *\r\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\r\n * using this factory method, because `Query` provides an implicit `orderBy`\r\n * property.\r\n */\r\nfunction newTarget(path, collectionGroup, orderBy, filters, limit, startAt, endAt) {\r\n    if (collectionGroup === void 0) { collectionGroup = null; }\r\n    if (orderBy === void 0) { orderBy = []; }\r\n    if (filters === void 0) { filters = []; }\r\n    if (limit === void 0) { limit = null; }\r\n    if (startAt === void 0) { startAt = null; }\r\n    if (endAt === void 0) { endAt = null; }\r\n    return new TargetImpl(path, collectionGroup, orderBy, filters, limit, startAt, endAt);\r\n}\r\nfunction canonifyTarget(target) {\r\n    var targetImpl = debugCast(target);\r\n    if (targetImpl.memoizedCanonicalId === null) {\r\n        var canonicalId_1 = targetImpl.path.canonicalString();\r\n        if (targetImpl.collectionGroup !== null) {\r\n            canonicalId_1 += '|cg:' + targetImpl.collectionGroup;\r\n        }\r\n        canonicalId_1 += '|f:';\r\n        canonicalId_1 += targetImpl.filters.map(function (f) { return canonifyFilter(f); }).join(',');\r\n        canonicalId_1 += '|ob:';\r\n        canonicalId_1 += targetImpl.orderBy.map(function (o) { return canonifyOrderBy(o); }).join(',');\r\n        if (!isNullOrUndefined(targetImpl.limit)) {\r\n            canonicalId_1 += '|l:';\r\n            canonicalId_1 += targetImpl.limit;\r\n        }\r\n        if (targetImpl.startAt) {\r\n            canonicalId_1 += '|lb:';\r\n            canonicalId_1 += canonifyBound(targetImpl.startAt);\r\n        }\r\n        if (targetImpl.endAt) {\r\n            canonicalId_1 += '|ub:';\r\n            canonicalId_1 += canonifyBound(targetImpl.endAt);\r\n        }\r\n        targetImpl.memoizedCanonicalId = canonicalId_1;\r\n    }\r\n    return targetImpl.memoizedCanonicalId;\r\n}\r\nfunction stringifyTarget(target) {\r\n    var str = target.path.canonicalString();\r\n    if (target.collectionGroup !== null) {\r\n        str += ' collectionGroup=' + target.collectionGroup;\r\n    }\r\n    if (target.filters.length > 0) {\r\n        str += \", filters: [\" + target.filters\r\n            .map(function (f) { return stringifyFilter(f); })\r\n            .join(', ') + \"]\";\r\n    }\r\n    if (!isNullOrUndefined(target.limit)) {\r\n        str += ', limit: ' + target.limit;\r\n    }\r\n    if (target.orderBy.length > 0) {\r\n        str += \", orderBy: [\" + target.orderBy\r\n            .map(function (o) { return stringifyOrderBy(o); })\r\n            .join(', ') + \"]\";\r\n    }\r\n    if (target.startAt) {\r\n        str += ', startAt: ' + canonifyBound(target.startAt);\r\n    }\r\n    if (target.endAt) {\r\n        str += ', endAt: ' + canonifyBound(target.endAt);\r\n    }\r\n    return \"Target(\" + str + \")\";\r\n}\r\nfunction targetEquals(left, right) {\r\n    if (left.limit !== right.limit) {\r\n        return false;\r\n    }\r\n    if (left.orderBy.length !== right.orderBy.length) {\r\n        return false;\r\n    }\r\n    for (var i = 0; i < left.orderBy.length; i++) {\r\n        if (!orderByEquals(left.orderBy[i], right.orderBy[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    if (left.filters.length !== right.filters.length) {\r\n        return false;\r\n    }\r\n    for (var i = 0; i < left.filters.length; i++) {\r\n        if (!filterEquals(left.filters[i], right.filters[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    if (left.collectionGroup !== right.collectionGroup) {\r\n        return false;\r\n    }\r\n    if (!left.path.isEqual(right.path)) {\r\n        return false;\r\n    }\r\n    if (!boundEquals(left.startAt, right.startAt)) {\r\n        return false;\r\n    }\r\n    return boundEquals(left.endAt, right.endAt);\r\n}\r\nfunction isDocumentTarget(target) {\r\n    return (DocumentKey.isDocumentKey(target.path) &&\r\n        target.collectionGroup === null &&\r\n        target.filters.length === 0);\r\n}\r\nvar Filter = /** @class */ (function () {\r\n    function Filter() {\r\n    }\r\n    return Filter;\r\n}());\r\nvar FieldFilter = /** @class */ (function (_super) {\r\n    tslib.__extends(FieldFilter, _super);\r\n    function FieldFilter(field, op, value) {\r\n        var _this = _super.call(this) || this;\r\n        _this.field = field;\r\n        _this.op = op;\r\n        _this.value = value;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates a filter based on the provided arguments.\r\n     */\r\n    FieldFilter.create = function (field, op, value) {\r\n        if (field.isKeyField()) {\r\n            if (op === \"in\" /* IN */ || op === \"not-in\" /* NOT_IN */) {\r\n                return this.createKeyFieldInFilter(field, op, value);\r\n            }\r\n            else {\r\n                return new KeyFieldFilter(field, op, value);\r\n            }\r\n        }\r\n        else if (op === \"array-contains\" /* ARRAY_CONTAINS */) {\r\n            return new ArrayContainsFilter(field, value);\r\n        }\r\n        else if (op === \"in\" /* IN */) {\r\n            return new InFilter(field, value);\r\n        }\r\n        else if (op === \"not-in\" /* NOT_IN */) {\r\n            return new NotInFilter(field, value);\r\n        }\r\n        else if (op === \"array-contains-any\" /* ARRAY_CONTAINS_ANY */) {\r\n            return new ArrayContainsAnyFilter(field, value);\r\n        }\r\n        else {\r\n            return new FieldFilter(field, op, value);\r\n        }\r\n    };\r\n    FieldFilter.createKeyFieldInFilter = function (field, op, value) {\r\n        return op === \"in\" /* IN */\r\n            ? new KeyFieldInFilter(field, value)\r\n            : new KeyFieldNotInFilter(field, value);\r\n    };\r\n    FieldFilter.prototype.matches = function (doc) {\r\n        var other = doc.data.field(this.field);\r\n        // Types do not have to match in NOT_EQUAL filters.\r\n        if (this.op === \"!=\" /* NOT_EQUAL */) {\r\n            return (other !== null &&\r\n                this.matchesComparison(valueCompare(other, this.value)));\r\n        }\r\n        // Only compare types with matching backend order (such as double and int).\r\n        return (other !== null &&\r\n            typeOrder(this.value) === typeOrder(other) &&\r\n            this.matchesComparison(valueCompare(other, this.value)));\r\n    };\r\n    FieldFilter.prototype.matchesComparison = function (comparison) {\r\n        switch (this.op) {\r\n            case \"<\" /* LESS_THAN */:\r\n                return comparison < 0;\r\n            case \"<=\" /* LESS_THAN_OR_EQUAL */:\r\n                return comparison <= 0;\r\n            case \"==\" /* EQUAL */:\r\n                return comparison === 0;\r\n            case \"!=\" /* NOT_EQUAL */:\r\n                return comparison !== 0;\r\n            case \">\" /* GREATER_THAN */:\r\n                return comparison > 0;\r\n            case \">=\" /* GREATER_THAN_OR_EQUAL */:\r\n                return comparison >= 0;\r\n            default:\r\n                return fail();\r\n        }\r\n    };\r\n    FieldFilter.prototype.isInequality = function () {\r\n        return ([\r\n            \"<\" /* LESS_THAN */,\r\n            \"<=\" /* LESS_THAN_OR_EQUAL */,\r\n            \">\" /* GREATER_THAN */,\r\n            \">=\" /* GREATER_THAN_OR_EQUAL */,\r\n            \"!=\" /* NOT_EQUAL */,\r\n            \"not-in\" /* NOT_IN */\r\n        ].indexOf(this.op) >= 0);\r\n    };\r\n    return FieldFilter;\r\n}(Filter));\r\nfunction canonifyFilter(filter) {\r\n    // TODO(b/29183165): Technically, this won't be unique if two values have\r\n    // the same description, such as the int 3 and the string \"3\". So we should\r\n    // add the types in here somehow, too.\r\n    return (filter.field.canonicalString() +\r\n        filter.op.toString() +\r\n        canonicalId(filter.value));\r\n}\r\nfunction filterEquals(f1, f2) {\r\n    return (f1.op === f2.op &&\r\n        f1.field.isEqual(f2.field) &&\r\n        valueEquals(f1.value, f2.value));\r\n}\r\n/** Returns a debug description for `filter`. */\r\nfunction stringifyFilter(filter) {\r\n    return filter.field.canonicalString() + \" \" + filter.op + \" \" + canonicalId(filter.value);\r\n}\r\n/** Filter that matches on key fields (i.e. '__name__'). */\r\nvar KeyFieldFilter = /** @class */ (function (_super) {\r\n    tslib.__extends(KeyFieldFilter, _super);\r\n    function KeyFieldFilter(field, op, value) {\r\n        var _this = _super.call(this, field, op, value) || this;\r\n        _this.key = DocumentKey.fromName(value.referenceValue);\r\n        return _this;\r\n    }\r\n    KeyFieldFilter.prototype.matches = function (doc) {\r\n        var comparison = DocumentKey.comparator(doc.key, this.key);\r\n        return this.matchesComparison(comparison);\r\n    };\r\n    return KeyFieldFilter;\r\n}(FieldFilter));\r\n/** Filter that matches on key fields within an array. */\r\nvar KeyFieldInFilter = /** @class */ (function (_super) {\r\n    tslib.__extends(KeyFieldInFilter, _super);\r\n    function KeyFieldInFilter(field, value) {\r\n        var _this = _super.call(this, field, \"in\" /* IN */, value) || this;\r\n        _this.keys = extractDocumentKeysFromArrayValue(\"in\" /* IN */, value);\r\n        return _this;\r\n    }\r\n    KeyFieldInFilter.prototype.matches = function (doc) {\r\n        return this.keys.some(function (key) { return key.isEqual(doc.key); });\r\n    };\r\n    return KeyFieldInFilter;\r\n}(FieldFilter));\r\n/** Filter that matches on key fields not present within an array. */\r\nvar KeyFieldNotInFilter = /** @class */ (function (_super) {\r\n    tslib.__extends(KeyFieldNotInFilter, _super);\r\n    function KeyFieldNotInFilter(field, value) {\r\n        var _this = _super.call(this, field, \"not-in\" /* NOT_IN */, value) || this;\r\n        _this.keys = extractDocumentKeysFromArrayValue(\"not-in\" /* NOT_IN */, value);\r\n        return _this;\r\n    }\r\n    KeyFieldNotInFilter.prototype.matches = function (doc) {\r\n        return !this.keys.some(function (key) { return key.isEqual(doc.key); });\r\n    };\r\n    return KeyFieldNotInFilter;\r\n}(FieldFilter));\r\nfunction extractDocumentKeysFromArrayValue(op, value) {\r\n    var _a;\r\n    return (((_a = value.arrayValue) === null || _a === void 0 ? void 0 : _a.values) || []).map(function (v) {\r\n        return DocumentKey.fromName(v.referenceValue);\r\n    });\r\n}\r\n/** A Filter that implements the array-contains operator. */\r\nvar ArrayContainsFilter = /** @class */ (function (_super) {\r\n    tslib.__extends(ArrayContainsFilter, _super);\r\n    function ArrayContainsFilter(field, value) {\r\n        return _super.call(this, field, \"array-contains\" /* ARRAY_CONTAINS */, value) || this;\r\n    }\r\n    ArrayContainsFilter.prototype.matches = function (doc) {\r\n        var other = doc.data.field(this.field);\r\n        return isArray(other) && arrayValueContains(other.arrayValue, this.value);\r\n    };\r\n    return ArrayContainsFilter;\r\n}(FieldFilter));\r\n/** A Filter that implements the IN operator. */\r\nvar InFilter = /** @class */ (function (_super) {\r\n    tslib.__extends(InFilter, _super);\r\n    function InFilter(field, value) {\r\n        return _super.call(this, field, \"in\" /* IN */, value) || this;\r\n    }\r\n    InFilter.prototype.matches = function (doc) {\r\n        var other = doc.data.field(this.field);\r\n        return other !== null && arrayValueContains(this.value.arrayValue, other);\r\n    };\r\n    return InFilter;\r\n}(FieldFilter));\r\n/** A Filter that implements the not-in operator. */\r\nvar NotInFilter = /** @class */ (function (_super) {\r\n    tslib.__extends(NotInFilter, _super);\r\n    function NotInFilter(field, value) {\r\n        return _super.call(this, field, \"not-in\" /* NOT_IN */, value) || this;\r\n    }\r\n    NotInFilter.prototype.matches = function (doc) {\r\n        if (arrayValueContains(this.value.arrayValue, { nullValue: 'NULL_VALUE' })) {\r\n            return false;\r\n        }\r\n        var other = doc.data.field(this.field);\r\n        return other !== null && !arrayValueContains(this.value.arrayValue, other);\r\n    };\r\n    return NotInFilter;\r\n}(FieldFilter));\r\n/** A Filter that implements the array-contains-any operator. */\r\nvar ArrayContainsAnyFilter = /** @class */ (function (_super) {\r\n    tslib.__extends(ArrayContainsAnyFilter, _super);\r\n    function ArrayContainsAnyFilter(field, value) {\r\n        return _super.call(this, field, \"array-contains-any\" /* ARRAY_CONTAINS_ANY */, value) || this;\r\n    }\r\n    ArrayContainsAnyFilter.prototype.matches = function (doc) {\r\n        var _this = this;\r\n        var other = doc.data.field(this.field);\r\n        if (!isArray(other) || !other.arrayValue.values) {\r\n            return false;\r\n        }\r\n        return other.arrayValue.values.some(function (val) { return arrayValueContains(_this.value.arrayValue, val); });\r\n    };\r\n    return ArrayContainsAnyFilter;\r\n}(FieldFilter));\r\n/**\r\n * Represents a bound of a query.\r\n *\r\n * The bound is specified with the given components representing a position and\r\n * whether it's just before or just after the position (relative to whatever the\r\n * query order is).\r\n *\r\n * The position represents a logical index position for a query. It's a prefix\r\n * of values for the (potentially implicit) order by clauses of a query.\r\n *\r\n * Bound provides a function to determine whether a document comes before or\r\n * after a bound. This is influenced by whether the position is just before or\r\n * just after the provided values.\r\n */\r\nvar Bound = /** @class */ (function () {\r\n    function Bound(position, before) {\r\n        this.position = position;\r\n        this.before = before;\r\n    }\r\n    return Bound;\r\n}());\r\nfunction canonifyBound(bound) {\r\n    // TODO(b/29183165): Make this collision robust.\r\n    return (bound.before ? 'b' : 'a') + \":\" + bound.position\r\n        .map(function (p) { return canonicalId(p); })\r\n        .join(',');\r\n}\r\n/**\r\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\r\n */\r\nvar OrderBy = /** @class */ (function () {\r\n    function OrderBy(field, dir /* ASCENDING */) {\r\n        if (dir === void 0) { dir = \"asc\"; }\r\n        this.field = field;\r\n        this.dir = dir;\r\n    }\r\n    return OrderBy;\r\n}());\r\nfunction canonifyOrderBy(orderBy) {\r\n    // TODO(b/29183165): Make this collision robust.\r\n    return orderBy.field.canonicalString() + orderBy.dir;\r\n}\r\nfunction stringifyOrderBy(orderBy) {\r\n    return orderBy.field.canonicalString() + \" (\" + orderBy.dir + \")\";\r\n}\r\nfunction orderByEquals(left, right) {\r\n    return left.dir === right.dir && left.field.isEqual(right.field);\r\n}\r\n/**\r\n * Returns true if a document sorts before a bound using the provided sort\r\n * order.\r\n */\r\nfunction sortsBeforeDocument(bound, orderBy, doc) {\r\n    var comparison = 0;\r\n    for (var i = 0; i < bound.position.length; i++) {\r\n        var orderByComponent = orderBy[i];\r\n        var component = bound.position[i];\r\n        if (orderByComponent.field.isKeyField()) {\r\n            comparison = DocumentKey.comparator(DocumentKey.fromName(component.referenceValue), doc.key);\r\n        }\r\n        else {\r\n            var docValue = doc.data.field(orderByComponent.field);\r\n            comparison = valueCompare(component, docValue);\r\n        }\r\n        if (orderByComponent.dir === \"desc\" /* DESCENDING */) {\r\n            comparison = comparison * -1;\r\n        }\r\n        if (comparison !== 0) {\r\n            break;\r\n        }\r\n    }\r\n    return bound.before ? comparison <= 0 : comparison < 0;\r\n}\r\nfunction boundEquals(left, right) {\r\n    if (left === null) {\r\n        return right === null;\r\n    }\r\n    else if (right === null) {\r\n        return false;\r\n    }\r\n    if (left.before !== right.before ||\r\n        left.position.length !== right.position.length) {\r\n        return false;\r\n    }\r\n    for (var i = 0; i < left.position.length; i++) {\r\n        var leftPosition = left.position[i];\r\n        var rightPosition = right.position[i];\r\n        if (!valueEquals(leftPosition, rightPosition)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Query encapsulates all the query attributes we support in the SDK. It can\r\n * be run against the LocalStore, as well as be converted to a `Target` to\r\n * query the RemoteStore results.\r\n *\r\n * Visible for testing.\r\n */\r\nvar QueryImpl = /** @class */ (function () {\r\n    /**\r\n     * Initializes a Query with a path and optional additional query constraints.\r\n     * Path must currently be empty if this is a collection group query.\r\n     */\r\n    function QueryImpl(path, collectionGroup, explicitOrderBy, filters, limit, limitType /* First */, startAt, endAt) {\r\n        if (collectionGroup === void 0) { collectionGroup = null; }\r\n        if (explicitOrderBy === void 0) { explicitOrderBy = []; }\r\n        if (filters === void 0) { filters = []; }\r\n        if (limit === void 0) { limit = null; }\r\n        if (limitType === void 0) { limitType = \"F\"; }\r\n        if (startAt === void 0) { startAt = null; }\r\n        if (endAt === void 0) { endAt = null; }\r\n        this.path = path;\r\n        this.collectionGroup = collectionGroup;\r\n        this.explicitOrderBy = explicitOrderBy;\r\n        this.filters = filters;\r\n        this.limit = limit;\r\n        this.limitType = limitType;\r\n        this.startAt = startAt;\r\n        this.endAt = endAt;\r\n        this.memoizedOrderBy = null;\r\n        // The corresponding `Target` of this `Query` instance.\r\n        this.memoizedTarget = null;\r\n        if (this.startAt)\r\n            ;\r\n        if (this.endAt)\r\n            ;\r\n    }\r\n    return QueryImpl;\r\n}());\r\n/** Creates a new Query instance with the options provided. */\r\nfunction newQuery(path, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt) {\r\n    return new QueryImpl(path, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt);\r\n}\r\n/** Creates a new Query for a query that matches all documents at `path` */\r\nfunction newQueryForPath(path) {\r\n    return new QueryImpl(path);\r\n}\r\n/**\r\n * Helper to convert a collection group query into a collection query at a\r\n * specific path. This is used when executing collection group queries, since\r\n * we have to split the query into a set of collection queries at multiple\r\n * paths.\r\n */\r\nfunction asCollectionQueryAtPath(query, path) {\r\n    return new QueryImpl(path, \r\n    /*collectionGroup=*/ null, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, query.startAt, query.endAt);\r\n}\r\n/**\r\n * Returns true if this query does not specify any query constraints that\r\n * could remove results.\r\n */\r\nfunction matchesAllDocuments(query) {\r\n    return (query.filters.length === 0 &&\r\n        query.limit === null &&\r\n        query.startAt == null &&\r\n        query.endAt == null &&\r\n        (query.explicitOrderBy.length === 0 ||\r\n            (query.explicitOrderBy.length === 1 &&\r\n                query.explicitOrderBy[0].field.isKeyField())));\r\n}\r\nfunction hasLimitToFirst(query) {\r\n    return !isNullOrUndefined(query.limit) && query.limitType === \"F\" /* First */;\r\n}\r\nfunction hasLimitToLast(query) {\r\n    return !isNullOrUndefined(query.limit) && query.limitType === \"L\" /* Last */;\r\n}\r\nfunction getFirstOrderByField(query) {\r\n    return query.explicitOrderBy.length > 0\r\n        ? query.explicitOrderBy[0].field\r\n        : null;\r\n}\r\nfunction getInequalityFilterField(query) {\r\n    for (var _i = 0, _d = query.filters; _i < _d.length; _i++) {\r\n        var filter = _d[_i];\r\n        if (filter.isInequality()) {\r\n            return filter.field;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Checks if any of the provided Operators are included in the query and\r\n * returns the first one that is, or null if none are.\r\n */\r\nfunction findFilterOperator(query, operators) {\r\n    for (var _i = 0, _d = query.filters; _i < _d.length; _i++) {\r\n        var filter = _d[_i];\r\n        if (operators.indexOf(filter.op) >= 0) {\r\n            return filter.op;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Creates a new Query for a collection group query that matches all documents\r\n * within the provided collection group.\r\n */\r\nfunction newQueryForCollectionGroup(collectionId) {\r\n    return new QueryImpl(ResourcePath.emptyPath(), collectionId);\r\n}\r\n/**\r\n * Returns whether the query matches a single document by path (rather than a\r\n * collection).\r\n */\r\nfunction isDocumentQuery$1(query) {\r\n    return (DocumentKey.isDocumentKey(query.path) &&\r\n        query.collectionGroup === null &&\r\n        query.filters.length === 0);\r\n}\r\n/**\r\n * Returns whether the query matches a collection group rather than a specific\r\n * collection.\r\n */\r\nfunction isCollectionGroupQuery(query) {\r\n    return query.collectionGroup !== null;\r\n}\r\n/**\r\n * Returns the implicit order by constraint that is used to execute the Query,\r\n * which can be different from the order by constraints the user provided (e.g.\r\n * the SDK and backend always orders by `__name__`).\r\n */\r\nfunction queryOrderBy(query) {\r\n    var queryImpl = debugCast(query);\r\n    if (queryImpl.memoizedOrderBy === null) {\r\n        queryImpl.memoizedOrderBy = [];\r\n        var inequalityField = getInequalityFilterField(queryImpl);\r\n        var firstOrderByField = getFirstOrderByField(queryImpl);\r\n        if (inequalityField !== null && firstOrderByField === null) {\r\n            // In order to implicitly add key ordering, we must also add the\r\n            // inequality filter field for it to be a valid query.\r\n            // Note that the default inequality field and key ordering is ascending.\r\n            if (!inequalityField.isKeyField()) {\r\n                queryImpl.memoizedOrderBy.push(new OrderBy(inequalityField));\r\n            }\r\n            queryImpl.memoizedOrderBy.push(new OrderBy(FieldPath$1.keyField(), \"asc\" /* ASCENDING */));\r\n        }\r\n        else {\r\n            var foundKeyOrdering = false;\r\n            for (var _i = 0, _d = queryImpl.explicitOrderBy; _i < _d.length; _i++) {\r\n                var orderBy_1 = _d[_i];\r\n                queryImpl.memoizedOrderBy.push(orderBy_1);\r\n                if (orderBy_1.field.isKeyField()) {\r\n                    foundKeyOrdering = true;\r\n                }\r\n            }\r\n            if (!foundKeyOrdering) {\r\n                // The order of the implicit key ordering always matches the last\r\n                // explicit order by\r\n                var lastDirection = queryImpl.explicitOrderBy.length > 0\r\n                    ? queryImpl.explicitOrderBy[queryImpl.explicitOrderBy.length - 1]\r\n                        .dir\r\n                    : \"asc\" /* ASCENDING */;\r\n                queryImpl.memoizedOrderBy.push(new OrderBy(FieldPath$1.keyField(), lastDirection));\r\n            }\r\n        }\r\n    }\r\n    return queryImpl.memoizedOrderBy;\r\n}\r\n/**\r\n * Converts this `Query` instance to it's corresponding `Target` representation.\r\n */\r\nfunction queryToTarget(query) {\r\n    var queryImpl = debugCast(query);\r\n    if (!queryImpl.memoizedTarget) {\r\n        if (queryImpl.limitType === \"F\" /* First */) {\r\n            queryImpl.memoizedTarget = newTarget(queryImpl.path, queryImpl.collectionGroup, queryOrderBy(queryImpl), queryImpl.filters, queryImpl.limit, queryImpl.startAt, queryImpl.endAt);\r\n        }\r\n        else {\r\n            // Flip the orderBy directions since we want the last results\r\n            var orderBys = [];\r\n            for (var _i = 0, _d = queryOrderBy(queryImpl); _i < _d.length; _i++) {\r\n                var orderBy_2 = _d[_i];\r\n                var dir = orderBy_2.dir === \"desc\" /* DESCENDING */\r\n                    ? \"asc\" /* ASCENDING */\r\n                    : \"desc\" /* DESCENDING */;\r\n                orderBys.push(new OrderBy(orderBy_2.field, dir));\r\n            }\r\n            // We need to swap the cursors to match the now-flipped query ordering.\r\n            var startAt_1 = queryImpl.endAt\r\n                ? new Bound(queryImpl.endAt.position, !queryImpl.endAt.before)\r\n                : null;\r\n            var endAt_1 = queryImpl.startAt\r\n                ? new Bound(queryImpl.startAt.position, !queryImpl.startAt.before)\r\n                : null;\r\n            // Now return as a LimitType.First query.\r\n            queryImpl.memoizedTarget = newTarget(queryImpl.path, queryImpl.collectionGroup, orderBys, queryImpl.filters, queryImpl.limit, startAt_1, endAt_1);\r\n        }\r\n    }\r\n    return queryImpl.memoizedTarget;\r\n}\r\nfunction queryWithAddedFilter(query, filter) {\r\n    var newFilters = query.filters.concat([filter]);\r\n    return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), newFilters, query.limit, query.limitType, query.startAt, query.endAt);\r\n}\r\nfunction queryWithAddedOrderBy(query, orderBy) {\r\n    // TODO(dimond): validate that orderBy does not list the same key twice.\r\n    var newOrderBy = query.explicitOrderBy.concat([orderBy]);\r\n    return new QueryImpl(query.path, query.collectionGroup, newOrderBy, query.filters.slice(), query.limit, query.limitType, query.startAt, query.endAt);\r\n}\r\nfunction queryWithLimit(query, limit, limitType) {\r\n    return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), limit, limitType, query.startAt, query.endAt);\r\n}\r\nfunction queryWithStartAt(query, bound) {\r\n    return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, bound, query.endAt);\r\n}\r\nfunction queryWithEndAt(query, bound) {\r\n    return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, query.startAt, bound);\r\n}\r\nfunction queryEquals(left, right) {\r\n    return (targetEquals(queryToTarget(left), queryToTarget(right)) &&\r\n        left.limitType === right.limitType);\r\n}\r\n// TODO(b/29183165): This is used to get a unique string from a query to, for\r\n// example, use as a dictionary key, but the implementation is subject to\r\n// collisions. Make it collision-free.\r\nfunction canonifyQuery(query) {\r\n    return canonifyTarget(queryToTarget(query)) + \"|lt:\" + query.limitType;\r\n}\r\nfunction stringifyQuery(query) {\r\n    return \"Query(target=\" + stringifyTarget(queryToTarget(query)) + \"; limitType=\" + query.limitType + \")\";\r\n}\r\n/** Returns whether `doc` matches the constraints of `query`. */\r\nfunction queryMatches(query, doc) {\r\n    return (doc.isFoundDocument() &&\r\n        queryMatchesPathAndCollectionGroup(query, doc) &&\r\n        queryMatchesOrderBy(query, doc) &&\r\n        queryMatchesFilters(query, doc) &&\r\n        queryMatchesBounds(query, doc));\r\n}\r\nfunction queryMatchesPathAndCollectionGroup(query, doc) {\r\n    var docPath = doc.key.path;\r\n    if (query.collectionGroup !== null) {\r\n        // NOTE: this.path is currently always empty since we don't expose Collection\r\n        // Group queries rooted at a document path yet.\r\n        return (doc.key.hasCollectionId(query.collectionGroup) &&\r\n            query.path.isPrefixOf(docPath));\r\n    }\r\n    else if (DocumentKey.isDocumentKey(query.path)) {\r\n        // exact match for document queries\r\n        return query.path.isEqual(docPath);\r\n    }\r\n    else {\r\n        // shallow ancestor queries by default\r\n        return query.path.isImmediateParentOf(docPath);\r\n    }\r\n}\r\n/**\r\n * A document must have a value for every ordering clause in order to show up\r\n * in the results.\r\n */\r\nfunction queryMatchesOrderBy(query, doc) {\r\n    for (var _i = 0, _d = query.explicitOrderBy; _i < _d.length; _i++) {\r\n        var orderBy_3 = _d[_i];\r\n        // order by key always matches\r\n        if (!orderBy_3.field.isKeyField() && doc.data.field(orderBy_3.field) === null) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction queryMatchesFilters(query, doc) {\r\n    for (var _i = 0, _d = query.filters; _i < _d.length; _i++) {\r\n        var filter = _d[_i];\r\n        if (!filter.matches(doc)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/** Makes sure a document is within the bounds, if provided. */\r\nfunction queryMatchesBounds(query, doc) {\r\n    if (query.startAt &&\r\n        !sortsBeforeDocument(query.startAt, queryOrderBy(query), doc)) {\r\n        return false;\r\n    }\r\n    if (query.endAt &&\r\n        sortsBeforeDocument(query.endAt, queryOrderBy(query), doc)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Returns a new comparator function that can be used to compare two documents\r\n * based on the Query's ordering constraint.\r\n */\r\nfunction newQueryComparator(query) {\r\n    return function (d1, d2) {\r\n        var comparedOnKeyField = false;\r\n        for (var _i = 0, _d = queryOrderBy(query); _i < _d.length; _i++) {\r\n            var orderBy_4 = _d[_i];\r\n            var comp = compareDocs(orderBy_4, d1, d2);\r\n            if (comp !== 0) {\r\n                return comp;\r\n            }\r\n            comparedOnKeyField = comparedOnKeyField || orderBy_4.field.isKeyField();\r\n        }\r\n        return 0;\r\n    };\r\n}\r\nfunction compareDocs(orderBy, d1, d2) {\r\n    var comparison = orderBy.field.isKeyField()\r\n        ? DocumentKey.comparator(d1.key, d2.key)\r\n        : compareDocumentsByField(orderBy.field, d1, d2);\r\n    switch (orderBy.dir) {\r\n        case \"asc\" /* ASCENDING */:\r\n            return comparison;\r\n        case \"desc\" /* DESCENDING */:\r\n            return -1 * comparison;\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n// tree.\r\nvar SortedMap = /** @class */ (function () {\r\n    function SortedMap(comparator, root) {\r\n        this.comparator = comparator;\r\n        this.root = root ? root : LLRBNode.EMPTY;\r\n    }\r\n    // Returns a copy of the map, with the specified key/value added or replaced.\r\n    SortedMap.prototype.insert = function (key, value) {\r\n        return new SortedMap(this.comparator, this.root\r\n            .insert(key, value, this.comparator)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    // Returns a copy of the map, with the specified key removed.\r\n    SortedMap.prototype.remove = function (key) {\r\n        return new SortedMap(this.comparator, this.root\r\n            .remove(key, this.comparator)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    // Returns the value of the node with the given key, or null.\r\n    SortedMap.prototype.get = function (key) {\r\n        var node = this.root;\r\n        while (!node.isEmpty()) {\r\n            var cmp = this.comparator(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\r\n    // exist.\r\n    SortedMap.prototype.indexOf = function (key) {\r\n        // Number of nodes that were pruned when descending right\r\n        var prunedNodes = 0;\r\n        var node = this.root;\r\n        while (!node.isEmpty()) {\r\n            var cmp = this.comparator(key, node.key);\r\n            if (cmp === 0) {\r\n                return prunedNodes + node.left.size;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else {\r\n                // Count all nodes left of the node plus the node itself\r\n                prunedNodes += node.left.size + 1;\r\n                node = node.right;\r\n            }\r\n        }\r\n        // Node not found\r\n        return -1;\r\n    };\r\n    SortedMap.prototype.isEmpty = function () {\r\n        return this.root.isEmpty();\r\n    };\r\n    Object.defineProperty(SortedMap.prototype, \"size\", {\r\n        // Returns the total number of nodes in the map.\r\n        get: function () {\r\n            return this.root.size;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    // Returns the minimum key in the map.\r\n    SortedMap.prototype.minKey = function () {\r\n        return this.root.minKey();\r\n    };\r\n    // Returns the maximum key in the map.\r\n    SortedMap.prototype.maxKey = function () {\r\n        return this.root.maxKey();\r\n    };\r\n    // Traverses the map in key order and calls the specified action function\r\n    // for each key/value pair. If action returns true, traversal is aborted.\r\n    // Returns the first truthy value returned by action, or the last falsey\r\n    // value returned by action.\r\n    SortedMap.prototype.inorderTraversal = function (action) {\r\n        return this.root.inorderTraversal(action);\r\n    };\r\n    SortedMap.prototype.forEach = function (fn) {\r\n        this.inorderTraversal(function (k, v) {\r\n            fn(k, v);\r\n            return false;\r\n        });\r\n    };\r\n    SortedMap.prototype.toString = function () {\r\n        var descriptions = [];\r\n        this.inorderTraversal(function (k, v) {\r\n            descriptions.push(k + \":\" + v);\r\n            return false;\r\n        });\r\n        return \"{\" + descriptions.join(', ') + \"}\";\r\n    };\r\n    // Traverses the map in reverse key order and calls the specified action\r\n    // function for each key/value pair. If action returns true, traversal is\r\n    // aborted.\r\n    // Returns the first truthy value returned by action, or the last falsey\r\n    // value returned by action.\r\n    SortedMap.prototype.reverseTraversal = function (action) {\r\n        return this.root.reverseTraversal(action);\r\n    };\r\n    // Returns an iterator over the SortedMap.\r\n    SortedMap.prototype.getIterator = function () {\r\n        return new SortedMapIterator(this.root, null, this.comparator, false);\r\n    };\r\n    SortedMap.prototype.getIteratorFrom = function (key) {\r\n        return new SortedMapIterator(this.root, key, this.comparator, false);\r\n    };\r\n    SortedMap.prototype.getReverseIterator = function () {\r\n        return new SortedMapIterator(this.root, null, this.comparator, true);\r\n    };\r\n    SortedMap.prototype.getReverseIteratorFrom = function (key) {\r\n        return new SortedMapIterator(this.root, key, this.comparator, true);\r\n    };\r\n    return SortedMap;\r\n}()); // end SortedMap\r\n// An iterator over an LLRBNode.\r\nvar SortedMapIterator = /** @class */ (function () {\r\n    function SortedMapIterator(node, startKey, comparator, isReverse) {\r\n        this.isReverse = isReverse;\r\n        this.nodeStack = [];\r\n        var cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack,\r\n                // but stop iterating;\r\n                this.nodeStack.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move\r\n                // to the next one\r\n                this.nodeStack.push(node);\r\n                if (this.isReverse) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SortedMapIterator.prototype.getNext = function () {\r\n        var node = this.nodeStack.pop();\r\n        var result = { key: node.key, value: node.value };\r\n        if (this.isReverse) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SortedMapIterator.prototype.hasNext = function () {\r\n        return this.nodeStack.length > 0;\r\n    };\r\n    SortedMapIterator.prototype.peek = function () {\r\n        if (this.nodeStack.length === 0) {\r\n            return null;\r\n        }\r\n        var node = this.nodeStack[this.nodeStack.length - 1];\r\n        return { key: node.key, value: node.value };\r\n    };\r\n    return SortedMapIterator;\r\n}()); // end SortedMapIterator\r\n// Represents a node in a Left-leaning Red-Black tree.\r\nvar LLRBNode = /** @class */ (function () {\r\n    function LLRBNode(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left = left != null ? left : LLRBNode.EMPTY;\r\n        this.right = right != null ? right : LLRBNode.EMPTY;\r\n        this.size = this.left.size + 1 + this.right.size;\r\n    }\r\n    // Returns a copy of the current node, optionally replacing pieces of it.\r\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    };\r\n    LLRBNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    // Traverses the tree in key order and calls the specified action function\r\n    // for each node. If action returns true, traversal is aborted.\r\n    // Returns the first truthy value returned by action, or the last falsey\r\n    // value returned by action.\r\n    LLRBNode.prototype.inorderTraversal = function (action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    };\r\n    // Traverses the tree in reverse key order and calls the specified action\r\n    // function for each node. If action returns true, traversal is aborted.\r\n    // Returns the first truthy value returned by action, or the last falsey\r\n    // value returned by action.\r\n    LLRBNode.prototype.reverseTraversal = function (action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    };\r\n    // Returns the minimum node in the tree.\r\n    LLRBNode.prototype.min = function () {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min();\r\n        }\r\n    };\r\n    // Returns the maximum key in the tree.\r\n    LLRBNode.prototype.minKey = function () {\r\n        return this.min().key;\r\n    };\r\n    // Returns the maximum key in the tree.\r\n    LLRBNode.prototype.maxKey = function () {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    };\r\n    // Returns new tree, with the key/value added.\r\n    LLRBNode.prototype.insert = function (key, value, comparator) {\r\n        var n = this;\r\n        var cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp();\r\n    };\r\n    LLRBNode.prototype.removeMin = function () {\r\n        if (this.left.isEmpty()) {\r\n            return LLRBNode.EMPTY;\r\n        }\r\n        var n = this;\r\n        if (!n.left.isRed() && !n.left.left.isRed()) {\r\n            n = n.moveRedLeft();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin(), null);\r\n        return n.fixUp();\r\n    };\r\n    // Returns new tree, with the specified item removed.\r\n    LLRBNode.prototype.remove = function (key, comparator) {\r\n        var smallest;\r\n        var n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\r\n                n = n.moveRedLeft();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed()) {\r\n                n = n.rotateRight();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\r\n                n = n.moveRedRight();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return LLRBNode.EMPTY;\r\n                }\r\n                else {\r\n                    smallest = n.right.min();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp();\r\n    };\r\n    LLRBNode.prototype.isRed = function () {\r\n        return this.color;\r\n    };\r\n    // Returns new tree after performing any needed rotations.\r\n    LLRBNode.prototype.fixUp = function () {\r\n        var n = this;\r\n        if (n.right.isRed() && !n.left.isRed()) {\r\n            n = n.rotateLeft();\r\n        }\r\n        if (n.left.isRed() && n.left.left.isRed()) {\r\n            n = n.rotateRight();\r\n        }\r\n        if (n.left.isRed() && n.right.isRed()) {\r\n            n = n.colorFlip();\r\n        }\r\n        return n;\r\n    };\r\n    LLRBNode.prototype.moveRedLeft = function () {\r\n        var n = this.colorFlip();\r\n        if (n.right.left.isRed()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight());\r\n            n = n.rotateLeft();\r\n            n = n.colorFlip();\r\n        }\r\n        return n;\r\n    };\r\n    LLRBNode.prototype.moveRedRight = function () {\r\n        var n = this.colorFlip();\r\n        if (n.left.left.isRed()) {\r\n            n = n.rotateRight();\r\n            n = n.colorFlip();\r\n        }\r\n        return n;\r\n    };\r\n    LLRBNode.prototype.rotateLeft = function () {\r\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    };\r\n    LLRBNode.prototype.rotateRight = function () {\r\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    };\r\n    LLRBNode.prototype.colorFlip = function () {\r\n        var left = this.left.copy(null, null, !this.left.color, null, null);\r\n        var right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    };\r\n    // For testing.\r\n    LLRBNode.prototype.checkMaxDepth = function () {\r\n        var blackDepth = this.check();\r\n        if (Math.pow(2.0, blackDepth) <= this.size + 1) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\r\n    // leaves is equal on both sides.  This function verifies that or asserts.\r\n    LLRBNode.prototype.check = function () {\r\n        if (this.isRed() && this.left.isRed()) {\r\n            throw fail();\r\n        }\r\n        if (this.right.isRed()) {\r\n            throw fail();\r\n        }\r\n        var blackDepth = this.left.check();\r\n        if (blackDepth !== this.right.check()) {\r\n            throw fail();\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed() ? 0 : 1);\r\n        }\r\n    };\r\n    return LLRBNode;\r\n}()); // end LLRBNode\r\n// Empty node is shared between all LLRB trees.\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nLLRBNode.EMPTY = null;\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n// Represents an empty node (a leaf node in the Red-Black Tree).\r\nvar LLRBEmptyNode = /** @class */ (function () {\r\n    function LLRBEmptyNode() {\r\n        this.size = 0;\r\n    }\r\n    Object.defineProperty(LLRBEmptyNode.prototype, \"key\", {\r\n        get: function () {\r\n            throw fail();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LLRBEmptyNode.prototype, \"value\", {\r\n        get: function () {\r\n            throw fail();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LLRBEmptyNode.prototype, \"color\", {\r\n        get: function () {\r\n            throw fail();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LLRBEmptyNode.prototype, \"left\", {\r\n        get: function () {\r\n            throw fail();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LLRBEmptyNode.prototype, \"right\", {\r\n        get: function () {\r\n            throw fail();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    // Returns a copy of the current node.\r\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\r\n        return this;\r\n    };\r\n    // Returns a copy of the tree, with the specified key/value added.\r\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\r\n        return new LLRBNode(key, value);\r\n    };\r\n    // Returns a copy of the tree, with the specified key removed.\r\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\r\n        return this;\r\n    };\r\n    LLRBEmptyNode.prototype.isEmpty = function () {\r\n        return true;\r\n    };\r\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\r\n        return false;\r\n    };\r\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\r\n        return false;\r\n    };\r\n    LLRBEmptyNode.prototype.minKey = function () {\r\n        return null;\r\n    };\r\n    LLRBEmptyNode.prototype.maxKey = function () {\r\n        return null;\r\n    };\r\n    LLRBEmptyNode.prototype.isRed = function () {\r\n        return false;\r\n    };\r\n    // For testing.\r\n    LLRBEmptyNode.prototype.checkMaxDepth = function () {\r\n        return true;\r\n    };\r\n    LLRBEmptyNode.prototype.check = function () {\r\n        return 0;\r\n    };\r\n    return LLRBEmptyNode;\r\n}()); // end LLRBEmptyNode\r\nLLRBNode.EMPTY = new LLRBEmptyNode();\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SortedSet is an immutable (copy-on-write) collection that holds elements\r\n * in order specified by the provided comparator.\r\n *\r\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\r\n * be equal!\r\n */\r\nvar SortedSet = /** @class */ (function () {\r\n    function SortedSet(comparator) {\r\n        this.comparator = comparator;\r\n        this.data = new SortedMap(this.comparator);\r\n    }\r\n    SortedSet.prototype.has = function (elem) {\r\n        return this.data.get(elem) !== null;\r\n    };\r\n    SortedSet.prototype.first = function () {\r\n        return this.data.minKey();\r\n    };\r\n    SortedSet.prototype.last = function () {\r\n        return this.data.maxKey();\r\n    };\r\n    Object.defineProperty(SortedSet.prototype, \"size\", {\r\n        get: function () {\r\n            return this.data.size;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    SortedSet.prototype.indexOf = function (elem) {\r\n        return this.data.indexOf(elem);\r\n    };\r\n    /** Iterates elements in order defined by \"comparator\" */\r\n    SortedSet.prototype.forEach = function (cb) {\r\n        this.data.inorderTraversal(function (k, v) {\r\n            cb(k);\r\n            return false;\r\n        });\r\n    };\r\n    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */\r\n    SortedSet.prototype.forEachInRange = function (range, cb) {\r\n        var iter = this.data.getIteratorFrom(range[0]);\r\n        while (iter.hasNext()) {\r\n            var elem = iter.getNext();\r\n            if (this.comparator(elem.key, range[1]) >= 0) {\r\n                return;\r\n            }\r\n            cb(elem.key);\r\n        }\r\n    };\r\n    /**\r\n     * Iterates over `elem`s such that: start &lt;= elem until false is returned.\r\n     */\r\n    SortedSet.prototype.forEachWhile = function (cb, start) {\r\n        var iter;\r\n        if (start !== undefined) {\r\n            iter = this.data.getIteratorFrom(start);\r\n        }\r\n        else {\r\n            iter = this.data.getIterator();\r\n        }\r\n        while (iter.hasNext()) {\r\n            var elem = iter.getNext();\r\n            var result = cb(elem.key);\r\n            if (!result) {\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    /** Finds the least element greater than or equal to `elem`. */\r\n    SortedSet.prototype.firstAfterOrEqual = function (elem) {\r\n        var iter = this.data.getIteratorFrom(elem);\r\n        return iter.hasNext() ? iter.getNext().key : null;\r\n    };\r\n    SortedSet.prototype.getIterator = function () {\r\n        return new SortedSetIterator(this.data.getIterator());\r\n    };\r\n    SortedSet.prototype.getIteratorFrom = function (key) {\r\n        return new SortedSetIterator(this.data.getIteratorFrom(key));\r\n    };\r\n    /** Inserts or updates an element */\r\n    SortedSet.prototype.add = function (elem) {\r\n        return this.copy(this.data.remove(elem).insert(elem, true));\r\n    };\r\n    /** Deletes an element */\r\n    SortedSet.prototype.delete = function (elem) {\r\n        if (!this.has(elem)) {\r\n            return this;\r\n        }\r\n        return this.copy(this.data.remove(elem));\r\n    };\r\n    SortedSet.prototype.isEmpty = function () {\r\n        return this.data.isEmpty();\r\n    };\r\n    SortedSet.prototype.unionWith = function (other) {\r\n        var result = this;\r\n        // Make sure `result` always refers to the larger one of the two sets.\r\n        if (result.size < other.size) {\r\n            result = other;\r\n            other = this;\r\n        }\r\n        other.forEach(function (elem) {\r\n            result = result.add(elem);\r\n        });\r\n        return result;\r\n    };\r\n    SortedSet.prototype.isEqual = function (other) {\r\n        if (!(other instanceof SortedSet)) {\r\n            return false;\r\n        }\r\n        if (this.size !== other.size) {\r\n            return false;\r\n        }\r\n        var thisIt = this.data.getIterator();\r\n        var otherIt = other.data.getIterator();\r\n        while (thisIt.hasNext()) {\r\n            var thisElem = thisIt.getNext().key;\r\n            var otherElem = otherIt.getNext().key;\r\n            if (this.comparator(thisElem, otherElem) !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    SortedSet.prototype.toArray = function () {\r\n        var res = [];\r\n        this.forEach(function (targetId) {\r\n            res.push(targetId);\r\n        });\r\n        return res;\r\n    };\r\n    SortedSet.prototype.toString = function () {\r\n        var result = [];\r\n        this.forEach(function (elem) { return result.push(elem); });\r\n        return 'SortedSet(' + result.toString() + ')';\r\n    };\r\n    SortedSet.prototype.copy = function (data) {\r\n        var result = new SortedSet(this.comparator);\r\n        result.data = data;\r\n        return result;\r\n    };\r\n    return SortedSet;\r\n}());\r\nvar SortedSetIterator = /** @class */ (function () {\r\n    function SortedSetIterator(iter) {\r\n        this.iter = iter;\r\n    }\r\n    SortedSetIterator.prototype.getNext = function () {\r\n        return this.iter.getNext().key;\r\n    };\r\n    SortedSetIterator.prototype.hasNext = function () {\r\n        return this.iter.hasNext();\r\n    };\r\n    return SortedSetIterator;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar EMPTY_MUTABLE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\r\nfunction mutableDocumentMap() {\r\n    return EMPTY_MUTABLE_DOCUMENT_MAP;\r\n}\r\nvar EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\r\nfunction documentMap() {\r\n    return EMPTY_DOCUMENT_MAP;\r\n}\r\nvar EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);\r\nfunction documentVersionMap() {\r\n    return EMPTY_DOCUMENT_VERSION_MAP;\r\n}\r\nvar EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\r\nfunction documentKeySet() {\r\n    var keys = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        keys[_i] = arguments[_i];\r\n    }\r\n    var set = EMPTY_DOCUMENT_KEY_SET;\r\n    for (var _d = 0, keys_1 = keys; _d < keys_1.length; _d++) {\r\n        var key = keys_1[_d];\r\n        set = set.add(key);\r\n    }\r\n    return set;\r\n}\r\nvar EMPTY_TARGET_ID_SET = new SortedSet(primitiveComparator);\r\nfunction targetIdSet() {\r\n    return EMPTY_TARGET_ID_SET;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns an DoubleValue for `value` that is encoded based the serializer's\r\n * `useProto3Json` setting.\r\n */\r\nfunction toDouble(serializer, value) {\r\n    if (serializer.useProto3Json) {\r\n        if (isNaN(value)) {\r\n            return { doubleValue: 'NaN' };\r\n        }\r\n        else if (value === Infinity) {\r\n            return { doubleValue: 'Infinity' };\r\n        }\r\n        else if (value === -Infinity) {\r\n            return { doubleValue: '-Infinity' };\r\n        }\r\n    }\r\n    return { doubleValue: isNegativeZero(value) ? '-0' : value };\r\n}\r\n/**\r\n * Returns an IntegerValue for `value`.\r\n */\r\nfunction toInteger(value) {\r\n    return { integerValue: '' + value };\r\n}\r\n/**\r\n * Returns a value for a number that's appropriate to put into a proto.\r\n * The return value is an IntegerValue if it can safely represent the value,\r\n * otherwise a DoubleValue is returned.\r\n */\r\nfunction toNumber(serializer, value) {\r\n    return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Used to represent a field transform on a mutation. */\r\nvar TransformOperation = /** @class */ (function () {\r\n    function TransformOperation() {\r\n        // Make sure that the structural type of `TransformOperation` is unique.\r\n        // See https://github.com/microsoft/TypeScript/issues/5451\r\n        this._ = undefined;\r\n    }\r\n    return TransformOperation;\r\n}());\r\n/**\r\n * Computes the local transform result against the provided `previousValue`,\r\n * optionally using the provided localWriteTime.\r\n */\r\nfunction applyTransformOperationToLocalView(transform, previousValue, localWriteTime) {\r\n    if (transform instanceof ServerTimestampTransform) {\r\n        return serverTimestamp(localWriteTime, previousValue);\r\n    }\r\n    else if (transform instanceof ArrayUnionTransformOperation) {\r\n        return applyArrayUnionTransformOperation(transform, previousValue);\r\n    }\r\n    else if (transform instanceof ArrayRemoveTransformOperation) {\r\n        return applyArrayRemoveTransformOperation(transform, previousValue);\r\n    }\r\n    else {\r\n        return applyNumericIncrementTransformOperationToLocalView(transform, previousValue);\r\n    }\r\n}\r\n/**\r\n * Computes a final transform result after the transform has been acknowledged\r\n * by the server, potentially using the server-provided transformResult.\r\n */\r\nfunction applyTransformOperationToRemoteDocument(transform, previousValue, transformResult) {\r\n    // The server just sends null as the transform result for array operations,\r\n    // so we have to calculate a result the same as we do for local\r\n    // applications.\r\n    if (transform instanceof ArrayUnionTransformOperation) {\r\n        return applyArrayUnionTransformOperation(transform, previousValue);\r\n    }\r\n    else if (transform instanceof ArrayRemoveTransformOperation) {\r\n        return applyArrayRemoveTransformOperation(transform, previousValue);\r\n    }\r\n    return transformResult;\r\n}\r\n/**\r\n * If this transform operation is not idempotent, returns the base value to\r\n * persist for this transform. If a base value is returned, the transform\r\n * operation is always applied to this base value, even if document has\r\n * already been updated.\r\n *\r\n * Base values provide consistent behavior for non-idempotent transforms and\r\n * allow us to return the same latency-compensated value even if the backend\r\n * has already applied the transform operation. The base value is null for\r\n * idempotent transforms, as they can be re-played even if the backend has\r\n * already applied them.\r\n *\r\n * @returns a base value to store along with the mutation, or null for\r\n * idempotent transforms.\r\n */\r\nfunction computeTransformOperationBaseValue(transform, previousValue) {\r\n    if (transform instanceof NumericIncrementTransformOperation) {\r\n        return isNumber(previousValue) ? previousValue : { integerValue: 0 };\r\n    }\r\n    return null;\r\n}\r\nfunction transformOperationEquals(left, right) {\r\n    if (left instanceof ArrayUnionTransformOperation &&\r\n        right instanceof ArrayUnionTransformOperation) {\r\n        return arrayEquals(left.elements, right.elements, valueEquals);\r\n    }\r\n    else if (left instanceof ArrayRemoveTransformOperation &&\r\n        right instanceof ArrayRemoveTransformOperation) {\r\n        return arrayEquals(left.elements, right.elements, valueEquals);\r\n    }\r\n    else if (left instanceof NumericIncrementTransformOperation &&\r\n        right instanceof NumericIncrementTransformOperation) {\r\n        return valueEquals(left.operand, right.operand);\r\n    }\r\n    return (left instanceof ServerTimestampTransform &&\r\n        right instanceof ServerTimestampTransform);\r\n}\r\n/** Transforms a value into a server-generated timestamp. */\r\nvar ServerTimestampTransform = /** @class */ (function (_super) {\r\n    tslib.__extends(ServerTimestampTransform, _super);\r\n    function ServerTimestampTransform() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return ServerTimestampTransform;\r\n}(TransformOperation));\r\n/** Transforms an array value via a union operation. */\r\nvar ArrayUnionTransformOperation = /** @class */ (function (_super) {\r\n    tslib.__extends(ArrayUnionTransformOperation, _super);\r\n    function ArrayUnionTransformOperation(elements) {\r\n        var _this = _super.call(this) || this;\r\n        _this.elements = elements;\r\n        return _this;\r\n    }\r\n    return ArrayUnionTransformOperation;\r\n}(TransformOperation));\r\nfunction applyArrayUnionTransformOperation(transform, previousValue) {\r\n    var values = coercedFieldValuesArray(previousValue);\r\n    var _loop_3 = function (toUnion) {\r\n        if (!values.some(function (element) { return valueEquals(element, toUnion); })) {\r\n            values.push(toUnion);\r\n        }\r\n    };\r\n    for (var _i = 0, _d = transform.elements; _i < _d.length; _i++) {\r\n        var toUnion = _d[_i];\r\n        _loop_3(toUnion);\r\n    }\r\n    return { arrayValue: { values: values } };\r\n}\r\n/** Transforms an array value via a remove operation. */\r\nvar ArrayRemoveTransformOperation = /** @class */ (function (_super) {\r\n    tslib.__extends(ArrayRemoveTransformOperation, _super);\r\n    function ArrayRemoveTransformOperation(elements) {\r\n        var _this = _super.call(this) || this;\r\n        _this.elements = elements;\r\n        return _this;\r\n    }\r\n    return ArrayRemoveTransformOperation;\r\n}(TransformOperation));\r\nfunction applyArrayRemoveTransformOperation(transform, previousValue) {\r\n    var values = coercedFieldValuesArray(previousValue);\r\n    var _loop_4 = function (toRemove) {\r\n        values = values.filter(function (element) { return !valueEquals(element, toRemove); });\r\n    };\r\n    for (var _i = 0, _d = transform.elements; _i < _d.length; _i++) {\r\n        var toRemove = _d[_i];\r\n        _loop_4(toRemove);\r\n    }\r\n    return { arrayValue: { values: values } };\r\n}\r\n/**\r\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\r\n * transforms. Converts all field values to integers or doubles, but unlike the\r\n * backend does not cap integer values at 2^63. Instead, JavaScript number\r\n * arithmetic is used and precision loss can occur for values greater than 2^53.\r\n */\r\nvar NumericIncrementTransformOperation = /** @class */ (function (_super) {\r\n    tslib.__extends(NumericIncrementTransformOperation, _super);\r\n    function NumericIncrementTransformOperation(serializer, operand) {\r\n        var _this = _super.call(this) || this;\r\n        _this.serializer = serializer;\r\n        _this.operand = operand;\r\n        return _this;\r\n    }\r\n    return NumericIncrementTransformOperation;\r\n}(TransformOperation));\r\nfunction applyNumericIncrementTransformOperationToLocalView(transform, previousValue) {\r\n    // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\r\n    // precision and resolves overflows by reducing precision, we do not\r\n    // manually cap overflows at 2^63.\r\n    var baseValue = computeTransformOperationBaseValue(transform, previousValue);\r\n    var sum = asNumber(baseValue) + asNumber(transform.operand);\r\n    if (isInteger(baseValue) && isInteger(transform.operand)) {\r\n        return toInteger(sum);\r\n    }\r\n    else {\r\n        return toDouble(transform.serializer, sum);\r\n    }\r\n}\r\nfunction asNumber(value) {\r\n    return normalizeNumber(value.integerValue || value.doubleValue);\r\n}\r\nfunction coercedFieldValuesArray(value) {\r\n    return isArray(value) && value.arrayValue.values\r\n        ? value.arrayValue.values.slice()\r\n        : [];\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** A field path and the TransformOperation to perform upon it. */\r\nvar FieldTransform = /** @class */ (function () {\r\n    function FieldTransform(field, transform) {\r\n        this.field = field;\r\n        this.transform = transform;\r\n    }\r\n    return FieldTransform;\r\n}());\r\nfunction fieldTransformEquals(left, right) {\r\n    return (left.field.isEqual(right.field) &&\r\n        transformOperationEquals(left.transform, right.transform));\r\n}\r\nfunction fieldTransformsAreEqual(left, right) {\r\n    if (left === undefined && right === undefined) {\r\n        return true;\r\n    }\r\n    if (left && right) {\r\n        return arrayEquals(left, right, function (l, r) { return fieldTransformEquals(l, r); });\r\n    }\r\n    return false;\r\n}\r\n/** The result of successfully applying a mutation to the backend. */\r\nvar MutationResult = /** @class */ (function () {\r\n    function MutationResult(\r\n    /**\r\n     * The version at which the mutation was committed:\r\n     *\r\n     * - For most operations, this is the updateTime in the WriteResult.\r\n     * - For deletes, the commitTime of the WriteResponse (because deletes are\r\n     *   not stored and have no updateTime).\r\n     *\r\n     * Note that these versions can be different: No-op writes will not change\r\n     * the updateTime even though the commitTime advances.\r\n     */\r\n    version, \r\n    /**\r\n     * The resulting fields returned from the backend after a mutation\r\n     * containing field transforms has been committed. Contains one FieldValue\r\n     * for each FieldTransform that was in the mutation.\r\n     *\r\n     * Will be empty if the mutation did not contain any field transforms.\r\n     */\r\n    transformResults) {\r\n        this.version = version;\r\n        this.transformResults = transformResults;\r\n    }\r\n    return MutationResult;\r\n}());\r\n/**\r\n * Encodes a precondition for a mutation. This follows the model that the\r\n * backend accepts with the special case of an explicit \"empty\" precondition\r\n * (meaning no precondition).\r\n */\r\nvar Precondition = /** @class */ (function () {\r\n    function Precondition(updateTime, exists) {\r\n        this.updateTime = updateTime;\r\n        this.exists = exists;\r\n    }\r\n    /** Creates a new empty Precondition. */\r\n    Precondition.none = function () {\r\n        return new Precondition();\r\n    };\r\n    /** Creates a new Precondition with an exists flag. */\r\n    Precondition.exists = function (exists) {\r\n        return new Precondition(undefined, exists);\r\n    };\r\n    /** Creates a new Precondition based on a version a document exists at. */\r\n    Precondition.updateTime = function (version) {\r\n        return new Precondition(version);\r\n    };\r\n    Object.defineProperty(Precondition.prototype, \"isNone\", {\r\n        /** Returns whether this Precondition is empty. */\r\n        get: function () {\r\n            return this.updateTime === undefined && this.exists === undefined;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Precondition.prototype.isEqual = function (other) {\r\n        return (this.exists === other.exists &&\r\n            (this.updateTime\r\n                ? !!other.updateTime && this.updateTime.isEqual(other.updateTime)\r\n                : !other.updateTime));\r\n    };\r\n    return Precondition;\r\n}());\r\n/** Returns true if the preconditions is valid for the given document. */\r\nfunction preconditionIsValidForDocument(precondition, document) {\r\n    if (precondition.updateTime !== undefined) {\r\n        return (document.isFoundDocument() &&\r\n            document.version.isEqual(precondition.updateTime));\r\n    }\r\n    else if (precondition.exists !== undefined) {\r\n        return precondition.exists === document.isFoundDocument();\r\n    }\r\n    else {\r\n        return true;\r\n    }\r\n}\r\n/**\r\n * A mutation describes a self-contained change to a document. Mutations can\r\n * create, replace, delete, and update subsets of documents.\r\n *\r\n * Mutations not only act on the value of the document but also its version.\r\n *\r\n * For local mutations (mutations that haven't been committed yet), we preserve\r\n * the existing version for Set and Patch mutations. For Delete mutations, we\r\n * reset the version to 0.\r\n *\r\n * Here's the expected transition table.\r\n *\r\n * MUTATION           APPLIED TO            RESULTS IN\r\n *\r\n * SetMutation        Document(v3)          Document(v3)\r\n * SetMutation        NoDocument(v3)        Document(v0)\r\n * SetMutation        InvalidDocument(v0)   Document(v0)\r\n * PatchMutation      Document(v3)          Document(v3)\r\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\r\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\r\n * DeleteMutation     Document(v3)          NoDocument(v0)\r\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\r\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\r\n *\r\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\r\n * the resulting version for Set and Patch mutations. As deletes have no\r\n * explicit update time, we use the commitTime of the WriteResponse for\r\n * Delete mutations.\r\n *\r\n * If a mutation is acknowledged by the backend but fails the precondition check\r\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\r\n * the updated version.\r\n *\r\n * Field transforms are used only with Patch and Set Mutations. We use the\r\n * `updateTransforms` message to store transforms, rather than the `transforms`s\r\n * messages.\r\n *\r\n * ## Subclassing Notes\r\n *\r\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\r\n * applyToLocalView() to implement the actual behavior of applying the mutation\r\n * to some source document (see `applySetMutationToRemoteDocument()` for an\r\n * example).\r\n */\r\nvar Mutation = /** @class */ (function () {\r\n    function Mutation() {\r\n    }\r\n    return Mutation;\r\n}());\r\n/**\r\n * Applies this mutation to the given document for the purposes of computing a\r\n * new remote document. If the input document doesn't match the expected state\r\n * (e.g. it is invalid or outdated), the document type may transition to\r\n * unknown.\r\n *\r\n * @param mutation - The mutation to apply.\r\n * @param document - The document to mutate. The input document can be an\r\n *     invalid document if the client has no knowledge of the pre-mutation state\r\n *     of the document.\r\n * @param mutationResult - The result of applying the mutation from the backend.\r\n */\r\nfunction applyMutationToRemoteDocument(mutation, document, mutationResult) {\r\n    if (mutation instanceof SetMutation) {\r\n        applySetMutationToRemoteDocument(mutation, document, mutationResult);\r\n    }\r\n    else if (mutation instanceof PatchMutation) {\r\n        applyPatchMutationToRemoteDocument(mutation, document, mutationResult);\r\n    }\r\n    else {\r\n        applyDeleteMutationToRemoteDocument(mutation, document, mutationResult);\r\n    }\r\n}\r\n/**\r\n * Applies this mutation to the given document for the purposes of computing\r\n * the new local view of a document. If the input document doesn't match the\r\n * expected state, the document is not modified.\r\n *\r\n * @param mutation - The mutation to apply.\r\n * @param document - The document to mutate. The input document can be an\r\n *     invalid document if the client has no knowledge of the pre-mutation state\r\n *     of the document.\r\n * @param localWriteTime - A timestamp indicating the local write time of the\r\n *     batch this mutation is a part of.\r\n */\r\nfunction applyMutationToLocalView(mutation, document, localWriteTime) {\r\n    if (mutation instanceof SetMutation) {\r\n        applySetMutationToLocalView(mutation, document, localWriteTime);\r\n    }\r\n    else if (mutation instanceof PatchMutation) {\r\n        applyPatchMutationToLocalView(mutation, document, localWriteTime);\r\n    }\r\n    else {\r\n        applyDeleteMutationToLocalView(mutation, document);\r\n    }\r\n}\r\n/**\r\n * If this mutation is not idempotent, returns the base value to persist with\r\n * this mutation. If a base value is returned, the mutation is always applied\r\n * to this base value, even if document has already been updated.\r\n *\r\n * The base value is a sparse object that consists of only the document\r\n * fields for which this mutation contains a non-idempotent transformation\r\n * (e.g. a numeric increment). The provided value guarantees consistent\r\n * behavior for non-idempotent transforms and allow us to return the same\r\n * latency-compensated value even if the backend has already applied the\r\n * mutation. The base value is null for idempotent mutations, as they can be\r\n * re-played even if the backend has already applied them.\r\n *\r\n * @returns a base value to store along with the mutation, or null for\r\n * idempotent mutations.\r\n */\r\nfunction extractMutationBaseValue(mutation, document) {\r\n    var baseObject = null;\r\n    for (var _i = 0, _d = mutation.fieldTransforms; _i < _d.length; _i++) {\r\n        var fieldTransform = _d[_i];\r\n        var existingValue = document.data.field(fieldTransform.field);\r\n        var coercedValue = computeTransformOperationBaseValue(fieldTransform.transform, existingValue || null);\r\n        if (coercedValue != null) {\r\n            if (baseObject == null) {\r\n                baseObject = ObjectValue.empty();\r\n            }\r\n            baseObject.set(fieldTransform.field, coercedValue);\r\n        }\r\n    }\r\n    return baseObject ? baseObject : null;\r\n}\r\nfunction mutationEquals(left, right) {\r\n    if (left.type !== right.type) {\r\n        return false;\r\n    }\r\n    if (!left.key.isEqual(right.key)) {\r\n        return false;\r\n    }\r\n    if (!left.precondition.isEqual(right.precondition)) {\r\n        return false;\r\n    }\r\n    if (!fieldTransformsAreEqual(left.fieldTransforms, right.fieldTransforms)) {\r\n        return false;\r\n    }\r\n    if (left.type === 0 /* Set */) {\r\n        return left.value.isEqual(right.value);\r\n    }\r\n    if (left.type === 1 /* Patch */) {\r\n        return (left.data.isEqual(right.data) &&\r\n            left.fieldMask.isEqual(right.fieldMask));\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Returns the version from the given document for use as the result of a\r\n * mutation. Mutations are defined to return the version of the base document\r\n * only if it is an existing document. Deleted and unknown documents have a\r\n * post-mutation version of SnapshotVersion.min().\r\n */\r\nfunction getPostMutationVersion(document) {\r\n    return document.isFoundDocument() ? document.version : SnapshotVersion.min();\r\n}\r\n/**\r\n * A mutation that creates or replaces the document at the given key with the\r\n * object value contents.\r\n */\r\nvar SetMutation = /** @class */ (function (_super) {\r\n    tslib.__extends(SetMutation, _super);\r\n    function SetMutation(key, value, precondition, fieldTransforms) {\r\n        if (fieldTransforms === void 0) { fieldTransforms = []; }\r\n        var _this = _super.call(this) || this;\r\n        _this.key = key;\r\n        _this.value = value;\r\n        _this.precondition = precondition;\r\n        _this.fieldTransforms = fieldTransforms;\r\n        _this.type = 0 /* Set */;\r\n        return _this;\r\n    }\r\n    return SetMutation;\r\n}(Mutation));\r\nfunction applySetMutationToRemoteDocument(mutation, document, mutationResult) {\r\n    // Unlike applySetMutationToLocalView, if we're applying a mutation to a\r\n    // remote document the server has accepted the mutation so the precondition\r\n    // must have held.\r\n    var newData = mutation.value.clone();\r\n    var transformResults = serverTransformResults(mutation.fieldTransforms, document, mutationResult.transformResults);\r\n    newData.setAll(transformResults);\r\n    document\r\n        .convertToFoundDocument(mutationResult.version, newData)\r\n        .setHasCommittedMutations();\r\n}\r\nfunction applySetMutationToLocalView(mutation, document, localWriteTime) {\r\n    if (!preconditionIsValidForDocument(mutation.precondition, document)) {\r\n        // The mutation failed to apply (e.g. a document ID created with add()\r\n        // caused a name collision).\r\n        return;\r\n    }\r\n    var newData = mutation.value.clone();\r\n    var transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document);\r\n    newData.setAll(transformResults);\r\n    document\r\n        .convertToFoundDocument(getPostMutationVersion(document), newData)\r\n        .setHasLocalMutations();\r\n}\r\n/**\r\n * A mutation that modifies fields of the document at the given key with the\r\n * given values. The values are applied through a field mask:\r\n *\r\n *  * When a field is in both the mask and the values, the corresponding field\r\n *    is updated.\r\n *  * When a field is in neither the mask nor the values, the corresponding\r\n *    field is unmodified.\r\n *  * When a field is in the mask but not in the values, the corresponding field\r\n *    is deleted.\r\n *  * When a field is not in the mask but is in the values, the values map is\r\n *    ignored.\r\n */\r\nvar PatchMutation = /** @class */ (function (_super) {\r\n    tslib.__extends(PatchMutation, _super);\r\n    function PatchMutation(key, data, fieldMask, precondition, fieldTransforms) {\r\n        if (fieldTransforms === void 0) { fieldTransforms = []; }\r\n        var _this = _super.call(this) || this;\r\n        _this.key = key;\r\n        _this.data = data;\r\n        _this.fieldMask = fieldMask;\r\n        _this.precondition = precondition;\r\n        _this.fieldTransforms = fieldTransforms;\r\n        _this.type = 1 /* Patch */;\r\n        return _this;\r\n    }\r\n    return PatchMutation;\r\n}(Mutation));\r\nfunction applyPatchMutationToRemoteDocument(mutation, document, mutationResult) {\r\n    if (!preconditionIsValidForDocument(mutation.precondition, document)) {\r\n        // Since the mutation was not rejected, we know that the precondition\r\n        // matched on the backend. We therefore must not have the expected version\r\n        // of the document in our cache and convert to an UnknownDocument with a\r\n        // known updateTime.\r\n        document.convertToUnknownDocument(mutationResult.version);\r\n        return;\r\n    }\r\n    var transformResults = serverTransformResults(mutation.fieldTransforms, document, mutationResult.transformResults);\r\n    var newData = document.data;\r\n    newData.setAll(getPatch(mutation));\r\n    newData.setAll(transformResults);\r\n    document\r\n        .convertToFoundDocument(mutationResult.version, newData)\r\n        .setHasCommittedMutations();\r\n}\r\nfunction applyPatchMutationToLocalView(mutation, document, localWriteTime) {\r\n    if (!preconditionIsValidForDocument(mutation.precondition, document)) {\r\n        return;\r\n    }\r\n    var transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document);\r\n    var newData = document.data;\r\n    newData.setAll(getPatch(mutation));\r\n    newData.setAll(transformResults);\r\n    document\r\n        .convertToFoundDocument(getPostMutationVersion(document), newData)\r\n        .setHasLocalMutations();\r\n}\r\n/**\r\n * Returns a FieldPath/Value map with the content of the PatchMutation.\r\n */\r\nfunction getPatch(mutation) {\r\n    var result = new Map();\r\n    mutation.fieldMask.fields.forEach(function (fieldPath) {\r\n        if (!fieldPath.isEmpty()) {\r\n            var newValue = mutation.data.field(fieldPath);\r\n            result.set(fieldPath, newValue);\r\n        }\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * Creates a list of \"transform results\" (a transform result is a field value\r\n * representing the result of applying a transform) for use after a mutation\r\n * containing transforms has been acknowledged by the server.\r\n *\r\n * @param fieldTransforms - The field transforms to apply the result to.\r\n * @param mutableDocument - The current state of the document after applying all\r\n * previous mutations.\r\n * @param serverTransformResults - The transform results received by the server.\r\n * @returns The transform results list.\r\n */\r\nfunction serverTransformResults(fieldTransforms, mutableDocument, serverTransformResults) {\r\n    var transformResults = new Map();\r\n    hardAssert(fieldTransforms.length === serverTransformResults.length);\r\n    for (var i = 0; i < serverTransformResults.length; i++) {\r\n        var fieldTransform = fieldTransforms[i];\r\n        var transform = fieldTransform.transform;\r\n        var previousValue = mutableDocument.data.field(fieldTransform.field);\r\n        transformResults.set(fieldTransform.field, applyTransformOperationToRemoteDocument(transform, previousValue, serverTransformResults[i]));\r\n    }\r\n    return transformResults;\r\n}\r\n/**\r\n * Creates a list of \"transform results\" (a transform result is a field value\r\n * representing the result of applying a transform) for use when applying a\r\n * transform locally.\r\n *\r\n * @param fieldTransforms - The field transforms to apply the result to.\r\n * @param localWriteTime - The local time of the mutation (used to\r\n *     generate ServerTimestampValues).\r\n * @param mutableDocument - The current state of the document after applying all\r\n *     previous mutations.\r\n * @returns The transform results list.\r\n */\r\nfunction localTransformResults(fieldTransforms, localWriteTime, mutableDocument) {\r\n    var transformResults = new Map();\r\n    for (var _i = 0, fieldTransforms_1 = fieldTransforms; _i < fieldTransforms_1.length; _i++) {\r\n        var fieldTransform = fieldTransforms_1[_i];\r\n        var transform = fieldTransform.transform;\r\n        var previousValue = mutableDocument.data.field(fieldTransform.field);\r\n        transformResults.set(fieldTransform.field, applyTransformOperationToLocalView(transform, previousValue, localWriteTime));\r\n    }\r\n    return transformResults;\r\n}\r\n/** A mutation that deletes the document at the given key. */\r\nvar DeleteMutation = /** @class */ (function (_super) {\r\n    tslib.__extends(DeleteMutation, _super);\r\n    function DeleteMutation(key, precondition) {\r\n        var _this = _super.call(this) || this;\r\n        _this.key = key;\r\n        _this.precondition = precondition;\r\n        _this.type = 2 /* Delete */;\r\n        _this.fieldTransforms = [];\r\n        return _this;\r\n    }\r\n    return DeleteMutation;\r\n}(Mutation));\r\nfunction applyDeleteMutationToRemoteDocument(mutation, document, mutationResult) {\r\n    // Unlike applyToLocalView, if we're applying a mutation to a remote\r\n    // document the server has accepted the mutation so the precondition must\r\n    // have held.\r\n    document\r\n        .convertToNoDocument(mutationResult.version)\r\n        .setHasCommittedMutations();\r\n}\r\nfunction applyDeleteMutationToLocalView(mutation, document) {\r\n    if (preconditionIsValidForDocument(mutation.precondition, document)) {\r\n        // We don't call `setHasLocalMutations()` since we want to be backwards\r\n        // compatible with the existing SDK behavior.\r\n        document.convertToNoDocument(SnapshotVersion.min());\r\n    }\r\n}\r\n/**\r\n * A mutation that verifies the existence of the document at the given key with\r\n * the provided precondition.\r\n *\r\n * The `verify` operation is only used in Transactions, and this class serves\r\n * primarily to facilitate serialization into protos.\r\n */\r\nvar VerifyMutation = /** @class */ (function (_super) {\r\n    tslib.__extends(VerifyMutation, _super);\r\n    function VerifyMutation(key, precondition) {\r\n        var _this = _super.call(this) || this;\r\n        _this.key = key;\r\n        _this.precondition = precondition;\r\n        _this.type = 3 /* Verify */;\r\n        _this.fieldTransforms = [];\r\n        return _this;\r\n    }\r\n    return VerifyMutation;\r\n}(Mutation));\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A batch of mutations that will be sent as one unit to the backend.\r\n */\r\nvar MutationBatch = /** @class */ (function () {\r\n    /**\r\n     * @param batchId - The unique ID of this mutation batch.\r\n     * @param localWriteTime - The original write time of this mutation.\r\n     * @param baseMutations - Mutations that are used to populate the base\r\n     * values when this mutation is applied locally. This can be used to locally\r\n     * overwrite values that are persisted in the remote document cache. Base\r\n     * mutations are never sent to the backend.\r\n     * @param mutations - The user-provided mutations in this mutation batch.\r\n     * User-provided mutations are applied both locally and remotely on the\r\n     * backend.\r\n     */\r\n    function MutationBatch(batchId, localWriteTime, baseMutations, mutations) {\r\n        this.batchId = batchId;\r\n        this.localWriteTime = localWriteTime;\r\n        this.baseMutations = baseMutations;\r\n        this.mutations = mutations;\r\n    }\r\n    /**\r\n     * Applies all the mutations in this MutationBatch to the specified document\r\n     * to compute the state of the remote document\r\n     *\r\n     * @param document - The document to apply mutations to.\r\n     * @param batchResult - The result of applying the MutationBatch to the\r\n     * backend.\r\n     */\r\n    MutationBatch.prototype.applyToRemoteDocument = function (document, batchResult) {\r\n        var mutationResults = batchResult.mutationResults;\r\n        for (var i = 0; i < this.mutations.length; i++) {\r\n            var mutation = this.mutations[i];\r\n            if (mutation.key.isEqual(document.key)) {\r\n                var mutationResult = mutationResults[i];\r\n                applyMutationToRemoteDocument(mutation, document, mutationResult);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Computes the local view of a document given all the mutations in this\r\n     * batch.\r\n     *\r\n     * @param document - The document to apply mutations to.\r\n     */\r\n    MutationBatch.prototype.applyToLocalView = function (document) {\r\n        // First, apply the base state. This allows us to apply non-idempotent\r\n        // transform against a consistent set of values.\r\n        for (var _i = 0, _d = this.baseMutations; _i < _d.length; _i++) {\r\n            var mutation = _d[_i];\r\n            if (mutation.key.isEqual(document.key)) {\r\n                applyMutationToLocalView(mutation, document, this.localWriteTime);\r\n            }\r\n        }\r\n        // Second, apply all user-provided mutations.\r\n        for (var _e = 0, _f = this.mutations; _e < _f.length; _e++) {\r\n            var mutation = _f[_e];\r\n            if (mutation.key.isEqual(document.key)) {\r\n                applyMutationToLocalView(mutation, document, this.localWriteTime);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Computes the local view for all provided documents given the mutations in\r\n     * this batch.\r\n     */\r\n    MutationBatch.prototype.applyToLocalDocumentSet = function (documentMap) {\r\n        var _this = this;\r\n        // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations\r\n        // directly (as done in `applyToLocalView()`), we can reduce the complexity\r\n        // to O(n).\r\n        this.mutations.forEach(function (m) {\r\n            var document = documentMap.get(m.key);\r\n            // TODO(mutabledocuments): This method should take a MutableDocumentMap\r\n            // and we should remove this cast.\r\n            var mutableDocument = document;\r\n            _this.applyToLocalView(mutableDocument);\r\n            if (!document.isValidDocument()) {\r\n                mutableDocument.convertToNoDocument(SnapshotVersion.min());\r\n            }\r\n        });\r\n    };\r\n    MutationBatch.prototype.keys = function () {\r\n        return this.mutations.reduce(function (keys, m) { return keys.add(m.key); }, documentKeySet());\r\n    };\r\n    MutationBatch.prototype.isEqual = function (other) {\r\n        return (this.batchId === other.batchId &&\r\n            arrayEquals(this.mutations, other.mutations, function (l, r) { return mutationEquals(l, r); }) &&\r\n            arrayEquals(this.baseMutations, other.baseMutations, function (l, r) { return mutationEquals(l, r); }));\r\n    };\r\n    return MutationBatch;\r\n}());\r\n/** The result of applying a mutation batch to the backend. */\r\nvar MutationBatchResult = /** @class */ (function () {\r\n    function MutationBatchResult(batch, commitVersion, mutationResults, \r\n    /**\r\n     * A pre-computed mapping from each mutated document to the resulting\r\n     * version.\r\n     */\r\n    docVersions) {\r\n        this.batch = batch;\r\n        this.commitVersion = commitVersion;\r\n        this.mutationResults = mutationResults;\r\n        this.docVersions = docVersions;\r\n    }\r\n    /**\r\n     * Creates a new MutationBatchResult for the given batch and results. There\r\n     * must be one result for each mutation in the batch. This static factory\r\n     * caches a document=&gt;version mapping (docVersions).\r\n     */\r\n    MutationBatchResult.from = function (batch, commitVersion, results) {\r\n        hardAssert(batch.mutations.length === results.length);\r\n        var versionMap = documentVersionMap();\r\n        var mutations = batch.mutations;\r\n        for (var i = 0; i < mutations.length; i++) {\r\n            versionMap = versionMap.insert(mutations[i].key, results[i].version);\r\n        }\r\n        return new MutationBatchResult(batch, commitVersion, results, versionMap);\r\n    };\r\n    return MutationBatchResult;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ExistenceFilter = /** @class */ (function () {\r\n    // TODO(b/33078163): just use simplest form of existence filter for now\r\n    function ExistenceFilter(count) {\r\n        this.count = count;\r\n    }\r\n    return ExistenceFilter;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error Codes describing the different ways GRPC can fail. These are copied\r\n * directly from GRPC's sources here:\r\n *\r\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\r\n *\r\n * Important! The names of these identifiers matter because the string forms\r\n * are used for reverse lookups from the webchannel stream. Do NOT change the\r\n * names of these identifiers or change this into a const enum.\r\n */\r\nvar RpcCode;\r\n(function (RpcCode) {\r\n    RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\r\n    RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\r\n    RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\r\n    RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\r\n    RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\r\n    RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\r\n    RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\r\n    RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\r\n    RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\r\n    RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\r\n    RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\r\n    RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\r\n    RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\r\n    RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\r\n    RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\r\n    RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\r\n    RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\r\n})(RpcCode || (RpcCode = {}));\r\n/**\r\n * Determines whether an error code represents a permanent error when received\r\n * in response to a non-write operation.\r\n *\r\n * See isPermanentWriteError for classifying write errors.\r\n */\r\nfunction isPermanentError(code) {\r\n    switch (code) {\r\n        case Code.OK:\r\n            return fail();\r\n        case Code.CANCELLED:\r\n        case Code.UNKNOWN:\r\n        case Code.DEADLINE_EXCEEDED:\r\n        case Code.RESOURCE_EXHAUSTED:\r\n        case Code.INTERNAL:\r\n        case Code.UNAVAILABLE:\r\n        // Unauthenticated means something went wrong with our token and we need\r\n        // to retry with new credentials which will happen automatically.\r\n        case Code.UNAUTHENTICATED:\r\n            return false;\r\n        case Code.INVALID_ARGUMENT:\r\n        case Code.NOT_FOUND:\r\n        case Code.ALREADY_EXISTS:\r\n        case Code.PERMISSION_DENIED:\r\n        case Code.FAILED_PRECONDITION:\r\n        // Aborted might be retried in some scenarios, but that is dependant on\r\n        // the context and should handled individually by the calling code.\r\n        // See https://cloud.google.com/apis/design/errors.\r\n        case Code.ABORTED:\r\n        case Code.OUT_OF_RANGE:\r\n        case Code.UNIMPLEMENTED:\r\n        case Code.DATA_LOSS:\r\n            return true;\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\n/**\r\n * Determines whether an error code represents a permanent error when received\r\n * in response to a write operation.\r\n *\r\n * Write operations must be handled specially because as of b/119437764, ABORTED\r\n * errors on the write stream should be retried too (even though ABORTED errors\r\n * are not generally retryable).\r\n *\r\n * Note that during the initial handshake on the write stream an ABORTED error\r\n * signals that we should discard our stream token (i.e. it is permanent). This\r\n * means a handshake error should be classified with isPermanentError, above.\r\n */\r\nfunction isPermanentWriteError(code) {\r\n    return isPermanentError(code) && code !== Code.ABORTED;\r\n}\r\n/**\r\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\r\n * are not the same as HTTP status codes.\r\n *\r\n * @returns The Code equivalent to the given GRPC status code. Fails if there\r\n *     is no match.\r\n */\r\nfunction mapCodeFromRpcCode(code) {\r\n    if (code === undefined) {\r\n        // This shouldn't normally happen, but in certain error cases (like trying\r\n        // to send invalid proto messages) we may get an error with no GRPC code.\r\n        logError('GRPC error has no .code');\r\n        return Code.UNKNOWN;\r\n    }\r\n    switch (code) {\r\n        case RpcCode.OK:\r\n            return Code.OK;\r\n        case RpcCode.CANCELLED:\r\n            return Code.CANCELLED;\r\n        case RpcCode.UNKNOWN:\r\n            return Code.UNKNOWN;\r\n        case RpcCode.DEADLINE_EXCEEDED:\r\n            return Code.DEADLINE_EXCEEDED;\r\n        case RpcCode.RESOURCE_EXHAUSTED:\r\n            return Code.RESOURCE_EXHAUSTED;\r\n        case RpcCode.INTERNAL:\r\n            return Code.INTERNAL;\r\n        case RpcCode.UNAVAILABLE:\r\n            return Code.UNAVAILABLE;\r\n        case RpcCode.UNAUTHENTICATED:\r\n            return Code.UNAUTHENTICATED;\r\n        case RpcCode.INVALID_ARGUMENT:\r\n            return Code.INVALID_ARGUMENT;\r\n        case RpcCode.NOT_FOUND:\r\n            return Code.NOT_FOUND;\r\n        case RpcCode.ALREADY_EXISTS:\r\n            return Code.ALREADY_EXISTS;\r\n        case RpcCode.PERMISSION_DENIED:\r\n            return Code.PERMISSION_DENIED;\r\n        case RpcCode.FAILED_PRECONDITION:\r\n            return Code.FAILED_PRECONDITION;\r\n        case RpcCode.ABORTED:\r\n            return Code.ABORTED;\r\n        case RpcCode.OUT_OF_RANGE:\r\n            return Code.OUT_OF_RANGE;\r\n        case RpcCode.UNIMPLEMENTED:\r\n            return Code.UNIMPLEMENTED;\r\n        case RpcCode.DATA_LOSS:\r\n            return Code.DATA_LOSS;\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event from the RemoteStore. It is split into targetChanges (changes to the\r\n * state or the set of documents in our watched targets) and documentUpdates\r\n * (changes to the actual documents).\r\n */\r\nvar RemoteEvent = /** @class */ (function () {\r\n    function RemoteEvent(\r\n    /**\r\n     * The snapshot version this event brings us up to, or MIN if not set.\r\n     */\r\n    snapshotVersion, \r\n    /**\r\n     * A map from target to changes to the target. See TargetChange.\r\n     */\r\n    targetChanges, \r\n    /**\r\n     * A set of targets that is known to be inconsistent. Listens for these\r\n     * targets should be re-established without resume tokens.\r\n     */\r\n    targetMismatches, \r\n    /**\r\n     * A set of which documents have changed or been deleted, along with the\r\n     * doc's new values (if not deleted).\r\n     */\r\n    documentUpdates, \r\n    /**\r\n     * A set of which document updates are due only to limbo resolution targets.\r\n     */\r\n    resolvedLimboDocuments) {\r\n        this.snapshotVersion = snapshotVersion;\r\n        this.targetChanges = targetChanges;\r\n        this.targetMismatches = targetMismatches;\r\n        this.documentUpdates = documentUpdates;\r\n        this.resolvedLimboDocuments = resolvedLimboDocuments;\r\n    }\r\n    /**\r\n     * HACK: Views require RemoteEvents in order to determine whether the view is\r\n     * CURRENT, but secondary tabs don't receive remote events. So this method is\r\n     * used to create a synthesized RemoteEvent that can be used to apply a\r\n     * CURRENT status change to a View, for queries executed in a different tab.\r\n     */\r\n    // PORTING NOTE: Multi-tab only\r\n    RemoteEvent.createSynthesizedRemoteEventForCurrentChange = function (targetId, current) {\r\n        var targetChanges = new Map();\r\n        targetChanges.set(targetId, TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current));\r\n        return new RemoteEvent(SnapshotVersion.min(), targetChanges, targetIdSet(), mutableDocumentMap(), documentKeySet());\r\n    };\r\n    return RemoteEvent;\r\n}());\r\n/**\r\n * A TargetChange specifies the set of changes for a specific target as part of\r\n * a RemoteEvent. These changes track which documents are added, modified or\r\n * removed, as well as the target's resume token and whether the target is\r\n * marked CURRENT.\r\n * The actual changes *to* documents are not part of the TargetChange since\r\n * documents may be part of multiple targets.\r\n */\r\nvar TargetChange = /** @class */ (function () {\r\n    function TargetChange(\r\n    /**\r\n     * An opaque, server-assigned token that allows watching a query to be resumed\r\n     * after disconnecting without retransmitting all the data that matches the\r\n     * query. The resume token essentially identifies a point in time from which\r\n     * the server should resume sending results.\r\n     */\r\n    resumeToken, \r\n    /**\r\n     * The \"current\" (synced) status of this target. Note that \"current\"\r\n     * has special meaning in the RPC protocol that implies that a target is\r\n     * both up-to-date and consistent with the rest of the watch stream.\r\n     */\r\n    current, \r\n    /**\r\n     * The set of documents that were newly assigned to this target as part of\r\n     * this remote event.\r\n     */\r\n    addedDocuments, \r\n    /**\r\n     * The set of documents that were already assigned to this target but received\r\n     * an update during this remote event.\r\n     */\r\n    modifiedDocuments, \r\n    /**\r\n     * The set of documents that were removed from this target as part of this\r\n     * remote event.\r\n     */\r\n    removedDocuments) {\r\n        this.resumeToken = resumeToken;\r\n        this.current = current;\r\n        this.addedDocuments = addedDocuments;\r\n        this.modifiedDocuments = modifiedDocuments;\r\n        this.removedDocuments = removedDocuments;\r\n    }\r\n    /**\r\n     * This method is used to create a synthesized TargetChanges that can be used to\r\n     * apply a CURRENT status change to a View (for queries executed in a different\r\n     * tab) or for new queries (to raise snapshots with correct CURRENT status).\r\n     */\r\n    TargetChange.createSynthesizedTargetChangeForCurrentChange = function (targetId, current) {\r\n        return new TargetChange(ByteString.EMPTY_BYTE_STRING, current, documentKeySet(), documentKeySet(), documentKeySet());\r\n    };\r\n    return TargetChange;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a changed document and a list of target ids to which this change\r\n * applies.\r\n *\r\n * If document has been deleted NoDocument will be provided.\r\n */\r\nvar DocumentWatchChange = /** @class */ (function () {\r\n    function DocumentWatchChange(\r\n    /** The new document applies to all of these targets. */\r\n    updatedTargetIds, \r\n    /** The new document is removed from all of these targets. */\r\n    removedTargetIds, \r\n    /** The key of the document for this change. */\r\n    key, \r\n    /**\r\n     * The new document or NoDocument if it was deleted. Is null if the\r\n     * document went out of view without the server sending a new document.\r\n     */\r\n    newDoc) {\r\n        this.updatedTargetIds = updatedTargetIds;\r\n        this.removedTargetIds = removedTargetIds;\r\n        this.key = key;\r\n        this.newDoc = newDoc;\r\n    }\r\n    return DocumentWatchChange;\r\n}());\r\nvar ExistenceFilterChange = /** @class */ (function () {\r\n    function ExistenceFilterChange(targetId, existenceFilter) {\r\n        this.targetId = targetId;\r\n        this.existenceFilter = existenceFilter;\r\n    }\r\n    return ExistenceFilterChange;\r\n}());\r\nvar WatchTargetChange = /** @class */ (function () {\r\n    function WatchTargetChange(\r\n    /** What kind of change occurred to the watch target. */\r\n    state, \r\n    /** The target IDs that were added/removed/set. */\r\n    targetIds, \r\n    /**\r\n     * An opaque, server-assigned token that allows watching a target to be\r\n     * resumed after disconnecting without retransmitting all the data that\r\n     * matches the target. The resume token essentially identifies a point in\r\n     * time from which the server should resume sending results.\r\n     */\r\n    resumeToken, \r\n    /** An RPC error indicating why the watch failed. */\r\n    cause) {\r\n        if (resumeToken === void 0) { resumeToken = ByteString.EMPTY_BYTE_STRING; }\r\n        if (cause === void 0) { cause = null; }\r\n        this.state = state;\r\n        this.targetIds = targetIds;\r\n        this.resumeToken = resumeToken;\r\n        this.cause = cause;\r\n    }\r\n    return WatchTargetChange;\r\n}());\r\n/** Tracks the internal state of a Watch target. */\r\nvar TargetState = /** @class */ (function () {\r\n    function TargetState() {\r\n        /**\r\n         * The number of pending responses (adds or removes) that we are waiting on.\r\n         * We only consider targets active that have no pending responses.\r\n         */\r\n        this.pendingResponses = 0;\r\n        /**\r\n         * Keeps track of the document changes since the last raised snapshot.\r\n         *\r\n         * These changes are continuously updated as we receive document updates and\r\n         * always reflect the current set of changes against the last issued snapshot.\r\n         */\r\n        this.documentChanges = snapshotChangesMap();\r\n        /** See public getters for explanations of these fields. */\r\n        this._resumeToken = ByteString.EMPTY_BYTE_STRING;\r\n        this._current = false;\r\n        /**\r\n         * Whether this target state should be included in the next snapshot. We\r\n         * initialize to true so that newly-added targets are included in the next\r\n         * RemoteEvent.\r\n         */\r\n        this._hasPendingChanges = true;\r\n    }\r\n    Object.defineProperty(TargetState.prototype, \"current\", {\r\n        /**\r\n         * Whether this target has been marked 'current'.\r\n         *\r\n         * 'Current' has special meaning in the RPC protocol: It implies that the\r\n         * Watch backend has sent us all changes up to the point at which the target\r\n         * was added and that the target is consistent with the rest of the watch\r\n         * stream.\r\n         */\r\n        get: function () {\r\n            return this._current;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TargetState.prototype, \"resumeToken\", {\r\n        /** The last resume token sent to us for this target. */\r\n        get: function () {\r\n            return this._resumeToken;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TargetState.prototype, \"isPending\", {\r\n        /** Whether this target has pending target adds or target removes. */\r\n        get: function () {\r\n            return this.pendingResponses !== 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TargetState.prototype, \"hasPendingChanges\", {\r\n        /** Whether we have modified any state that should trigger a snapshot. */\r\n        get: function () {\r\n            return this._hasPendingChanges;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Applies the resume token to the TargetChange, but only when it has a new\r\n     * value. Empty resumeTokens are discarded.\r\n     */\r\n    TargetState.prototype.updateResumeToken = function (resumeToken) {\r\n        if (resumeToken.approximateByteSize() > 0) {\r\n            this._hasPendingChanges = true;\r\n            this._resumeToken = resumeToken;\r\n        }\r\n    };\r\n    /**\r\n     * Creates a target change from the current set of changes.\r\n     *\r\n     * To reset the document changes after raising this snapshot, call\r\n     * `clearPendingChanges()`.\r\n     */\r\n    TargetState.prototype.toTargetChange = function () {\r\n        var addedDocuments = documentKeySet();\r\n        var modifiedDocuments = documentKeySet();\r\n        var removedDocuments = documentKeySet();\r\n        this.documentChanges.forEach(function (key, changeType) {\r\n            switch (changeType) {\r\n                case 0 /* Added */:\r\n                    addedDocuments = addedDocuments.add(key);\r\n                    break;\r\n                case 2 /* Modified */:\r\n                    modifiedDocuments = modifiedDocuments.add(key);\r\n                    break;\r\n                case 1 /* Removed */:\r\n                    removedDocuments = removedDocuments.add(key);\r\n                    break;\r\n                default:\r\n                    fail();\r\n            }\r\n        });\r\n        return new TargetChange(this._resumeToken, this._current, addedDocuments, modifiedDocuments, removedDocuments);\r\n    };\r\n    /**\r\n     * Resets the document changes and sets `hasPendingChanges` to false.\r\n     */\r\n    TargetState.prototype.clearPendingChanges = function () {\r\n        this._hasPendingChanges = false;\r\n        this.documentChanges = snapshotChangesMap();\r\n    };\r\n    TargetState.prototype.addDocumentChange = function (key, changeType) {\r\n        this._hasPendingChanges = true;\r\n        this.documentChanges = this.documentChanges.insert(key, changeType);\r\n    };\r\n    TargetState.prototype.removeDocumentChange = function (key) {\r\n        this._hasPendingChanges = true;\r\n        this.documentChanges = this.documentChanges.remove(key);\r\n    };\r\n    TargetState.prototype.recordPendingTargetRequest = function () {\r\n        this.pendingResponses += 1;\r\n    };\r\n    TargetState.prototype.recordTargetResponse = function () {\r\n        this.pendingResponses -= 1;\r\n    };\r\n    TargetState.prototype.markCurrent = function () {\r\n        this._hasPendingChanges = true;\r\n        this._current = true;\r\n    };\r\n    return TargetState;\r\n}());\r\nvar LOG_TAG$f = 'WatchChangeAggregator';\r\n/**\r\n * A helper class to accumulate watch changes into a RemoteEvent.\r\n */\r\nvar WatchChangeAggregator = /** @class */ (function () {\r\n    function WatchChangeAggregator(metadataProvider) {\r\n        this.metadataProvider = metadataProvider;\r\n        /** The internal state of all tracked targets. */\r\n        this.targetStates = new Map();\r\n        /** Keeps track of the documents to update since the last raised snapshot. */\r\n        this.pendingDocumentUpdates = mutableDocumentMap();\r\n        /** A mapping of document keys to their set of target IDs. */\r\n        this.pendingDocumentTargetMapping = documentTargetMap();\r\n        /**\r\n         * A list of targets with existence filter mismatches. These targets are\r\n         * known to be inconsistent and their listens needs to be re-established by\r\n         * RemoteStore.\r\n         */\r\n        this.pendingTargetResets = new SortedSet(primitiveComparator);\r\n    }\r\n    /**\r\n     * Processes and adds the DocumentWatchChange to the current set of changes.\r\n     */\r\n    WatchChangeAggregator.prototype.handleDocumentChange = function (docChange) {\r\n        for (var _i = 0, _d = docChange.updatedTargetIds; _i < _d.length; _i++) {\r\n            var targetId = _d[_i];\r\n            if (docChange.newDoc && docChange.newDoc.isFoundDocument()) {\r\n                this.addDocumentToTarget(targetId, docChange.newDoc);\r\n            }\r\n            else {\r\n                this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\r\n            }\r\n        }\r\n        for (var _e = 0, _f = docChange.removedTargetIds; _e < _f.length; _e++) {\r\n            var targetId = _f[_e];\r\n            this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\r\n        }\r\n    };\r\n    /** Processes and adds the WatchTargetChange to the current set of changes. */\r\n    WatchChangeAggregator.prototype.handleTargetChange = function (targetChange) {\r\n        var _this = this;\r\n        this.forEachTarget(targetChange, function (targetId) {\r\n            var targetState = _this.ensureTargetState(targetId);\r\n            switch (targetChange.state) {\r\n                case 0 /* NoChange */:\r\n                    if (_this.isActiveTarget(targetId)) {\r\n                        targetState.updateResumeToken(targetChange.resumeToken);\r\n                    }\r\n                    break;\r\n                case 1 /* Added */:\r\n                    // We need to decrement the number of pending acks needed from watch\r\n                    // for this targetId.\r\n                    targetState.recordTargetResponse();\r\n                    if (!targetState.isPending) {\r\n                        // We have a freshly added target, so we need to reset any state\r\n                        // that we had previously. This can happen e.g. when remove and add\r\n                        // back a target for existence filter mismatches.\r\n                        targetState.clearPendingChanges();\r\n                    }\r\n                    targetState.updateResumeToken(targetChange.resumeToken);\r\n                    break;\r\n                case 2 /* Removed */:\r\n                    // We need to keep track of removed targets to we can post-filter and\r\n                    // remove any target changes.\r\n                    // We need to decrement the number of pending acks needed from watch\r\n                    // for this targetId.\r\n                    targetState.recordTargetResponse();\r\n                    if (!targetState.isPending) {\r\n                        _this.removeTarget(targetId);\r\n                    }\r\n                    break;\r\n                case 3 /* Current */:\r\n                    if (_this.isActiveTarget(targetId)) {\r\n                        targetState.markCurrent();\r\n                        targetState.updateResumeToken(targetChange.resumeToken);\r\n                    }\r\n                    break;\r\n                case 4 /* Reset */:\r\n                    if (_this.isActiveTarget(targetId)) {\r\n                        // Reset the target and synthesizes removes for all existing\r\n                        // documents. The backend will re-add any documents that still\r\n                        // match the target before it sends the next global snapshot.\r\n                        _this.resetTarget(targetId);\r\n                        targetState.updateResumeToken(targetChange.resumeToken);\r\n                    }\r\n                    break;\r\n                default:\r\n                    fail();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Iterates over all targetIds that the watch change applies to: either the\r\n     * targetIds explicitly listed in the change or the targetIds of all currently\r\n     * active targets.\r\n     */\r\n    WatchChangeAggregator.prototype.forEachTarget = function (targetChange, fn) {\r\n        var _this = this;\r\n        if (targetChange.targetIds.length > 0) {\r\n            targetChange.targetIds.forEach(fn);\r\n        }\r\n        else {\r\n            this.targetStates.forEach(function (_, targetId) {\r\n                if (_this.isActiveTarget(targetId)) {\r\n                    fn(targetId);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Handles existence filters and synthesizes deletes for filter mismatches.\r\n     * Targets that are invalidated by filter mismatches are added to\r\n     * `pendingTargetResets`.\r\n     */\r\n    WatchChangeAggregator.prototype.handleExistenceFilter = function (watchChange) {\r\n        var targetId = watchChange.targetId;\r\n        var expectedCount = watchChange.existenceFilter.count;\r\n        var targetData = this.targetDataForActiveTarget(targetId);\r\n        if (targetData) {\r\n            var target = targetData.target;\r\n            if (isDocumentTarget(target)) {\r\n                if (expectedCount === 0) {\r\n                    // The existence filter told us the document does not exist. We deduce\r\n                    // that this document does not exist and apply a deleted document to\r\n                    // our updates. Without applying this deleted document there might be\r\n                    // another query that will raise this document as part of a snapshot\r\n                    // until it is resolved, essentially exposing inconsistency between\r\n                    // queries.\r\n                    var key = new DocumentKey(target.path);\r\n                    this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, SnapshotVersion.min()));\r\n                }\r\n                else {\r\n                    hardAssert(expectedCount === 1);\r\n                }\r\n            }\r\n            else {\r\n                var currentSize = this.getCurrentDocumentCountForTarget(targetId);\r\n                if (currentSize !== expectedCount) {\r\n                    // Existence filter mismatch: We reset the mapping and raise a new\r\n                    // snapshot with `isFromCache:true`.\r\n                    this.resetTarget(targetId);\r\n                    this.pendingTargetResets = this.pendingTargetResets.add(targetId);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Converts the currently accumulated state into a remote event at the\r\n     * provided snapshot version. Resets the accumulated changes before returning.\r\n     */\r\n    WatchChangeAggregator.prototype.createRemoteEvent = function (snapshotVersion) {\r\n        var _this = this;\r\n        var targetChanges = new Map();\r\n        this.targetStates.forEach(function (targetState, targetId) {\r\n            var targetData = _this.targetDataForActiveTarget(targetId);\r\n            if (targetData) {\r\n                if (targetState.current && isDocumentTarget(targetData.target)) {\r\n                    // Document queries for document that don't exist can produce an empty\r\n                    // result set. To update our local cache, we synthesize a document\r\n                    // delete if we have not previously received the document. This\r\n                    // resolves the limbo state of the document, removing it from\r\n                    // limboDocumentRefs.\r\n                    //\r\n                    // TODO(dimond): Ideally we would have an explicit lookup target\r\n                    // instead resulting in an explicit delete message and we could\r\n                    // remove this special logic.\r\n                    var key = new DocumentKey(targetData.target.path);\r\n                    if (_this.pendingDocumentUpdates.get(key) === null &&\r\n                        !_this.targetContainsDocument(targetId, key)) {\r\n                        _this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, snapshotVersion));\r\n                    }\r\n                }\r\n                if (targetState.hasPendingChanges) {\r\n                    targetChanges.set(targetId, targetState.toTargetChange());\r\n                    targetState.clearPendingChanges();\r\n                }\r\n            }\r\n        });\r\n        var resolvedLimboDocuments = documentKeySet();\r\n        // We extract the set of limbo-only document updates as the GC logic\r\n        // special-cases documents that do not appear in the target cache.\r\n        //\r\n        // TODO(gsoltis): Expand on this comment once GC is available in the JS\r\n        // client.\r\n        this.pendingDocumentTargetMapping.forEach(function (key, targets) {\r\n            var isOnlyLimboTarget = true;\r\n            targets.forEachWhile(function (targetId) {\r\n                var targetData = _this.targetDataForActiveTarget(targetId);\r\n                if (targetData &&\r\n                    targetData.purpose !== 2 /* LimboResolution */) {\r\n                    isOnlyLimboTarget = false;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            if (isOnlyLimboTarget) {\r\n                resolvedLimboDocuments = resolvedLimboDocuments.add(key);\r\n            }\r\n        });\r\n        var remoteEvent = new RemoteEvent(snapshotVersion, targetChanges, this.pendingTargetResets, this.pendingDocumentUpdates, resolvedLimboDocuments);\r\n        this.pendingDocumentUpdates = mutableDocumentMap();\r\n        this.pendingDocumentTargetMapping = documentTargetMap();\r\n        this.pendingTargetResets = new SortedSet(primitiveComparator);\r\n        return remoteEvent;\r\n    };\r\n    /**\r\n     * Adds the provided document to the internal list of document updates and\r\n     * its document key to the given target's mapping.\r\n     */\r\n    // Visible for testing.\r\n    WatchChangeAggregator.prototype.addDocumentToTarget = function (targetId, document) {\r\n        if (!this.isActiveTarget(targetId)) {\r\n            return;\r\n        }\r\n        var changeType = this.targetContainsDocument(targetId, document.key)\r\n            ? 2 /* Modified */\r\n            : 0 /* Added */;\r\n        var targetState = this.ensureTargetState(targetId);\r\n        targetState.addDocumentChange(document.key, changeType);\r\n        this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(document.key, document);\r\n        this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(document.key, this.ensureDocumentTargetMapping(document.key).add(targetId));\r\n    };\r\n    /**\r\n     * Removes the provided document from the target mapping. If the\r\n     * document no longer matches the target, but the document's state is still\r\n     * known (e.g. we know that the document was deleted or we received the change\r\n     * that caused the filter mismatch), the new document can be provided\r\n     * to update the remote document cache.\r\n     */\r\n    // Visible for testing.\r\n    WatchChangeAggregator.prototype.removeDocumentFromTarget = function (targetId, key, updatedDocument) {\r\n        if (!this.isActiveTarget(targetId)) {\r\n            return;\r\n        }\r\n        var targetState = this.ensureTargetState(targetId);\r\n        if (this.targetContainsDocument(targetId, key)) {\r\n            targetState.addDocumentChange(key, 1 /* Removed */);\r\n        }\r\n        else {\r\n            // The document may have entered and left the target before we raised a\r\n            // snapshot, so we can just ignore the change.\r\n            targetState.removeDocumentChange(key);\r\n        }\r\n        this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, this.ensureDocumentTargetMapping(key).delete(targetId));\r\n        if (updatedDocument) {\r\n            this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(key, updatedDocument);\r\n        }\r\n    };\r\n    WatchChangeAggregator.prototype.removeTarget = function (targetId) {\r\n        this.targetStates.delete(targetId);\r\n    };\r\n    /**\r\n     * Returns the current count of documents in the target. This includes both\r\n     * the number of documents that the LocalStore considers to be part of the\r\n     * target as well as any accumulated changes.\r\n     */\r\n    WatchChangeAggregator.prototype.getCurrentDocumentCountForTarget = function (targetId) {\r\n        var targetState = this.ensureTargetState(targetId);\r\n        var targetChange = targetState.toTargetChange();\r\n        return (this.metadataProvider.getRemoteKeysForTarget(targetId).size +\r\n            targetChange.addedDocuments.size -\r\n            targetChange.removedDocuments.size);\r\n    };\r\n    /**\r\n     * Increment the number of acks needed from watch before we can consider the\r\n     * server to be 'in-sync' with the client's active targets.\r\n     */\r\n    WatchChangeAggregator.prototype.recordPendingTargetRequest = function (targetId) {\r\n        // For each request we get we need to record we need a response for it.\r\n        var targetState = this.ensureTargetState(targetId);\r\n        targetState.recordPendingTargetRequest();\r\n    };\r\n    WatchChangeAggregator.prototype.ensureTargetState = function (targetId) {\r\n        var result = this.targetStates.get(targetId);\r\n        if (!result) {\r\n            result = new TargetState();\r\n            this.targetStates.set(targetId, result);\r\n        }\r\n        return result;\r\n    };\r\n    WatchChangeAggregator.prototype.ensureDocumentTargetMapping = function (key) {\r\n        var targetMapping = this.pendingDocumentTargetMapping.get(key);\r\n        if (!targetMapping) {\r\n            targetMapping = new SortedSet(primitiveComparator);\r\n            this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, targetMapping);\r\n        }\r\n        return targetMapping;\r\n    };\r\n    /**\r\n     * Verifies that the user is still interested in this target (by calling\r\n     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs\r\n     * from watch.\r\n     */\r\n    WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {\r\n        var targetActive = this.targetDataForActiveTarget(targetId) !== null;\r\n        if (!targetActive) {\r\n            logDebug(LOG_TAG$f, 'Detected inactive target', targetId);\r\n        }\r\n        return targetActive;\r\n    };\r\n    /**\r\n     * Returns the TargetData for an active target (i.e. a target that the user\r\n     * is still interested in that has no outstanding target change requests).\r\n     */\r\n    WatchChangeAggregator.prototype.targetDataForActiveTarget = function (targetId) {\r\n        var targetState = this.targetStates.get(targetId);\r\n        return targetState && targetState.isPending\r\n            ? null\r\n            : this.metadataProvider.getTargetDataForTarget(targetId);\r\n    };\r\n    /**\r\n     * Resets the state of a Watch target to its initial state (e.g. sets\r\n     * 'current' to false, clears the resume token and removes its target mapping\r\n     * from all documents).\r\n     */\r\n    WatchChangeAggregator.prototype.resetTarget = function (targetId) {\r\n        var _this = this;\r\n        this.targetStates.set(targetId, new TargetState());\r\n        // Trigger removal for any documents currently mapped to this target.\r\n        // These removals will be part of the initial snapshot if Watch does not\r\n        // resend these documents.\r\n        var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\r\n        existingKeys.forEach(function (key) {\r\n            _this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/ null);\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether the LocalStore considers the document to be part of the\r\n     * specified target.\r\n     */\r\n    WatchChangeAggregator.prototype.targetContainsDocument = function (targetId, key) {\r\n        var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\r\n        return existingKeys.has(key);\r\n    };\r\n    return WatchChangeAggregator;\r\n}());\r\nfunction documentTargetMap() {\r\n    return new SortedMap(DocumentKey.comparator);\r\n}\r\nfunction snapshotChangesMap() {\r\n    return new SortedMap(DocumentKey.comparator);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DIRECTIONS = (function () {\r\n    var dirs = {};\r\n    dirs[\"asc\" /* ASCENDING */] = 'ASCENDING';\r\n    dirs[\"desc\" /* DESCENDING */] = 'DESCENDING';\r\n    return dirs;\r\n})();\r\nvar OPERATORS = (function () {\r\n    var ops = {};\r\n    ops[\"<\" /* LESS_THAN */] = 'LESS_THAN';\r\n    ops[\"<=\" /* LESS_THAN_OR_EQUAL */] = 'LESS_THAN_OR_EQUAL';\r\n    ops[\">\" /* GREATER_THAN */] = 'GREATER_THAN';\r\n    ops[\">=\" /* GREATER_THAN_OR_EQUAL */] = 'GREATER_THAN_OR_EQUAL';\r\n    ops[\"==\" /* EQUAL */] = 'EQUAL';\r\n    ops[\"!=\" /* NOT_EQUAL */] = 'NOT_EQUAL';\r\n    ops[\"array-contains\" /* ARRAY_CONTAINS */] = 'ARRAY_CONTAINS';\r\n    ops[\"in\" /* IN */] = 'IN';\r\n    ops[\"not-in\" /* NOT_IN */] = 'NOT_IN';\r\n    ops[\"array-contains-any\" /* ARRAY_CONTAINS_ANY */] = 'ARRAY_CONTAINS_ANY';\r\n    return ops;\r\n})();\r\nfunction assertPresent(value, description) {\r\n}\r\n/**\r\n * This class generates JsonObject values for the Datastore API suitable for\r\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\r\n *\r\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\r\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\r\n * format.\r\n *\r\n * For a description of the Proto3 JSON format check\r\n * https://developers.google.com/protocol-buffers/docs/proto3#json\r\n *\r\n * TODO(klimt): We can remove the databaseId argument if we keep the full\r\n * resource name in documents.\r\n */\r\nvar JsonProtoSerializer = /** @class */ (function () {\r\n    function JsonProtoSerializer(databaseId, useProto3Json) {\r\n        this.databaseId = databaseId;\r\n        this.useProto3Json = useProto3Json;\r\n    }\r\n    return JsonProtoSerializer;\r\n}());\r\nfunction fromRpcStatus(status) {\r\n    var code = status.code === undefined ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);\r\n    return new FirestoreError(code, status.message || '');\r\n}\r\n/**\r\n * Returns a value for a number (or null) that's appropriate to put into\r\n * a google.protobuf.Int32Value proto.\r\n * DO NOT USE THIS FOR ANYTHING ELSE.\r\n * This method cheats. It's typed as returning \"number\" because that's what\r\n * our generated proto interfaces say Int32Value must be. But GRPC actually\r\n * expects a { value: <number> } struct.\r\n */\r\nfunction toInt32Proto(serializer, val) {\r\n    if (serializer.useProto3Json || isNullOrUndefined(val)) {\r\n        return val;\r\n    }\r\n    else {\r\n        return { value: val };\r\n    }\r\n}\r\n/**\r\n * Returns a number (or null) from a google.protobuf.Int32Value proto.\r\n */\r\nfunction fromInt32Proto(val) {\r\n    var result;\r\n    if (typeof val === 'object') {\r\n        result = val.value;\r\n    }\r\n    else {\r\n        result = val;\r\n    }\r\n    return isNullOrUndefined(result) ? null : result;\r\n}\r\n/**\r\n * Returns a value for a Date that's appropriate to put into a proto.\r\n */\r\nfunction toTimestamp(serializer, timestamp) {\r\n    if (serializer.useProto3Json) {\r\n        // Serialize to ISO-8601 date format, but with full nano resolution.\r\n        // Since JS Date has only millis, let's only use it for the seconds and\r\n        // then manually add the fractions to the end.\r\n        var jsDateStr = new Date(timestamp.seconds * 1000).toISOString();\r\n        // Remove .xxx frac part and Z in the end.\r\n        var strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', '');\r\n        // Pad the fraction out to 9 digits (nanos).\r\n        var nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\r\n        return strUntilSeconds + \".\" + nanoStr + \"Z\";\r\n    }\r\n    else {\r\n        return {\r\n            seconds: '' + timestamp.seconds,\r\n            nanos: timestamp.nanoseconds\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        };\r\n    }\r\n}\r\nfunction fromTimestamp(date) {\r\n    var timestamp = normalizeTimestamp(date);\r\n    return new Timestamp(timestamp.seconds, timestamp.nanos);\r\n}\r\n/**\r\n * Returns a value for bytes that's appropriate to put in a proto.\r\n *\r\n * Visible for testing.\r\n */\r\nfunction toBytes(serializer, bytes) {\r\n    if (serializer.useProto3Json) {\r\n        return bytes.toBase64();\r\n    }\r\n    else {\r\n        return bytes.toUint8Array();\r\n    }\r\n}\r\n/**\r\n * Returns a ByteString based on the proto string value.\r\n */\r\nfunction fromBytes(serializer, value) {\r\n    if (serializer.useProto3Json) {\r\n        hardAssert(value === undefined || typeof value === 'string');\r\n        return ByteString.fromBase64String(value ? value : '');\r\n    }\r\n    else {\r\n        hardAssert(value === undefined || value instanceof Uint8Array);\r\n        return ByteString.fromUint8Array(value ? value : new Uint8Array());\r\n    }\r\n}\r\nfunction toVersion(serializer, version) {\r\n    return toTimestamp(serializer, version.toTimestamp());\r\n}\r\nfunction fromVersion(version) {\r\n    hardAssert(!!version);\r\n    return SnapshotVersion.fromTimestamp(fromTimestamp(version));\r\n}\r\nfunction toResourceName(databaseId, path) {\r\n    return fullyQualifiedPrefixPath(databaseId)\r\n        .child('documents')\r\n        .child(path)\r\n        .canonicalString();\r\n}\r\nfunction fromResourceName(name) {\r\n    var resource = ResourcePath.fromString(name);\r\n    hardAssert(isValidResourceName(resource));\r\n    return resource;\r\n}\r\nfunction toName(serializer, key) {\r\n    return toResourceName(serializer.databaseId, key.path);\r\n}\r\nfunction fromName(serializer, name) {\r\n    var resource = fromResourceName(name);\r\n    if (resource.get(1) !== serializer.databaseId.projectId) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Tried to deserialize key from different project: ' +\r\n            resource.get(1) +\r\n            ' vs ' +\r\n            serializer.databaseId.projectId);\r\n    }\r\n    if (resource.get(3) !== serializer.databaseId.database) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Tried to deserialize key from different database: ' +\r\n            resource.get(3) +\r\n            ' vs ' +\r\n            serializer.databaseId.database);\r\n    }\r\n    return new DocumentKey(extractLocalPathFromResourceName(resource));\r\n}\r\nfunction toQueryPath(serializer, path) {\r\n    return toResourceName(serializer.databaseId, path);\r\n}\r\nfunction fromQueryPath(name) {\r\n    var resourceName = fromResourceName(name);\r\n    // In v1beta1 queries for collections at the root did not have a trailing\r\n    // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\r\n    // ability to read the v1beta1 form for compatibility with queries persisted\r\n    // in the local target cache.\r\n    if (resourceName.length === 4) {\r\n        return ResourcePath.emptyPath();\r\n    }\r\n    return extractLocalPathFromResourceName(resourceName);\r\n}\r\nfunction getEncodedDatabaseId(serializer) {\r\n    var path = new ResourcePath([\r\n        'projects',\r\n        serializer.databaseId.projectId,\r\n        'databases',\r\n        serializer.databaseId.database\r\n    ]);\r\n    return path.canonicalString();\r\n}\r\nfunction fullyQualifiedPrefixPath(databaseId) {\r\n    return new ResourcePath([\r\n        'projects',\r\n        databaseId.projectId,\r\n        'databases',\r\n        databaseId.database\r\n    ]);\r\n}\r\nfunction extractLocalPathFromResourceName(resourceName) {\r\n    hardAssert(resourceName.length > 4 && resourceName.get(4) === 'documents');\r\n    return resourceName.popFirst(5);\r\n}\r\n/** Creates a Document proto from key and fields (but no create/update time) */\r\nfunction toMutationDocument(serializer, key, fields) {\r\n    return {\r\n        name: toName(serializer, key),\r\n        fields: fields.value.mapValue.fields\r\n    };\r\n}\r\nfunction toDocument(serializer, document) {\r\n    return {\r\n        name: toName(serializer, document.key),\r\n        fields: document.data.value.mapValue.fields,\r\n        updateTime: toTimestamp(serializer, document.version.toTimestamp())\r\n    };\r\n}\r\nfunction fromDocument(serializer, document, hasCommittedMutations) {\r\n    var key = fromName(serializer, document.name);\r\n    var version = fromVersion(document.updateTime);\r\n    var data = new ObjectValue({ mapValue: { fields: document.fields } });\r\n    var result = MutableDocument.newFoundDocument(key, version, data);\r\n    if (hasCommittedMutations) {\r\n        result.setHasCommittedMutations();\r\n    }\r\n    return hasCommittedMutations ? result.setHasCommittedMutations() : result;\r\n}\r\nfunction fromFound(serializer, doc) {\r\n    hardAssert(!!doc.found);\r\n    assertPresent(doc.found.name);\r\n    assertPresent(doc.found.updateTime);\r\n    var key = fromName(serializer, doc.found.name);\r\n    var version = fromVersion(doc.found.updateTime);\r\n    var data = new ObjectValue({ mapValue: { fields: doc.found.fields } });\r\n    return MutableDocument.newFoundDocument(key, version, data);\r\n}\r\nfunction fromMissing(serializer, result) {\r\n    hardAssert(!!result.missing);\r\n    hardAssert(!!result.readTime);\r\n    var key = fromName(serializer, result.missing);\r\n    var version = fromVersion(result.readTime);\r\n    return MutableDocument.newNoDocument(key, version);\r\n}\r\nfunction fromBatchGetDocumentsResponse(serializer, result) {\r\n    if ('found' in result) {\r\n        return fromFound(serializer, result);\r\n    }\r\n    else if ('missing' in result) {\r\n        return fromMissing(serializer, result);\r\n    }\r\n    return fail();\r\n}\r\nfunction fromWatchChange(serializer, change) {\r\n    var watchChange;\r\n    if ('targetChange' in change) {\r\n        assertPresent(change.targetChange);\r\n        // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\r\n        // if unset\r\n        var state = fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\r\n        var targetIds = change.targetChange.targetIds || [];\r\n        var resumeToken = fromBytes(serializer, change.targetChange.resumeToken);\r\n        var causeProto = change.targetChange.cause;\r\n        var cause = causeProto && fromRpcStatus(causeProto);\r\n        watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);\r\n    }\r\n    else if ('documentChange' in change) {\r\n        assertPresent(change.documentChange);\r\n        var entityChange = change.documentChange;\r\n        assertPresent(entityChange.document);\r\n        assertPresent(entityChange.document.name);\r\n        assertPresent(entityChange.document.updateTime);\r\n        var key = fromName(serializer, entityChange.document.name);\r\n        var version_1 = fromVersion(entityChange.document.updateTime);\r\n        var data = new ObjectValue({\r\n            mapValue: { fields: entityChange.document.fields }\r\n        });\r\n        var doc_1 = MutableDocument.newFoundDocument(key, version_1, data);\r\n        var updatedTargetIds = entityChange.targetIds || [];\r\n        var removedTargetIds = entityChange.removedTargetIds || [];\r\n        watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc_1.key, doc_1);\r\n    }\r\n    else if ('documentDelete' in change) {\r\n        assertPresent(change.documentDelete);\r\n        var docDelete = change.documentDelete;\r\n        assertPresent(docDelete.document);\r\n        var key = fromName(serializer, docDelete.document);\r\n        var version_2 = docDelete.readTime\r\n            ? fromVersion(docDelete.readTime)\r\n            : SnapshotVersion.min();\r\n        var doc_2 = MutableDocument.newNoDocument(key, version_2);\r\n        var removedTargetIds = docDelete.removedTargetIds || [];\r\n        watchChange = new DocumentWatchChange([], removedTargetIds, doc_2.key, doc_2);\r\n    }\r\n    else if ('documentRemove' in change) {\r\n        assertPresent(change.documentRemove);\r\n        var docRemove = change.documentRemove;\r\n        assertPresent(docRemove.document);\r\n        var key = fromName(serializer, docRemove.document);\r\n        var removedTargetIds = docRemove.removedTargetIds || [];\r\n        watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\r\n    }\r\n    else if ('filter' in change) {\r\n        // TODO(dimond): implement existence filter parsing with strategy.\r\n        assertPresent(change.filter);\r\n        var filter = change.filter;\r\n        assertPresent(filter.targetId);\r\n        var count = filter.count || 0;\r\n        var existenceFilter = new ExistenceFilter(count);\r\n        var targetId = filter.targetId;\r\n        watchChange = new ExistenceFilterChange(targetId, existenceFilter);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n    return watchChange;\r\n}\r\nfunction fromWatchTargetChangeState(state) {\r\n    if (state === 'NO_CHANGE') {\r\n        return 0 /* NoChange */;\r\n    }\r\n    else if (state === 'ADD') {\r\n        return 1 /* Added */;\r\n    }\r\n    else if (state === 'REMOVE') {\r\n        return 2 /* Removed */;\r\n    }\r\n    else if (state === 'CURRENT') {\r\n        return 3 /* Current */;\r\n    }\r\n    else if (state === 'RESET') {\r\n        return 4 /* Reset */;\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction versionFromListenResponse(change) {\r\n    // We have only reached a consistent snapshot for the entire stream if there\r\n    // is a read_time set and it applies to all targets (i.e. the list of\r\n    // targets is empty). The backend is guaranteed to send such responses.\r\n    if (!('targetChange' in change)) {\r\n        return SnapshotVersion.min();\r\n    }\r\n    var targetChange = change.targetChange;\r\n    if (targetChange.targetIds && targetChange.targetIds.length) {\r\n        return SnapshotVersion.min();\r\n    }\r\n    if (!targetChange.readTime) {\r\n        return SnapshotVersion.min();\r\n    }\r\n    return fromVersion(targetChange.readTime);\r\n}\r\nfunction toMutation(serializer, mutation) {\r\n    var result;\r\n    if (mutation instanceof SetMutation) {\r\n        result = {\r\n            update: toMutationDocument(serializer, mutation.key, mutation.value)\r\n        };\r\n    }\r\n    else if (mutation instanceof DeleteMutation) {\r\n        result = { delete: toName(serializer, mutation.key) };\r\n    }\r\n    else if (mutation instanceof PatchMutation) {\r\n        result = {\r\n            update: toMutationDocument(serializer, mutation.key, mutation.data),\r\n            updateMask: toDocumentMask(mutation.fieldMask)\r\n        };\r\n    }\r\n    else if (mutation instanceof VerifyMutation) {\r\n        result = {\r\n            verify: toName(serializer, mutation.key)\r\n        };\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n    if (mutation.fieldTransforms.length > 0) {\r\n        result.updateTransforms = mutation.fieldTransforms.map(function (transform) { return toFieldTransform(serializer, transform); });\r\n    }\r\n    if (!mutation.precondition.isNone) {\r\n        result.currentDocument = toPrecondition(serializer, mutation.precondition);\r\n    }\r\n    return result;\r\n}\r\nfunction fromMutation(serializer, proto) {\r\n    var precondition = proto.currentDocument\r\n        ? fromPrecondition(proto.currentDocument)\r\n        : Precondition.none();\r\n    var fieldTransforms = proto.updateTransforms\r\n        ? proto.updateTransforms.map(function (transform) { return fromFieldTransform(serializer, transform); })\r\n        : [];\r\n    if (proto.update) {\r\n        assertPresent(proto.update.name);\r\n        var key = fromName(serializer, proto.update.name);\r\n        var value = new ObjectValue({\r\n            mapValue: { fields: proto.update.fields }\r\n        });\r\n        if (proto.updateMask) {\r\n            var fieldMask = fromDocumentMask(proto.updateMask);\r\n            return new PatchMutation(key, value, fieldMask, precondition, fieldTransforms);\r\n        }\r\n        else {\r\n            return new SetMutation(key, value, precondition, fieldTransforms);\r\n        }\r\n    }\r\n    else if (proto.delete) {\r\n        var key = fromName(serializer, proto.delete);\r\n        return new DeleteMutation(key, precondition);\r\n    }\r\n    else if (proto.verify) {\r\n        var key = fromName(serializer, proto.verify);\r\n        return new VerifyMutation(key, precondition);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction toPrecondition(serializer, precondition) {\r\n    if (precondition.updateTime !== undefined) {\r\n        return {\r\n            updateTime: toVersion(serializer, precondition.updateTime)\r\n        };\r\n    }\r\n    else if (precondition.exists !== undefined) {\r\n        return { exists: precondition.exists };\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction fromPrecondition(precondition) {\r\n    if (precondition.updateTime !== undefined) {\r\n        return Precondition.updateTime(fromVersion(precondition.updateTime));\r\n    }\r\n    else if (precondition.exists !== undefined) {\r\n        return Precondition.exists(precondition.exists);\r\n    }\r\n    else {\r\n        return Precondition.none();\r\n    }\r\n}\r\nfunction fromWriteResult(proto, commitTime) {\r\n    // NOTE: Deletes don't have an updateTime.\r\n    var version = proto.updateTime\r\n        ? fromVersion(proto.updateTime)\r\n        : fromVersion(commitTime);\r\n    if (version.isEqual(SnapshotVersion.min())) {\r\n        // The Firestore Emulator currently returns an update time of 0 for\r\n        // deletes of non-existing documents (rather than null). This breaks the\r\n        // test \"get deleted doc while offline with source=cache\" as NoDocuments\r\n        // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\r\n        // TODO(#2149): Remove this when Emulator is fixed\r\n        version = fromVersion(commitTime);\r\n    }\r\n    return new MutationResult(version, proto.transformResults || []);\r\n}\r\nfunction fromWriteResults(protos, commitTime) {\r\n    if (protos && protos.length > 0) {\r\n        hardAssert(commitTime !== undefined);\r\n        return protos.map(function (proto) { return fromWriteResult(proto, commitTime); });\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction toFieldTransform(serializer, fieldTransform) {\r\n    var transform = fieldTransform.transform;\r\n    if (transform instanceof ServerTimestampTransform) {\r\n        return {\r\n            fieldPath: fieldTransform.field.canonicalString(),\r\n            setToServerValue: 'REQUEST_TIME'\r\n        };\r\n    }\r\n    else if (transform instanceof ArrayUnionTransformOperation) {\r\n        return {\r\n            fieldPath: fieldTransform.field.canonicalString(),\r\n            appendMissingElements: {\r\n                values: transform.elements\r\n            }\r\n        };\r\n    }\r\n    else if (transform instanceof ArrayRemoveTransformOperation) {\r\n        return {\r\n            fieldPath: fieldTransform.field.canonicalString(),\r\n            removeAllFromArray: {\r\n                values: transform.elements\r\n            }\r\n        };\r\n    }\r\n    else if (transform instanceof NumericIncrementTransformOperation) {\r\n        return {\r\n            fieldPath: fieldTransform.field.canonicalString(),\r\n            increment: transform.operand\r\n        };\r\n    }\r\n    else {\r\n        throw fail();\r\n    }\r\n}\r\nfunction fromFieldTransform(serializer, proto) {\r\n    var transform = null;\r\n    if ('setToServerValue' in proto) {\r\n        hardAssert(proto.setToServerValue === 'REQUEST_TIME');\r\n        transform = new ServerTimestampTransform();\r\n    }\r\n    else if ('appendMissingElements' in proto) {\r\n        var values = proto.appendMissingElements.values || [];\r\n        transform = new ArrayUnionTransformOperation(values);\r\n    }\r\n    else if ('removeAllFromArray' in proto) {\r\n        var values = proto.removeAllFromArray.values || [];\r\n        transform = new ArrayRemoveTransformOperation(values);\r\n    }\r\n    else if ('increment' in proto) {\r\n        transform = new NumericIncrementTransformOperation(serializer, proto.increment);\r\n    }\r\n    else {\r\n        fail();\r\n    }\r\n    var fieldPath = FieldPath$1.fromServerFormat(proto.fieldPath);\r\n    return new FieldTransform(fieldPath, transform);\r\n}\r\nfunction toDocumentsTarget(serializer, target) {\r\n    return { documents: [toQueryPath(serializer, target.path)] };\r\n}\r\nfunction fromDocumentsTarget(documentsTarget) {\r\n    var count = documentsTarget.documents.length;\r\n    hardAssert(count === 1);\r\n    var name = documentsTarget.documents[0];\r\n    return queryToTarget(newQueryForPath(fromQueryPath(name)));\r\n}\r\nfunction toQueryTarget(serializer, target) {\r\n    // Dissect the path into parent, collectionId, and optional key filter.\r\n    var result = { structuredQuery: {} };\r\n    var path = target.path;\r\n    if (target.collectionGroup !== null) {\r\n        result.parent = toQueryPath(serializer, path);\r\n        result.structuredQuery.from = [\r\n            {\r\n                collectionId: target.collectionGroup,\r\n                allDescendants: true\r\n            }\r\n        ];\r\n    }\r\n    else {\r\n        result.parent = toQueryPath(serializer, path.popLast());\r\n        result.structuredQuery.from = [{ collectionId: path.lastSegment() }];\r\n    }\r\n    var where = toFilter(target.filters);\r\n    if (where) {\r\n        result.structuredQuery.where = where;\r\n    }\r\n    var orderBy = toOrder(target.orderBy);\r\n    if (orderBy) {\r\n        result.structuredQuery.orderBy = orderBy;\r\n    }\r\n    var limit = toInt32Proto(serializer, target.limit);\r\n    if (limit !== null) {\r\n        result.structuredQuery.limit = limit;\r\n    }\r\n    if (target.startAt) {\r\n        result.structuredQuery.startAt = toCursor(target.startAt);\r\n    }\r\n    if (target.endAt) {\r\n        result.structuredQuery.endAt = toCursor(target.endAt);\r\n    }\r\n    return result;\r\n}\r\nfunction convertQueryTargetToQuery(target) {\r\n    var path = fromQueryPath(target.parent);\r\n    var query = target.structuredQuery;\r\n    var fromCount = query.from ? query.from.length : 0;\r\n    var collectionGroup = null;\r\n    if (fromCount > 0) {\r\n        hardAssert(fromCount === 1);\r\n        var from = query.from[0];\r\n        if (from.allDescendants) {\r\n            collectionGroup = from.collectionId;\r\n        }\r\n        else {\r\n            path = path.child(from.collectionId);\r\n        }\r\n    }\r\n    var filterBy = [];\r\n    if (query.where) {\r\n        filterBy = fromFilter(query.where);\r\n    }\r\n    var orderBy = [];\r\n    if (query.orderBy) {\r\n        orderBy = fromOrder(query.orderBy);\r\n    }\r\n    var limit = null;\r\n    if (query.limit) {\r\n        limit = fromInt32Proto(query.limit);\r\n    }\r\n    var startAt = null;\r\n    if (query.startAt) {\r\n        startAt = fromCursor(query.startAt);\r\n    }\r\n    var endAt = null;\r\n    if (query.endAt) {\r\n        endAt = fromCursor(query.endAt);\r\n    }\r\n    return newQuery(path, collectionGroup, orderBy, filterBy, limit, \"F\" /* First */, startAt, endAt);\r\n}\r\nfunction fromQueryTarget(target) {\r\n    return queryToTarget(convertQueryTargetToQuery(target));\r\n}\r\nfunction toListenRequestLabels(serializer, targetData) {\r\n    var value = toLabel(serializer, targetData.purpose);\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    else {\r\n        return {\r\n            'goog-listen-tags': value\r\n        };\r\n    }\r\n}\r\nfunction toLabel(serializer, purpose) {\r\n    switch (purpose) {\r\n        case 0 /* Listen */:\r\n            return null;\r\n        case 1 /* ExistenceFilterMismatch */:\r\n            return 'existence-filter-mismatch';\r\n        case 2 /* LimboResolution */:\r\n            return 'limbo-document';\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\nfunction toTarget(serializer, targetData) {\r\n    var result;\r\n    var target = targetData.target;\r\n    if (isDocumentTarget(target)) {\r\n        result = { documents: toDocumentsTarget(serializer, target) };\r\n    }\r\n    else {\r\n        result = { query: toQueryTarget(serializer, target) };\r\n    }\r\n    result.targetId = targetData.targetId;\r\n    if (targetData.resumeToken.approximateByteSize() > 0) {\r\n        result.resumeToken = toBytes(serializer, targetData.resumeToken);\r\n    }\r\n    else if (targetData.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {\r\n        // TODO(wuandy): Consider removing above check because it is most likely true.\r\n        // Right now, many tests depend on this behaviour though (leaving min() out\r\n        // of serialization).\r\n        result.readTime = toTimestamp(serializer, targetData.snapshotVersion.toTimestamp());\r\n    }\r\n    return result;\r\n}\r\nfunction toFilter(filters) {\r\n    if (filters.length === 0) {\r\n        return;\r\n    }\r\n    var protos = filters.map(function (filter) {\r\n        return toUnaryOrFieldFilter(filter);\r\n    });\r\n    if (protos.length === 1) {\r\n        return protos[0];\r\n    }\r\n    return { compositeFilter: { op: 'AND', filters: protos } };\r\n}\r\nfunction fromFilter(filter) {\r\n    if (!filter) {\r\n        return [];\r\n    }\r\n    else if (filter.unaryFilter !== undefined) {\r\n        return [fromUnaryFilter(filter)];\r\n    }\r\n    else if (filter.fieldFilter !== undefined) {\r\n        return [fromFieldFilter(filter)];\r\n    }\r\n    else if (filter.compositeFilter !== undefined) {\r\n        return filter.compositeFilter\r\n            .filters.map(function (f) { return fromFilter(f); })\r\n            .reduce(function (accum, current) { return accum.concat(current); });\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction toOrder(orderBys) {\r\n    if (orderBys.length === 0) {\r\n        return;\r\n    }\r\n    return orderBys.map(function (order) { return toPropertyOrder(order); });\r\n}\r\nfunction fromOrder(orderBys) {\r\n    return orderBys.map(function (order) { return fromPropertyOrder(order); });\r\n}\r\nfunction toCursor(cursor) {\r\n    return {\r\n        before: cursor.before,\r\n        values: cursor.position\r\n    };\r\n}\r\nfunction fromCursor(cursor) {\r\n    var before = !!cursor.before;\r\n    var position = cursor.values || [];\r\n    return new Bound(position, before);\r\n}\r\n// visible for testing\r\nfunction toDirection(dir) {\r\n    return DIRECTIONS[dir];\r\n}\r\n// visible for testing\r\nfunction fromDirection(dir) {\r\n    switch (dir) {\r\n        case 'ASCENDING':\r\n            return \"asc\" /* ASCENDING */;\r\n        case 'DESCENDING':\r\n            return \"desc\" /* DESCENDING */;\r\n        default:\r\n            return undefined;\r\n    }\r\n}\r\n// visible for testing\r\nfunction toOperatorName(op) {\r\n    return OPERATORS[op];\r\n}\r\nfunction fromOperatorName(op) {\r\n    switch (op) {\r\n        case 'EQUAL':\r\n            return \"==\" /* EQUAL */;\r\n        case 'NOT_EQUAL':\r\n            return \"!=\" /* NOT_EQUAL */;\r\n        case 'GREATER_THAN':\r\n            return \">\" /* GREATER_THAN */;\r\n        case 'GREATER_THAN_OR_EQUAL':\r\n            return \">=\" /* GREATER_THAN_OR_EQUAL */;\r\n        case 'LESS_THAN':\r\n            return \"<\" /* LESS_THAN */;\r\n        case 'LESS_THAN_OR_EQUAL':\r\n            return \"<=\" /* LESS_THAN_OR_EQUAL */;\r\n        case 'ARRAY_CONTAINS':\r\n            return \"array-contains\" /* ARRAY_CONTAINS */;\r\n        case 'IN':\r\n            return \"in\" /* IN */;\r\n        case 'NOT_IN':\r\n            return \"not-in\" /* NOT_IN */;\r\n        case 'ARRAY_CONTAINS_ANY':\r\n            return \"array-contains-any\" /* ARRAY_CONTAINS_ANY */;\r\n        case 'OPERATOR_UNSPECIFIED':\r\n            return fail();\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\nfunction toFieldPathReference(path) {\r\n    return { fieldPath: path.canonicalString() };\r\n}\r\nfunction fromFieldPathReference(fieldReference) {\r\n    return FieldPath$1.fromServerFormat(fieldReference.fieldPath);\r\n}\r\n// visible for testing\r\nfunction toPropertyOrder(orderBy) {\r\n    return {\r\n        field: toFieldPathReference(orderBy.field),\r\n        direction: toDirection(orderBy.dir)\r\n    };\r\n}\r\nfunction fromPropertyOrder(orderBy) {\r\n    return new OrderBy(fromFieldPathReference(orderBy.field), fromDirection(orderBy.direction));\r\n}\r\nfunction fromFieldFilter(filter) {\r\n    return FieldFilter.create(fromFieldPathReference(filter.fieldFilter.field), fromOperatorName(filter.fieldFilter.op), filter.fieldFilter.value);\r\n}\r\n// visible for testing\r\nfunction toUnaryOrFieldFilter(filter) {\r\n    if (filter.op === \"==\" /* EQUAL */) {\r\n        if (isNanValue(filter.value)) {\r\n            return {\r\n                unaryFilter: {\r\n                    field: toFieldPathReference(filter.field),\r\n                    op: 'IS_NAN'\r\n                }\r\n            };\r\n        }\r\n        else if (isNullValue(filter.value)) {\r\n            return {\r\n                unaryFilter: {\r\n                    field: toFieldPathReference(filter.field),\r\n                    op: 'IS_NULL'\r\n                }\r\n            };\r\n        }\r\n    }\r\n    else if (filter.op === \"!=\" /* NOT_EQUAL */) {\r\n        if (isNanValue(filter.value)) {\r\n            return {\r\n                unaryFilter: {\r\n                    field: toFieldPathReference(filter.field),\r\n                    op: 'IS_NOT_NAN'\r\n                }\r\n            };\r\n        }\r\n        else if (isNullValue(filter.value)) {\r\n            return {\r\n                unaryFilter: {\r\n                    field: toFieldPathReference(filter.field),\r\n                    op: 'IS_NOT_NULL'\r\n                }\r\n            };\r\n        }\r\n    }\r\n    return {\r\n        fieldFilter: {\r\n            field: toFieldPathReference(filter.field),\r\n            op: toOperatorName(filter.op),\r\n            value: filter.value\r\n        }\r\n    };\r\n}\r\nfunction fromUnaryFilter(filter) {\r\n    switch (filter.unaryFilter.op) {\r\n        case 'IS_NAN':\r\n            var nanField = fromFieldPathReference(filter.unaryFilter.field);\r\n            return FieldFilter.create(nanField, \"==\" /* EQUAL */, {\r\n                doubleValue: NaN\r\n            });\r\n        case 'IS_NULL':\r\n            var nullField = fromFieldPathReference(filter.unaryFilter.field);\r\n            return FieldFilter.create(nullField, \"==\" /* EQUAL */, {\r\n                nullValue: 'NULL_VALUE'\r\n            });\r\n        case 'IS_NOT_NAN':\r\n            var notNanField = fromFieldPathReference(filter.unaryFilter.field);\r\n            return FieldFilter.create(notNanField, \"!=\" /* NOT_EQUAL */, {\r\n                doubleValue: NaN\r\n            });\r\n        case 'IS_NOT_NULL':\r\n            var notNullField = fromFieldPathReference(filter.unaryFilter.field);\r\n            return FieldFilter.create(notNullField, \"!=\" /* NOT_EQUAL */, {\r\n                nullValue: 'NULL_VALUE'\r\n            });\r\n        case 'OPERATOR_UNSPECIFIED':\r\n            return fail();\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\nfunction toDocumentMask(fieldMask) {\r\n    var canonicalFields = [];\r\n    fieldMask.fields.forEach(function (field) { return canonicalFields.push(field.canonicalString()); });\r\n    return {\r\n        fieldPaths: canonicalFields\r\n    };\r\n}\r\nfunction fromDocumentMask(proto) {\r\n    var paths = proto.fieldPaths || [];\r\n    return new FieldMask(paths.map(function (path) { return FieldPath$1.fromServerFormat(path); }));\r\n}\r\nfunction isValidResourceName(path) {\r\n    // Resource names have at least 4 components (project ID, database ID)\r\n    return (path.length >= 4 &&\r\n        path.get(0) === 'projects' &&\r\n        path.get(2) === 'databases');\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable set of metadata that the local store tracks for each target.\r\n */\r\nvar TargetData = /** @class */ (function () {\r\n    function TargetData(\r\n    /** The target being listened to. */\r\n    target, \r\n    /**\r\n     * The target ID to which the target corresponds; Assigned by the\r\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\r\n     */\r\n    targetId, \r\n    /** The purpose of the target. */\r\n    purpose, \r\n    /**\r\n     * The sequence number of the last transaction during which this target data\r\n     * was modified.\r\n     */\r\n    sequenceNumber, \r\n    /** The latest snapshot version seen for this target. */\r\n    snapshotVersion, \r\n    /**\r\n     * The maximum snapshot version at which the associated view\r\n     * contained no limbo documents.\r\n     */\r\n    lastLimboFreeSnapshotVersion, \r\n    /**\r\n     * An opaque, server-assigned token that allows watching a target to be\r\n     * resumed after disconnecting without retransmitting all the data that\r\n     * matches the target. The resume token essentially identifies a point in\r\n     * time from which the server should resume sending results.\r\n     */\r\n    resumeToken) {\r\n        if (snapshotVersion === void 0) { snapshotVersion = SnapshotVersion.min(); }\r\n        if (lastLimboFreeSnapshotVersion === void 0) { lastLimboFreeSnapshotVersion = SnapshotVersion.min(); }\r\n        if (resumeToken === void 0) { resumeToken = ByteString.EMPTY_BYTE_STRING; }\r\n        this.target = target;\r\n        this.targetId = targetId;\r\n        this.purpose = purpose;\r\n        this.sequenceNumber = sequenceNumber;\r\n        this.snapshotVersion = snapshotVersion;\r\n        this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;\r\n        this.resumeToken = resumeToken;\r\n    }\r\n    /** Creates a new target data instance with an updated sequence number. */\r\n    TargetData.prototype.withSequenceNumber = function (sequenceNumber) {\r\n        return new TargetData(this.target, this.targetId, this.purpose, sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);\r\n    };\r\n    /**\r\n     * Creates a new target data instance with an updated resume token and\r\n     * snapshot version.\r\n     */\r\n    TargetData.prototype.withResumeToken = function (resumeToken, snapshotVersion) {\r\n        return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, snapshotVersion, this.lastLimboFreeSnapshotVersion, resumeToken);\r\n    };\r\n    /**\r\n     * Creates a new target data instance with an updated last limbo free\r\n     * snapshot version number.\r\n     */\r\n    TargetData.prototype.withLastLimboFreeSnapshotVersion = function (lastLimboFreeSnapshotVersion) {\r\n        return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, lastLimboFreeSnapshotVersion, this.resumeToken);\r\n    };\r\n    return TargetData;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Serializer for values stored in the LocalStore. */\r\nvar LocalSerializer = /** @class */ (function () {\r\n    function LocalSerializer(remoteSerializer) {\r\n        this.remoteSerializer = remoteSerializer;\r\n    }\r\n    return LocalSerializer;\r\n}());\r\n/** Decodes a remote document from storage locally to a Document. */\r\nfunction fromDbRemoteDocument(localSerializer, remoteDoc) {\r\n    if (remoteDoc.document) {\r\n        return fromDocument(localSerializer.remoteSerializer, remoteDoc.document, !!remoteDoc.hasCommittedMutations);\r\n    }\r\n    else if (remoteDoc.noDocument) {\r\n        var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\r\n        var version_3 = fromDbTimestamp(remoteDoc.noDocument.readTime);\r\n        var document_1 = MutableDocument.newNoDocument(key, version_3);\r\n        return remoteDoc.hasCommittedMutations\r\n            ? document_1.setHasCommittedMutations()\r\n            : document_1;\r\n    }\r\n    else if (remoteDoc.unknownDocument) {\r\n        var key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);\r\n        var version_4 = fromDbTimestamp(remoteDoc.unknownDocument.version);\r\n        return MutableDocument.newUnknownDocument(key, version_4);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\n/** Encodes a document for storage locally. */\r\nfunction toDbRemoteDocument(localSerializer, document, readTime) {\r\n    var dbReadTime = toDbTimestampKey(readTime);\r\n    var parentPath = document.key.path.popLast().toArray();\r\n    if (document.isFoundDocument()) {\r\n        var doc_3 = toDocument(localSerializer.remoteSerializer, document);\r\n        var hasCommittedMutations = document.hasCommittedMutations;\r\n        return new DbRemoteDocument(\r\n        /* unknownDocument= */ null, \r\n        /* noDocument= */ null, doc_3, hasCommittedMutations, dbReadTime, parentPath);\r\n    }\r\n    else if (document.isNoDocument()) {\r\n        var path = document.key.path.toArray();\r\n        var readTime_1 = toDbTimestamp(document.version);\r\n        var hasCommittedMutations = document.hasCommittedMutations;\r\n        return new DbRemoteDocument(\r\n        /* unknownDocument= */ null, new DbNoDocument(path, readTime_1), \r\n        /* document= */ null, hasCommittedMutations, dbReadTime, parentPath);\r\n    }\r\n    else if (document.isUnknownDocument()) {\r\n        var path = document.key.path.toArray();\r\n        var readTime_2 = toDbTimestamp(document.version);\r\n        return new DbRemoteDocument(new DbUnknownDocument(path, readTime_2), \r\n        /* noDocument= */ null, \r\n        /* document= */ null, \r\n        /* hasCommittedMutations= */ true, dbReadTime, parentPath);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction toDbTimestampKey(snapshotVersion) {\r\n    var timestamp = snapshotVersion.toTimestamp();\r\n    return [timestamp.seconds, timestamp.nanoseconds];\r\n}\r\nfunction fromDbTimestampKey(dbTimestampKey) {\r\n    var timestamp = new Timestamp(dbTimestampKey[0], dbTimestampKey[1]);\r\n    return SnapshotVersion.fromTimestamp(timestamp);\r\n}\r\nfunction toDbTimestamp(snapshotVersion) {\r\n    var timestamp = snapshotVersion.toTimestamp();\r\n    return new DbTimestamp(timestamp.seconds, timestamp.nanoseconds);\r\n}\r\nfunction fromDbTimestamp(dbTimestamp) {\r\n    var timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);\r\n    return SnapshotVersion.fromTimestamp(timestamp);\r\n}\r\n/** Encodes a batch of mutations into a DbMutationBatch for local storage. */\r\nfunction toDbMutationBatch(localSerializer, userId, batch) {\r\n    var serializedBaseMutations = batch.baseMutations.map(function (m) { return toMutation(localSerializer.remoteSerializer, m); });\r\n    var serializedMutations = batch.mutations.map(function (m) { return toMutation(localSerializer.remoteSerializer, m); });\r\n    return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toMillis(), serializedBaseMutations, serializedMutations);\r\n}\r\n/** Decodes a DbMutationBatch into a MutationBatch */\r\nfunction fromDbMutationBatch(localSerializer, dbBatch) {\r\n    var baseMutations = (dbBatch.baseMutations || []).map(function (m) { return fromMutation(localSerializer.remoteSerializer, m); });\r\n    // Squash old transform mutations into existing patch or set mutations.\r\n    // The replacement of representing `transforms` with `update_transforms`\r\n    // on the SDK means that old `transform` mutations stored in IndexedDB need\r\n    // to be updated to `update_transforms`.\r\n    // TODO(b/174608374): Remove this code once we perform a schema migration.\r\n    for (var i = 0; i < dbBatch.mutations.length - 1; ++i) {\r\n        var currentMutation = dbBatch.mutations[i];\r\n        var hasTransform = i + 1 < dbBatch.mutations.length &&\r\n            dbBatch.mutations[i + 1].transform !== undefined;\r\n        if (hasTransform) {\r\n            var transformMutation = dbBatch.mutations[i + 1];\r\n            currentMutation.updateTransforms = transformMutation.transform.fieldTransforms;\r\n            dbBatch.mutations.splice(i + 1, 1);\r\n            ++i;\r\n        }\r\n    }\r\n    var mutations = dbBatch.mutations.map(function (m) { return fromMutation(localSerializer.remoteSerializer, m); });\r\n    var timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);\r\n    return new MutationBatch(dbBatch.batchId, timestamp, baseMutations, mutations);\r\n}\r\n/** Decodes a DbTarget into TargetData */\r\nfunction fromDbTarget(dbTarget) {\r\n    var version = fromDbTimestamp(dbTarget.readTime);\r\n    var lastLimboFreeSnapshotVersion = dbTarget.lastLimboFreeSnapshotVersion !== undefined\r\n        ? fromDbTimestamp(dbTarget.lastLimboFreeSnapshotVersion)\r\n        : SnapshotVersion.min();\r\n    var target;\r\n    if (isDocumentQuery(dbTarget.query)) {\r\n        target = fromDocumentsTarget(dbTarget.query);\r\n    }\r\n    else {\r\n        target = fromQueryTarget(dbTarget.query);\r\n    }\r\n    return new TargetData(target, dbTarget.targetId, 0 /* Listen */, dbTarget.lastListenSequenceNumber, version, lastLimboFreeSnapshotVersion, ByteString.fromBase64String(dbTarget.resumeToken));\r\n}\r\n/** Encodes TargetData into a DbTarget for storage locally. */\r\nfunction toDbTarget(localSerializer, targetData) {\r\n    var dbTimestamp = toDbTimestamp(targetData.snapshotVersion);\r\n    var dbLastLimboFreeTimestamp = toDbTimestamp(targetData.lastLimboFreeSnapshotVersion);\r\n    var queryProto;\r\n    if (isDocumentTarget(targetData.target)) {\r\n        queryProto = toDocumentsTarget(localSerializer.remoteSerializer, targetData.target);\r\n    }\r\n    else {\r\n        queryProto = toQueryTarget(localSerializer.remoteSerializer, targetData.target);\r\n    }\r\n    // We can't store the resumeToken as a ByteString in IndexedDb, so we\r\n    // convert it to a base64 string for storage.\r\n    var resumeToken = targetData.resumeToken.toBase64();\r\n    // lastListenSequenceNumber is always 0 until we do real GC.\r\n    return new DbTarget(targetData.targetId, canonifyTarget(targetData.target), dbTimestamp, resumeToken, targetData.sequenceNumber, dbLastLimboFreeTimestamp, queryProto);\r\n}\r\n/**\r\n * A helper function for figuring out what kind of query has been stored.\r\n */\r\nfunction isDocumentQuery(dbQuery) {\r\n    return dbQuery.documents !== undefined;\r\n}\r\n/** Encodes a DbBundle to a BundleMetadata object. */\r\nfunction fromDbBundle(dbBundle) {\r\n    return {\r\n        id: dbBundle.bundleId,\r\n        createTime: fromDbTimestamp(dbBundle.createTime),\r\n        version: dbBundle.version\r\n    };\r\n}\r\n/** Encodes a BundleMetadata to a DbBundle. */\r\nfunction toDbBundle(metadata) {\r\n    return {\r\n        bundleId: metadata.id,\r\n        createTime: toDbTimestamp(fromVersion(metadata.createTime)),\r\n        version: metadata.version\r\n    };\r\n}\r\n/** Encodes a DbNamedQuery to a NamedQuery. */\r\nfunction fromDbNamedQuery(dbNamedQuery) {\r\n    return {\r\n        name: dbNamedQuery.name,\r\n        query: fromBundledQuery(dbNamedQuery.bundledQuery),\r\n        readTime: fromDbTimestamp(dbNamedQuery.readTime)\r\n    };\r\n}\r\n/** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */\r\nfunction toDbNamedQuery(query) {\r\n    return {\r\n        name: query.name,\r\n        readTime: toDbTimestamp(fromVersion(query.readTime)),\r\n        bundledQuery: query.bundledQuery\r\n    };\r\n}\r\n/**\r\n * Encodes a `BundledQuery` from bundle proto to a Query object.\r\n *\r\n * This reconstructs the original query used to build the bundle being loaded,\r\n * including features exists only in SDKs (for example: limit-to-last).\r\n */\r\nfunction fromBundledQuery(bundledQuery) {\r\n    var query = convertQueryTargetToQuery({\r\n        parent: bundledQuery.parent,\r\n        structuredQuery: bundledQuery.structuredQuery\r\n    });\r\n    if (bundledQuery.limitType === 'LAST') {\r\n        return queryWithLimit(query, query.limit, \"L\" /* Last */);\r\n    }\r\n    return query;\r\n}\r\n/** Encodes a NamedQuery proto object to a NamedQuery model object. */\r\nfunction fromProtoNamedQuery(namedQuery) {\r\n    return {\r\n        name: namedQuery.name,\r\n        query: fromBundledQuery(namedQuery.bundledQuery),\r\n        readTime: fromVersion(namedQuery.readTime)\r\n    };\r\n}\r\n/** Decodes a BundleMetadata proto into a BundleMetadata object. */\r\nfunction fromBundleMetadata(metadata) {\r\n    return {\r\n        id: metadata.id,\r\n        version: metadata.version,\r\n        createTime: fromVersion(metadata.createTime)\r\n    };\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar IndexedDbBundleCache = /** @class */ (function () {\r\n    function IndexedDbBundleCache() {\r\n    }\r\n    IndexedDbBundleCache.prototype.getBundleMetadata = function (transaction, bundleId) {\r\n        return bundlesStore(transaction)\r\n            .get(bundleId)\r\n            .next(function (bundle) {\r\n            if (bundle) {\r\n                return fromDbBundle(bundle);\r\n            }\r\n            return undefined;\r\n        });\r\n    };\r\n    IndexedDbBundleCache.prototype.saveBundleMetadata = function (transaction, bundleMetadata) {\r\n        return bundlesStore(transaction).put(toDbBundle(bundleMetadata));\r\n    };\r\n    IndexedDbBundleCache.prototype.getNamedQuery = function (transaction, queryName) {\r\n        return namedQueriesStore(transaction)\r\n            .get(queryName)\r\n            .next(function (query) {\r\n            if (query) {\r\n                return fromDbNamedQuery(query);\r\n            }\r\n            return undefined;\r\n        });\r\n    };\r\n    IndexedDbBundleCache.prototype.saveNamedQuery = function (transaction, query) {\r\n        return namedQueriesStore(transaction).put(toDbNamedQuery(query));\r\n    };\r\n    return IndexedDbBundleCache;\r\n}());\r\n/**\r\n * Helper to get a typed SimpleDbStore for the bundles object store.\r\n */\r\nfunction bundlesStore(txn) {\r\n    return getStore(txn, DbBundle.store);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the namedQueries object store.\r\n */\r\nfunction namedQueriesStore(txn) {\r\n    return getStore(txn, DbNamedQuery.store);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory implementation of IndexManager.\r\n */\r\nvar MemoryIndexManager = /** @class */ (function () {\r\n    function MemoryIndexManager() {\r\n        this.collectionParentIndex = new MemoryCollectionParentIndex();\r\n    }\r\n    MemoryIndexManager.prototype.addToCollectionParentIndex = function (transaction, collectionPath) {\r\n        this.collectionParentIndex.add(collectionPath);\r\n        return PersistencePromise.resolve();\r\n    };\r\n    MemoryIndexManager.prototype.getCollectionParents = function (transaction, collectionId) {\r\n        return PersistencePromise.resolve(this.collectionParentIndex.getEntries(collectionId));\r\n    };\r\n    return MemoryIndexManager;\r\n}());\r\n/**\r\n * Internal implementation of the collection-parent index exposed by MemoryIndexManager.\r\n * Also used for in-memory caching by IndexedDbIndexManager and initial index population\r\n * in indexeddb_schema.ts\r\n */\r\nvar MemoryCollectionParentIndex = /** @class */ (function () {\r\n    function MemoryCollectionParentIndex() {\r\n        this.index = {};\r\n    }\r\n    // Returns false if the entry already existed.\r\n    MemoryCollectionParentIndex.prototype.add = function (collectionPath) {\r\n        var collectionId = collectionPath.lastSegment();\r\n        var parentPath = collectionPath.popLast();\r\n        var existingParents = this.index[collectionId] ||\r\n            new SortedSet(ResourcePath.comparator);\r\n        var added = !existingParents.has(parentPath);\r\n        this.index[collectionId] = existingParents.add(parentPath);\r\n        return added;\r\n    };\r\n    MemoryCollectionParentIndex.prototype.has = function (collectionPath) {\r\n        var collectionId = collectionPath.lastSegment();\r\n        var parentPath = collectionPath.popLast();\r\n        var existingParents = this.index[collectionId];\r\n        return existingParents && existingParents.has(parentPath);\r\n    };\r\n    MemoryCollectionParentIndex.prototype.getEntries = function (collectionId) {\r\n        var parentPaths = this.index[collectionId] ||\r\n            new SortedSet(ResourcePath.comparator);\r\n        return parentPaths.toArray();\r\n    };\r\n    return MemoryCollectionParentIndex;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A persisted implementation of IndexManager.\r\n */\r\nvar IndexedDbIndexManager = /** @class */ (function () {\r\n    function IndexedDbIndexManager() {\r\n        /**\r\n         * An in-memory copy of the index entries we've already written since the SDK\r\n         * launched. Used to avoid re-writing the same entry repeatedly.\r\n         *\r\n         * This is *NOT* a complete cache of what's in persistence and so can never be used to\r\n         * satisfy reads.\r\n         */\r\n        this.collectionParentsCache = new MemoryCollectionParentIndex();\r\n    }\r\n    /**\r\n     * Adds a new entry to the collection parent index.\r\n     *\r\n     * Repeated calls for the same collectionPath should be avoided within a\r\n     * transaction as IndexedDbIndexManager only caches writes once a transaction\r\n     * has been committed.\r\n     */\r\n    IndexedDbIndexManager.prototype.addToCollectionParentIndex = function (transaction, collectionPath) {\r\n        var _this = this;\r\n        if (!this.collectionParentsCache.has(collectionPath)) {\r\n            var collectionId = collectionPath.lastSegment();\r\n            var parentPath = collectionPath.popLast();\r\n            transaction.addOnCommittedListener(function () {\r\n                // Add the collection to the in memory cache only if the transaction was\r\n                // successfully committed.\r\n                _this.collectionParentsCache.add(collectionPath);\r\n            });\r\n            var collectionParent = {\r\n                collectionId: collectionId,\r\n                parent: encodeResourcePath(parentPath)\r\n            };\r\n            return collectionParentsStore(transaction).put(collectionParent);\r\n        }\r\n        return PersistencePromise.resolve();\r\n    };\r\n    IndexedDbIndexManager.prototype.getCollectionParents = function (transaction, collectionId) {\r\n        var parentPaths = [];\r\n        var range = IDBKeyRange.bound([collectionId, ''], [immediateSuccessor(collectionId), ''], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true);\r\n        return collectionParentsStore(transaction)\r\n            .loadAll(range)\r\n            .next(function (entries) {\r\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\r\n                var entry = entries_1[_i];\r\n                // This collectionId guard shouldn't be necessary (and isn't as long\r\n                // as we're running in a real browser), but there's a bug in\r\n                // indexeddbshim that breaks our range in our tests running in node:\r\n                // https://github.com/axemclion/IndexedDBShim/issues/334\r\n                if (entry.collectionId !== collectionId) {\r\n                    break;\r\n                }\r\n                parentPaths.push(decodeResourcePath(entry.parent));\r\n            }\r\n            return parentPaths;\r\n        });\r\n    };\r\n    return IndexedDbIndexManager;\r\n}());\r\n/**\r\n * Helper to get a typed SimpleDbStore for the collectionParents\r\n * document store.\r\n */\r\nfunction collectionParentsStore(txn) {\r\n    return getStore(txn, DbCollectionParent.store);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Delete a mutation batch and the associated document mutations.\r\n * @returns A PersistencePromise of the document mutations that were removed.\r\n */\r\nfunction removeMutationBatch(txn, userId, batch) {\r\n    var mutationStore = txn.store(DbMutationBatch.store);\r\n    var indexTxn = txn.store(DbDocumentMutation.store);\r\n    var promises = [];\r\n    var range = IDBKeyRange.only(batch.batchId);\r\n    var numDeleted = 0;\r\n    var removePromise = mutationStore.iterate({ range: range }, function (key, value, control) {\r\n        numDeleted++;\r\n        return control.delete();\r\n    });\r\n    promises.push(removePromise.next(function () {\r\n        hardAssert(numDeleted === 1);\r\n    }));\r\n    var removedDocuments = [];\r\n    for (var _i = 0, _d = batch.mutations; _i < _d.length; _i++) {\r\n        var mutation = _d[_i];\r\n        var indexKey = DbDocumentMutation.key(userId, mutation.key.path, batch.batchId);\r\n        promises.push(indexTxn.delete(indexKey));\r\n        removedDocuments.push(mutation.key);\r\n    }\r\n    return PersistencePromise.waitFor(promises).next(function () { return removedDocuments; });\r\n}\r\n/**\r\n * Returns an approximate size for the given document.\r\n */\r\nfunction dbDocumentSize(doc) {\r\n    if (!doc) {\r\n        return 0;\r\n    }\r\n    var value;\r\n    if (doc.document) {\r\n        value = doc.document;\r\n    }\r\n    else if (doc.unknownDocument) {\r\n        value = doc.unknownDocument;\r\n    }\r\n    else if (doc.noDocument) {\r\n        value = doc.noDocument;\r\n    }\r\n    else {\r\n        throw fail();\r\n    }\r\n    return JSON.stringify(value).length;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** A mutation queue for a specific user, backed by IndexedDB. */\r\nvar IndexedDbMutationQueue = /** @class */ (function () {\r\n    function IndexedDbMutationQueue(\r\n    /**\r\n     * The normalized userId (e.g. null UID => \"\" userId) used to store /\r\n     * retrieve mutations.\r\n     */\r\n    userId, serializer, indexManager, referenceDelegate) {\r\n        this.userId = userId;\r\n        this.serializer = serializer;\r\n        this.indexManager = indexManager;\r\n        this.referenceDelegate = referenceDelegate;\r\n        /**\r\n         * Caches the document keys for pending mutation batches. If the mutation\r\n         * has been removed from IndexedDb, the cached value may continue to\r\n         * be used to retrieve the batch's document keys. To remove a cached value\r\n         * locally, `removeCachedMutationKeys()` should be invoked either directly\r\n         * or through `removeMutationBatches()`.\r\n         *\r\n         * With multi-tab, when the primary client acknowledges or rejects a mutation,\r\n         * this cache is used by secondary clients to invalidate the local\r\n         * view of the documents that were previously affected by the mutation.\r\n         */\r\n        // PORTING NOTE: Multi-tab only.\r\n        this.documentKeysByBatchId = {};\r\n    }\r\n    /**\r\n     * Creates a new mutation queue for the given user.\r\n     * @param user - The user for which to create a mutation queue.\r\n     * @param serializer - The serializer to use when persisting to IndexedDb.\r\n     */\r\n    IndexedDbMutationQueue.forUser = function (user, serializer, indexManager, referenceDelegate) {\r\n        // TODO(mcg): Figure out what constraints there are on userIDs\r\n        // In particular, are there any reserved characters? are empty ids allowed?\r\n        // For the moment store these together in the same mutations table assuming\r\n        // that empty userIDs aren't allowed.\r\n        hardAssert(user.uid !== '');\r\n        var userId = user.isAuthenticated() ? user.uid : '';\r\n        return new IndexedDbMutationQueue(userId, serializer, indexManager, referenceDelegate);\r\n    };\r\n    IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {\r\n        var empty = true;\r\n        var range = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);\r\n        return mutationsStore(transaction)\r\n            .iterate({ index: DbMutationBatch.userMutationsIndex, range: range }, function (key, value, control) {\r\n            empty = false;\r\n            control.done();\r\n        })\r\n            .next(function () { return empty; });\r\n    };\r\n    IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, baseMutations, mutations) {\r\n        var _this = this;\r\n        var documentStore = documentMutationsStore(transaction);\r\n        var mutationStore = mutationsStore(transaction);\r\n        // The IndexedDb implementation in Chrome (and Firefox) does not handle\r\n        // compound indices that include auto-generated keys correctly. To ensure\r\n        // that the index entry is added correctly in all browsers, we perform two\r\n        // writes: The first write is used to retrieve the next auto-generated Batch\r\n        // ID, and the second write populates the index and stores the actual\r\n        // mutation batch.\r\n        // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972\r\n        // We write an empty object to obtain key\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return mutationStore.add({}).next(function (batchId) {\r\n            hardAssert(typeof batchId === 'number');\r\n            var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);\r\n            var dbBatch = toDbMutationBatch(_this.serializer, _this.userId, batch);\r\n            var promises = [];\r\n            var collectionParents = new SortedSet(function (l, r) { return primitiveComparator(l.canonicalString(), r.canonicalString()); });\r\n            for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\r\n                var mutation = mutations_1[_i];\r\n                var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);\r\n                collectionParents = collectionParents.add(mutation.key.path.popLast());\r\n                promises.push(mutationStore.put(dbBatch));\r\n                promises.push(documentStore.put(indexKey, DbDocumentMutation.PLACEHOLDER));\r\n            }\r\n            collectionParents.forEach(function (parent) {\r\n                promises.push(_this.indexManager.addToCollectionParentIndex(transaction, parent));\r\n            });\r\n            transaction.addOnCommittedListener(function () {\r\n                _this.documentKeysByBatchId[batchId] = batch.keys();\r\n            });\r\n            return PersistencePromise.waitFor(promises).next(function () { return batch; });\r\n        });\r\n    };\r\n    IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\r\n        var _this = this;\r\n        return mutationsStore(transaction)\r\n            .get(batchId)\r\n            .next(function (dbBatch) {\r\n            if (dbBatch) {\r\n                hardAssert(dbBatch.userId === _this.userId);\r\n                return fromDbMutationBatch(_this.serializer, dbBatch);\r\n            }\r\n            return null;\r\n        });\r\n    };\r\n    /**\r\n     * Returns the document keys for the mutation batch with the given batchId.\r\n     * For primary clients, this method returns `null` after\r\n     * `removeMutationBatches()` has been called. Secondary clients return a\r\n     * cached result until `removeCachedMutationKeys()` is invoked.\r\n     */\r\n    // PORTING NOTE: Multi-tab only.\r\n    IndexedDbMutationQueue.prototype.lookupMutationKeys = function (transaction, batchId) {\r\n        var _this = this;\r\n        if (this.documentKeysByBatchId[batchId]) {\r\n            return PersistencePromise.resolve(this.documentKeysByBatchId[batchId]);\r\n        }\r\n        else {\r\n            return this.lookupMutationBatch(transaction, batchId).next(function (batch) {\r\n                if (batch) {\r\n                    var keys = batch.keys();\r\n                    _this.documentKeysByBatchId[batchId] = keys;\r\n                    return keys;\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\r\n        var _this = this;\r\n        var nextBatchId = batchId + 1;\r\n        var range = IDBKeyRange.lowerBound([this.userId, nextBatchId]);\r\n        var foundBatch = null;\r\n        return mutationsStore(transaction)\r\n            .iterate({ index: DbMutationBatch.userMutationsIndex, range: range }, function (key, dbBatch, control) {\r\n            if (dbBatch.userId === _this.userId) {\r\n                hardAssert(dbBatch.batchId >= nextBatchId);\r\n                foundBatch = fromDbMutationBatch(_this.serializer, dbBatch);\r\n            }\r\n            control.done();\r\n        })\r\n            .next(function () { return foundBatch; });\r\n    };\r\n    IndexedDbMutationQueue.prototype.getHighestUnacknowledgedBatchId = function (transaction) {\r\n        var range = IDBKeyRange.upperBound([\r\n            this.userId,\r\n            Number.POSITIVE_INFINITY\r\n        ]);\r\n        var batchId = BATCHID_UNKNOWN;\r\n        return mutationsStore(transaction)\r\n            .iterate({ index: DbMutationBatch.userMutationsIndex, range: range, reverse: true }, function (key, dbBatch, control) {\r\n            batchId = dbBatch.batchId;\r\n            control.done();\r\n        })\r\n            .next(function () { return batchId; });\r\n    };\r\n    IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {\r\n        var _this = this;\r\n        var range = IDBKeyRange.bound([this.userId, BATCHID_UNKNOWN], [this.userId, Number.POSITIVE_INFINITY]);\r\n        return mutationsStore(transaction)\r\n            .loadAll(DbMutationBatch.userMutationsIndex, range)\r\n            .next(function (dbBatches) { return dbBatches.map(function (dbBatch) { return fromDbMutationBatch(_this.serializer, dbBatch); }); });\r\n    };\r\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\r\n        var _this = this;\r\n        // Scan the document-mutation index starting with a prefix starting with\r\n        // the given documentKey.\r\n        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);\r\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\r\n        var results = [];\r\n        return documentMutationsStore(transaction)\r\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\r\n            var userID = indexKey[0], encodedPath = indexKey[1], batchId = indexKey[2];\r\n            // Only consider rows matching exactly the specific key of\r\n            // interest. Note that because we order by path first, and we\r\n            // order terminators before path separators, we'll encounter all\r\n            // the index rows for documentKey contiguously. In particular, all\r\n            // the rows for documentKey will occur before any rows for\r\n            // documents nested in a subcollection beneath documentKey so we\r\n            // can stop as soon as we hit any such row.\r\n            var path = decodeResourcePath(encodedPath);\r\n            if (userID !== _this.userId || !documentKey.path.isEqual(path)) {\r\n                control.done();\r\n                return;\r\n            }\r\n            // Look up the mutation batch in the store.\r\n            return mutationsStore(transaction)\r\n                .get(batchId)\r\n                .next(function (mutation) {\r\n                if (!mutation) {\r\n                    throw fail();\r\n                }\r\n                hardAssert(mutation.userId === _this.userId);\r\n                results.push(fromDbMutationBatch(_this.serializer, mutation));\r\n            });\r\n        })\r\n            .next(function () { return results; });\r\n    };\r\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKeys = function (transaction, documentKeys) {\r\n        var _this = this;\r\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\r\n        var promises = [];\r\n        documentKeys.forEach(function (documentKey) {\r\n            var indexStart = DbDocumentMutation.prefixForPath(_this.userId, documentKey.path);\r\n            var range = IDBKeyRange.lowerBound(indexStart);\r\n            var promise = documentMutationsStore(transaction).iterate({ range: range }, function (indexKey, _, control) {\r\n                var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\r\n                // Only consider rows matching exactly the specific key of\r\n                // interest. Note that because we order by path first, and we\r\n                // order terminators before path separators, we'll encounter all\r\n                // the index rows for documentKey contiguously. In particular, all\r\n                // the rows for documentKey will occur before any rows for\r\n                // documents nested in a subcollection beneath documentKey so we\r\n                // can stop as soon as we hit any such row.\r\n                var path = decodeResourcePath(encodedPath);\r\n                if (userID !== _this.userId || !documentKey.path.isEqual(path)) {\r\n                    control.done();\r\n                    return;\r\n                }\r\n                uniqueBatchIDs = uniqueBatchIDs.add(batchID);\r\n            });\r\n            promises.push(promise);\r\n        });\r\n        return PersistencePromise.waitFor(promises).next(function () { return _this.lookupMutationBatches(transaction, uniqueBatchIDs); });\r\n    };\r\n    IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\r\n        var _this = this;\r\n        var queryPath = query.path;\r\n        var immediateChildrenLength = queryPath.length + 1;\r\n        // TODO(mcg): Actually implement a single-collection query\r\n        //\r\n        // This is actually executing an ancestor query, traversing the whole\r\n        // subtree below the collection which can be horrifically inefficient for\r\n        // some structures. The right way to solve this is to implement the full\r\n        // value index, but that's not in the cards in the near future so this is\r\n        // the best we can do for the moment.\r\n        //\r\n        // Since we don't yet index the actual properties in the mutations, our\r\n        // current approach is to just return all mutation batches that affect\r\n        // documents in the collection being queried.\r\n        var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);\r\n        var indexStart = IDBKeyRange.lowerBound(indexPrefix);\r\n        // Collect up unique batchIDs encountered during a scan of the index. Use a\r\n        // SortedSet to accumulate batch IDs so they can be traversed in order in a\r\n        // scan of the main table.\r\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\r\n        return documentMutationsStore(transaction)\r\n            .iterate({ range: indexStart }, function (indexKey, _, control) {\r\n            var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];\r\n            var path = decodeResourcePath(encodedPath);\r\n            if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {\r\n                control.done();\r\n                return;\r\n            }\r\n            // Rows with document keys more than one segment longer than the\r\n            // query path can't be matches. For example, a query on 'rooms'\r\n            // can't match the document /rooms/abc/messages/xyx.\r\n            // TODO(mcg): we'll need a different scanner when we implement\r\n            // ancestor queries.\r\n            if (path.length !== immediateChildrenLength) {\r\n                return;\r\n            }\r\n            uniqueBatchIDs = uniqueBatchIDs.add(batchID);\r\n        })\r\n            .next(function () { return _this.lookupMutationBatches(transaction, uniqueBatchIDs); });\r\n    };\r\n    IndexedDbMutationQueue.prototype.lookupMutationBatches = function (transaction, batchIDs) {\r\n        var _this = this;\r\n        var results = [];\r\n        var promises = [];\r\n        // TODO(rockwood): Implement this using iterate.\r\n        batchIDs.forEach(function (batchId) {\r\n            promises.push(mutationsStore(transaction)\r\n                .get(batchId)\r\n                .next(function (mutation) {\r\n                if (mutation === null) {\r\n                    throw fail();\r\n                }\r\n                hardAssert(mutation.userId === _this.userId);\r\n                results.push(fromDbMutationBatch(_this.serializer, mutation));\r\n            }));\r\n        });\r\n        return PersistencePromise.waitFor(promises).next(function () { return results; });\r\n    };\r\n    IndexedDbMutationQueue.prototype.removeMutationBatch = function (transaction, batch) {\r\n        var _this = this;\r\n        return removeMutationBatch(transaction.simpleDbTransaction, this.userId, batch).next(function (removedDocuments) {\r\n            transaction.addOnCommittedListener(function () {\r\n                _this.removeCachedMutationKeys(batch.batchId);\r\n            });\r\n            return PersistencePromise.forEach(removedDocuments, function (key) {\r\n                return _this.referenceDelegate.markPotentiallyOrphaned(transaction, key);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Clears the cached keys for a mutation batch. This method should be\r\n     * called by secondary clients after they process mutation updates.\r\n     *\r\n     * Note that this method does not have to be called from primary clients as\r\n     * the corresponding cache entries are cleared when an acknowledged or\r\n     * rejected batch is removed from the mutation queue.\r\n     */\r\n    // PORTING NOTE: Multi-tab only\r\n    IndexedDbMutationQueue.prototype.removeCachedMutationKeys = function (batchId) {\r\n        delete this.documentKeysByBatchId[batchId];\r\n    };\r\n    IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {\r\n        var _this = this;\r\n        return this.checkEmpty(txn).next(function (empty) {\r\n            if (!empty) {\r\n                return PersistencePromise.resolve();\r\n            }\r\n            // Verify that there are no entries in the documentMutations index if\r\n            // the queue is empty.\r\n            var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));\r\n            var danglingMutationReferences = [];\r\n            return documentMutationsStore(txn)\r\n                .iterate({ range: startRange }, function (key, _, control) {\r\n                var userID = key[0];\r\n                if (userID !== _this.userId) {\r\n                    control.done();\r\n                    return;\r\n                }\r\n                else {\r\n                    var path = decodeResourcePath(key[1]);\r\n                    danglingMutationReferences.push(path);\r\n                }\r\n            })\r\n                .next(function () {\r\n                hardAssert(danglingMutationReferences.length === 0);\r\n            });\r\n        });\r\n    };\r\n    IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {\r\n        return mutationQueueContainsKey(txn, this.userId, key);\r\n    };\r\n    // PORTING NOTE: Multi-tab only (state is held in memory in other clients).\r\n    /** Returns the mutation queue's metadata from IndexedDb. */\r\n    IndexedDbMutationQueue.prototype.getMutationQueueMetadata = function (transaction) {\r\n        var _this = this;\r\n        return mutationQueuesStore(transaction)\r\n            .get(this.userId)\r\n            .next(function (metadata) {\r\n            return (metadata ||\r\n                new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, \r\n                /*lastStreamToken=*/ ''));\r\n        });\r\n    };\r\n    return IndexedDbMutationQueue;\r\n}());\r\n/**\r\n * @returns true if the mutation queue for the given user contains a pending\r\n *         mutation for the given key.\r\n */\r\nfunction mutationQueueContainsKey(txn, userId, key) {\r\n    var indexKey = DbDocumentMutation.prefixForPath(userId, key.path);\r\n    var encodedPath = indexKey[1];\r\n    var startRange = IDBKeyRange.lowerBound(indexKey);\r\n    var containsKey = false;\r\n    return documentMutationsStore(txn)\r\n        .iterate({ range: startRange, keysOnly: true }, function (key, value, control) {\r\n        var userID = key[0], keyPath = key[1]; /*batchID*/ key[2];\r\n        if (userID === userId && keyPath === encodedPath) {\r\n            containsKey = true;\r\n        }\r\n        control.done();\r\n    })\r\n        .next(function () { return containsKey; });\r\n}\r\n/** Returns true if any mutation queue contains the given document. */\r\nfunction mutationQueuesContainKey(txn, docKey) {\r\n    var found = false;\r\n    return mutationQueuesStore(txn)\r\n        .iterateSerial(function (userId) {\r\n        return mutationQueueContainsKey(txn, userId, docKey).next(function (containsKey) {\r\n            if (containsKey) {\r\n                found = true;\r\n            }\r\n            return PersistencePromise.resolve(!containsKey);\r\n        });\r\n    })\r\n        .next(function () { return found; });\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the mutations object store.\r\n */\r\nfunction mutationsStore(txn) {\r\n    return getStore(txn, DbMutationBatch.store);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\r\n */\r\nfunction documentMutationsStore(txn) {\r\n    return getStore(txn, DbDocumentMutation.store);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\r\n */\r\nfunction mutationQueuesStore(txn) {\r\n    return getStore(txn, DbMutationQueue.store);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Offset to ensure non-overlapping target ids. */\r\nvar OFFSET = 2;\r\n/**\r\n * Generates monotonically increasing target IDs for sending targets to the\r\n * watch stream.\r\n *\r\n * The client constructs two generators, one for the target cache, and one for\r\n * for the sync engine (to generate limbo documents targets). These\r\n * generators produce non-overlapping IDs (by using even and odd IDs\r\n * respectively).\r\n *\r\n * By separating the target ID space, the query cache can generate target IDs\r\n * that persist across client restarts, while sync engine can independently\r\n * generate in-memory target IDs that are transient and can be reused after a\r\n * restart.\r\n */\r\nvar TargetIdGenerator = /** @class */ (function () {\r\n    function TargetIdGenerator(lastId) {\r\n        this.lastId = lastId;\r\n    }\r\n    TargetIdGenerator.prototype.next = function () {\r\n        this.lastId += OFFSET;\r\n        return this.lastId;\r\n    };\r\n    TargetIdGenerator.forTargetCache = function () {\r\n        // The target cache generator must return '2' in its first call to `next()`\r\n        // as there is no differentiation in the protocol layer between an unset\r\n        // number and the number '0'. If we were to sent a target with target ID\r\n        // '0', the backend would consider it unset and replace it with its own ID.\r\n        return new TargetIdGenerator(2 - OFFSET);\r\n    };\r\n    TargetIdGenerator.forSyncEngine = function () {\r\n        // Sync engine assigns target IDs for limbo document detection.\r\n        return new TargetIdGenerator(1 - OFFSET);\r\n    };\r\n    return TargetIdGenerator;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar IndexedDbTargetCache = /** @class */ (function () {\r\n    function IndexedDbTargetCache(referenceDelegate, serializer) {\r\n        this.referenceDelegate = referenceDelegate;\r\n        this.serializer = serializer;\r\n    }\r\n    // PORTING NOTE: We don't cache global metadata for the target cache, since\r\n    // some of it (in particular `highestTargetId`) can be modified by secondary\r\n    // tabs. We could perhaps be more granular (and e.g. still cache\r\n    // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go\r\n    // to IndexedDb whenever we need to read metadata. We can revisit if it turns\r\n    // out to have a meaningful performance impact.\r\n    IndexedDbTargetCache.prototype.allocateTargetId = function (transaction) {\r\n        var _this = this;\r\n        return this.retrieveMetadata(transaction).next(function (metadata) {\r\n            var targetIdGenerator = new TargetIdGenerator(metadata.highestTargetId);\r\n            metadata.highestTargetId = targetIdGenerator.next();\r\n            return _this.saveMetadata(transaction, metadata).next(function () { return metadata.highestTargetId; });\r\n        });\r\n    };\r\n    IndexedDbTargetCache.prototype.getLastRemoteSnapshotVersion = function (transaction) {\r\n        return this.retrieveMetadata(transaction).next(function (metadata) {\r\n            return SnapshotVersion.fromTimestamp(new Timestamp(metadata.lastRemoteSnapshotVersion.seconds, metadata.lastRemoteSnapshotVersion.nanoseconds));\r\n        });\r\n    };\r\n    IndexedDbTargetCache.prototype.getHighestSequenceNumber = function (transaction) {\r\n        return this.retrieveMetadata(transaction).next(function (targetGlobal) { return targetGlobal.highestListenSequenceNumber; });\r\n    };\r\n    IndexedDbTargetCache.prototype.setTargetsMetadata = function (transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {\r\n        var _this = this;\r\n        return this.retrieveMetadata(transaction).next(function (metadata) {\r\n            metadata.highestListenSequenceNumber = highestListenSequenceNumber;\r\n            if (lastRemoteSnapshotVersion) {\r\n                metadata.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();\r\n            }\r\n            if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {\r\n                metadata.highestListenSequenceNumber = highestListenSequenceNumber;\r\n            }\r\n            return _this.saveMetadata(transaction, metadata);\r\n        });\r\n    };\r\n    IndexedDbTargetCache.prototype.addTargetData = function (transaction, targetData) {\r\n        var _this = this;\r\n        return this.saveTargetData(transaction, targetData).next(function () {\r\n            return _this.retrieveMetadata(transaction).next(function (metadata) {\r\n                metadata.targetCount += 1;\r\n                _this.updateMetadataFromTargetData(targetData, metadata);\r\n                return _this.saveMetadata(transaction, metadata);\r\n            });\r\n        });\r\n    };\r\n    IndexedDbTargetCache.prototype.updateTargetData = function (transaction, targetData) {\r\n        return this.saveTargetData(transaction, targetData);\r\n    };\r\n    IndexedDbTargetCache.prototype.removeTargetData = function (transaction, targetData) {\r\n        var _this = this;\r\n        return this.removeMatchingKeysForTargetId(transaction, targetData.targetId)\r\n            .next(function () { return targetsStore(transaction).delete(targetData.targetId); })\r\n            .next(function () { return _this.retrieveMetadata(transaction); })\r\n            .next(function (metadata) {\r\n            hardAssert(metadata.targetCount > 0);\r\n            metadata.targetCount -= 1;\r\n            return _this.saveMetadata(transaction, metadata);\r\n        });\r\n    };\r\n    /**\r\n     * Drops any targets with sequence number less than or equal to the upper bound, excepting those\r\n     * present in `activeTargetIds`. Document associations for the removed targets are also removed.\r\n     * Returns the number of targets removed.\r\n     */\r\n    IndexedDbTargetCache.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {\r\n        var _this = this;\r\n        var count = 0;\r\n        var promises = [];\r\n        return targetsStore(txn)\r\n            .iterate(function (key, value) {\r\n            var targetData = fromDbTarget(value);\r\n            if (targetData.sequenceNumber <= upperBound &&\r\n                activeTargetIds.get(targetData.targetId) === null) {\r\n                count++;\r\n                promises.push(_this.removeTargetData(txn, targetData));\r\n            }\r\n        })\r\n            .next(function () { return PersistencePromise.waitFor(promises); })\r\n            .next(function () { return count; });\r\n    };\r\n    /**\r\n     * Call provided function with each `TargetData` that we have cached.\r\n     */\r\n    IndexedDbTargetCache.prototype.forEachTarget = function (txn, f) {\r\n        return targetsStore(txn).iterate(function (key, value) {\r\n            var targetData = fromDbTarget(value);\r\n            f(targetData);\r\n        });\r\n    };\r\n    IndexedDbTargetCache.prototype.retrieveMetadata = function (transaction) {\r\n        return globalTargetStore(transaction)\r\n            .get(DbTargetGlobal.key)\r\n            .next(function (metadata) {\r\n            hardAssert(metadata !== null);\r\n            return metadata;\r\n        });\r\n    };\r\n    IndexedDbTargetCache.prototype.saveMetadata = function (transaction, metadata) {\r\n        return globalTargetStore(transaction).put(DbTargetGlobal.key, metadata);\r\n    };\r\n    IndexedDbTargetCache.prototype.saveTargetData = function (transaction, targetData) {\r\n        return targetsStore(transaction).put(toDbTarget(this.serializer, targetData));\r\n    };\r\n    /**\r\n     * In-place updates the provided metadata to account for values in the given\r\n     * TargetData. Saving is done separately. Returns true if there were any\r\n     * changes to the metadata.\r\n     */\r\n    IndexedDbTargetCache.prototype.updateMetadataFromTargetData = function (targetData, metadata) {\r\n        var updated = false;\r\n        if (targetData.targetId > metadata.highestTargetId) {\r\n            metadata.highestTargetId = targetData.targetId;\r\n            updated = true;\r\n        }\r\n        if (targetData.sequenceNumber > metadata.highestListenSequenceNumber) {\r\n            metadata.highestListenSequenceNumber = targetData.sequenceNumber;\r\n            updated = true;\r\n        }\r\n        return updated;\r\n    };\r\n    IndexedDbTargetCache.prototype.getTargetCount = function (transaction) {\r\n        return this.retrieveMetadata(transaction).next(function (metadata) { return metadata.targetCount; });\r\n    };\r\n    IndexedDbTargetCache.prototype.getTargetData = function (transaction, target) {\r\n        // Iterating by the canonicalId may yield more than one result because\r\n        // canonicalId values are not required to be unique per target. This query\r\n        // depends on the queryTargets index to be efficient.\r\n        var canonicalId = canonifyTarget(target);\r\n        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\r\n        var result = null;\r\n        return targetsStore(transaction)\r\n            .iterate({ range: range, index: DbTarget.queryTargetsIndexName }, function (key, value, control) {\r\n            var found = fromDbTarget(value);\r\n            // After finding a potential match, check that the target is\r\n            // actually equal to the requested target.\r\n            if (targetEquals(target, found.target)) {\r\n                result = found;\r\n                control.done();\r\n            }\r\n        })\r\n            .next(function () { return result; });\r\n    };\r\n    IndexedDbTargetCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\r\n        var _this = this;\r\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\r\n        // IndexedDb.\r\n        var promises = [];\r\n        var store = documentTargetStore(txn);\r\n        keys.forEach(function (key) {\r\n            var path = encodeResourcePath(key.path);\r\n            promises.push(store.put(new DbTargetDocument(targetId, path)));\r\n            promises.push(_this.referenceDelegate.addReference(txn, targetId, key));\r\n        });\r\n        return PersistencePromise.waitFor(promises);\r\n    };\r\n    IndexedDbTargetCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\r\n        var _this = this;\r\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\r\n        // IndexedDb.\r\n        var store = documentTargetStore(txn);\r\n        return PersistencePromise.forEach(keys, function (key) {\r\n            var path = encodeResourcePath(key.path);\r\n            return PersistencePromise.waitFor([\r\n                store.delete([targetId, path]),\r\n                _this.referenceDelegate.removeReference(txn, targetId, key)\r\n            ]);\r\n        });\r\n    };\r\n    IndexedDbTargetCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\r\n        var store = documentTargetStore(txn);\r\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true);\r\n        return store.delete(range);\r\n    };\r\n    IndexedDbTargetCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\r\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true);\r\n        var store = documentTargetStore(txn);\r\n        var result = documentKeySet();\r\n        return store\r\n            .iterate({ range: range, keysOnly: true }, function (key, _, control) {\r\n            var path = decodeResourcePath(key[1]);\r\n            var docKey = new DocumentKey(path);\r\n            result = result.add(docKey);\r\n        })\r\n            .next(function () { return result; });\r\n    };\r\n    IndexedDbTargetCache.prototype.containsKey = function (txn, key) {\r\n        var path = encodeResourcePath(key.path);\r\n        var range = IDBKeyRange.bound([path], [immediateSuccessor(path)], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true);\r\n        var count = 0;\r\n        return documentTargetStore(txn)\r\n            .iterate({\r\n            index: DbTargetDocument.documentTargetsIndex,\r\n            keysOnly: true,\r\n            range: range\r\n        }, function (_d, _, control) {\r\n            var targetId = _d[0]; _d[1];\r\n            // Having a sentinel row for a document does not count as containing that document;\r\n            // For the target cache, containing the document means the document is part of some\r\n            // target.\r\n            if (targetId !== 0) {\r\n                count++;\r\n                control.done();\r\n            }\r\n        })\r\n            .next(function () { return count > 0; });\r\n    };\r\n    /**\r\n     * Looks up a TargetData entry by target ID.\r\n     *\r\n     * @param targetId - The target ID of the TargetData entry to look up.\r\n     * @returns The cached TargetData entry, or null if the cache has no entry for\r\n     * the target.\r\n     */\r\n    // PORTING NOTE: Multi-tab only.\r\n    IndexedDbTargetCache.prototype.getTargetDataForTarget = function (transaction, targetId) {\r\n        return targetsStore(transaction)\r\n            .get(targetId)\r\n            .next(function (found) {\r\n            if (found) {\r\n                return fromDbTarget(found);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        });\r\n    };\r\n    return IndexedDbTargetCache;\r\n}());\r\n/**\r\n * Helper to get a typed SimpleDbStore for the queries object store.\r\n */\r\nfunction targetsStore(txn) {\r\n    return getStore(txn, DbTarget.store);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the target globals object store.\r\n */\r\nfunction globalTargetStore(txn) {\r\n    return getStore(txn, DbTargetGlobal.store);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the document target object store.\r\n */\r\nfunction documentTargetStore(txn) {\r\n    return getStore(txn, DbTargetDocument.store);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Verifies the error thrown by a LocalStore operation. If a LocalStore\r\n * operation fails because the primary lease has been taken by another client,\r\n * we ignore the error (the persistence layer will immediately call\r\n * `applyPrimaryLease` to propagate the primary state change). All other errors\r\n * are re-thrown.\r\n *\r\n * @param err - An error returned by a LocalStore operation.\r\n * @returns A Promise that resolves after we recovered, or the original error.\r\n */\r\nfunction ignoreIfPrimaryLeaseLoss(err) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        return tslib.__generator(this, function (_d) {\r\n            if (err.code === Code.FAILED_PRECONDITION &&\r\n                err.message === PRIMARY_LEASE_LOST_ERROR_MSG) {\r\n                logDebug('LocalStore', 'Unexpectedly lost primary lease');\r\n            }\r\n            else {\r\n                throw err;\r\n            }\r\n            return [2 /*return*/];\r\n        });\r\n    });\r\n}\r\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar GC_DID_NOT_RUN = {\r\n    didRun: false,\r\n    sequenceNumbersCollected: 0,\r\n    targetsRemoved: 0,\r\n    documentsRemoved: 0\r\n};\r\nvar LRU_COLLECTION_DISABLED = -1;\r\nvar LRU_DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;\r\nvar LruParams = /** @class */ (function () {\r\n    function LruParams(\r\n    // When we attempt to collect, we will only do so if the cache size is greater than this\r\n    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.\r\n    cacheSizeCollectionThreshold, \r\n    // The percentage of sequence numbers that we will attempt to collect\r\n    percentileToCollect, \r\n    // A cap on the total number of sequence numbers that will be collected. This prevents\r\n    // us from collecting a huge number of sequence numbers if the cache has grown very large.\r\n    maximumSequenceNumbersToCollect) {\r\n        this.cacheSizeCollectionThreshold = cacheSizeCollectionThreshold;\r\n        this.percentileToCollect = percentileToCollect;\r\n        this.maximumSequenceNumbersToCollect = maximumSequenceNumbersToCollect;\r\n    }\r\n    LruParams.withCacheSize = function (cacheSize) {\r\n        return new LruParams(cacheSize, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);\r\n    };\r\n    return LruParams;\r\n}());\r\nLruParams.DEFAULT_COLLECTION_PERCENTILE = 10;\r\nLruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;\r\nLruParams.DEFAULT = new LruParams(LRU_DEFAULT_CACHE_SIZE_BYTES, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);\r\nLruParams.DISABLED = new LruParams(LRU_COLLECTION_DISABLED, 0, 0);\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$e = 'LruGarbageCollector';\r\nvar LRU_MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;\r\n/** How long we wait to try running LRU GC after SDK initialization. */\r\nvar INITIAL_GC_DELAY_MS = 1 * 60 * 1000;\r\n/** Minimum amount of time between GC checks, after the first one. */\r\nvar REGULAR_GC_DELAY_MS = 5 * 60 * 1000;\r\nfunction bufferEntryComparator(_d, _e) {\r\n    var aSequence = _d[0], aIndex = _d[1];\r\n    var bSequence = _e[0], bIndex = _e[1];\r\n    var seqCmp = primitiveComparator(aSequence, bSequence);\r\n    if (seqCmp === 0) {\r\n        // This order doesn't matter, but we can bias against churn by sorting\r\n        // entries created earlier as less than newer entries.\r\n        return primitiveComparator(aIndex, bIndex);\r\n    }\r\n    else {\r\n        return seqCmp;\r\n    }\r\n}\r\n/**\r\n * Used to calculate the nth sequence number. Keeps a rolling buffer of the\r\n * lowest n values passed to `addElement`, and finally reports the largest of\r\n * them in `maxValue`.\r\n */\r\nvar RollingSequenceNumberBuffer = /** @class */ (function () {\r\n    function RollingSequenceNumberBuffer(maxElements) {\r\n        this.maxElements = maxElements;\r\n        this.buffer = new SortedSet(bufferEntryComparator);\r\n        this.previousIndex = 0;\r\n    }\r\n    RollingSequenceNumberBuffer.prototype.nextIndex = function () {\r\n        return ++this.previousIndex;\r\n    };\r\n    RollingSequenceNumberBuffer.prototype.addElement = function (sequenceNumber) {\r\n        var entry = [sequenceNumber, this.nextIndex()];\r\n        if (this.buffer.size < this.maxElements) {\r\n            this.buffer = this.buffer.add(entry);\r\n        }\r\n        else {\r\n            var highestValue = this.buffer.last();\r\n            if (bufferEntryComparator(entry, highestValue) < 0) {\r\n                this.buffer = this.buffer.delete(highestValue).add(entry);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(RollingSequenceNumberBuffer.prototype, \"maxValue\", {\r\n        get: function () {\r\n            // Guaranteed to be non-empty. If we decide we are not collecting any\r\n            // sequence numbers, nthSequenceNumber below short-circuits. If we have\r\n            // decided that we are collecting n sequence numbers, it's because n is some\r\n            // percentage of the existing sequence numbers. That means we should never\r\n            // be in a situation where we are collecting sequence numbers but don't\r\n            // actually have any.\r\n            return this.buffer.last()[0];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return RollingSequenceNumberBuffer;\r\n}());\r\n/**\r\n * This class is responsible for the scheduling of LRU garbage collection. It handles checking\r\n * whether or not GC is enabled, as well as which delay to use before the next run.\r\n */\r\nvar LruScheduler = /** @class */ (function () {\r\n    function LruScheduler(garbageCollector, asyncQueue) {\r\n        this.garbageCollector = garbageCollector;\r\n        this.asyncQueue = asyncQueue;\r\n        this.hasRun = false;\r\n        this.gcTask = null;\r\n    }\r\n    LruScheduler.prototype.start = function (localStore) {\r\n        if (this.garbageCollector.params.cacheSizeCollectionThreshold !==\r\n            LRU_COLLECTION_DISABLED) {\r\n            this.scheduleGC(localStore);\r\n        }\r\n    };\r\n    LruScheduler.prototype.stop = function () {\r\n        if (this.gcTask) {\r\n            this.gcTask.cancel();\r\n            this.gcTask = null;\r\n        }\r\n    };\r\n    Object.defineProperty(LruScheduler.prototype, \"started\", {\r\n        get: function () {\r\n            return this.gcTask !== null;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    LruScheduler.prototype.scheduleGC = function (localStore) {\r\n        var _this = this;\r\n        var delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;\r\n        logDebug('LruGarbageCollector', \"Garbage collection scheduled in \" + delay + \"ms\");\r\n        this.gcTask = this.asyncQueue.enqueueAfterDelay(\"lru_garbage_collection\" /* LruGarbageCollection */, delay, function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n            var e_1;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        this.gcTask = null;\r\n                        this.hasRun = true;\r\n                        _d.label = 1;\r\n                    case 1:\r\n                        _d.trys.push([1, 3, , 7]);\r\n                        return [4 /*yield*/, localStore.collectGarbage(this.garbageCollector)];\r\n                    case 2:\r\n                        _d.sent();\r\n                        return [3 /*break*/, 7];\r\n                    case 3:\r\n                        e_1 = _d.sent();\r\n                        if (!isIndexedDbTransactionError(e_1)) return [3 /*break*/, 4];\r\n                        logDebug(LOG_TAG$e, 'Ignoring IndexedDB error during garbage collection: ', e_1);\r\n                        return [3 /*break*/, 6];\r\n                    case 4: return [4 /*yield*/, ignoreIfPrimaryLeaseLoss(e_1)];\r\n                    case 5:\r\n                        _d.sent();\r\n                        _d.label = 6;\r\n                    case 6: return [3 /*break*/, 7];\r\n                    case 7: return [4 /*yield*/, this.scheduleGC(localStore)];\r\n                    case 8:\r\n                        _d.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    return LruScheduler;\r\n}());\r\n/** Implements the steps for LRU garbage collection. */\r\nvar LruGarbageCollectorImpl = /** @class */ (function () {\r\n    function LruGarbageCollectorImpl(delegate, params) {\r\n        this.delegate = delegate;\r\n        this.params = params;\r\n    }\r\n    LruGarbageCollectorImpl.prototype.calculateTargetCount = function (txn, percentile) {\r\n        return this.delegate.getSequenceNumberCount(txn).next(function (targetCount) {\r\n            return Math.floor((percentile / 100.0) * targetCount);\r\n        });\r\n    };\r\n    LruGarbageCollectorImpl.prototype.nthSequenceNumber = function (txn, n) {\r\n        var _this = this;\r\n        if (n === 0) {\r\n            return PersistencePromise.resolve(ListenSequence.INVALID);\r\n        }\r\n        var buffer = new RollingSequenceNumberBuffer(n);\r\n        return this.delegate\r\n            .forEachTarget(txn, function (target) { return buffer.addElement(target.sequenceNumber); })\r\n            .next(function () {\r\n            return _this.delegate.forEachOrphanedDocumentSequenceNumber(txn, function (sequenceNumber) { return buffer.addElement(sequenceNumber); });\r\n        })\r\n            .next(function () { return buffer.maxValue; });\r\n    };\r\n    LruGarbageCollectorImpl.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {\r\n        return this.delegate.removeTargets(txn, upperBound, activeTargetIds);\r\n    };\r\n    LruGarbageCollectorImpl.prototype.removeOrphanedDocuments = function (txn, upperBound) {\r\n        return this.delegate.removeOrphanedDocuments(txn, upperBound);\r\n    };\r\n    LruGarbageCollectorImpl.prototype.collect = function (txn, activeTargetIds) {\r\n        var _this = this;\r\n        if (this.params.cacheSizeCollectionThreshold === LRU_COLLECTION_DISABLED) {\r\n            logDebug('LruGarbageCollector', 'Garbage collection skipped; disabled');\r\n            return PersistencePromise.resolve(GC_DID_NOT_RUN);\r\n        }\r\n        return this.getCacheSize(txn).next(function (cacheSize) {\r\n            if (cacheSize < _this.params.cacheSizeCollectionThreshold) {\r\n                logDebug('LruGarbageCollector', \"Garbage collection skipped; Cache size \" + cacheSize + \" \" +\r\n                    (\"is lower than threshold \" + _this.params.cacheSizeCollectionThreshold));\r\n                return GC_DID_NOT_RUN;\r\n            }\r\n            else {\r\n                return _this.runGarbageCollection(txn, activeTargetIds);\r\n            }\r\n        });\r\n    };\r\n    LruGarbageCollectorImpl.prototype.getCacheSize = function (txn) {\r\n        return this.delegate.getCacheSize(txn);\r\n    };\r\n    LruGarbageCollectorImpl.prototype.runGarbageCollection = function (txn, activeTargetIds) {\r\n        var _this = this;\r\n        var upperBoundSequenceNumber;\r\n        var sequenceNumbersToCollect, targetsRemoved;\r\n        // Timestamps for various pieces of the process\r\n        var countedTargetsTs, foundUpperBoundTs, removedTargetsTs, removedDocumentsTs;\r\n        var startTs = Date.now();\r\n        return this.calculateTargetCount(txn, this.params.percentileToCollect)\r\n            .next(function (sequenceNumbers) {\r\n            // Cap at the configured max\r\n            if (sequenceNumbers > _this.params.maximumSequenceNumbersToCollect) {\r\n                logDebug('LruGarbageCollector', 'Capping sequence numbers to collect down ' +\r\n                    (\"to the maximum of \" + _this.params.maximumSequenceNumbersToCollect + \" \") +\r\n                    (\"from \" + sequenceNumbers));\r\n                sequenceNumbersToCollect = _this.params\r\n                    .maximumSequenceNumbersToCollect;\r\n            }\r\n            else {\r\n                sequenceNumbersToCollect = sequenceNumbers;\r\n            }\r\n            countedTargetsTs = Date.now();\r\n            return _this.nthSequenceNumber(txn, sequenceNumbersToCollect);\r\n        })\r\n            .next(function (upperBound) {\r\n            upperBoundSequenceNumber = upperBound;\r\n            foundUpperBoundTs = Date.now();\r\n            return _this.removeTargets(txn, upperBoundSequenceNumber, activeTargetIds);\r\n        })\r\n            .next(function (numTargetsRemoved) {\r\n            targetsRemoved = numTargetsRemoved;\r\n            removedTargetsTs = Date.now();\r\n            return _this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);\r\n        })\r\n            .next(function (documentsRemoved) {\r\n            removedDocumentsTs = Date.now();\r\n            if (getLogLevel() <= logger.LogLevel.DEBUG) {\r\n                var desc = 'LRU Garbage Collection\\n' +\r\n                    (\"\\tCounted targets in \" + (countedTargetsTs - startTs) + \"ms\\n\") +\r\n                    (\"\\tDetermined least recently used \" + sequenceNumbersToCollect + \" in \") +\r\n                    (foundUpperBoundTs - countedTargetsTs + \"ms\\n\") +\r\n                    (\"\\tRemoved \" + targetsRemoved + \" targets in \") +\r\n                    (removedTargetsTs - foundUpperBoundTs + \"ms\\n\") +\r\n                    (\"\\tRemoved \" + documentsRemoved + \" documents in \") +\r\n                    (removedDocumentsTs - removedTargetsTs + \"ms\\n\") +\r\n                    (\"Total Duration: \" + (removedDocumentsTs - startTs) + \"ms\");\r\n                logDebug('LruGarbageCollector', desc);\r\n            }\r\n            return PersistencePromise.resolve({\r\n                didRun: true,\r\n                sequenceNumbersCollected: sequenceNumbersToCollect,\r\n                targetsRemoved: targetsRemoved,\r\n                documentsRemoved: documentsRemoved\r\n            });\r\n        });\r\n    };\r\n    return LruGarbageCollectorImpl;\r\n}());\r\nfunction newLruGarbageCollector(delegate, params) {\r\n    return new LruGarbageCollectorImpl(delegate, params);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Provides LRU functionality for IndexedDB persistence. */\r\nvar IndexedDbLruDelegateImpl = /** @class */ (function () {\r\n    function IndexedDbLruDelegateImpl(db, params) {\r\n        this.db = db;\r\n        this.garbageCollector = newLruGarbageCollector(this, params);\r\n    }\r\n    IndexedDbLruDelegateImpl.prototype.getSequenceNumberCount = function (txn) {\r\n        var docCountPromise = this.orphanedDocumentCount(txn);\r\n        var targetCountPromise = this.db.getTargetCache().getTargetCount(txn);\r\n        return targetCountPromise.next(function (targetCount) { return docCountPromise.next(function (docCount) { return targetCount + docCount; }); });\r\n    };\r\n    IndexedDbLruDelegateImpl.prototype.orphanedDocumentCount = function (txn) {\r\n        var orphanedCount = 0;\r\n        return this.forEachOrphanedDocumentSequenceNumber(txn, function (_) {\r\n            orphanedCount++;\r\n        }).next(function () { return orphanedCount; });\r\n    };\r\n    IndexedDbLruDelegateImpl.prototype.forEachTarget = function (txn, f) {\r\n        return this.db.getTargetCache().forEachTarget(txn, f);\r\n    };\r\n    IndexedDbLruDelegateImpl.prototype.forEachOrphanedDocumentSequenceNumber = function (txn, f) {\r\n        return this.forEachOrphanedDocument(txn, function (docKey, sequenceNumber) { return f(sequenceNumber); });\r\n    };\r\n    IndexedDbLruDelegateImpl.prototype.addReference = function (txn, targetId, key) {\r\n        return writeSentinelKey(txn, key);\r\n    };\r\n    IndexedDbLruDelegateImpl.prototype.removeReference = function (txn, targetId, key) {\r\n        return writeSentinelKey(txn, key);\r\n    };\r\n    IndexedDbLruDelegateImpl.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {\r\n        return this.db.getTargetCache().removeTargets(txn, upperBound, activeTargetIds);\r\n    };\r\n    IndexedDbLruDelegateImpl.prototype.markPotentiallyOrphaned = function (txn, key) {\r\n        return writeSentinelKey(txn, key);\r\n    };\r\n    /**\r\n     * Returns true if anything would prevent this document from being garbage\r\n     * collected, given that the document in question is not present in any\r\n     * targets and has a sequence number less than or equal to the upper bound for\r\n     * the collection run.\r\n     */\r\n    IndexedDbLruDelegateImpl.prototype.isPinned = function (txn, docKey) {\r\n        return mutationQueuesContainKey(txn, docKey);\r\n    };\r\n    IndexedDbLruDelegateImpl.prototype.removeOrphanedDocuments = function (txn, upperBound) {\r\n        var _this = this;\r\n        var documentCache = this.db.getRemoteDocumentCache();\r\n        var changeBuffer = documentCache.newChangeBuffer();\r\n        var promises = [];\r\n        var documentCount = 0;\r\n        var iteration = this.forEachOrphanedDocument(txn, function (docKey, sequenceNumber) {\r\n            if (sequenceNumber <= upperBound) {\r\n                var p = _this.isPinned(txn, docKey).next(function (isPinned) {\r\n                    if (!isPinned) {\r\n                        documentCount++;\r\n                        // Our size accounting requires us to read all documents before\r\n                        // removing them.\r\n                        return changeBuffer.getEntry(txn, docKey).next(function () {\r\n                            changeBuffer.removeEntry(docKey);\r\n                            return documentTargetStore(txn).delete(sentinelKey$1(docKey));\r\n                        });\r\n                    }\r\n                });\r\n                promises.push(p);\r\n            }\r\n        });\r\n        return iteration\r\n            .next(function () { return PersistencePromise.waitFor(promises); })\r\n            .next(function () { return changeBuffer.apply(txn); })\r\n            .next(function () { return documentCount; });\r\n    };\r\n    IndexedDbLruDelegateImpl.prototype.removeTarget = function (txn, targetData) {\r\n        var updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\r\n        return this.db.getTargetCache().updateTargetData(txn, updated);\r\n    };\r\n    IndexedDbLruDelegateImpl.prototype.updateLimboDocument = function (txn, key) {\r\n        return writeSentinelKey(txn, key);\r\n    };\r\n    /**\r\n     * Call provided function for each document in the cache that is 'orphaned'. Orphaned\r\n     * means not a part of any target, so the only entry in the target-document index for\r\n     * that document will be the sentinel row (targetId 0), which will also have the sequence\r\n     * number for the last time the document was accessed.\r\n     */\r\n    IndexedDbLruDelegateImpl.prototype.forEachOrphanedDocument = function (txn, f) {\r\n        var store = documentTargetStore(txn);\r\n        var nextToReport = ListenSequence.INVALID;\r\n        var nextPath;\r\n        return store\r\n            .iterate({\r\n            index: DbTargetDocument.documentTargetsIndex\r\n        }, function (_d, _e) {\r\n            var targetId = _d[0]; _d[1];\r\n            var path = _e.path, sequenceNumber = _e.sequenceNumber;\r\n            if (targetId === 0) {\r\n                // if nextToReport is valid, report it, this is a new key so the\r\n                // last one must not be a member of any targets.\r\n                if (nextToReport !== ListenSequence.INVALID) {\r\n                    f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\r\n                }\r\n                // set nextToReport to be this sequence number. It's the next one we\r\n                // might report, if we don't find any targets for this document.\r\n                // Note that the sequence number must be defined when the targetId\r\n                // is 0.\r\n                nextToReport = sequenceNumber;\r\n                nextPath = path;\r\n            }\r\n            else {\r\n                // set nextToReport to be invalid, we know we don't need to report\r\n                // this one since we found a target for it.\r\n                nextToReport = ListenSequence.INVALID;\r\n            }\r\n        })\r\n            .next(function () {\r\n            // Since we report sequence numbers after getting to the next key, we\r\n            // need to check if the last key we iterated over was an orphaned\r\n            // document and report it.\r\n            if (nextToReport !== ListenSequence.INVALID) {\r\n                f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\r\n            }\r\n        });\r\n    };\r\n    IndexedDbLruDelegateImpl.prototype.getCacheSize = function (txn) {\r\n        return this.db.getRemoteDocumentCache().getSize(txn);\r\n    };\r\n    return IndexedDbLruDelegateImpl;\r\n}());\r\nfunction sentinelKey$1(key) {\r\n    return [0, encodeResourcePath(key.path)];\r\n}\r\n/**\r\n * @returns A value suitable for writing a sentinel row in the target-document\r\n * store.\r\n */\r\nfunction sentinelRow(key, sequenceNumber) {\r\n    return new DbTargetDocument(0, encodeResourcePath(key.path), sequenceNumber);\r\n}\r\nfunction writeSentinelKey(txn, key) {\r\n    return documentTargetStore(txn).put(sentinelRow(key, txn.currentSequenceNumber));\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A map implementation that uses objects as keys. Objects must have an\r\n * associated equals function and must be immutable. Entries in the map are\r\n * stored together with the key being produced from the mapKeyFn. This map\r\n * automatically handles collisions of keys.\r\n */\r\nvar ObjectMap = /** @class */ (function () {\r\n    function ObjectMap(mapKeyFn, equalsFn) {\r\n        this.mapKeyFn = mapKeyFn;\r\n        this.equalsFn = equalsFn;\r\n        /**\r\n         * The inner map for a key/value pair. Due to the possibility of collisions we\r\n         * keep a list of entries that we do a linear search through to find an actual\r\n         * match. Note that collisions should be rare, so we still expect near\r\n         * constant time lookups in practice.\r\n         */\r\n        this.inner = {};\r\n    }\r\n    /** Get a value for this key, or undefined if it does not exist. */\r\n    ObjectMap.prototype.get = function (key) {\r\n        var id = this.mapKeyFn(key);\r\n        var matches = this.inner[id];\r\n        if (matches === undefined) {\r\n            return undefined;\r\n        }\r\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\r\n            var _d = matches_1[_i], otherKey = _d[0], value = _d[1];\r\n            if (this.equalsFn(otherKey, key)) {\r\n                return value;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    ObjectMap.prototype.has = function (key) {\r\n        return this.get(key) !== undefined;\r\n    };\r\n    /** Put this key and value in the map. */\r\n    ObjectMap.prototype.set = function (key, value) {\r\n        var id = this.mapKeyFn(key);\r\n        var matches = this.inner[id];\r\n        if (matches === undefined) {\r\n            this.inner[id] = [[key, value]];\r\n            return;\r\n        }\r\n        for (var i = 0; i < matches.length; i++) {\r\n            if (this.equalsFn(matches[i][0], key)) {\r\n                matches[i] = [key, value];\r\n                return;\r\n            }\r\n        }\r\n        matches.push([key, value]);\r\n    };\r\n    /**\r\n     * Remove this key from the map. Returns a boolean if anything was deleted.\r\n     */\r\n    ObjectMap.prototype.delete = function (key) {\r\n        var id = this.mapKeyFn(key);\r\n        var matches = this.inner[id];\r\n        if (matches === undefined) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < matches.length; i++) {\r\n            if (this.equalsFn(matches[i][0], key)) {\r\n                if (matches.length === 1) {\r\n                    delete this.inner[id];\r\n                }\r\n                else {\r\n                    matches.splice(i, 1);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    ObjectMap.prototype.forEach = function (fn) {\r\n        forEach(this.inner, function (_, entries) {\r\n            for (var _i = 0, entries_2 = entries; _i < entries_2.length; _i++) {\r\n                var _d = entries_2[_i], k = _d[0], v = _d[1];\r\n                fn(k, v);\r\n            }\r\n        });\r\n    };\r\n    ObjectMap.prototype.isEmpty = function () {\r\n        return isEmpty(this.inner);\r\n    };\r\n    return ObjectMap;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\r\n * It can be used to batch up a set of changes to be written to the cache, but\r\n * additionally supports reading entries back with the `getEntry()` method,\r\n * falling back to the underlying RemoteDocumentCache if no entry is\r\n * buffered.\r\n *\r\n * Entries added to the cache *must* be read first. This is to facilitate\r\n * calculating the size delta of the pending changes.\r\n *\r\n * PORTING NOTE: This class was implemented then removed from other platforms.\r\n * If byte-counting ends up being needed on the other platforms, consider\r\n * porting this class as part of that implementation work.\r\n */\r\nvar RemoteDocumentChangeBuffer = /** @class */ (function () {\r\n    function RemoteDocumentChangeBuffer() {\r\n        // A mapping of document key to the new cache entry that should be written (or null if any\r\n        // existing cache entry should be removed).\r\n        this.changes = new ObjectMap(function (key) { return key.toString(); }, function (l, r) { return l.isEqual(r); });\r\n        this.changesApplied = false;\r\n    }\r\n    RemoteDocumentChangeBuffer.prototype.getReadTime = function (key) {\r\n        var change = this.changes.get(key);\r\n        if (change) {\r\n            return change.readTime;\r\n        }\r\n        return SnapshotVersion.min();\r\n    };\r\n    /**\r\n     * Buffers a `RemoteDocumentCache.addEntry()` call.\r\n     *\r\n     * You can only modify documents that have already been retrieved via\r\n     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\r\n     */\r\n    RemoteDocumentChangeBuffer.prototype.addEntry = function (document, readTime) {\r\n        this.assertNotApplied();\r\n        this.changes.set(document.key, { document: document, readTime: readTime });\r\n    };\r\n    /**\r\n     * Buffers a `RemoteDocumentCache.removeEntry()` call.\r\n     *\r\n     * You can only remove documents that have already been retrieved via\r\n     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\r\n     */\r\n    RemoteDocumentChangeBuffer.prototype.removeEntry = function (key, readTime) {\r\n        if (readTime === void 0) { readTime = null; }\r\n        this.assertNotApplied();\r\n        this.changes.set(key, {\r\n            document: MutableDocument.newInvalidDocument(key),\r\n            readTime: readTime\r\n        });\r\n    };\r\n    /**\r\n     * Looks up an entry in the cache. The buffered changes will first be checked,\r\n     * and if no buffered change applies, this will forward to\r\n     * `RemoteDocumentCache.getEntry()`.\r\n     *\r\n     * @param transaction - The transaction in which to perform any persistence\r\n     *     operations.\r\n     * @param documentKey - The key of the entry to look up.\r\n     * @returns The cached document or an invalid document if we have nothing\r\n     * cached.\r\n     */\r\n    RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {\r\n        this.assertNotApplied();\r\n        var bufferedEntry = this.changes.get(documentKey);\r\n        if (bufferedEntry !== undefined) {\r\n            return PersistencePromise.resolve(bufferedEntry.document);\r\n        }\r\n        else {\r\n            return this.getFromCache(transaction, documentKey);\r\n        }\r\n    };\r\n    /**\r\n     * Looks up several entries in the cache, forwarding to\r\n     * `RemoteDocumentCache.getEntry()`.\r\n     *\r\n     * @param transaction - The transaction in which to perform any persistence\r\n     *     operations.\r\n     * @param documentKeys - The keys of the entries to look up.\r\n     * @returns A map of cached documents, indexed by key. If an entry cannot be\r\n     *     found, the corresponding key will be mapped to an invalid document.\r\n     */\r\n    RemoteDocumentChangeBuffer.prototype.getEntries = function (transaction, documentKeys) {\r\n        return this.getAllFromCache(transaction, documentKeys);\r\n    };\r\n    /**\r\n     * Applies buffered changes to the underlying RemoteDocumentCache, using\r\n     * the provided transaction.\r\n     */\r\n    RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {\r\n        this.assertNotApplied();\r\n        this.changesApplied = true;\r\n        return this.applyChanges(transaction);\r\n    };\r\n    /** Helper to assert this.changes is not null  */\r\n    RemoteDocumentChangeBuffer.prototype.assertNotApplied = function () {\r\n    };\r\n    return RemoteDocumentChangeBuffer;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The RemoteDocumentCache for IndexedDb. To construct, invoke\r\n * `newIndexedDbRemoteDocumentCache()`.\r\n */\r\nvar IndexedDbRemoteDocumentCacheImpl = /** @class */ (function () {\r\n    /**\r\n     * @param serializer - The document serializer.\r\n     * @param indexManager - The query indexes that need to be maintained.\r\n     */\r\n    function IndexedDbRemoteDocumentCacheImpl(serializer, indexManager) {\r\n        this.serializer = serializer;\r\n        this.indexManager = indexManager;\r\n    }\r\n    /**\r\n     * Adds the supplied entries to the cache.\r\n     *\r\n     * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer\r\n     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\r\n     */\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.addEntry = function (transaction, key, doc) {\r\n        var documentStore = remoteDocumentsStore(transaction);\r\n        return documentStore.put(dbKey(key), doc);\r\n    };\r\n    /**\r\n     * Removes a document from the cache.\r\n     *\r\n     * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer\r\n     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\r\n     */\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.removeEntry = function (transaction, documentKey) {\r\n        var store = remoteDocumentsStore(transaction);\r\n        var key = dbKey(documentKey);\r\n        return store.delete(key);\r\n    };\r\n    /**\r\n     * Updates the current cache size.\r\n     *\r\n     * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the\r\n     * cache's metadata.\r\n     */\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.updateMetadata = function (transaction, sizeDelta) {\r\n        var _this = this;\r\n        return this.getMetadata(transaction).next(function (metadata) {\r\n            metadata.byteSize += sizeDelta;\r\n            return _this.setMetadata(transaction, metadata);\r\n        });\r\n    };\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.getEntry = function (transaction, documentKey) {\r\n        var _this = this;\r\n        return remoteDocumentsStore(transaction)\r\n            .get(dbKey(documentKey))\r\n            .next(function (dbRemoteDoc) {\r\n            return _this.maybeDecodeDocument(documentKey, dbRemoteDoc);\r\n        });\r\n    };\r\n    /**\r\n     * Looks up an entry in the cache.\r\n     *\r\n     * @param documentKey - The key of the entry to look up.\r\n     * @returns The cached document entry and its size.\r\n     */\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.getSizedEntry = function (transaction, documentKey) {\r\n        var _this = this;\r\n        return remoteDocumentsStore(transaction)\r\n            .get(dbKey(documentKey))\r\n            .next(function (dbRemoteDoc) {\r\n            var doc = _this.maybeDecodeDocument(documentKey, dbRemoteDoc);\r\n            return {\r\n                document: doc,\r\n                size: dbDocumentSize(dbRemoteDoc)\r\n            };\r\n        });\r\n    };\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.getEntries = function (transaction, documentKeys) {\r\n        var _this = this;\r\n        var results = mutableDocumentMap();\r\n        return this.forEachDbEntry(transaction, documentKeys, function (key, dbRemoteDoc) {\r\n            var doc = _this.maybeDecodeDocument(key, dbRemoteDoc);\r\n            results = results.insert(key, doc);\r\n        }).next(function () { return results; });\r\n    };\r\n    /**\r\n     * Looks up several entries in the cache.\r\n     *\r\n     * @param documentKeys - The set of keys entries to look up.\r\n     * @returns A map of documents indexed by key and a map of sizes indexed by\r\n     *     key (zero if the document does not exist).\r\n     */\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.getSizedEntries = function (transaction, documentKeys) {\r\n        var _this = this;\r\n        var results = mutableDocumentMap();\r\n        var sizeMap = new SortedMap(DocumentKey.comparator);\r\n        return this.forEachDbEntry(transaction, documentKeys, function (key, dbRemoteDoc) {\r\n            var doc = _this.maybeDecodeDocument(key, dbRemoteDoc);\r\n            results = results.insert(key, doc);\r\n            sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc));\r\n        }).next(function () {\r\n            return { documents: results, sizeMap: sizeMap };\r\n        });\r\n    };\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.forEachDbEntry = function (transaction, documentKeys, callback) {\r\n        if (documentKeys.isEmpty()) {\r\n            return PersistencePromise.resolve();\r\n        }\r\n        var range = IDBKeyRange.bound(documentKeys.first().path.toArray(), documentKeys.last().path.toArray());\r\n        var keyIter = documentKeys.getIterator();\r\n        var nextKey = keyIter.getNext();\r\n        return remoteDocumentsStore(transaction)\r\n            .iterate({ range: range }, function (potentialKeyRaw, dbRemoteDoc, control) {\r\n            var potentialKey = DocumentKey.fromSegments(potentialKeyRaw);\r\n            // Go through keys not found in cache.\r\n            while (nextKey && DocumentKey.comparator(nextKey, potentialKey) < 0) {\r\n                callback(nextKey, null);\r\n                nextKey = keyIter.getNext();\r\n            }\r\n            if (nextKey && nextKey.isEqual(potentialKey)) {\r\n                // Key found in cache.\r\n                callback(nextKey, dbRemoteDoc);\r\n                nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\r\n            }\r\n            // Skip to the next key (if there is one).\r\n            if (nextKey) {\r\n                control.skip(nextKey.path.toArray());\r\n            }\r\n            else {\r\n                control.done();\r\n            }\r\n        })\r\n            .next(function () {\r\n            // The rest of the keys are not in the cache. One case where `iterate`\r\n            // above won't go through them is when the cache is empty.\r\n            while (nextKey) {\r\n                callback(nextKey, null);\r\n                nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\r\n            }\r\n        });\r\n    };\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.getDocumentsMatchingQuery = function (transaction, query, sinceReadTime) {\r\n        var _this = this;\r\n        var results = mutableDocumentMap();\r\n        var immediateChildrenPathLength = query.path.length + 1;\r\n        var iterationOptions = {};\r\n        if (sinceReadTime.isEqual(SnapshotVersion.min())) {\r\n            // Documents are ordered by key, so we can use a prefix scan to narrow\r\n            // down the documents we need to match the query against.\r\n            var startKey = query.path.toArray();\r\n            iterationOptions.range = IDBKeyRange.lowerBound(startKey);\r\n        }\r\n        else {\r\n            // Execute an index-free query and filter by read time. This is safe\r\n            // since all document changes to queries that have a\r\n            // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.\r\n            var collectionKey = query.path.toArray();\r\n            var readTimeKey = toDbTimestampKey(sinceReadTime);\r\n            iterationOptions.range = IDBKeyRange.lowerBound([collectionKey, readTimeKey], \r\n            /* open= */ true);\r\n            iterationOptions.index = DbRemoteDocument.collectionReadTimeIndex;\r\n        }\r\n        return remoteDocumentsStore(transaction)\r\n            .iterate(iterationOptions, function (key, dbRemoteDoc, control) {\r\n            // The query is actually returning any path that starts with the query\r\n            // path prefix which may include documents in subcollections. For\r\n            // example, a query on 'rooms' will return rooms/abc/messages/xyx but we\r\n            // shouldn't match it. Fix this by discarding rows with document keys\r\n            // more than one segment longer than the query path.\r\n            if (key.length !== immediateChildrenPathLength) {\r\n                return;\r\n            }\r\n            var document = fromDbRemoteDocument(_this.serializer, dbRemoteDoc);\r\n            if (!query.path.isPrefixOf(document.key.path)) {\r\n                control.done();\r\n            }\r\n            else if (queryMatches(query, document)) {\r\n                results = results.insert(document.key, document);\r\n            }\r\n        })\r\n            .next(function () { return results; });\r\n    };\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.newChangeBuffer = function (options) {\r\n        return new IndexedDbRemoteDocumentChangeBuffer(this, !!options && options.trackRemovals);\r\n    };\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.getSize = function (txn) {\r\n        return this.getMetadata(txn).next(function (metadata) { return metadata.byteSize; });\r\n    };\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.getMetadata = function (txn) {\r\n        return documentGlobalStore(txn)\r\n            .get(DbRemoteDocumentGlobal.key)\r\n            .next(function (metadata) {\r\n            hardAssert(!!metadata);\r\n            return metadata;\r\n        });\r\n    };\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.setMetadata = function (txn, metadata) {\r\n        return documentGlobalStore(txn).put(DbRemoteDocumentGlobal.key, metadata);\r\n    };\r\n    /**\r\n     * Decodes `remoteDoc` and returns the document (or null, if the document\r\n     * corresponds to the format used for sentinel deletes).\r\n     */\r\n    IndexedDbRemoteDocumentCacheImpl.prototype.maybeDecodeDocument = function (documentKey, dbRemoteDoc) {\r\n        if (dbRemoteDoc) {\r\n            var doc_4 = fromDbRemoteDocument(this.serializer, dbRemoteDoc);\r\n            // Whether the document is a sentinel removal and should only be used in the\r\n            // `getNewDocumentChanges()`\r\n            var isSentinelRemoval = doc_4.isNoDocument() && doc_4.version.isEqual(SnapshotVersion.min());\r\n            if (!isSentinelRemoval) {\r\n                return doc_4;\r\n            }\r\n        }\r\n        return MutableDocument.newInvalidDocument(documentKey);\r\n    };\r\n    return IndexedDbRemoteDocumentCacheImpl;\r\n}());\r\n/**\r\n * Creates a new IndexedDbRemoteDocumentCache.\r\n *\r\n * @param serializer - The document serializer.\r\n * @param indexManager - The query indexes that need to be maintained.\r\n */\r\nfunction newIndexedDbRemoteDocumentCache(serializer, indexManager) {\r\n    return new IndexedDbRemoteDocumentCacheImpl(serializer, indexManager);\r\n}\r\n/**\r\n * Returns the set of documents that have changed since the specified read\r\n * time.\r\n */\r\n// PORTING NOTE: This is only used for multi-tab synchronization.\r\nfunction remoteDocumentCacheGetNewDocumentChanges(remoteDocumentCache, transaction, sinceReadTime) {\r\n    var remoteDocumentCacheImpl = debugCast(remoteDocumentCache);\r\n    var changedDocs = mutableDocumentMap();\r\n    var lastReadTime = toDbTimestampKey(sinceReadTime);\r\n    var documentsStore = remoteDocumentsStore(transaction);\r\n    var range = IDBKeyRange.lowerBound(lastReadTime, true);\r\n    return documentsStore\r\n        .iterate({ index: DbRemoteDocument.readTimeIndex, range: range }, function (_, dbRemoteDoc) {\r\n        // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses\r\n        // the documents directly since we want to keep sentinel deletes.\r\n        var doc = fromDbRemoteDocument(remoteDocumentCacheImpl.serializer, dbRemoteDoc);\r\n        changedDocs = changedDocs.insert(doc.key, doc);\r\n        lastReadTime = dbRemoteDoc.readTime;\r\n    })\r\n        .next(function () {\r\n        return {\r\n            changedDocs: changedDocs,\r\n            readTime: fromDbTimestampKey(lastReadTime)\r\n        };\r\n    });\r\n}\r\n/**\r\n * Returns the read time of the most recently read document in the cache, or\r\n * SnapshotVersion.min() if not available.\r\n */\r\n// PORTING NOTE: This is only used for multi-tab synchronization.\r\nfunction remoteDocumentCacheGetLastReadTime(transaction) {\r\n    var documentsStore = remoteDocumentsStore(transaction);\r\n    // If there are no existing entries, we return SnapshotVersion.min().\r\n    var readTime = SnapshotVersion.min();\r\n    return documentsStore\r\n        .iterate({ index: DbRemoteDocument.readTimeIndex, reverse: true }, function (key, dbRemoteDoc, control) {\r\n        if (dbRemoteDoc.readTime) {\r\n            readTime = fromDbTimestampKey(dbRemoteDoc.readTime);\r\n        }\r\n        control.done();\r\n    })\r\n        .next(function () { return readTime; });\r\n}\r\n/**\r\n * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.\r\n *\r\n * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size\r\n * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb\r\n * when we apply the changes.\r\n */\r\nvar IndexedDbRemoteDocumentChangeBuffer = /** @class */ (function (_super) {\r\n    tslib.__extends(IndexedDbRemoteDocumentChangeBuffer, _super);\r\n    /**\r\n     * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.\r\n     * @param trackRemovals - Whether to create sentinel deletes that can be tracked by\r\n     * `getNewDocumentChanges()`.\r\n     */\r\n    function IndexedDbRemoteDocumentChangeBuffer(documentCache, trackRemovals) {\r\n        var _this = _super.call(this) || this;\r\n        _this.documentCache = documentCache;\r\n        _this.trackRemovals = trackRemovals;\r\n        // A map of document sizes prior to applying the changes in this buffer.\r\n        _this.documentSizes = new ObjectMap(function (key) { return key.toString(); }, function (l, r) { return l.isEqual(r); });\r\n        return _this;\r\n    }\r\n    IndexedDbRemoteDocumentChangeBuffer.prototype.applyChanges = function (transaction) {\r\n        var _this = this;\r\n        var promises = [];\r\n        var sizeDelta = 0;\r\n        var collectionParents = new SortedSet(function (l, r) { return primitiveComparator(l.canonicalString(), r.canonicalString()); });\r\n        this.changes.forEach(function (key, documentChange) {\r\n            var previousSize = _this.documentSizes.get(key);\r\n            if (documentChange.document.isValidDocument()) {\r\n                var doc_5 = toDbRemoteDocument(_this.documentCache.serializer, documentChange.document, _this.getReadTime(key));\r\n                collectionParents = collectionParents.add(key.path.popLast());\r\n                var size = dbDocumentSize(doc_5);\r\n                sizeDelta += size - previousSize;\r\n                promises.push(_this.documentCache.addEntry(transaction, key, doc_5));\r\n            }\r\n            else {\r\n                sizeDelta -= previousSize;\r\n                if (_this.trackRemovals) {\r\n                    // In order to track removals, we store a \"sentinel delete\" in the\r\n                    // RemoteDocumentCache. This entry is represented by a NoDocument\r\n                    // with a version of 0 and ignored by `maybeDecodeDocument()` but\r\n                    // preserved in `getNewDocumentChanges()`.\r\n                    var deletedDoc = toDbRemoteDocument(_this.documentCache.serializer, MutableDocument.newNoDocument(key, SnapshotVersion.min()), _this.getReadTime(key));\r\n                    promises.push(_this.documentCache.addEntry(transaction, key, deletedDoc));\r\n                }\r\n                else {\r\n                    promises.push(_this.documentCache.removeEntry(transaction, key));\r\n                }\r\n            }\r\n        });\r\n        collectionParents.forEach(function (parent) {\r\n            promises.push(_this.documentCache.indexManager.addToCollectionParentIndex(transaction, parent));\r\n        });\r\n        promises.push(this.documentCache.updateMetadata(transaction, sizeDelta));\r\n        return PersistencePromise.waitFor(promises);\r\n    };\r\n    IndexedDbRemoteDocumentChangeBuffer.prototype.getFromCache = function (transaction, documentKey) {\r\n        var _this = this;\r\n        // Record the size of everything we load from the cache so we can compute a delta later.\r\n        return this.documentCache\r\n            .getSizedEntry(transaction, documentKey)\r\n            .next(function (getResult) {\r\n            _this.documentSizes.set(documentKey, getResult.size);\r\n            return getResult.document;\r\n        });\r\n    };\r\n    IndexedDbRemoteDocumentChangeBuffer.prototype.getAllFromCache = function (transaction, documentKeys) {\r\n        var _this = this;\r\n        // Record the size of everything we load from the cache so we can compute\r\n        // a delta later.\r\n        return this.documentCache\r\n            .getSizedEntries(transaction, documentKeys)\r\n            .next(function (_d) {\r\n            var documents = _d.documents, sizeMap = _d.sizeMap;\r\n            // Note: `getAllFromCache` returns two maps instead of a single map from\r\n            // keys to `DocumentSizeEntry`s. This is to allow returning the\r\n            // `MutableDocumentMap` directly, without a conversion.\r\n            sizeMap.forEach(function (documentKey, size) {\r\n                _this.documentSizes.set(documentKey, size);\r\n            });\r\n            return documents;\r\n        });\r\n    };\r\n    return IndexedDbRemoteDocumentChangeBuffer;\r\n}(RemoteDocumentChangeBuffer));\r\nfunction documentGlobalStore(txn) {\r\n    return getStore(txn, DbRemoteDocumentGlobal.store);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\r\n */\r\nfunction remoteDocumentsStore(txn) {\r\n    return getStore(txn, DbRemoteDocument.store);\r\n}\r\nfunction dbKey(docKey) {\r\n    return docKey.path.toArray();\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Performs database creation and schema upgrades. */\r\nvar SchemaConverter = /** @class */ (function () {\r\n    function SchemaConverter(serializer) {\r\n        this.serializer = serializer;\r\n    }\r\n    /**\r\n     * Performs database creation and schema upgrades.\r\n     *\r\n     * Note that in production, this method is only ever used to upgrade the schema\r\n     * to SCHEMA_VERSION. Different values of toVersion are only used for testing\r\n     * and local feature development.\r\n     */\r\n    SchemaConverter.prototype.createOrUpgrade = function (db, txn, fromVersion, toVersion) {\r\n        var _this = this;\r\n        hardAssert(fromVersion < toVersion &&\r\n            fromVersion >= 0 &&\r\n            toVersion <= SCHEMA_VERSION);\r\n        var simpleDbTransaction = new SimpleDbTransaction('createOrUpgrade', txn);\r\n        if (fromVersion < 1 && toVersion >= 1) {\r\n            createPrimaryClientStore(db);\r\n            createMutationQueue(db);\r\n            createQueryCache(db);\r\n            createRemoteDocumentCache(db);\r\n        }\r\n        // Migration 2 to populate the targetGlobal object no longer needed since\r\n        // migration 3 unconditionally clears it.\r\n        var p = PersistencePromise.resolve();\r\n        if (fromVersion < 3 && toVersion >= 3) {\r\n            // Brand new clients don't need to drop and recreate--only clients that\r\n            // potentially have corrupt data.\r\n            if (fromVersion !== 0) {\r\n                dropQueryCache(db);\r\n                createQueryCache(db);\r\n            }\r\n            p = p.next(function () { return writeEmptyTargetGlobalEntry(simpleDbTransaction); });\r\n        }\r\n        if (fromVersion < 4 && toVersion >= 4) {\r\n            if (fromVersion !== 0) {\r\n                // Schema version 3 uses auto-generated keys to generate globally unique\r\n                // mutation batch IDs (this was previously ensured internally by the\r\n                // client). To migrate to the new schema, we have to read all mutations\r\n                // and write them back out. We preserve the existing batch IDs to guarantee\r\n                // consistency with other object stores. Any further mutation batch IDs will\r\n                // be auto-generated.\r\n                p = p.next(function () { return upgradeMutationBatchSchemaAndMigrateData(db, simpleDbTransaction); });\r\n            }\r\n            p = p.next(function () {\r\n                createClientMetadataStore(db);\r\n            });\r\n        }\r\n        if (fromVersion < 5 && toVersion >= 5) {\r\n            p = p.next(function () { return _this.removeAcknowledgedMutations(simpleDbTransaction); });\r\n        }\r\n        if (fromVersion < 6 && toVersion >= 6) {\r\n            p = p.next(function () {\r\n                createDocumentGlobalStore(db);\r\n                return _this.addDocumentGlobal(simpleDbTransaction);\r\n            });\r\n        }\r\n        if (fromVersion < 7 && toVersion >= 7) {\r\n            p = p.next(function () { return _this.ensureSequenceNumbers(simpleDbTransaction); });\r\n        }\r\n        if (fromVersion < 8 && toVersion >= 8) {\r\n            p = p.next(function () { return _this.createCollectionParentIndex(db, simpleDbTransaction); });\r\n        }\r\n        if (fromVersion < 9 && toVersion >= 9) {\r\n            p = p.next(function () {\r\n                // Multi-Tab used to manage its own changelog, but this has been moved\r\n                // to the DbRemoteDocument object store itself. Since the previous change\r\n                // log only contained transient data, we can drop its object store.\r\n                dropRemoteDocumentChangesStore(db);\r\n                createRemoteDocumentReadTimeIndex(txn);\r\n            });\r\n        }\r\n        if (fromVersion < 10 && toVersion >= 10) {\r\n            p = p.next(function () { return _this.rewriteCanonicalIds(simpleDbTransaction); });\r\n        }\r\n        if (fromVersion < 11 && toVersion >= 11) {\r\n            p = p.next(function () {\r\n                createBundlesStore(db);\r\n                createNamedQueriesStore(db);\r\n            });\r\n        }\r\n        return p;\r\n    };\r\n    SchemaConverter.prototype.addDocumentGlobal = function (txn) {\r\n        var byteCount = 0;\r\n        return txn\r\n            .store(DbRemoteDocument.store)\r\n            .iterate(function (_, doc) {\r\n            byteCount += dbDocumentSize(doc);\r\n        })\r\n            .next(function () {\r\n            var metadata = new DbRemoteDocumentGlobal(byteCount);\r\n            return txn\r\n                .store(DbRemoteDocumentGlobal.store)\r\n                .put(DbRemoteDocumentGlobal.key, metadata);\r\n        });\r\n    };\r\n    SchemaConverter.prototype.removeAcknowledgedMutations = function (txn) {\r\n        var _this = this;\r\n        var queuesStore = txn.store(DbMutationQueue.store);\r\n        var mutationsStore = txn.store(DbMutationBatch.store);\r\n        return queuesStore.loadAll().next(function (queues) {\r\n            return PersistencePromise.forEach(queues, function (queue) {\r\n                var range = IDBKeyRange.bound([queue.userId, BATCHID_UNKNOWN], [queue.userId, queue.lastAcknowledgedBatchId]);\r\n                return mutationsStore\r\n                    .loadAll(DbMutationBatch.userMutationsIndex, range)\r\n                    .next(function (dbBatches) {\r\n                    return PersistencePromise.forEach(dbBatches, function (dbBatch) {\r\n                        hardAssert(dbBatch.userId === queue.userId);\r\n                        var batch = fromDbMutationBatch(_this.serializer, dbBatch);\r\n                        return removeMutationBatch(txn, queue.userId, batch).next(function () { });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Ensures that every document in the remote document cache has a corresponding sentinel row\r\n     * with a sequence number. Missing rows are given the most recently used sequence number.\r\n     */\r\n    SchemaConverter.prototype.ensureSequenceNumbers = function (txn) {\r\n        var documentTargetStore = txn.store(DbTargetDocument.store);\r\n        var documentsStore = txn.store(DbRemoteDocument.store);\r\n        var globalTargetStore = txn.store(DbTargetGlobal.store);\r\n        return globalTargetStore.get(DbTargetGlobal.key).next(function (metadata) {\r\n            var writeSentinelKey = function (path) {\r\n                return documentTargetStore.put(new DbTargetDocument(0, encodeResourcePath(path), metadata.highestListenSequenceNumber));\r\n            };\r\n            var promises = [];\r\n            return documentsStore\r\n                .iterate(function (key, doc) {\r\n                var path = new ResourcePath(key);\r\n                var docSentinelKey = sentinelKey(path);\r\n                promises.push(documentTargetStore.get(docSentinelKey).next(function (maybeSentinel) {\r\n                    if (!maybeSentinel) {\r\n                        return writeSentinelKey(path);\r\n                    }\r\n                    else {\r\n                        return PersistencePromise.resolve();\r\n                    }\r\n                }));\r\n            })\r\n                .next(function () { return PersistencePromise.waitFor(promises); });\r\n        });\r\n    };\r\n    SchemaConverter.prototype.createCollectionParentIndex = function (db, txn) {\r\n        // Create the index.\r\n        db.createObjectStore(DbCollectionParent.store, {\r\n            keyPath: DbCollectionParent.keyPath\r\n        });\r\n        var collectionParentsStore = txn.store(DbCollectionParent.store);\r\n        // Helper to add an index entry iff we haven't already written it.\r\n        var cache = new MemoryCollectionParentIndex();\r\n        var addEntry = function (collectionPath) {\r\n            if (cache.add(collectionPath)) {\r\n                var collectionId = collectionPath.lastSegment();\r\n                var parentPath = collectionPath.popLast();\r\n                return collectionParentsStore.put({\r\n                    collectionId: collectionId,\r\n                    parent: encodeResourcePath(parentPath)\r\n                });\r\n            }\r\n        };\r\n        // Index existing remote documents.\r\n        return txn\r\n            .store(DbRemoteDocument.store)\r\n            .iterate({ keysOnly: true }, function (pathSegments, _) {\r\n            var path = new ResourcePath(pathSegments);\r\n            return addEntry(path.popLast());\r\n        })\r\n            .next(function () {\r\n            // Index existing mutations.\r\n            return txn\r\n                .store(DbDocumentMutation.store)\r\n                .iterate({ keysOnly: true }, function (_d, _) {\r\n                _d[0]; var encodedPath = _d[1]; _d[2];\r\n                var path = decodeResourcePath(encodedPath);\r\n                return addEntry(path.popLast());\r\n            });\r\n        });\r\n    };\r\n    SchemaConverter.prototype.rewriteCanonicalIds = function (txn) {\r\n        var _this = this;\r\n        var targetStore = txn.store(DbTarget.store);\r\n        return targetStore.iterate(function (key, originalDbTarget) {\r\n            var originalTargetData = fromDbTarget(originalDbTarget);\r\n            var updatedDbTarget = toDbTarget(_this.serializer, originalTargetData);\r\n            return targetStore.put(updatedDbTarget);\r\n        });\r\n    };\r\n    return SchemaConverter;\r\n}());\r\nfunction sentinelKey(path) {\r\n    return [0, encodeResourcePath(path)];\r\n}\r\nfunction createPrimaryClientStore(db) {\r\n    db.createObjectStore(DbPrimaryClient.store);\r\n}\r\nfunction createMutationQueue(db) {\r\n    db.createObjectStore(DbMutationQueue.store, {\r\n        keyPath: DbMutationQueue.keyPath\r\n    });\r\n    var mutationBatchesStore = db.createObjectStore(DbMutationBatch.store, {\r\n        keyPath: DbMutationBatch.keyPath,\r\n        autoIncrement: true\r\n    });\r\n    mutationBatchesStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, { unique: true });\r\n    db.createObjectStore(DbDocumentMutation.store);\r\n}\r\n/**\r\n * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads\r\n * and rewrites all data.\r\n */\r\nfunction upgradeMutationBatchSchemaAndMigrateData(db, txn) {\r\n    var v1MutationsStore = txn.store(DbMutationBatch.store);\r\n    return v1MutationsStore.loadAll().next(function (existingMutations) {\r\n        db.deleteObjectStore(DbMutationBatch.store);\r\n        var mutationsStore = db.createObjectStore(DbMutationBatch.store, {\r\n            keyPath: DbMutationBatch.keyPath,\r\n            autoIncrement: true\r\n        });\r\n        mutationsStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, { unique: true });\r\n        var v3MutationsStore = txn.store(DbMutationBatch.store);\r\n        var writeAll = existingMutations.map(function (mutation) { return v3MutationsStore.put(mutation); });\r\n        return PersistencePromise.waitFor(writeAll);\r\n    });\r\n}\r\nfunction createRemoteDocumentCache(db) {\r\n    db.createObjectStore(DbRemoteDocument.store);\r\n}\r\nfunction createDocumentGlobalStore(db) {\r\n    db.createObjectStore(DbRemoteDocumentGlobal.store);\r\n}\r\nfunction createQueryCache(db) {\r\n    var targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, {\r\n        keyPath: DbTargetDocument.keyPath\r\n    });\r\n    targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });\r\n    var targetStore = db.createObjectStore(DbTarget.store, {\r\n        keyPath: DbTarget.keyPath\r\n    });\r\n    // NOTE: This is unique only because the TargetId is the suffix.\r\n    targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });\r\n    db.createObjectStore(DbTargetGlobal.store);\r\n}\r\nfunction dropQueryCache(db) {\r\n    db.deleteObjectStore(DbTargetDocument.store);\r\n    db.deleteObjectStore(DbTarget.store);\r\n    db.deleteObjectStore(DbTargetGlobal.store);\r\n}\r\nfunction dropRemoteDocumentChangesStore(db) {\r\n    if (db.objectStoreNames.contains('remoteDocumentChanges')) {\r\n        db.deleteObjectStore('remoteDocumentChanges');\r\n    }\r\n}\r\n/**\r\n * Creates the target global singleton row.\r\n *\r\n * @param txn - The version upgrade transaction for indexeddb\r\n */\r\nfunction writeEmptyTargetGlobalEntry(txn) {\r\n    var globalStore = txn.store(DbTargetGlobal.store);\r\n    var metadata = new DbTargetGlobal(\r\n    /*highestTargetId=*/ 0, \r\n    /*lastListenSequenceNumber=*/ 0, SnapshotVersion.min().toTimestamp(), \r\n    /*targetCount=*/ 0);\r\n    return globalStore.put(DbTargetGlobal.key, metadata);\r\n}\r\n/**\r\n * Creates indices on the RemoteDocuments store used for both multi-tab\r\n * and Index-Free queries.\r\n */\r\nfunction createRemoteDocumentReadTimeIndex(txn) {\r\n    var remoteDocumentStore = txn.objectStore(DbRemoteDocument.store);\r\n    remoteDocumentStore.createIndex(DbRemoteDocument.readTimeIndex, DbRemoteDocument.readTimeIndexPath, { unique: false });\r\n    remoteDocumentStore.createIndex(DbRemoteDocument.collectionReadTimeIndex, DbRemoteDocument.collectionReadTimeIndexPath, { unique: false });\r\n}\r\nfunction createClientMetadataStore(db) {\r\n    db.createObjectStore(DbClientMetadata.store, {\r\n        keyPath: DbClientMetadata.keyPath\r\n    });\r\n}\r\nfunction createBundlesStore(db) {\r\n    db.createObjectStore(DbBundle.store, {\r\n        keyPath: DbBundle.keyPath\r\n    });\r\n}\r\nfunction createNamedQueriesStore(db) {\r\n    db.createObjectStore(DbNamedQuery.store, {\r\n        keyPath: DbNamedQuery.keyPath\r\n    });\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$d = 'IndexedDbPersistence';\r\n/**\r\n * Oldest acceptable age in milliseconds for client metadata before the client\r\n * is considered inactive and its associated data is garbage collected.\r\n */\r\nvar MAX_CLIENT_AGE_MS = 30 * 60 * 1000; // 30 minutes\r\n/**\r\n * Oldest acceptable metadata age for clients that may participate in the\r\n * primary lease election. Clients that have not updated their client metadata\r\n * within 5 seconds are not eligible to receive a primary lease.\r\n */\r\nvar MAX_PRIMARY_ELIGIBLE_AGE_MS = 5000;\r\n/**\r\n * The interval at which clients will update their metadata, including\r\n * refreshing their primary lease if held or potentially trying to acquire it if\r\n * not held.\r\n *\r\n * Primary clients may opportunistically refresh their metadata earlier\r\n * if they're already performing an IndexedDB operation.\r\n */\r\nvar CLIENT_METADATA_REFRESH_INTERVAL_MS = 4000;\r\n/** User-facing error when the primary lease is required but not available. */\r\nvar PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG = 'Failed to obtain exclusive access to the persistence layer. To allow ' +\r\n    'shared access, multi-tab synchronization has to be enabled in all tabs. ' +\r\n    'If you are using `experimentalForceOwningTab:true`, make sure that only ' +\r\n    'one tab has persistence enabled at any given time.';\r\nvar UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing IndexedDB or is known to have ' +\r\n    'an incomplete implementation. Offline persistence has been disabled.';\r\n// The format of the LocalStorage key that stores zombied client is:\r\n//     firestore_zombie_<persistence_prefix>_<instance_key>\r\nvar ZOMBIED_CLIENTS_KEY_PREFIX = 'firestore_zombie';\r\n/**\r\n * The name of the main (and currently only) IndexedDB database. This name is\r\n * appended to the prefix provided to the IndexedDbPersistence constructor.\r\n */\r\nvar MAIN_DATABASE = 'main';\r\n/**\r\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\r\n * across sessions.\r\n *\r\n * On Web only, the Firestore SDKs support shared access to its persistence\r\n * layer. This allows multiple browser tabs to read and write to IndexedDb and\r\n * to synchronize state even without network connectivity. Shared access is\r\n * currently optional and not enabled unless all clients invoke\r\n * `enablePersistence()` with `{synchronizeTabs:true}`.\r\n *\r\n * In multi-tab mode, if multiple clients are active at the same time, the SDK\r\n * will designate one client as the “primary client”. An effort is made to pick\r\n * a visible, network-connected and active client, and this client is\r\n * responsible for letting other clients know about its presence. The primary\r\n * client writes a unique client-generated identifier (the client ID) to\r\n * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to\r\n * update this entry, another client can acquire the lease and take over as\r\n * primary.\r\n *\r\n * Some persistence operations in the SDK are designated as primary-client only\r\n * operations. This includes the acknowledgment of mutations and all updates of\r\n * remote documents. The effects of these operations are written to persistence\r\n * and then broadcast to other tabs via LocalStorage (see\r\n * `WebStorageSharedClientState`), which then refresh their state from\r\n * persistence.\r\n *\r\n * Similarly, the primary client listens to notifications sent by secondary\r\n * clients to discover persistence changes written by secondary clients, such as\r\n * the addition of new mutations and query targets.\r\n *\r\n * If multi-tab is not enabled and another tab already obtained the primary\r\n * lease, IndexedDbPersistence enters a failed state and all subsequent\r\n * operations will automatically fail.\r\n *\r\n * Additionally, there is an optimization so that when a tab is closed, the\r\n * primary lease is released immediately (this is especially important to make\r\n * sure that a refreshed tab is able to immediately re-acquire the primary\r\n * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload\r\n * since it is an asynchronous API. So in addition to attempting to give up the\r\n * lease, the leaseholder writes its client ID to a \"zombiedClient\" entry in\r\n * LocalStorage which acts as an indicator that another tab should go ahead and\r\n * take the primary lease immediately regardless of the current lease timestamp.\r\n *\r\n * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no\r\n * longer optional.\r\n */\r\nvar IndexedDbPersistence = /** @class */ (function () {\r\n    function IndexedDbPersistence(\r\n    /**\r\n     * Whether to synchronize the in-memory state of multiple tabs and share\r\n     * access to local persistence.\r\n     */\r\n    allowTabSynchronization, persistenceKey, clientId, lruParams, queue, window, document, serializer, sequenceNumberSyncer, \r\n    /**\r\n     * If set to true, forcefully obtains database access. Existing tabs will\r\n     * no longer be able to access IndexedDB.\r\n     */\r\n    forceOwningTab) {\r\n        this.allowTabSynchronization = allowTabSynchronization;\r\n        this.persistenceKey = persistenceKey;\r\n        this.clientId = clientId;\r\n        this.queue = queue;\r\n        this.window = window;\r\n        this.document = document;\r\n        this.sequenceNumberSyncer = sequenceNumberSyncer;\r\n        this.forceOwningTab = forceOwningTab;\r\n        this.listenSequence = null;\r\n        this._started = false;\r\n        this.isPrimary = false;\r\n        this.networkEnabled = true;\r\n        /** Our window.unload handler, if registered. */\r\n        this.windowUnloadHandler = null;\r\n        this.inForeground = false;\r\n        /** Our 'visibilitychange' listener if registered. */\r\n        this.documentVisibilityHandler = null;\r\n        /** The client metadata refresh task. */\r\n        this.clientMetadataRefresher = null;\r\n        /** The last time we garbage collected the client metadata object store. */\r\n        this.lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;\r\n        /** A listener to notify on primary state changes. */\r\n        this.primaryStateListener = function (_) { return Promise.resolve(); };\r\n        if (!IndexedDbPersistence.isAvailable()) {\r\n            throw new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\r\n        }\r\n        this.referenceDelegate = new IndexedDbLruDelegateImpl(this, lruParams);\r\n        this.dbName = persistenceKey + MAIN_DATABASE;\r\n        this.serializer = new LocalSerializer(serializer);\r\n        this.simpleDb = new SimpleDb(this.dbName, SCHEMA_VERSION, new SchemaConverter(this.serializer));\r\n        this.targetCache = new IndexedDbTargetCache(this.referenceDelegate, this.serializer);\r\n        this.indexManager = new IndexedDbIndexManager();\r\n        this.remoteDocumentCache = newIndexedDbRemoteDocumentCache(this.serializer, this.indexManager);\r\n        this.bundleCache = new IndexedDbBundleCache();\r\n        if (this.window && this.window.localStorage) {\r\n            this.webStorage = this.window.localStorage;\r\n        }\r\n        else {\r\n            this.webStorage = null;\r\n            if (forceOwningTab === false) {\r\n                logError(LOG_TAG$d, 'LocalStorage is unavailable. As a result, persistence may not work ' +\r\n                    'reliably. In particular enablePersistence() could fail immediately ' +\r\n                    'after refreshing the page.');\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempt to start IndexedDb persistence.\r\n     *\r\n     * @returns Whether persistence was enabled.\r\n     */\r\n    IndexedDbPersistence.prototype.start = function () {\r\n        var _this = this;\r\n        // NOTE: This is expected to fail sometimes (in the case of another tab\r\n        // already having the persistence lock), so it's the first thing we should\r\n        // do.\r\n        return this.updateClientMetadataAndTryBecomePrimary()\r\n            .then(function () {\r\n            if (!_this.isPrimary && !_this.allowTabSynchronization) {\r\n                // Fail `start()` if `synchronizeTabs` is disabled and we cannot\r\n                // obtain the primary lease.\r\n                throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\r\n            }\r\n            _this.attachVisibilityHandler();\r\n            _this.attachWindowUnloadHook();\r\n            _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();\r\n            return _this.runTransaction('getHighestListenSequenceNumber', 'readonly', function (txn) { return _this.targetCache.getHighestSequenceNumber(txn); });\r\n        })\r\n            .then(function (highestListenSequenceNumber) {\r\n            _this.listenSequence = new ListenSequence(highestListenSequenceNumber, _this.sequenceNumberSyncer);\r\n        })\r\n            .then(function () {\r\n            _this._started = true;\r\n        })\r\n            .catch(function (reason) {\r\n            _this.simpleDb && _this.simpleDb.close();\r\n            return Promise.reject(reason);\r\n        });\r\n    };\r\n    /**\r\n     * Registers a listener that gets called when the primary state of the\r\n     * instance changes. Upon registering, this listener is invoked immediately\r\n     * with the current primary state.\r\n     *\r\n     * PORTING NOTE: This is only used for Web multi-tab.\r\n     */\r\n    IndexedDbPersistence.prototype.setPrimaryStateListener = function (primaryStateListener) {\r\n        var _this = this;\r\n        this.primaryStateListener = function (primaryState) { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                if (this.started) {\r\n                    return [2 /*return*/, primaryStateListener(primaryState)];\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        }); };\r\n        return primaryStateListener(this.isPrimary);\r\n    };\r\n    /**\r\n     * Registers a listener that gets called when the database receives a\r\n     * version change event indicating that it has deleted.\r\n     *\r\n     * PORTING NOTE: This is only used for Web multi-tab.\r\n     */\r\n    IndexedDbPersistence.prototype.setDatabaseDeletedListener = function (databaseDeletedListener) {\r\n        var _this = this;\r\n        this.simpleDb.setVersionChangeListener(function (event) { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        if (!(event.newVersion === null)) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, databaseDeletedListener()];\r\n                    case 1:\r\n                        _d.sent();\r\n                        _d.label = 2;\r\n                    case 2: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    /**\r\n     * Adjusts the current network state in the client's metadata, potentially\r\n     * affecting the primary lease.\r\n     *\r\n     * PORTING NOTE: This is only used for Web multi-tab.\r\n     */\r\n    IndexedDbPersistence.prototype.setNetworkEnabled = function (networkEnabled) {\r\n        var _this = this;\r\n        if (this.networkEnabled !== networkEnabled) {\r\n            this.networkEnabled = networkEnabled;\r\n            // Schedule a primary lease refresh for immediate execution. The eventual\r\n            // lease update will be propagated via `primaryStateListener`.\r\n            this.queue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n                return tslib.__generator(this, function (_d) {\r\n                    switch (_d.label) {\r\n                        case 0:\r\n                            if (!this.started) return [3 /*break*/, 2];\r\n                            return [4 /*yield*/, this.updateClientMetadataAndTryBecomePrimary()];\r\n                        case 1:\r\n                            _d.sent();\r\n                            _d.label = 2;\r\n                        case 2: return [2 /*return*/];\r\n                    }\r\n                });\r\n            }); });\r\n        }\r\n    };\r\n    /**\r\n     * Updates the client metadata in IndexedDb and attempts to either obtain or\r\n     * extend the primary lease for the local client. Asynchronously notifies the\r\n     * primary state listener if the client either newly obtained or released its\r\n     * primary lease.\r\n     */\r\n    IndexedDbPersistence.prototype.updateClientMetadataAndTryBecomePrimary = function () {\r\n        var _this = this;\r\n        return this.runTransaction('updateClientMetadataAndTryBecomePrimary', 'readwrite', function (txn) {\r\n            var metadataStore = clientMetadataStore(txn);\r\n            return metadataStore\r\n                .put(new DbClientMetadata(_this.clientId, Date.now(), _this.networkEnabled, _this.inForeground))\r\n                .next(function () {\r\n                if (_this.isPrimary) {\r\n                    return _this.verifyPrimaryLease(txn).next(function (success) {\r\n                        if (!success) {\r\n                            _this.isPrimary = false;\r\n                            _this.queue.enqueueRetryable(function () { return _this.primaryStateListener(false); });\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n                .next(function () { return _this.canActAsPrimary(txn); })\r\n                .next(function (canActAsPrimary) {\r\n                if (_this.isPrimary && !canActAsPrimary) {\r\n                    return _this.releasePrimaryLeaseIfHeld(txn).next(function () { return false; });\r\n                }\r\n                else if (canActAsPrimary) {\r\n                    return _this.acquireOrExtendPrimaryLease(txn).next(function () { return true; });\r\n                }\r\n                else {\r\n                    return /* canActAsPrimary= */ false;\r\n                }\r\n            });\r\n        })\r\n            .catch(function (e) {\r\n            if (isIndexedDbTransactionError(e)) {\r\n                logDebug(LOG_TAG$d, 'Failed to extend owner lease: ', e);\r\n                // Proceed with the existing state. Any subsequent access to\r\n                // IndexedDB will verify the lease.\r\n                return _this.isPrimary;\r\n            }\r\n            if (!_this.allowTabSynchronization) {\r\n                throw e;\r\n            }\r\n            logDebug(LOG_TAG$d, 'Releasing owner lease after error during lease refresh', e);\r\n            return /* isPrimary= */ false;\r\n        })\r\n            .then(function (isPrimary) {\r\n            if (_this.isPrimary !== isPrimary) {\r\n                _this.queue.enqueueRetryable(function () { return _this.primaryStateListener(isPrimary); });\r\n            }\r\n            _this.isPrimary = isPrimary;\r\n        });\r\n    };\r\n    IndexedDbPersistence.prototype.verifyPrimaryLease = function (txn) {\r\n        var _this = this;\r\n        var store = primaryClientStore(txn);\r\n        return store.get(DbPrimaryClient.key).next(function (primaryClient) {\r\n            return PersistencePromise.resolve(_this.isLocalClient(primaryClient));\r\n        });\r\n    };\r\n    IndexedDbPersistence.prototype.removeClientMetadata = function (txn) {\r\n        var metadataStore = clientMetadataStore(txn);\r\n        return metadataStore.delete(this.clientId);\r\n    };\r\n    /**\r\n     * If the garbage collection threshold has passed, prunes the\r\n     * RemoteDocumentChanges and the ClientMetadata store based on the last update\r\n     * time of all clients.\r\n     */\r\n    IndexedDbPersistence.prototype.maybeGarbageCollectMultiClientState = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var inactiveClients, _i, inactiveClients_1, inactiveClient;\r\n            var _this = this;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        if (!(this.isPrimary &&\r\n                            !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS))) return [3 /*break*/, 2];\r\n                        this.lastGarbageCollectionTime = Date.now();\r\n                        return [4 /*yield*/, this.runTransaction('maybeGarbageCollectMultiClientState', 'readwrite-primary', function (txn) {\r\n                                var metadataStore = getStore(txn, DbClientMetadata.store);\r\n                                return metadataStore.loadAll().next(function (existingClients) {\r\n                                    var active = _this.filterActiveClients(existingClients, MAX_CLIENT_AGE_MS);\r\n                                    var inactive = existingClients.filter(function (client) { return active.indexOf(client) === -1; });\r\n                                    // Delete metadata for clients that are no longer considered active.\r\n                                    return PersistencePromise.forEach(inactive, function (inactiveClient) { return metadataStore.delete(inactiveClient.clientId); }).next(function () { return inactive; });\r\n                                });\r\n                            }).catch(function () {\r\n                                // Ignore primary lease violations or any other type of error. The next\r\n                                // primary will run `maybeGarbageCollectMultiClientState()` again.\r\n                                // We don't use `ignoreIfPrimaryLeaseLoss()` since we don't want to depend\r\n                                // on LocalStore.\r\n                                return [];\r\n                            })];\r\n                    case 1:\r\n                        inactiveClients = _d.sent();\r\n                        // Delete potential leftover entries that may continue to mark the\r\n                        // inactive clients as zombied in LocalStorage.\r\n                        // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for\r\n                        // the client atomically, but we can't. So we opt to delete the IndexedDb\r\n                        // entries first to avoid potentially reviving a zombied client.\r\n                        if (this.webStorage) {\r\n                            for (_i = 0, inactiveClients_1 = inactiveClients; _i < inactiveClients_1.length; _i++) {\r\n                                inactiveClient = inactiveClients_1[_i];\r\n                                this.webStorage.removeItem(this.zombiedClientLocalStorageKey(inactiveClient.clientId));\r\n                            }\r\n                        }\r\n                        _d.label = 2;\r\n                    case 2: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Schedules a recurring timer to update the client metadata and to either\r\n     * extend or acquire the primary lease if the client is eligible.\r\n     */\r\n    IndexedDbPersistence.prototype.scheduleClientMetadataAndPrimaryLeaseRefreshes = function () {\r\n        var _this = this;\r\n        this.clientMetadataRefresher = this.queue.enqueueAfterDelay(\"client_metadata_refresh\" /* ClientMetadataRefresh */, CLIENT_METADATA_REFRESH_INTERVAL_MS, function () {\r\n            return _this.updateClientMetadataAndTryBecomePrimary()\r\n                .then(function () { return _this.maybeGarbageCollectMultiClientState(); })\r\n                .then(function () { return _this.scheduleClientMetadataAndPrimaryLeaseRefreshes(); });\r\n        });\r\n    };\r\n    /** Checks whether `client` is the local client. */\r\n    IndexedDbPersistence.prototype.isLocalClient = function (client) {\r\n        return client ? client.ownerId === this.clientId : false;\r\n    };\r\n    /**\r\n     * Evaluate the state of all active clients and determine whether the local\r\n     * client is or can act as the holder of the primary lease. Returns whether\r\n     * the client is eligible for the lease, but does not actually acquire it.\r\n     * May return 'false' even if there is no active leaseholder and another\r\n     * (foreground) client should become leaseholder instead.\r\n     */\r\n    IndexedDbPersistence.prototype.canActAsPrimary = function (txn) {\r\n        var _this = this;\r\n        if (this.forceOwningTab) {\r\n            return PersistencePromise.resolve(true);\r\n        }\r\n        var store = primaryClientStore(txn);\r\n        return store\r\n            .get(DbPrimaryClient.key)\r\n            .next(function (currentPrimary) {\r\n            var currentLeaseIsValid = currentPrimary !== null &&\r\n                _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) &&\r\n                !_this.isClientZombied(currentPrimary.ownerId);\r\n            // A client is eligible for the primary lease if:\r\n            // - its network is enabled and the client's tab is in the foreground.\r\n            // - its network is enabled and no other client's tab is in the\r\n            //   foreground.\r\n            // - every clients network is disabled and the client's tab is in the\r\n            //   foreground.\r\n            // - every clients network is disabled and no other client's tab is in\r\n            //   the foreground.\r\n            // - the `forceOwningTab` setting was passed in.\r\n            if (currentLeaseIsValid) {\r\n                if (_this.isLocalClient(currentPrimary) && _this.networkEnabled) {\r\n                    return true;\r\n                }\r\n                if (!_this.isLocalClient(currentPrimary)) {\r\n                    if (!currentPrimary.allowTabSynchronization) {\r\n                        // Fail the `canActAsPrimary` check if the current leaseholder has\r\n                        // not opted into multi-tab synchronization. If this happens at\r\n                        // client startup, we reject the Promise returned by\r\n                        // `enablePersistence()` and the user can continue to use Firestore\r\n                        // with in-memory persistence.\r\n                        // If this fails during a lease refresh, we will instead block the\r\n                        // AsyncQueue from executing further operations. Note that this is\r\n                        // acceptable since mixing & matching different `synchronizeTabs`\r\n                        // settings is not supported.\r\n                        //\r\n                        // TODO(b/114226234): Remove this check when `synchronizeTabs` can\r\n                        // no longer be turned off.\r\n                        throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n            if (_this.networkEnabled && _this.inForeground) {\r\n                return true;\r\n            }\r\n            return clientMetadataStore(txn)\r\n                .loadAll()\r\n                .next(function (existingClients) {\r\n                // Process all existing clients and determine whether at least one of\r\n                // them is better suited to obtain the primary lease.\r\n                var preferredCandidate = _this.filterActiveClients(existingClients, MAX_PRIMARY_ELIGIBLE_AGE_MS).find(function (otherClient) {\r\n                    if (_this.clientId !== otherClient.clientId) {\r\n                        var otherClientHasBetterNetworkState = !_this.networkEnabled && otherClient.networkEnabled;\r\n                        var otherClientHasBetterVisibility = !_this.inForeground && otherClient.inForeground;\r\n                        var otherClientHasSameNetworkState = _this.networkEnabled === otherClient.networkEnabled;\r\n                        if (otherClientHasBetterNetworkState ||\r\n                            (otherClientHasBetterVisibility &&\r\n                                otherClientHasSameNetworkState)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                });\r\n                return preferredCandidate === undefined;\r\n            });\r\n        })\r\n            .next(function (canActAsPrimary) {\r\n            if (_this.isPrimary !== canActAsPrimary) {\r\n                logDebug(LOG_TAG$d, \"Client \" + (canActAsPrimary ? 'is' : 'is not') + \" eligible for a primary lease.\");\r\n            }\r\n            return canActAsPrimary;\r\n        });\r\n    };\r\n    IndexedDbPersistence.prototype.shutdown = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        // The shutdown() operations are idempotent and can be called even when\r\n                        // start() aborted (e.g. because it couldn't acquire the persistence lease).\r\n                        this._started = false;\r\n                        this.markClientZombied();\r\n                        if (this.clientMetadataRefresher) {\r\n                            this.clientMetadataRefresher.cancel();\r\n                            this.clientMetadataRefresher = null;\r\n                        }\r\n                        this.detachVisibilityHandler();\r\n                        this.detachWindowUnloadHook();\r\n                        // Use `SimpleDb.runTransaction` directly to avoid failing if another tab\r\n                        // has obtained the primary lease.\r\n                        return [4 /*yield*/, this.simpleDb.runTransaction('shutdown', 'readwrite', [DbPrimaryClient.store, DbClientMetadata.store], function (simpleDbTxn) {\r\n                                var persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, ListenSequence.INVALID);\r\n                                return _this.releasePrimaryLeaseIfHeld(persistenceTransaction).next(function () { return _this.removeClientMetadata(persistenceTransaction); });\r\n                            })];\r\n                    case 1:\r\n                        // Use `SimpleDb.runTransaction` directly to avoid failing if another tab\r\n                        // has obtained the primary lease.\r\n                        _d.sent();\r\n                        this.simpleDb.close();\r\n                        // Remove the entry marking the client as zombied from LocalStorage since\r\n                        // we successfully deleted its metadata from IndexedDb.\r\n                        this.removeClientZombiedEntry();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns clients that are not zombied and have an updateTime within the\r\n     * provided threshold.\r\n     */\r\n    IndexedDbPersistence.prototype.filterActiveClients = function (clients, activityThresholdMs) {\r\n        var _this = this;\r\n        return clients.filter(function (client) { return _this.isWithinAge(client.updateTimeMs, activityThresholdMs) &&\r\n            !_this.isClientZombied(client.clientId); });\r\n    };\r\n    /**\r\n     * Returns the IDs of the clients that are currently active. If multi-tab\r\n     * is not supported, returns an array that only contains the local client's\r\n     * ID.\r\n     *\r\n     * PORTING NOTE: This is only used for Web multi-tab.\r\n     */\r\n    IndexedDbPersistence.prototype.getActiveClients = function () {\r\n        var _this = this;\r\n        return this.runTransaction('getActiveClients', 'readonly', function (txn) {\r\n            return clientMetadataStore(txn)\r\n                .loadAll()\r\n                .next(function (clients) { return _this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(function (clientMetadata) { return clientMetadata.clientId; }); });\r\n        });\r\n    };\r\n    Object.defineProperty(IndexedDbPersistence.prototype, \"started\", {\r\n        get: function () {\r\n            return this._started;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    IndexedDbPersistence.prototype.getMutationQueue = function (user) {\r\n        return IndexedDbMutationQueue.forUser(user, this.serializer, this.indexManager, this.referenceDelegate);\r\n    };\r\n    IndexedDbPersistence.prototype.getTargetCache = function () {\r\n        return this.targetCache;\r\n    };\r\n    IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {\r\n        return this.remoteDocumentCache;\r\n    };\r\n    IndexedDbPersistence.prototype.getIndexManager = function () {\r\n        return this.indexManager;\r\n    };\r\n    IndexedDbPersistence.prototype.getBundleCache = function () {\r\n        return this.bundleCache;\r\n    };\r\n    IndexedDbPersistence.prototype.runTransaction = function (action, mode, transactionOperation) {\r\n        var _this = this;\r\n        logDebug(LOG_TAG$d, 'Starting transaction:', action);\r\n        var simpleDbMode = mode === 'readonly' ? 'readonly' : 'readwrite';\r\n        var persistenceTransaction;\r\n        // Do all transactions as readwrite against all object stores, since we\r\n        // are the only reader/writer.\r\n        return this.simpleDb\r\n            .runTransaction(action, simpleDbMode, ALL_STORES, function (simpleDbTxn) {\r\n            persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, _this.listenSequence\r\n                ? _this.listenSequence.next()\r\n                : ListenSequence.INVALID);\r\n            if (mode === 'readwrite-primary') {\r\n                // While we merely verify that we have (or can acquire) the lease\r\n                // immediately, we wait to extend the primary lease until after\r\n                // executing transactionOperation(). This ensures that even if the\r\n                // transactionOperation takes a long time, we'll use a recent\r\n                // leaseTimestampMs in the extended (or newly acquired) lease.\r\n                return _this.verifyPrimaryLease(persistenceTransaction)\r\n                    .next(function (holdsPrimaryLease) {\r\n                    if (holdsPrimaryLease) {\r\n                        return /* holdsPrimaryLease= */ true;\r\n                    }\r\n                    return _this.canActAsPrimary(persistenceTransaction);\r\n                })\r\n                    .next(function (holdsPrimaryLease) {\r\n                    if (!holdsPrimaryLease) {\r\n                        logError(\"Failed to obtain primary lease for action '\" + action + \"'.\");\r\n                        _this.isPrimary = false;\r\n                        _this.queue.enqueueRetryable(function () { return _this.primaryStateListener(false); });\r\n                        throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_LOST_ERROR_MSG);\r\n                    }\r\n                    return transactionOperation(persistenceTransaction);\r\n                })\r\n                    .next(function (result) {\r\n                    return _this.acquireOrExtendPrimaryLease(persistenceTransaction).next(function () { return result; });\r\n                });\r\n            }\r\n            else {\r\n                return _this.verifyAllowTabSynchronization(persistenceTransaction).next(function () { return transactionOperation(persistenceTransaction); });\r\n            }\r\n        })\r\n            .then(function (result) {\r\n            persistenceTransaction.raiseOnCommittedEvent();\r\n            return result;\r\n        });\r\n    };\r\n    /**\r\n     * Verifies that the current tab is the primary leaseholder or alternatively\r\n     * that the leaseholder has opted into multi-tab synchronization.\r\n     */\r\n    // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer\r\n    // be turned off.\r\n    IndexedDbPersistence.prototype.verifyAllowTabSynchronization = function (txn) {\r\n        var _this = this;\r\n        var store = primaryClientStore(txn);\r\n        return store.get(DbPrimaryClient.key).next(function (currentPrimary) {\r\n            var currentLeaseIsValid = currentPrimary !== null &&\r\n                _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) &&\r\n                !_this.isClientZombied(currentPrimary.ownerId);\r\n            if (currentLeaseIsValid && !_this.isLocalClient(currentPrimary)) {\r\n                if (!_this.forceOwningTab &&\r\n                    (!_this.allowTabSynchronization ||\r\n                        !currentPrimary.allowTabSynchronization)) {\r\n                    throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Obtains or extends the new primary lease for the local client. This\r\n     * method does not verify that the client is eligible for this lease.\r\n     */\r\n    IndexedDbPersistence.prototype.acquireOrExtendPrimaryLease = function (txn) {\r\n        var newPrimary = new DbPrimaryClient(this.clientId, this.allowTabSynchronization, Date.now());\r\n        return primaryClientStore(txn).put(DbPrimaryClient.key, newPrimary);\r\n    };\r\n    IndexedDbPersistence.isAvailable = function () {\r\n        return SimpleDb.isAvailable();\r\n    };\r\n    /** Checks the primary lease and removes it if we are the current primary. */\r\n    IndexedDbPersistence.prototype.releasePrimaryLeaseIfHeld = function (txn) {\r\n        var _this = this;\r\n        var store = primaryClientStore(txn);\r\n        return store.get(DbPrimaryClient.key).next(function (primaryClient) {\r\n            if (_this.isLocalClient(primaryClient)) {\r\n                logDebug(LOG_TAG$d, 'Releasing primary lease.');\r\n                return store.delete(DbPrimaryClient.key);\r\n            }\r\n            else {\r\n                return PersistencePromise.resolve();\r\n            }\r\n        });\r\n    };\r\n    /** Verifies that `updateTimeMs` is within `maxAgeMs`. */\r\n    IndexedDbPersistence.prototype.isWithinAge = function (updateTimeMs, maxAgeMs) {\r\n        var now = Date.now();\r\n        var minAcceptable = now - maxAgeMs;\r\n        var maxAcceptable = now;\r\n        if (updateTimeMs < minAcceptable) {\r\n            return false;\r\n        }\r\n        else if (updateTimeMs > maxAcceptable) {\r\n            logError(\"Detected an update time that is in the future: \" + updateTimeMs + \" > \" + maxAcceptable);\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    IndexedDbPersistence.prototype.attachVisibilityHandler = function () {\r\n        var _this = this;\r\n        if (this.document !== null &&\r\n            typeof this.document.addEventListener === 'function') {\r\n            this.documentVisibilityHandler = function () {\r\n                _this.queue.enqueueAndForget(function () {\r\n                    _this.inForeground = _this.document.visibilityState === 'visible';\r\n                    return _this.updateClientMetadataAndTryBecomePrimary();\r\n                });\r\n            };\r\n            this.document.addEventListener('visibilitychange', this.documentVisibilityHandler);\r\n            this.inForeground = this.document.visibilityState === 'visible';\r\n        }\r\n    };\r\n    IndexedDbPersistence.prototype.detachVisibilityHandler = function () {\r\n        if (this.documentVisibilityHandler) {\r\n            this.document.removeEventListener('visibilitychange', this.documentVisibilityHandler);\r\n            this.documentVisibilityHandler = null;\r\n        }\r\n    };\r\n    /**\r\n     * Attaches a window.unload handler that will synchronously write our\r\n     * clientId to a \"zombie client id\" location in LocalStorage. This can be used\r\n     * by tabs trying to acquire the primary lease to determine that the lease\r\n     * is no longer valid even if the timestamp is recent. This is particularly\r\n     * important for the refresh case (so the tab correctly re-acquires the\r\n     * primary lease). LocalStorage is used for this rather than IndexedDb because\r\n     * it is a synchronous API and so can be used reliably from  an unload\r\n     * handler.\r\n     */\r\n    IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {\r\n        var _this = this;\r\n        var _a;\r\n        if (typeof ((_a = this.window) === null || _a === void 0 ? void 0 : _a.addEventListener) === 'function') {\r\n            this.windowUnloadHandler = function () {\r\n                // Note: In theory, this should be scheduled on the AsyncQueue since it\r\n                // accesses internal state. We execute this code directly during shutdown\r\n                // to make sure it gets a chance to run.\r\n                _this.markClientZombied();\r\n                if (util.isSafari() && navigator.appVersion.match(\"Version/14\")) {\r\n                    // On Safari 14, we do not run any cleanup actions as it might trigger\r\n                    // a bug that prevents Safari from re-opening IndexedDB during the\r\n                    // next page load.\r\n                    // See https://bugs.webkit.org/show_bug.cgi?id=226547\r\n                    _this.queue.enterRestrictedMode(/* purgeExistingTasks= */ true);\r\n                }\r\n                _this.queue.enqueueAndForget(function () {\r\n                    // Attempt graceful shutdown (including releasing our primary lease),\r\n                    // but there's no guarantee it will complete.\r\n                    return _this.shutdown();\r\n                });\r\n            };\r\n            this.window.addEventListener('pagehide', this.windowUnloadHandler);\r\n        }\r\n    };\r\n    IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {\r\n        if (this.windowUnloadHandler) {\r\n            this.window.removeEventListener('pagehide', this.windowUnloadHandler);\r\n            this.windowUnloadHandler = null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether a client is \"zombied\" based on its LocalStorage entry.\r\n     * Clients become zombied when their tab closes without running all of the\r\n     * cleanup logic in `shutdown()`.\r\n     */\r\n    IndexedDbPersistence.prototype.isClientZombied = function (clientId) {\r\n        var _a;\r\n        try {\r\n            var isZombied = ((_a = this.webStorage) === null || _a === void 0 ? void 0 : _a.getItem(this.zombiedClientLocalStorageKey(clientId))) !== null;\r\n            logDebug(LOG_TAG$d, \"Client '\" + clientId + \"' \" + (isZombied ? 'is' : 'is not') + \" zombied in LocalStorage\");\r\n            return isZombied;\r\n        }\r\n        catch (e) {\r\n            // Gracefully handle if LocalStorage isn't working.\r\n            logError(LOG_TAG$d, 'Failed to get zombied client id.', e);\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Record client as zombied (a client that had its tab closed). Zombied\r\n     * clients are ignored during primary tab selection.\r\n     */\r\n    IndexedDbPersistence.prototype.markClientZombied = function () {\r\n        if (!this.webStorage) {\r\n            return;\r\n        }\r\n        try {\r\n            this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId), String(Date.now()));\r\n        }\r\n        catch (e) {\r\n            // Gracefully handle if LocalStorage isn't available / working.\r\n            logError('Failed to set zombie client id.', e);\r\n        }\r\n    };\r\n    /** Removes the zombied client entry if it exists. */\r\n    IndexedDbPersistence.prototype.removeClientZombiedEntry = function () {\r\n        if (!this.webStorage) {\r\n            return;\r\n        }\r\n        try {\r\n            this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId));\r\n        }\r\n        catch (e) {\r\n            // Ignore\r\n        }\r\n    };\r\n    IndexedDbPersistence.prototype.zombiedClientLocalStorageKey = function (clientId) {\r\n        return ZOMBIED_CLIENTS_KEY_PREFIX + \"_\" + this.persistenceKey + \"_\" + clientId;\r\n    };\r\n    return IndexedDbPersistence;\r\n}());\r\n/**\r\n * Helper to get a typed SimpleDbStore for the primary client object store.\r\n */\r\nfunction primaryClientStore(txn) {\r\n    return getStore(txn, DbPrimaryClient.store);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the client metadata object store.\r\n */\r\nfunction clientMetadataStore(txn) {\r\n    return getStore(txn, DbClientMetadata.store);\r\n}\r\n/**\r\n * Generates a string used as a prefix when storing data in IndexedDB and\r\n * LocalStorage.\r\n */\r\nfunction indexedDbStoragePrefix(databaseId, persistenceKey) {\r\n    // Use two different prefix formats:\r\n    //\r\n    //   * firestore / persistenceKey / projectID . databaseID / ...\r\n    //   * firestore / persistenceKey / projectID / ...\r\n    //\r\n    // projectIDs are DNS-compatible names and cannot contain dots\r\n    // so there's no danger of collisions.\r\n    var database = databaseId.projectId;\r\n    if (!databaseId.isDefaultDatabase) {\r\n        database += '.' + databaseId.database;\r\n    }\r\n    return 'firestore/' + persistenceKey + '/' + database + '/';\r\n}\r\nfunction indexedDbClearPersistence(persistenceKey) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var dbName;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    if (!SimpleDb.isAvailable()) {\r\n                        return [2 /*return*/, Promise.resolve()];\r\n                    }\r\n                    dbName = persistenceKey + MAIN_DATABASE;\r\n                    return [4 /*yield*/, SimpleDb.delete(dbName)];\r\n                case 1:\r\n                    _d.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A readonly view of the local state of all documents we're tracking (i.e. we\r\n * have a cached version in remoteDocumentCache or local mutations for the\r\n * document). The view is computed by applying the mutations in the\r\n * MutationQueue to the RemoteDocumentCache.\r\n */\r\nvar LocalDocumentsView = /** @class */ (function () {\r\n    function LocalDocumentsView(remoteDocumentCache, mutationQueue, indexManager) {\r\n        this.remoteDocumentCache = remoteDocumentCache;\r\n        this.mutationQueue = mutationQueue;\r\n        this.indexManager = indexManager;\r\n    }\r\n    /**\r\n     * Get the local view of the document identified by `key`.\r\n     *\r\n     * @returns Local view of the document or null if we don't have any cached\r\n     * state for it.\r\n     */\r\n    LocalDocumentsView.prototype.getDocument = function (transaction, key) {\r\n        var _this = this;\r\n        return this.mutationQueue\r\n            .getAllMutationBatchesAffectingDocumentKey(transaction, key)\r\n            .next(function (batches) { return _this.getDocumentInternal(transaction, key, batches); });\r\n    };\r\n    /** Internal version of `getDocument` that allows reusing batches. */\r\n    LocalDocumentsView.prototype.getDocumentInternal = function (transaction, key, inBatches) {\r\n        return this.remoteDocumentCache.getEntry(transaction, key).next(function (doc) {\r\n            for (var _i = 0, inBatches_1 = inBatches; _i < inBatches_1.length; _i++) {\r\n                var batch = inBatches_1[_i];\r\n                batch.applyToLocalView(doc);\r\n            }\r\n            return doc;\r\n        });\r\n    };\r\n    // Returns the view of the given `docs` as they would appear after applying\r\n    // all mutations in the given `batches`.\r\n    LocalDocumentsView.prototype.applyLocalMutationsToDocuments = function (docs, batches) {\r\n        docs.forEach(function (key, localView) {\r\n            for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {\r\n                var batch = batches_1[_i];\r\n                batch.applyToLocalView(localView);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Gets the local view of the documents identified by `keys`.\r\n     *\r\n     * If we don't have cached state for a document in `keys`, a NoDocument will\r\n     * be stored for that key in the resulting set.\r\n     */\r\n    LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {\r\n        var _this = this;\r\n        return this.remoteDocumentCache\r\n            .getEntries(transaction, keys)\r\n            .next(function (docs) { return _this.applyLocalViewToDocuments(transaction, docs).next(function () { return docs; }); });\r\n    };\r\n    /**\r\n     * Applies the local view the given `baseDocs` without retrieving documents\r\n     * from the local store.\r\n     */\r\n    LocalDocumentsView.prototype.applyLocalViewToDocuments = function (transaction, baseDocs) {\r\n        var _this = this;\r\n        return this.mutationQueue\r\n            .getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs)\r\n            .next(function (batches) { return _this.applyLocalMutationsToDocuments(baseDocs, batches); });\r\n    };\r\n    /**\r\n     * Performs a query against the local view of all documents.\r\n     *\r\n     * @param transaction - The persistence transaction.\r\n     * @param query - The query to match documents against.\r\n     * @param sinceReadTime - If not set to SnapshotVersion.min(), return only\r\n     *     documents that have been read since this snapshot version (exclusive).\r\n     */\r\n    LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query, sinceReadTime) {\r\n        if (isDocumentQuery$1(query)) {\r\n            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\r\n        }\r\n        else if (isCollectionGroupQuery(query)) {\r\n            return this.getDocumentsMatchingCollectionGroupQuery(transaction, query, sinceReadTime);\r\n        }\r\n        else {\r\n            return this.getDocumentsMatchingCollectionQuery(transaction, query, sinceReadTime);\r\n        }\r\n    };\r\n    LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {\r\n        // Just do a simple document lookup.\r\n        return this.getDocument(transaction, new DocumentKey(docPath)).next(function (document) {\r\n            var result = documentMap();\r\n            if (document.isFoundDocument()) {\r\n                result = result.insert(document.key, document);\r\n            }\r\n            return result;\r\n        });\r\n    };\r\n    LocalDocumentsView.prototype.getDocumentsMatchingCollectionGroupQuery = function (transaction, query, sinceReadTime) {\r\n        var _this = this;\r\n        var collectionId = query.collectionGroup;\r\n        var results = documentMap();\r\n        return this.indexManager\r\n            .getCollectionParents(transaction, collectionId)\r\n            .next(function (parents) {\r\n            // Perform a collection query against each parent that contains the\r\n            // collectionId and aggregate the results.\r\n            return PersistencePromise.forEach(parents, function (parent) {\r\n                var collectionQuery = asCollectionQueryAtPath(query, parent.child(collectionId));\r\n                return _this.getDocumentsMatchingCollectionQuery(transaction, collectionQuery, sinceReadTime).next(function (r) {\r\n                    r.forEach(function (key, doc) {\r\n                        results = results.insert(key, doc);\r\n                    });\r\n                });\r\n            }).next(function () { return results; });\r\n        });\r\n    };\r\n    LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query, sinceReadTime) {\r\n        var _this = this;\r\n        // Query the remote documents and overlay mutations.\r\n        var results;\r\n        var mutationBatches;\r\n        return this.remoteDocumentCache\r\n            .getDocumentsMatchingQuery(transaction, query, sinceReadTime)\r\n            .next(function (queryResults) {\r\n            results = queryResults;\r\n            return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);\r\n        })\r\n            .next(function (matchingMutationBatches) {\r\n            mutationBatches = matchingMutationBatches;\r\n            // It is possible that a PatchMutation can make a document match a query, even if\r\n            // the version in the RemoteDocumentCache is not a match yet (waiting for server\r\n            // to ack). To handle this, we find all document keys affected by the PatchMutations\r\n            // that are not in `result` yet, and back fill them via `remoteDocumentCache.getEntries`,\r\n            // otherwise those `PatchMutations` will be ignored because no base document can be found,\r\n            // and lead to missing result for the query.\r\n            return _this.addMissingBaseDocuments(transaction, mutationBatches, results).next(function (mergedDocuments) {\r\n                results = mergedDocuments;\r\n                for (var _i = 0, mutationBatches_1 = mutationBatches; _i < mutationBatches_1.length; _i++) {\r\n                    var batch = mutationBatches_1[_i];\r\n                    for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {\r\n                        var mutation = _e[_d];\r\n                        var key = mutation.key;\r\n                        var document_2 = results.get(key);\r\n                        if (document_2 == null) {\r\n                            // Create invalid document to apply mutations on top of\r\n                            document_2 = MutableDocument.newInvalidDocument(key);\r\n                            results = results.insert(key, document_2);\r\n                        }\r\n                        applyMutationToLocalView(mutation, document_2, batch.localWriteTime);\r\n                        if (!document_2.isFoundDocument()) {\r\n                            results = results.remove(key);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        })\r\n            .next(function () {\r\n            // Finally, filter out any documents that don't actually match\r\n            // the query.\r\n            results.forEach(function (key, doc) {\r\n                if (!queryMatches(query, doc)) {\r\n                    results = results.remove(key);\r\n                }\r\n            });\r\n            return results;\r\n        });\r\n    };\r\n    LocalDocumentsView.prototype.addMissingBaseDocuments = function (transaction, matchingMutationBatches, existingDocuments) {\r\n        var missingBaseDocEntriesForPatching = documentKeySet();\r\n        for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {\r\n            var batch = matchingMutationBatches_1[_i];\r\n            for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {\r\n                var mutation = _e[_d];\r\n                if (mutation instanceof PatchMutation &&\r\n                    existingDocuments.get(mutation.key) === null) {\r\n                    missingBaseDocEntriesForPatching = missingBaseDocEntriesForPatching.add(mutation.key);\r\n                }\r\n            }\r\n        }\r\n        var mergedDocuments = existingDocuments;\r\n        return this.remoteDocumentCache\r\n            .getEntries(transaction, missingBaseDocEntriesForPatching)\r\n            .next(function (missingBaseDocs) {\r\n            missingBaseDocs.forEach(function (key, doc) {\r\n                if (doc.isFoundDocument()) {\r\n                    mergedDocuments = mergedDocuments.insert(key, doc);\r\n                }\r\n            });\r\n            return mergedDocuments;\r\n        });\r\n    };\r\n    return LocalDocumentsView;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$c = 'LocalStore';\r\n/**\r\n * The maximum time to leave a resume token buffered without writing it out.\r\n * This value is arbitrary: it's long enough to avoid several writes\r\n * (possibly indefinitely if updates come more frequently than this) but\r\n * short enough that restarting after crashing will still have a pretty\r\n * recent resume token.\r\n */\r\nvar RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;\r\n/**\r\n * Implements `LocalStore` interface.\r\n *\r\n * Note: some field defined in this class might have public access level, but\r\n * the class is not exported so they are only accessible from this module.\r\n * This is useful to implement optional features (like bundles) in free\r\n * functions, such that they are tree-shakeable.\r\n */\r\nvar LocalStoreImpl = /** @class */ (function () {\r\n    function LocalStoreImpl(\r\n    /** Manages our in-memory or durable persistence. */\r\n    persistence, queryEngine, initialUser, serializer) {\r\n        this.persistence = persistence;\r\n        this.queryEngine = queryEngine;\r\n        this.serializer = serializer;\r\n        /**\r\n         * Maps a targetID to data about its target.\r\n         *\r\n         * PORTING NOTE: We are using an immutable data structure on Web to make re-runs\r\n         * of `applyRemoteEvent()` idempotent.\r\n         */\r\n        this.targetDataByTarget = new SortedMap(primitiveComparator);\r\n        /** Maps a target to its targetID. */\r\n        // TODO(wuandy): Evaluate if TargetId can be part of Target.\r\n        this.targetIdByTarget = new ObjectMap(function (t) { return canonifyTarget(t); }, targetEquals);\r\n        /**\r\n         * The read time of the last entry processed by `getNewDocumentChanges()`.\r\n         *\r\n         * PORTING NOTE: This is only used for multi-tab synchronization.\r\n         */\r\n        this.lastDocumentChangeReadTime = SnapshotVersion.min();\r\n        this.mutationQueue = persistence.getMutationQueue(initialUser);\r\n        this.remoteDocuments = persistence.getRemoteDocumentCache();\r\n        this.targetCache = persistence.getTargetCache();\r\n        this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue, this.persistence.getIndexManager());\r\n        this.bundleCache = persistence.getBundleCache();\r\n        this.queryEngine.setLocalDocumentsView(this.localDocuments);\r\n    }\r\n    LocalStoreImpl.prototype.collectGarbage = function (garbageCollector) {\r\n        var _this = this;\r\n        return this.persistence.runTransaction('Collect garbage', 'readwrite-primary', function (txn) { return garbageCollector.collect(txn, _this.targetDataByTarget); });\r\n    };\r\n    return LocalStoreImpl;\r\n}());\r\nfunction newLocalStore(\r\n/** Manages our in-memory or durable persistence. */\r\npersistence, queryEngine, initialUser, serializer) {\r\n    return new LocalStoreImpl(persistence, queryEngine, initialUser, serializer);\r\n}\r\n/**\r\n * Tells the LocalStore that the currently authenticated user has changed.\r\n *\r\n * In response the local store switches the mutation queue to the new user and\r\n * returns any resulting document changes.\r\n */\r\n// PORTING NOTE: Android and iOS only return the documents affected by the\r\n// change.\r\nfunction localStoreHandleUserChange(localStore, user) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var localStoreImpl, newMutationQueue, newLocalDocuments, result;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    localStoreImpl = debugCast(localStore);\r\n                    newMutationQueue = localStoreImpl.mutationQueue;\r\n                    newLocalDocuments = localStoreImpl.localDocuments;\r\n                    return [4 /*yield*/, localStoreImpl.persistence.runTransaction('Handle user change', 'readonly', function (txn) {\r\n                            // Swap out the mutation queue, grabbing the pending mutation batches\r\n                            // before and after.\r\n                            var oldBatches;\r\n                            return localStoreImpl.mutationQueue\r\n                                .getAllMutationBatches(txn)\r\n                                .next(function (promisedOldBatches) {\r\n                                oldBatches = promisedOldBatches;\r\n                                newMutationQueue = localStoreImpl.persistence.getMutationQueue(user);\r\n                                // Recreate our LocalDocumentsView using the new\r\n                                // MutationQueue.\r\n                                newLocalDocuments = new LocalDocumentsView(localStoreImpl.remoteDocuments, newMutationQueue, localStoreImpl.persistence.getIndexManager());\r\n                                return newMutationQueue.getAllMutationBatches(txn);\r\n                            })\r\n                                .next(function (newBatches) {\r\n                                var removedBatchIds = [];\r\n                                var addedBatchIds = [];\r\n                                // Union the old/new changed keys.\r\n                                var changedKeys = documentKeySet();\r\n                                for (var _i = 0, oldBatches_1 = oldBatches; _i < oldBatches_1.length; _i++) {\r\n                                    var batch = oldBatches_1[_i];\r\n                                    removedBatchIds.push(batch.batchId);\r\n                                    for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {\r\n                                        var mutation = _e[_d];\r\n                                        changedKeys = changedKeys.add(mutation.key);\r\n                                    }\r\n                                }\r\n                                for (var _f = 0, newBatches_1 = newBatches; _f < newBatches_1.length; _f++) {\r\n                                    var batch = newBatches_1[_f];\r\n                                    addedBatchIds.push(batch.batchId);\r\n                                    for (var _g = 0, _h = batch.mutations; _g < _h.length; _g++) {\r\n                                        var mutation = _h[_g];\r\n                                        changedKeys = changedKeys.add(mutation.key);\r\n                                    }\r\n                                }\r\n                                // Return the set of all (potentially) changed documents and the list\r\n                                // of mutation batch IDs that were affected by change.\r\n                                return newLocalDocuments\r\n                                    .getDocuments(txn, changedKeys)\r\n                                    .next(function (affectedDocuments) {\r\n                                    return {\r\n                                        affectedDocuments: affectedDocuments,\r\n                                        removedBatchIds: removedBatchIds,\r\n                                        addedBatchIds: addedBatchIds\r\n                                    };\r\n                                });\r\n                            });\r\n                        })];\r\n                case 1:\r\n                    result = _d.sent();\r\n                    localStoreImpl.mutationQueue = newMutationQueue;\r\n                    localStoreImpl.localDocuments = newLocalDocuments;\r\n                    localStoreImpl.queryEngine.setLocalDocumentsView(localStoreImpl.localDocuments);\r\n                    return [2 /*return*/, result];\r\n            }\r\n        });\r\n    });\r\n}\r\n/* Accepts locally generated Mutations and commit them to storage. */\r\nfunction localStoreWriteLocally(localStore, mutations) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    var localWriteTime = Timestamp.now();\r\n    var keys = mutations.reduce(function (keys, m) { return keys.add(m.key); }, documentKeySet());\r\n    var existingDocs;\r\n    return localStoreImpl.persistence\r\n        .runTransaction('Locally write mutations', 'readwrite', function (txn) {\r\n        // Load and apply all existing mutations. This lets us compute the\r\n        // current base state for all non-idempotent transforms before applying\r\n        // any additional user-provided writes.\r\n        return localStoreImpl.localDocuments\r\n            .getDocuments(txn, keys)\r\n            .next(function (docs) {\r\n            existingDocs = docs;\r\n            // For non-idempotent mutations (such as `FieldValue.increment()`),\r\n            // we record the base state in a separate patch mutation. This is\r\n            // later used to guarantee consistent values and prevents flicker\r\n            // even if the backend sends us an update that already includes our\r\n            // transform.\r\n            var baseMutations = [];\r\n            for (var _i = 0, mutations_2 = mutations; _i < mutations_2.length; _i++) {\r\n                var mutation = mutations_2[_i];\r\n                var baseValue = extractMutationBaseValue(mutation, existingDocs.get(mutation.key));\r\n                if (baseValue != null) {\r\n                    // NOTE: The base state should only be applied if there's some\r\n                    // existing document to override, so use a Precondition of\r\n                    // exists=true\r\n                    baseMutations.push(new PatchMutation(mutation.key, baseValue, extractFieldMask(baseValue.value.mapValue), Precondition.exists(true)));\r\n                }\r\n            }\r\n            return localStoreImpl.mutationQueue.addMutationBatch(txn, localWriteTime, baseMutations, mutations);\r\n        });\r\n    })\r\n        .then(function (batch) {\r\n        batch.applyToLocalDocumentSet(existingDocs);\r\n        return { batchId: batch.batchId, changes: existingDocs };\r\n    });\r\n}\r\n/**\r\n * Acknowledges the given batch.\r\n *\r\n * On the happy path when a batch is acknowledged, the local store will\r\n *\r\n *  + remove the batch from the mutation queue;\r\n *  + apply the changes to the remote document cache;\r\n *  + recalculate the latency compensated view implied by those changes (there\r\n *    may be mutations in the queue that affect the documents but haven't been\r\n *    acknowledged yet); and\r\n *  + give the changed documents back the sync engine\r\n *\r\n * @returns The resulting (modified) documents.\r\n */\r\nfunction localStoreAcknowledgeBatch(localStore, batchResult) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Acknowledge batch', 'readwrite-primary', function (txn) {\r\n        var affected = batchResult.batch.keys();\r\n        var documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\r\n            trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\r\n        });\r\n        return applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer)\r\n            .next(function () { return documentBuffer.apply(txn); })\r\n            .next(function () { return localStoreImpl.mutationQueue.performConsistencyCheck(txn); })\r\n            .next(function () { return localStoreImpl.localDocuments.getDocuments(txn, affected); });\r\n    });\r\n}\r\n/**\r\n * Removes mutations from the MutationQueue for the specified batch;\r\n * LocalDocuments will be recalculated.\r\n *\r\n * @returns The resulting modified documents.\r\n */\r\nfunction localStoreRejectBatch(localStore, batchId) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Reject batch', 'readwrite-primary', function (txn) {\r\n        var affectedKeys;\r\n        return localStoreImpl.mutationQueue\r\n            .lookupMutationBatch(txn, batchId)\r\n            .next(function (batch) {\r\n            hardAssert(batch !== null);\r\n            affectedKeys = batch.keys();\r\n            return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);\r\n        })\r\n            .next(function () { return localStoreImpl.mutationQueue.performConsistencyCheck(txn); })\r\n            .next(function () { return localStoreImpl.localDocuments.getDocuments(txn, affectedKeys); });\r\n    });\r\n}\r\n/**\r\n * Returns the largest (latest) batch id in mutation queue that is pending\r\n * server response.\r\n *\r\n * Returns `BATCHID_UNKNOWN` if the queue is empty.\r\n */\r\nfunction localStoreGetHighestUnacknowledgedBatchId(localStore) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Get highest unacknowledged batch id', 'readonly', function (txn) { return localStoreImpl.mutationQueue.getHighestUnacknowledgedBatchId(txn); });\r\n}\r\n/**\r\n * Returns the last consistent snapshot processed (used by the RemoteStore to\r\n * determine whether to buffer incoming snapshots from the backend).\r\n */\r\nfunction localStoreGetLastRemoteSnapshotVersion(localStore) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Get last remote snapshot version', 'readonly', function (txn) { return localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn); });\r\n}\r\n/**\r\n * Updates the \"ground-state\" (remote) documents. We assume that the remote\r\n * event reflects any write batches that have been acknowledged or rejected\r\n * (i.e. we do not re-apply local mutations to updates from this event).\r\n *\r\n * LocalDocuments are re-calculated if there are remaining mutations in the\r\n * queue.\r\n */\r\nfunction localStoreApplyRemoteEventToLocalCache(localStore, remoteEvent) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    var remoteVersion = remoteEvent.snapshotVersion;\r\n    var newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;\r\n    return localStoreImpl.persistence\r\n        .runTransaction('Apply remote event', 'readwrite-primary', function (txn) {\r\n        var documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\r\n            trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\r\n        });\r\n        // Reset newTargetDataByTargetMap in case this transaction gets re-run.\r\n        newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;\r\n        var promises = [];\r\n        remoteEvent.targetChanges.forEach(function (change, targetId) {\r\n            var oldTargetData = newTargetDataByTargetMap.get(targetId);\r\n            if (!oldTargetData) {\r\n                return;\r\n            }\r\n            // Only update the remote keys if the target is still active. This\r\n            // ensures that we can persist the updated target data along with\r\n            // the updated assignment.\r\n            promises.push(localStoreImpl.targetCache\r\n                .removeMatchingKeys(txn, change.removedDocuments, targetId)\r\n                .next(function () {\r\n                return localStoreImpl.targetCache.addMatchingKeys(txn, change.addedDocuments, targetId);\r\n            }));\r\n            var resumeToken = change.resumeToken;\r\n            // Update the resume token if the change includes one.\r\n            if (resumeToken.approximateByteSize() > 0) {\r\n                var newTargetData = oldTargetData\r\n                    .withResumeToken(resumeToken, remoteVersion)\r\n                    .withSequenceNumber(txn.currentSequenceNumber);\r\n                newTargetDataByTargetMap = newTargetDataByTargetMap.insert(targetId, newTargetData);\r\n                // Update the target data if there are target changes (or if\r\n                // sufficient time has passed since the last update).\r\n                if (shouldPersistTargetData(oldTargetData, newTargetData, change)) {\r\n                    promises.push(localStoreImpl.targetCache.updateTargetData(txn, newTargetData));\r\n                }\r\n            }\r\n        });\r\n        var changedDocs = mutableDocumentMap();\r\n        remoteEvent.documentUpdates.forEach(function (key, doc) {\r\n            if (remoteEvent.resolvedLimboDocuments.has(key)) {\r\n                promises.push(localStoreImpl.persistence.referenceDelegate.updateLimboDocument(txn, key));\r\n            }\r\n        });\r\n        // Each loop iteration only affects its \"own\" doc, so it's safe to get all the remote\r\n        // documents in advance in a single call.\r\n        promises.push(populateDocumentChangeBuffer(txn, documentBuffer, remoteEvent.documentUpdates, remoteVersion, undefined).next(function (result) {\r\n            changedDocs = result;\r\n        }));\r\n        // HACK: The only reason we allow a null snapshot version is so that we\r\n        // can synthesize remote events when we get permission denied errors while\r\n        // trying to resolve the state of a locally cached document that is in\r\n        // limbo.\r\n        if (!remoteVersion.isEqual(SnapshotVersion.min())) {\r\n            var updateRemoteVersion = localStoreImpl.targetCache\r\n                .getLastRemoteSnapshotVersion(txn)\r\n                .next(function (lastRemoteSnapshotVersion) {\r\n                return localStoreImpl.targetCache.setTargetsMetadata(txn, txn.currentSequenceNumber, remoteVersion);\r\n            });\r\n            promises.push(updateRemoteVersion);\r\n        }\r\n        return PersistencePromise.waitFor(promises)\r\n            .next(function () { return documentBuffer.apply(txn); })\r\n            .next(function () { return localStoreImpl.localDocuments.applyLocalViewToDocuments(txn, changedDocs); })\r\n            .next(function () { return changedDocs; });\r\n    })\r\n        .then(function (changedDocs) {\r\n        localStoreImpl.targetDataByTarget = newTargetDataByTargetMap;\r\n        return changedDocs;\r\n    });\r\n}\r\n/**\r\n * Populates document change buffer with documents from backend or a bundle.\r\n * Returns the document changes resulting from applying those documents.\r\n *\r\n * @param txn - Transaction to use to read existing documents from storage.\r\n * @param documentBuffer - Document buffer to collect the resulted changes to be\r\n *        applied to storage.\r\n * @param documents - Documents to be applied.\r\n * @param globalVersion - A `SnapshotVersion` representing the read time if all\r\n *        documents have the same read time.\r\n * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents\r\n *        have their own read time.\r\n *\r\n * Note: this function will use `documentVersions` if it is defined;\r\n * when it is not defined, resorts to `globalVersion`.\r\n */\r\nfunction populateDocumentChangeBuffer(txn, documentBuffer, documents, globalVersion, \r\n// TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove\r\n// this parameter.\r\ndocumentVersions) {\r\n    var updatedKeys = documentKeySet();\r\n    documents.forEach(function (k) { return (updatedKeys = updatedKeys.add(k)); });\r\n    return documentBuffer.getEntries(txn, updatedKeys).next(function (existingDocs) {\r\n        var changedDocs = mutableDocumentMap();\r\n        documents.forEach(function (key, doc) {\r\n            var existingDoc = existingDocs.get(key);\r\n            var docReadTime = (documentVersions === null || documentVersions === void 0 ? void 0 : documentVersions.get(key)) || globalVersion;\r\n            // Note: The order of the steps below is important, since we want\r\n            // to ensure that rejected limbo resolutions (which fabricate\r\n            // NoDocuments with SnapshotVersion.min()) never add documents to\r\n            // cache.\r\n            if (doc.isNoDocument() && doc.version.isEqual(SnapshotVersion.min())) {\r\n                // NoDocuments with SnapshotVersion.min() are used in manufactured\r\n                // events. We remove these documents from cache since we lost\r\n                // access.\r\n                documentBuffer.removeEntry(key, docReadTime);\r\n                changedDocs = changedDocs.insert(key, doc);\r\n            }\r\n            else if (!existingDoc.isValidDocument() ||\r\n                doc.version.compareTo(existingDoc.version) > 0 ||\r\n                (doc.version.compareTo(existingDoc.version) === 0 &&\r\n                    existingDoc.hasPendingWrites)) {\r\n                documentBuffer.addEntry(doc, docReadTime);\r\n                changedDocs = changedDocs.insert(key, doc);\r\n            }\r\n            else {\r\n                logDebug(LOG_TAG$c, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\r\n            }\r\n        });\r\n        return changedDocs;\r\n    });\r\n}\r\n/**\r\n * Returns true if the newTargetData should be persisted during an update of\r\n * an active target. TargetData should always be persisted when a target is\r\n * being released and should not call this function.\r\n *\r\n * While the target is active, TargetData updates can be omitted when nothing\r\n * about the target has changed except metadata like the resume token or\r\n * snapshot version. Occasionally it's worth the extra write to prevent these\r\n * values from getting too stale after a crash, but this doesn't have to be\r\n * too frequent.\r\n */\r\nfunction shouldPersistTargetData(oldTargetData, newTargetData, change) {\r\n    hardAssert(newTargetData.resumeToken.approximateByteSize() > 0);\r\n    // Always persist target data if we don't already have a resume token.\r\n    if (oldTargetData.resumeToken.approximateByteSize() === 0) {\r\n        return true;\r\n    }\r\n    // Don't allow resume token changes to be buffered indefinitely. This\r\n    // allows us to be reasonably up-to-date after a crash and avoids needing\r\n    // to loop over all active queries on shutdown. Especially in the browser\r\n    // we may not get time to do anything interesting while the current tab is\r\n    // closing.\r\n    var timeDelta = newTargetData.snapshotVersion.toMicroseconds() -\r\n        oldTargetData.snapshotVersion.toMicroseconds();\r\n    if (timeDelta >= RESUME_TOKEN_MAX_AGE_MICROS) {\r\n        return true;\r\n    }\r\n    // Otherwise if the only thing that has changed about a target is its resume\r\n    // token it's not worth persisting. Note that the RemoteStore keeps an\r\n    // in-memory view of the currently active targets which includes the current\r\n    // resume token, so stream failure or user changes will still use an\r\n    // up-to-date resume token regardless of what we do here.\r\n    var changes = change.addedDocuments.size +\r\n        change.modifiedDocuments.size +\r\n        change.removedDocuments.size;\r\n    return changes > 0;\r\n}\r\n/**\r\n * Notifies local store of the changed views to locally pin documents.\r\n */\r\nfunction localStoreNotifyLocalViewChanges(localStore, viewChanges) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var localStoreImpl, e_2, _i, viewChanges_1, viewChange, targetId, targetData, lastLimboFreeSnapshotVersion, updatedTargetData;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    localStoreImpl = debugCast(localStore);\r\n                    _d.label = 1;\r\n                case 1:\r\n                    _d.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, localStoreImpl.persistence.runTransaction('notifyLocalViewChanges', 'readwrite', function (txn) {\r\n                            return PersistencePromise.forEach(viewChanges, function (viewChange) {\r\n                                return PersistencePromise.forEach(viewChange.addedKeys, function (key) { return localStoreImpl.persistence.referenceDelegate.addReference(txn, viewChange.targetId, key); }).next(function () { return PersistencePromise.forEach(viewChange.removedKeys, function (key) { return localStoreImpl.persistence.referenceDelegate.removeReference(txn, viewChange.targetId, key); }); });\r\n                            });\r\n                        })];\r\n                case 2:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_2 = _d.sent();\r\n                    if (isIndexedDbTransactionError(e_2)) {\r\n                        // If `notifyLocalViewChanges` fails, we did not advance the sequence\r\n                        // number for the documents that were included in this transaction.\r\n                        // This might trigger them to be deleted earlier than they otherwise\r\n                        // would have, but it should not invalidate the integrity of the data.\r\n                        logDebug(LOG_TAG$c, 'Failed to update sequence numbers: ' + e_2);\r\n                    }\r\n                    else {\r\n                        throw e_2;\r\n                    }\r\n                    return [3 /*break*/, 4];\r\n                case 4:\r\n                    for (_i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {\r\n                        viewChange = viewChanges_1[_i];\r\n                        targetId = viewChange.targetId;\r\n                        if (!viewChange.fromCache) {\r\n                            targetData = localStoreImpl.targetDataByTarget.get(targetId);\r\n                            lastLimboFreeSnapshotVersion = targetData.snapshotVersion;\r\n                            updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(lastLimboFreeSnapshotVersion);\r\n                            localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetId, updatedTargetData);\r\n                        }\r\n                    }\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Gets the mutation batch after the passed in batchId in the mutation queue\r\n * or null if empty.\r\n * @param afterBatchId - If provided, the batch to search after.\r\n * @returns The next mutation or null if there wasn't one.\r\n */\r\nfunction localStoreGetNextMutationBatch(localStore, afterBatchId) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Get next mutation batch', 'readonly', function (txn) {\r\n        if (afterBatchId === undefined) {\r\n            afterBatchId = BATCHID_UNKNOWN;\r\n        }\r\n        return localStoreImpl.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\r\n    });\r\n}\r\n/**\r\n * Reads the current value of a Document with a given key or null if not\r\n * found - used for testing.\r\n */\r\nfunction localStoreReadDocument(localStore, key) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('read document', 'readonly', function (txn) { return localStoreImpl.localDocuments.getDocument(txn, key); });\r\n}\r\n/**\r\n * Assigns the given target an internal ID so that its results can be pinned so\r\n * they don't get GC'd. A target must be allocated in the local store before\r\n * the store can be used to manage its view.\r\n *\r\n * Allocating an already allocated `Target` will return the existing `TargetData`\r\n * for that `Target`.\r\n */\r\nfunction localStoreAllocateTarget(localStore, target) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence\r\n        .runTransaction('Allocate target', 'readwrite', function (txn) {\r\n        var targetData;\r\n        return localStoreImpl.targetCache\r\n            .getTargetData(txn, target)\r\n            .next(function (cached) {\r\n            if (cached) {\r\n                // This target has been listened to previously, so reuse the\r\n                // previous targetID.\r\n                // TODO(mcg): freshen last accessed date?\r\n                targetData = cached;\r\n                return PersistencePromise.resolve(targetData);\r\n            }\r\n            else {\r\n                return localStoreImpl.targetCache\r\n                    .allocateTargetId(txn)\r\n                    .next(function (targetId) {\r\n                    targetData = new TargetData(target, targetId, 0 /* Listen */, txn.currentSequenceNumber);\r\n                    return localStoreImpl.targetCache\r\n                        .addTargetData(txn, targetData)\r\n                        .next(function () { return targetData; });\r\n                });\r\n            }\r\n        });\r\n    })\r\n        .then(function (targetData) {\r\n        // If Multi-Tab is enabled, the existing target data may be newer than\r\n        // the in-memory data\r\n        var cachedTargetData = localStoreImpl.targetDataByTarget.get(targetData.targetId);\r\n        if (cachedTargetData === null ||\r\n            targetData.snapshotVersion.compareTo(cachedTargetData.snapshotVersion) >\r\n                0) {\r\n            localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetData.targetId, targetData);\r\n            localStoreImpl.targetIdByTarget.set(target, targetData.targetId);\r\n        }\r\n        return targetData;\r\n    });\r\n}\r\n/**\r\n * Returns the TargetData as seen by the LocalStore, including updates that may\r\n * have not yet been persisted to the TargetCache.\r\n */\r\n// Visible for testing.\r\nfunction localStoreGetTargetData(localStore, transaction, target) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    var targetId = localStoreImpl.targetIdByTarget.get(target);\r\n    if (targetId !== undefined) {\r\n        return PersistencePromise.resolve(localStoreImpl.targetDataByTarget.get(targetId));\r\n    }\r\n    else {\r\n        return localStoreImpl.targetCache.getTargetData(transaction, target);\r\n    }\r\n}\r\n/**\r\n * Unpins all the documents associated with the given target. If\r\n * `keepPersistedTargetData` is set to false and Eager GC enabled, the method\r\n * directly removes the associated target data from the target cache.\r\n *\r\n * Releasing a non-existing `Target` is a no-op.\r\n */\r\n// PORTING NOTE: `keepPersistedTargetData` is multi-tab only.\r\nfunction localStoreReleaseTarget(localStore, targetId, keepPersistedTargetData) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var localStoreImpl, targetData, mode, e_3;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    localStoreImpl = debugCast(localStore);\r\n                    targetData = localStoreImpl.targetDataByTarget.get(targetId);\r\n                    mode = keepPersistedTargetData ? 'readwrite' : 'readwrite-primary';\r\n                    _d.label = 1;\r\n                case 1:\r\n                    _d.trys.push([1, 4, , 5]);\r\n                    if (!!keepPersistedTargetData) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, localStoreImpl.persistence.runTransaction('Release target', mode, function (txn) {\r\n                            return localStoreImpl.persistence.referenceDelegate.removeTarget(txn, targetData);\r\n                        })];\r\n                case 2:\r\n                    _d.sent();\r\n                    _d.label = 3;\r\n                case 3: return [3 /*break*/, 5];\r\n                case 4:\r\n                    e_3 = _d.sent();\r\n                    if (isIndexedDbTransactionError(e_3)) {\r\n                        // All `releaseTarget` does is record the final metadata state for the\r\n                        // target, but we've been recording this periodically during target\r\n                        // activity. If we lose this write this could cause a very slight\r\n                        // difference in the order of target deletion during GC, but we\r\n                        // don't define exact LRU semantics so this is acceptable.\r\n                        logDebug(LOG_TAG$c, \"Failed to update sequence numbers for target \" + targetId + \": \" + e_3);\r\n                    }\r\n                    else {\r\n                        throw e_3;\r\n                    }\r\n                    return [3 /*break*/, 5];\r\n                case 5:\r\n                    localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.remove(targetId);\r\n                    localStoreImpl.targetIdByTarget.delete(targetData.target);\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Runs the specified query against the local store and returns the results,\r\n * potentially taking advantage of query data from previous executions (such\r\n * as the set of remote keys).\r\n *\r\n * @param usePreviousResults - Whether results from previous executions can\r\n * be used to optimize this query execution.\r\n */\r\nfunction localStoreExecuteQuery(localStore, query, usePreviousResults) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    var lastLimboFreeSnapshotVersion = SnapshotVersion.min();\r\n    var remoteKeys = documentKeySet();\r\n    return localStoreImpl.persistence.runTransaction('Execute query', 'readonly', function (txn) {\r\n        return localStoreGetTargetData(localStoreImpl, txn, queryToTarget(query))\r\n            .next(function (targetData) {\r\n            if (targetData) {\r\n                lastLimboFreeSnapshotVersion =\r\n                    targetData.lastLimboFreeSnapshotVersion;\r\n                return localStoreImpl.targetCache\r\n                    .getMatchingKeysForTargetId(txn, targetData.targetId)\r\n                    .next(function (result) {\r\n                    remoteKeys = result;\r\n                });\r\n            }\r\n        })\r\n            .next(function () { return localStoreImpl.queryEngine.getDocumentsMatchingQuery(txn, query, usePreviousResults\r\n            ? lastLimboFreeSnapshotVersion\r\n            : SnapshotVersion.min(), usePreviousResults ? remoteKeys : documentKeySet()); })\r\n            .next(function (documents) {\r\n            return { documents: documents, remoteKeys: remoteKeys };\r\n        });\r\n    });\r\n}\r\nfunction applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer) {\r\n    var batch = batchResult.batch;\r\n    var docKeys = batch.keys();\r\n    var promiseChain = PersistencePromise.resolve();\r\n    docKeys.forEach(function (docKey) {\r\n        promiseChain = promiseChain\r\n            .next(function () { return documentBuffer.getEntry(txn, docKey); })\r\n            .next(function (doc) {\r\n            var ackVersion = batchResult.docVersions.get(docKey);\r\n            hardAssert(ackVersion !== null);\r\n            if (doc.version.compareTo(ackVersion) < 0) {\r\n                batch.applyToRemoteDocument(doc, batchResult);\r\n                if (doc.isValidDocument()) {\r\n                    // We use the commitVersion as the readTime rather than the\r\n                    // document's updateTime since the updateTime is not advanced\r\n                    // for updates that do not modify the underlying document.\r\n                    documentBuffer.addEntry(doc, batchResult.commitVersion);\r\n                }\r\n            }\r\n        });\r\n    });\r\n    return promiseChain.next(function () { return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch); });\r\n}\r\n/** Returns the local view of the documents affected by a mutation batch. */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction localStoreLookupMutationDocuments(localStore, batchId) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    var mutationQueueImpl = debugCast(localStoreImpl.mutationQueue);\r\n    return localStoreImpl.persistence.runTransaction('Lookup mutation documents', 'readonly', function (txn) {\r\n        return mutationQueueImpl.lookupMutationKeys(txn, batchId).next(function (keys) {\r\n            if (keys) {\r\n                return localStoreImpl.localDocuments.getDocuments(txn, keys);\r\n            }\r\n            else {\r\n                return PersistencePromise.resolve(null);\r\n            }\r\n        });\r\n    });\r\n}\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction localStoreRemoveCachedMutationBatchMetadata(localStore, batchId) {\r\n    var mutationQueueImpl = debugCast(debugCast(localStore, LocalStoreImpl).mutationQueue);\r\n    mutationQueueImpl.removeCachedMutationKeys(batchId);\r\n}\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction localStoreGetActiveClients(localStore) {\r\n    var persistenceImpl = debugCast(debugCast(localStore, LocalStoreImpl).persistence);\r\n    return persistenceImpl.getActiveClients();\r\n}\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction localStoreGetCachedTarget(localStore, targetId) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    var targetCacheImpl = debugCast(localStoreImpl.targetCache);\r\n    var cachedTargetData = localStoreImpl.targetDataByTarget.get(targetId);\r\n    if (cachedTargetData) {\r\n        return Promise.resolve(cachedTargetData.target);\r\n    }\r\n    else {\r\n        return localStoreImpl.persistence.runTransaction('Get target data', 'readonly', function (txn) {\r\n            return targetCacheImpl\r\n                .getTargetDataForTarget(txn, targetId)\r\n                .next(function (targetData) { return (targetData ? targetData.target : null); });\r\n        });\r\n    }\r\n}\r\n/**\r\n * Returns the set of documents that have been updated since the last call.\r\n * If this is the first call, returns the set of changes since client\r\n * initialization. Further invocations will return document that have changed\r\n * since the prior call.\r\n */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction localStoreGetNewDocumentChanges(localStore) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence\r\n        .runTransaction('Get new document changes', 'readonly', function (txn) { return remoteDocumentCacheGetNewDocumentChanges(localStoreImpl.remoteDocuments, txn, localStoreImpl.lastDocumentChangeReadTime); })\r\n        .then(function (_d) {\r\n        var changedDocs = _d.changedDocs, readTime = _d.readTime;\r\n        localStoreImpl.lastDocumentChangeReadTime = readTime;\r\n        return changedDocs;\r\n    });\r\n}\r\n/**\r\n * Reads the newest document change from persistence and moves the internal\r\n * synchronization marker forward so that calls to `getNewDocumentChanges()`\r\n * only return changes that happened after client initialization.\r\n */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction localStoreSynchronizeLastDocumentChangeReadTime(localStore) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var localStoreImpl;\r\n        return tslib.__generator(this, function (_d) {\r\n            localStoreImpl = debugCast(localStore);\r\n            return [2 /*return*/, localStoreImpl.persistence\r\n                    .runTransaction('Synchronize last document change read time', 'readonly', function (txn) { return remoteDocumentCacheGetLastReadTime(txn); })\r\n                    .then(function (readTime) {\r\n                    localStoreImpl.lastDocumentChangeReadTime = readTime;\r\n                })];\r\n        });\r\n    });\r\n}\r\n/**\r\n * Creates a new target using the given bundle name, which will be used to\r\n * hold the keys of all documents from the bundle in query-document mappings.\r\n * This ensures that the loaded documents do not get garbage collected\r\n * right away.\r\n */\r\nfunction umbrellaTarget(bundleName) {\r\n    // It is OK that the path used for the query is not valid, because this will\r\n    // not be read and queried.\r\n    return queryToTarget(newQueryForPath(ResourcePath.fromString(\"__bundle__/docs/\" + bundleName)));\r\n}\r\n/**\r\n * Applies the documents from a bundle to the \"ground-state\" (remote)\r\n * documents.\r\n *\r\n * LocalDocuments are re-calculated if there are remaining mutations in the\r\n * queue.\r\n */\r\nfunction localStoreApplyBundledDocuments(localStore, bundleConverter, documents, bundleName) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var localStoreImpl, documentKeys, documentMap, versionMap, _i, documents_1, bundleDoc, documentKey, documentBuffer, umbrellaTargetData;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    localStoreImpl = debugCast(localStore);\r\n                    documentKeys = documentKeySet();\r\n                    documentMap = mutableDocumentMap();\r\n                    versionMap = documentVersionMap();\r\n                    for (_i = 0, documents_1 = documents; _i < documents_1.length; _i++) {\r\n                        bundleDoc = documents_1[_i];\r\n                        documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);\r\n                        if (bundleDoc.document) {\r\n                            documentKeys = documentKeys.add(documentKey);\r\n                        }\r\n                        documentMap = documentMap.insert(documentKey, bundleConverter.toMutableDocument(bundleDoc));\r\n                        versionMap = versionMap.insert(documentKey, bundleConverter.toSnapshotVersion(bundleDoc.metadata.readTime));\r\n                    }\r\n                    documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\r\n                        trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\r\n                    });\r\n                    return [4 /*yield*/, localStoreAllocateTarget(localStoreImpl, umbrellaTarget(bundleName))];\r\n                case 1:\r\n                    umbrellaTargetData = _d.sent();\r\n                    return [2 /*return*/, localStoreImpl.persistence.runTransaction('Apply bundle documents', 'readwrite', function (txn) {\r\n                            return populateDocumentChangeBuffer(txn, documentBuffer, documentMap, SnapshotVersion.min(), versionMap)\r\n                                .next(function (changedDocs) {\r\n                                documentBuffer.apply(txn);\r\n                                return changedDocs;\r\n                            })\r\n                                .next(function (changedDocs) {\r\n                                return localStoreImpl.targetCache\r\n                                    .removeMatchingKeysForTargetId(txn, umbrellaTargetData.targetId)\r\n                                    .next(function () { return localStoreImpl.targetCache.addMatchingKeys(txn, documentKeys, umbrellaTargetData.targetId); })\r\n                                    .next(function () { return localStoreImpl.localDocuments.applyLocalViewToDocuments(txn, changedDocs); })\r\n                                    .next(function () { return changedDocs; });\r\n                            });\r\n                        })];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns a promise of a boolean to indicate if the given bundle has already\r\n * been loaded and the create time is newer than the current loading bundle.\r\n */\r\nfunction localStoreHasNewerBundle(localStore, bundleMetadata) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    var currentReadTime = fromVersion(bundleMetadata.createTime);\r\n    return localStoreImpl.persistence\r\n        .runTransaction('hasNewerBundle', 'readonly', function (transaction) {\r\n        return localStoreImpl.bundleCache.getBundleMetadata(transaction, bundleMetadata.id);\r\n    })\r\n        .then(function (cached) {\r\n        return !!cached && cached.createTime.compareTo(currentReadTime) >= 0;\r\n    });\r\n}\r\n/**\r\n * Saves the given `BundleMetadata` to local persistence.\r\n */\r\nfunction localStoreSaveBundle(localStore, bundleMetadata) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Save bundle', 'readwrite', function (transaction) {\r\n        return localStoreImpl.bundleCache.saveBundleMetadata(transaction, bundleMetadata);\r\n    });\r\n}\r\n/**\r\n * Returns a promise of a `NamedQuery` associated with given query name. Promise\r\n * resolves to undefined if no persisted data can be found.\r\n */\r\nfunction localStoreGetNamedQuery(localStore, queryName) {\r\n    var localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Get named query', 'readonly', function (transaction) { return localStoreImpl.bundleCache.getNamedQuery(transaction, queryName); });\r\n}\r\n/**\r\n * Saves the given `NamedQuery` to local persistence.\r\n */\r\nfunction localStoreSaveNamedQuery(localStore, query, documents) {\r\n    if (documents === void 0) { documents = documentKeySet(); }\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var allocated, localStoreImpl;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, localStoreAllocateTarget(localStore, queryToTarget(fromBundledQuery(query.bundledQuery)))];\r\n                case 1:\r\n                    allocated = _d.sent();\r\n                    localStoreImpl = debugCast(localStore);\r\n                    return [2 /*return*/, localStoreImpl.persistence.runTransaction('Save named query', 'readwrite', function (transaction) {\r\n                            var readTime = fromVersion(query.readTime);\r\n                            // Simply save the query itself if it is older than what the SDK already\r\n                            // has.\r\n                            if (allocated.snapshotVersion.compareTo(readTime) >= 0) {\r\n                                return localStoreImpl.bundleCache.saveNamedQuery(transaction, query);\r\n                            }\r\n                            // Update existing target data because the query from the bundle is newer.\r\n                            var newTargetData = allocated.withResumeToken(ByteString.EMPTY_BYTE_STRING, readTime);\r\n                            localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(newTargetData.targetId, newTargetData);\r\n                            return localStoreImpl.targetCache\r\n                                .updateTargetData(transaction, newTargetData)\r\n                                .next(function () { return localStoreImpl.targetCache.removeMatchingKeysForTargetId(transaction, allocated.targetId); })\r\n                                .next(function () { return localStoreImpl.targetCache.addMatchingKeys(transaction, documents, allocated.targetId); })\r\n                                .next(function () { return localStoreImpl.bundleCache.saveNamedQuery(transaction, query); });\r\n                        })];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MemoryBundleCache = /** @class */ (function () {\r\n    function MemoryBundleCache(serializer) {\r\n        this.serializer = serializer;\r\n        this.bundles = new Map();\r\n        this.namedQueries = new Map();\r\n    }\r\n    MemoryBundleCache.prototype.getBundleMetadata = function (transaction, bundleId) {\r\n        return PersistencePromise.resolve(this.bundles.get(bundleId));\r\n    };\r\n    MemoryBundleCache.prototype.saveBundleMetadata = function (transaction, bundleMetadata) {\r\n        this.bundles.set(bundleMetadata.id, fromBundleMetadata(bundleMetadata));\r\n        return PersistencePromise.resolve();\r\n    };\r\n    MemoryBundleCache.prototype.getNamedQuery = function (transaction, queryName) {\r\n        return PersistencePromise.resolve(this.namedQueries.get(queryName));\r\n    };\r\n    MemoryBundleCache.prototype.saveNamedQuery = function (transaction, query) {\r\n        this.namedQueries.set(query.name, fromProtoNamedQuery(query));\r\n        return PersistencePromise.resolve();\r\n    };\r\n    return MemoryBundleCache;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A collection of references to a document from some kind of numbered entity\r\n * (either a target ID or batch ID). As references are added to or removed from\r\n * the set corresponding events are emitted to a registered garbage collector.\r\n *\r\n * Each reference is represented by a DocumentReference object. Each of them\r\n * contains enough information to uniquely identify the reference. They are all\r\n * stored primarily in a set sorted by key. A document is considered garbage if\r\n * there's no references in that set (this can be efficiently checked thanks to\r\n * sorting by key).\r\n *\r\n * ReferenceSet also keeps a secondary set that contains references sorted by\r\n * IDs. This one is used to efficiently implement removal of all references by\r\n * some target ID.\r\n */\r\nvar ReferenceSet = /** @class */ (function () {\r\n    function ReferenceSet() {\r\n        // A set of outstanding references to a document sorted by key.\r\n        this.refsByKey = new SortedSet(DocReference.compareByKey);\r\n        // A set of outstanding references to a document sorted by target id.\r\n        this.refsByTarget = new SortedSet(DocReference.compareByTargetId);\r\n    }\r\n    /** Returns true if the reference set contains no references. */\r\n    ReferenceSet.prototype.isEmpty = function () {\r\n        return this.refsByKey.isEmpty();\r\n    };\r\n    /** Adds a reference to the given document key for the given ID. */\r\n    ReferenceSet.prototype.addReference = function (key, id) {\r\n        var ref = new DocReference(key, id);\r\n        this.refsByKey = this.refsByKey.add(ref);\r\n        this.refsByTarget = this.refsByTarget.add(ref);\r\n    };\r\n    /** Add references to the given document keys for the given ID. */\r\n    ReferenceSet.prototype.addReferences = function (keys, id) {\r\n        var _this = this;\r\n        keys.forEach(function (key) { return _this.addReference(key, id); });\r\n    };\r\n    /**\r\n     * Removes a reference to the given document key for the given\r\n     * ID.\r\n     */\r\n    ReferenceSet.prototype.removeReference = function (key, id) {\r\n        this.removeRef(new DocReference(key, id));\r\n    };\r\n    ReferenceSet.prototype.removeReferences = function (keys, id) {\r\n        var _this = this;\r\n        keys.forEach(function (key) { return _this.removeReference(key, id); });\r\n    };\r\n    /**\r\n     * Clears all references with a given ID. Calls removeRef() for each key\r\n     * removed.\r\n     */\r\n    ReferenceSet.prototype.removeReferencesForId = function (id) {\r\n        var _this = this;\r\n        var emptyKey = new DocumentKey(new ResourcePath([]));\r\n        var startRef = new DocReference(emptyKey, id);\r\n        var endRef = new DocReference(emptyKey, id + 1);\r\n        var keys = [];\r\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\r\n            _this.removeRef(ref);\r\n            keys.push(ref.key);\r\n        });\r\n        return keys;\r\n    };\r\n    ReferenceSet.prototype.removeAllReferences = function () {\r\n        var _this = this;\r\n        this.refsByKey.forEach(function (ref) { return _this.removeRef(ref); });\r\n    };\r\n    ReferenceSet.prototype.removeRef = function (ref) {\r\n        this.refsByKey = this.refsByKey.delete(ref);\r\n        this.refsByTarget = this.refsByTarget.delete(ref);\r\n    };\r\n    ReferenceSet.prototype.referencesForId = function (id) {\r\n        var emptyKey = new DocumentKey(new ResourcePath([]));\r\n        var startRef = new DocReference(emptyKey, id);\r\n        var endRef = new DocReference(emptyKey, id + 1);\r\n        var keys = documentKeySet();\r\n        this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {\r\n            keys = keys.add(ref.key);\r\n        });\r\n        return keys;\r\n    };\r\n    ReferenceSet.prototype.containsKey = function (key) {\r\n        var ref = new DocReference(key, 0);\r\n        var firstRef = this.refsByKey.firstAfterOrEqual(ref);\r\n        return firstRef !== null && key.isEqual(firstRef.key);\r\n    };\r\n    return ReferenceSet;\r\n}());\r\nvar DocReference = /** @class */ (function () {\r\n    function DocReference(key, targetOrBatchId) {\r\n        this.key = key;\r\n        this.targetOrBatchId = targetOrBatchId;\r\n    }\r\n    /** Compare by key then by ID */\r\n    DocReference.compareByKey = function (left, right) {\r\n        return (DocumentKey.comparator(left.key, right.key) ||\r\n            primitiveComparator(left.targetOrBatchId, right.targetOrBatchId));\r\n    };\r\n    /** Compare by ID then by key */\r\n    DocReference.compareByTargetId = function (left, right) {\r\n        return (primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\r\n            DocumentKey.comparator(left.key, right.key));\r\n    };\r\n    return DocReference;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MemoryMutationQueue = /** @class */ (function () {\r\n    function MemoryMutationQueue(indexManager, referenceDelegate) {\r\n        this.indexManager = indexManager;\r\n        this.referenceDelegate = referenceDelegate;\r\n        /**\r\n         * The set of all mutations that have been sent but not yet been applied to\r\n         * the backend.\r\n         */\r\n        this.mutationQueue = [];\r\n        /** Next value to use when assigning sequential IDs to each mutation batch. */\r\n        this.nextBatchId = 1;\r\n        /** An ordered mapping between documents and the mutations batch IDs. */\r\n        this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\r\n    }\r\n    MemoryMutationQueue.prototype.checkEmpty = function (transaction) {\r\n        return PersistencePromise.resolve(this.mutationQueue.length === 0);\r\n    };\r\n    MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, baseMutations, mutations) {\r\n        var batchId = this.nextBatchId;\r\n        this.nextBatchId++;\r\n        if (this.mutationQueue.length > 0) {\r\n            this.mutationQueue[this.mutationQueue.length - 1];\r\n        }\r\n        var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);\r\n        this.mutationQueue.push(batch);\r\n        // Track references by document key and index collection parents.\r\n        for (var _i = 0, mutations_3 = mutations; _i < mutations_3.length; _i++) {\r\n            var mutation = mutations_3[_i];\r\n            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));\r\n            this.indexManager.addToCollectionParentIndex(transaction, mutation.key.path.popLast());\r\n        }\r\n        return PersistencePromise.resolve(batch);\r\n    };\r\n    MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {\r\n        return PersistencePromise.resolve(this.findMutationBatch(batchId));\r\n    };\r\n    MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {\r\n        var nextBatchId = batchId + 1;\r\n        // The requested batchId may still be out of range so normalize it to the\r\n        // start of the queue.\r\n        var rawIndex = this.indexOfBatchId(nextBatchId);\r\n        var index = rawIndex < 0 ? 0 : rawIndex;\r\n        return PersistencePromise.resolve(this.mutationQueue.length > index ? this.mutationQueue[index] : null);\r\n    };\r\n    MemoryMutationQueue.prototype.getHighestUnacknowledgedBatchId = function () {\r\n        return PersistencePromise.resolve(this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1);\r\n    };\r\n    MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {\r\n        return PersistencePromise.resolve(this.mutationQueue.slice());\r\n    };\r\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {\r\n        var _this = this;\r\n        var start = new DocReference(documentKey, 0);\r\n        var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\r\n        var result = [];\r\n        this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\r\n            var batch = _this.findMutationBatch(ref.targetOrBatchId);\r\n            result.push(batch);\r\n        });\r\n        return PersistencePromise.resolve(result);\r\n    };\r\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKeys = function (transaction, documentKeys) {\r\n        var _this = this;\r\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\r\n        documentKeys.forEach(function (documentKey) {\r\n            var start = new DocReference(documentKey, 0);\r\n            var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\r\n            _this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {\r\n                uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\r\n            });\r\n        });\r\n        return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\r\n    };\r\n    MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {\r\n        // Use the query path as a prefix for testing if a document matches the\r\n        // query.\r\n        var prefix = query.path;\r\n        var immediateChildrenPathLength = prefix.length + 1;\r\n        // Construct a document reference for actually scanning the index. Unlike\r\n        // the prefix the document key in this reference must have an even number of\r\n        // segments. The empty segment can be used a suffix of the query path\r\n        // because it precedes all other segments in an ordered traversal.\r\n        var startPath = prefix;\r\n        if (!DocumentKey.isDocumentKey(startPath)) {\r\n            startPath = startPath.child('');\r\n        }\r\n        var start = new DocReference(new DocumentKey(startPath), 0);\r\n        // Find unique batchIDs referenced by all documents potentially matching the\r\n        // query.\r\n        var uniqueBatchIDs = new SortedSet(primitiveComparator);\r\n        this.batchesByDocumentKey.forEachWhile(function (ref) {\r\n            var rowKeyPath = ref.key.path;\r\n            if (!prefix.isPrefixOf(rowKeyPath)) {\r\n                return false;\r\n            }\r\n            else {\r\n                // Rows with document keys more than one segment longer than the query\r\n                // path can't be matches. For example, a query on 'rooms' can't match\r\n                // the document /rooms/abc/messages/xyx.\r\n                // TODO(mcg): we'll need a different scanner when we implement\r\n                // ancestor queries.\r\n                if (rowKeyPath.length === immediateChildrenPathLength) {\r\n                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\r\n                }\r\n                return true;\r\n            }\r\n        }, start);\r\n        return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\r\n    };\r\n    MemoryMutationQueue.prototype.findMutationBatches = function (batchIDs) {\r\n        var _this = this;\r\n        // Construct an array of matching batches, sorted by batchID to ensure that\r\n        // multiple mutations affecting the same document key are applied in order.\r\n        var result = [];\r\n        batchIDs.forEach(function (batchId) {\r\n            var batch = _this.findMutationBatch(batchId);\r\n            if (batch !== null) {\r\n                result.push(batch);\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    MemoryMutationQueue.prototype.removeMutationBatch = function (transaction, batch) {\r\n        var _this = this;\r\n        // Find the position of the first batch for removal.\r\n        var batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');\r\n        hardAssert(batchIndex === 0);\r\n        this.mutationQueue.shift();\r\n        var references = this.batchesByDocumentKey;\r\n        return PersistencePromise.forEach(batch.mutations, function (mutation) {\r\n            var ref = new DocReference(mutation.key, batch.batchId);\r\n            references = references.delete(ref);\r\n            return _this.referenceDelegate.markPotentiallyOrphaned(transaction, mutation.key);\r\n        }).next(function () {\r\n            _this.batchesByDocumentKey = references;\r\n        });\r\n    };\r\n    MemoryMutationQueue.prototype.removeCachedMutationKeys = function (batchId) {\r\n        // No-op since the memory mutation queue does not maintain a separate cache.\r\n    };\r\n    MemoryMutationQueue.prototype.containsKey = function (txn, key) {\r\n        var ref = new DocReference(key, 0);\r\n        var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\r\n        return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\r\n    };\r\n    MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {\r\n        if (this.mutationQueue.length === 0)\r\n            ;\r\n        return PersistencePromise.resolve();\r\n    };\r\n    /**\r\n     * Finds the index of the given batchId in the mutation queue and asserts that\r\n     * the resulting index is within the bounds of the queue.\r\n     *\r\n     * @param batchId - The batchId to search for\r\n     * @param action - A description of what the caller is doing, phrased in passive\r\n     * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\r\n     */\r\n    MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {\r\n        var index = this.indexOfBatchId(batchId);\r\n        return index;\r\n    };\r\n    /**\r\n     * Finds the index of the given batchId in the mutation queue. This operation\r\n     * is O(1).\r\n     *\r\n     * @returns The computed index of the batch with the given batchId, based on\r\n     * the state of the queue. Note this index can be negative if the requested\r\n     * batchId has already been remvoed from the queue or past the end of the\r\n     * queue if the batchId is larger than the last added batch.\r\n     */\r\n    MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {\r\n        if (this.mutationQueue.length === 0) {\r\n            // As an index this is past the end of the queue\r\n            return 0;\r\n        }\r\n        // Examine the front of the queue to figure out the difference between the\r\n        // batchId and indexes in the array. Note that since the queue is ordered\r\n        // by batchId, if the first batch has a larger batchId then the requested\r\n        // batchId doesn't exist in the queue.\r\n        var firstBatchId = this.mutationQueue[0].batchId;\r\n        return batchId - firstBatchId;\r\n    };\r\n    /**\r\n     * A version of lookupMutationBatch that doesn't return a promise, this makes\r\n     * other functions that uses this code easier to read and more efficent.\r\n     */\r\n    MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {\r\n        var index = this.indexOfBatchId(batchId);\r\n        if (index < 0 || index >= this.mutationQueue.length) {\r\n            return null;\r\n        }\r\n        var batch = this.mutationQueue[index];\r\n        return batch;\r\n    };\r\n    return MemoryMutationQueue;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction documentEntryMap() {\r\n    return new SortedMap(DocumentKey.comparator);\r\n}\r\n/**\r\n * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke\r\n * `newMemoryRemoteDocumentCache()`.\r\n */\r\nvar MemoryRemoteDocumentCacheImpl = /** @class */ (function () {\r\n    /**\r\n     * @param sizer - Used to assess the size of a document. For eager GC, this is\r\n     * expected to just return 0 to avoid unnecessarily doing the work of\r\n     * calculating the size.\r\n     */\r\n    function MemoryRemoteDocumentCacheImpl(indexManager, sizer) {\r\n        this.indexManager = indexManager;\r\n        this.sizer = sizer;\r\n        /** Underlying cache of documents and their read times. */\r\n        this.docs = documentEntryMap();\r\n        /** Size of all cached documents. */\r\n        this.size = 0;\r\n    }\r\n    /**\r\n     * Adds the supplied entry to the cache and updates the cache size as appropriate.\r\n     *\r\n     * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer\r\n     * returned by `newChangeBuffer()`.\r\n     */\r\n    MemoryRemoteDocumentCacheImpl.prototype.addEntry = function (transaction, doc, readTime) {\r\n        var key = doc.key;\r\n        var entry = this.docs.get(key);\r\n        var previousSize = entry ? entry.size : 0;\r\n        var currentSize = this.sizer(doc);\r\n        this.docs = this.docs.insert(key, {\r\n            document: doc.clone(),\r\n            size: currentSize,\r\n            readTime: readTime\r\n        });\r\n        this.size += currentSize - previousSize;\r\n        return this.indexManager.addToCollectionParentIndex(transaction, key.path.popLast());\r\n    };\r\n    /**\r\n     * Removes the specified entry from the cache and updates the cache size as appropriate.\r\n     *\r\n     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer\r\n     * returned by `newChangeBuffer()`.\r\n     */\r\n    MemoryRemoteDocumentCacheImpl.prototype.removeEntry = function (documentKey) {\r\n        var entry = this.docs.get(documentKey);\r\n        if (entry) {\r\n            this.docs = this.docs.remove(documentKey);\r\n            this.size -= entry.size;\r\n        }\r\n    };\r\n    MemoryRemoteDocumentCacheImpl.prototype.getEntry = function (transaction, documentKey) {\r\n        var entry = this.docs.get(documentKey);\r\n        return PersistencePromise.resolve(entry\r\n            ? entry.document.clone()\r\n            : MutableDocument.newInvalidDocument(documentKey));\r\n    };\r\n    MemoryRemoteDocumentCacheImpl.prototype.getEntries = function (transaction, documentKeys) {\r\n        var _this = this;\r\n        var results = mutableDocumentMap();\r\n        documentKeys.forEach(function (documentKey) {\r\n            var entry = _this.docs.get(documentKey);\r\n            results = results.insert(documentKey, entry\r\n                ? entry.document.clone()\r\n                : MutableDocument.newInvalidDocument(documentKey));\r\n        });\r\n        return PersistencePromise.resolve(results);\r\n    };\r\n    MemoryRemoteDocumentCacheImpl.prototype.getDocumentsMatchingQuery = function (transaction, query, sinceReadTime) {\r\n        var results = mutableDocumentMap();\r\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\r\n        // the documents we need to match the query against.\r\n        var prefix = new DocumentKey(query.path.child(''));\r\n        var iterator = this.docs.getIteratorFrom(prefix);\r\n        while (iterator.hasNext()) {\r\n            var _d = iterator.getNext(), key = _d.key, _e = _d.value, document_3 = _e.document, readTime = _e.readTime;\r\n            if (!query.path.isPrefixOf(key.path)) {\r\n                break;\r\n            }\r\n            if (readTime.compareTo(sinceReadTime) <= 0) {\r\n                continue;\r\n            }\r\n            if (!queryMatches(query, document_3)) {\r\n                continue;\r\n            }\r\n            results = results.insert(document_3.key, document_3.clone());\r\n        }\r\n        return PersistencePromise.resolve(results);\r\n    };\r\n    MemoryRemoteDocumentCacheImpl.prototype.forEachDocumentKey = function (transaction, f) {\r\n        return PersistencePromise.forEach(this.docs, function (key) { return f(key); });\r\n    };\r\n    MemoryRemoteDocumentCacheImpl.prototype.newChangeBuffer = function (options) {\r\n        // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps\r\n        // a separate changelog and does not need special handling for removals.\r\n        return new MemoryRemoteDocumentChangeBuffer(this);\r\n    };\r\n    MemoryRemoteDocumentCacheImpl.prototype.getSize = function (txn) {\r\n        return PersistencePromise.resolve(this.size);\r\n    };\r\n    return MemoryRemoteDocumentCacheImpl;\r\n}());\r\n/**\r\n * Creates a new memory-only RemoteDocumentCache.\r\n *\r\n * @param indexManager - A class that manages collection group indices.\r\n * @param sizer - Used to assess the size of a document. For eager GC, this is\r\n * expected to just return 0 to avoid unnecessarily doing the work of\r\n * calculating the size.\r\n */\r\nfunction newMemoryRemoteDocumentCache(indexManager, sizer) {\r\n    return new MemoryRemoteDocumentCacheImpl(indexManager, sizer);\r\n}\r\n/**\r\n * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.\r\n */\r\nvar MemoryRemoteDocumentChangeBuffer = /** @class */ (function (_super) {\r\n    tslib.__extends(MemoryRemoteDocumentChangeBuffer, _super);\r\n    function MemoryRemoteDocumentChangeBuffer(documentCache) {\r\n        var _this = _super.call(this) || this;\r\n        _this.documentCache = documentCache;\r\n        return _this;\r\n    }\r\n    MemoryRemoteDocumentChangeBuffer.prototype.applyChanges = function (transaction) {\r\n        var _this = this;\r\n        var promises = [];\r\n        this.changes.forEach(function (key, doc) {\r\n            if (doc.document.isValidDocument()) {\r\n                promises.push(_this.documentCache.addEntry(transaction, doc.document, _this.getReadTime(key)));\r\n            }\r\n            else {\r\n                _this.documentCache.removeEntry(key);\r\n            }\r\n        });\r\n        return PersistencePromise.waitFor(promises);\r\n    };\r\n    MemoryRemoteDocumentChangeBuffer.prototype.getFromCache = function (transaction, documentKey) {\r\n        return this.documentCache.getEntry(transaction, documentKey);\r\n    };\r\n    MemoryRemoteDocumentChangeBuffer.prototype.getAllFromCache = function (transaction, documentKeys) {\r\n        return this.documentCache.getEntries(transaction, documentKeys);\r\n    };\r\n    return MemoryRemoteDocumentChangeBuffer;\r\n}(RemoteDocumentChangeBuffer));\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MemoryTargetCache = /** @class */ (function () {\r\n    function MemoryTargetCache(persistence) {\r\n        this.persistence = persistence;\r\n        /**\r\n         * Maps a target to the data about that target\r\n         */\r\n        this.targets = new ObjectMap(function (t) { return canonifyTarget(t); }, targetEquals);\r\n        /** The last received snapshot version. */\r\n        this.lastRemoteSnapshotVersion = SnapshotVersion.min();\r\n        /** The highest numbered target ID encountered. */\r\n        this.highestTargetId = 0;\r\n        /** The highest sequence number encountered. */\r\n        this.highestSequenceNumber = 0;\r\n        /**\r\n         * A ordered bidirectional mapping between documents and the remote target\r\n         * IDs.\r\n         */\r\n        this.references = new ReferenceSet();\r\n        this.targetCount = 0;\r\n        this.targetIdGenerator = TargetIdGenerator.forTargetCache();\r\n    }\r\n    MemoryTargetCache.prototype.forEachTarget = function (txn, f) {\r\n        this.targets.forEach(function (_, targetData) { return f(targetData); });\r\n        return PersistencePromise.resolve();\r\n    };\r\n    MemoryTargetCache.prototype.getLastRemoteSnapshotVersion = function (transaction) {\r\n        return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);\r\n    };\r\n    MemoryTargetCache.prototype.getHighestSequenceNumber = function (transaction) {\r\n        return PersistencePromise.resolve(this.highestSequenceNumber);\r\n    };\r\n    MemoryTargetCache.prototype.allocateTargetId = function (transaction) {\r\n        this.highestTargetId = this.targetIdGenerator.next();\r\n        return PersistencePromise.resolve(this.highestTargetId);\r\n    };\r\n    MemoryTargetCache.prototype.setTargetsMetadata = function (transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {\r\n        if (lastRemoteSnapshotVersion) {\r\n            this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\r\n        }\r\n        if (highestListenSequenceNumber > this.highestSequenceNumber) {\r\n            this.highestSequenceNumber = highestListenSequenceNumber;\r\n        }\r\n        return PersistencePromise.resolve();\r\n    };\r\n    MemoryTargetCache.prototype.saveTargetData = function (targetData) {\r\n        this.targets.set(targetData.target, targetData);\r\n        var targetId = targetData.targetId;\r\n        if (targetId > this.highestTargetId) {\r\n            this.targetIdGenerator = new TargetIdGenerator(targetId);\r\n            this.highestTargetId = targetId;\r\n        }\r\n        if (targetData.sequenceNumber > this.highestSequenceNumber) {\r\n            this.highestSequenceNumber = targetData.sequenceNumber;\r\n        }\r\n    };\r\n    MemoryTargetCache.prototype.addTargetData = function (transaction, targetData) {\r\n        this.saveTargetData(targetData);\r\n        this.targetCount += 1;\r\n        return PersistencePromise.resolve();\r\n    };\r\n    MemoryTargetCache.prototype.updateTargetData = function (transaction, targetData) {\r\n        this.saveTargetData(targetData);\r\n        return PersistencePromise.resolve();\r\n    };\r\n    MemoryTargetCache.prototype.removeTargetData = function (transaction, targetData) {\r\n        this.targets.delete(targetData.target);\r\n        this.references.removeReferencesForId(targetData.targetId);\r\n        this.targetCount -= 1;\r\n        return PersistencePromise.resolve();\r\n    };\r\n    MemoryTargetCache.prototype.removeTargets = function (transaction, upperBound, activeTargetIds) {\r\n        var _this = this;\r\n        var count = 0;\r\n        var removals = [];\r\n        this.targets.forEach(function (key, targetData) {\r\n            if (targetData.sequenceNumber <= upperBound &&\r\n                activeTargetIds.get(targetData.targetId) === null) {\r\n                _this.targets.delete(key);\r\n                removals.push(_this.removeMatchingKeysForTargetId(transaction, targetData.targetId));\r\n                count++;\r\n            }\r\n        });\r\n        return PersistencePromise.waitFor(removals).next(function () { return count; });\r\n    };\r\n    MemoryTargetCache.prototype.getTargetCount = function (transaction) {\r\n        return PersistencePromise.resolve(this.targetCount);\r\n    };\r\n    MemoryTargetCache.prototype.getTargetData = function (transaction, target) {\r\n        var targetData = this.targets.get(target) || null;\r\n        return PersistencePromise.resolve(targetData);\r\n    };\r\n    MemoryTargetCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\r\n        this.references.addReferences(keys, targetId);\r\n        return PersistencePromise.resolve();\r\n    };\r\n    MemoryTargetCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\r\n        this.references.removeReferences(keys, targetId);\r\n        var referenceDelegate = this.persistence.referenceDelegate;\r\n        var promises = [];\r\n        if (referenceDelegate) {\r\n            keys.forEach(function (key) {\r\n                promises.push(referenceDelegate.markPotentiallyOrphaned(txn, key));\r\n            });\r\n        }\r\n        return PersistencePromise.waitFor(promises);\r\n    };\r\n    MemoryTargetCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\r\n        this.references.removeReferencesForId(targetId);\r\n        return PersistencePromise.resolve();\r\n    };\r\n    MemoryTargetCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\r\n        var matchingKeys = this.references.referencesForId(targetId);\r\n        return PersistencePromise.resolve(matchingKeys);\r\n    };\r\n    MemoryTargetCache.prototype.containsKey = function (txn, key) {\r\n        return PersistencePromise.resolve(this.references.containsKey(key));\r\n    };\r\n    return MemoryTargetCache;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$b = 'MemoryPersistence';\r\n/**\r\n * A memory-backed instance of Persistence. Data is stored only in RAM and\r\n * not persisted across sessions.\r\n */\r\nvar MemoryPersistence = /** @class */ (function () {\r\n    /**\r\n     * The constructor accepts a factory for creating a reference delegate. This\r\n     * allows both the delegate and this instance to have strong references to\r\n     * each other without having nullable fields that would then need to be\r\n     * checked or asserted on every access.\r\n     */\r\n    function MemoryPersistence(referenceDelegateFactory, serializer) {\r\n        var _this = this;\r\n        this.mutationQueues = {};\r\n        this.listenSequence = new ListenSequence(0);\r\n        this._started = false;\r\n        this._started = true;\r\n        this.referenceDelegate = referenceDelegateFactory(this);\r\n        this.targetCache = new MemoryTargetCache(this);\r\n        var sizer = function (doc) { return _this.referenceDelegate.documentSize(doc); };\r\n        this.indexManager = new MemoryIndexManager();\r\n        this.remoteDocumentCache = newMemoryRemoteDocumentCache(this.indexManager, sizer);\r\n        this.serializer = new LocalSerializer(serializer);\r\n        this.bundleCache = new MemoryBundleCache(this.serializer);\r\n    }\r\n    MemoryPersistence.prototype.start = function () {\r\n        return Promise.resolve();\r\n    };\r\n    MemoryPersistence.prototype.shutdown = function () {\r\n        // No durable state to ensure is closed on shutdown.\r\n        this._started = false;\r\n        return Promise.resolve();\r\n    };\r\n    Object.defineProperty(MemoryPersistence.prototype, \"started\", {\r\n        get: function () {\r\n            return this._started;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    MemoryPersistence.prototype.setDatabaseDeletedListener = function () {\r\n        // No op.\r\n    };\r\n    MemoryPersistence.prototype.setNetworkEnabled = function () {\r\n        // No op.\r\n    };\r\n    MemoryPersistence.prototype.getIndexManager = function () {\r\n        return this.indexManager;\r\n    };\r\n    MemoryPersistence.prototype.getMutationQueue = function (user) {\r\n        var queue = this.mutationQueues[user.toKey()];\r\n        if (!queue) {\r\n            queue = new MemoryMutationQueue(this.indexManager, this.referenceDelegate);\r\n            this.mutationQueues[user.toKey()] = queue;\r\n        }\r\n        return queue;\r\n    };\r\n    MemoryPersistence.prototype.getTargetCache = function () {\r\n        return this.targetCache;\r\n    };\r\n    MemoryPersistence.prototype.getRemoteDocumentCache = function () {\r\n        return this.remoteDocumentCache;\r\n    };\r\n    MemoryPersistence.prototype.getBundleCache = function () {\r\n        return this.bundleCache;\r\n    };\r\n    MemoryPersistence.prototype.runTransaction = function (action, mode, transactionOperation) {\r\n        var _this = this;\r\n        logDebug(LOG_TAG$b, 'Starting transaction:', action);\r\n        var txn = new MemoryTransaction(this.listenSequence.next());\r\n        this.referenceDelegate.onTransactionStarted();\r\n        return transactionOperation(txn)\r\n            .next(function (result) {\r\n            return _this.referenceDelegate\r\n                .onTransactionCommitted(txn)\r\n                .next(function () { return result; });\r\n        })\r\n            .toPromise()\r\n            .then(function (result) {\r\n            txn.raiseOnCommittedEvent();\r\n            return result;\r\n        });\r\n    };\r\n    MemoryPersistence.prototype.mutationQueuesContainKey = function (transaction, key) {\r\n        return PersistencePromise.or(Object.values(this.mutationQueues).map(function (queue) { return function () { return queue.containsKey(transaction, key); }; }));\r\n    };\r\n    return MemoryPersistence;\r\n}());\r\n/**\r\n * Memory persistence is not actually transactional, but future implementations\r\n * may have transaction-scoped state.\r\n */\r\nvar MemoryTransaction = /** @class */ (function (_super) {\r\n    tslib.__extends(MemoryTransaction, _super);\r\n    function MemoryTransaction(currentSequenceNumber) {\r\n        var _this = _super.call(this) || this;\r\n        _this.currentSequenceNumber = currentSequenceNumber;\r\n        return _this;\r\n    }\r\n    return MemoryTransaction;\r\n}(PersistenceTransaction));\r\nvar MemoryEagerDelegate = /** @class */ (function () {\r\n    function MemoryEagerDelegate(persistence) {\r\n        this.persistence = persistence;\r\n        /** Tracks all documents that are active in Query views. */\r\n        this.localViewReferences = new ReferenceSet();\r\n        /** The list of documents that are potentially GCed after each transaction. */\r\n        this._orphanedDocuments = null;\r\n    }\r\n    MemoryEagerDelegate.factory = function (persistence) {\r\n        return new MemoryEagerDelegate(persistence);\r\n    };\r\n    Object.defineProperty(MemoryEagerDelegate.prototype, \"orphanedDocuments\", {\r\n        get: function () {\r\n            if (!this._orphanedDocuments) {\r\n                throw fail();\r\n            }\r\n            else {\r\n                return this._orphanedDocuments;\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    MemoryEagerDelegate.prototype.addReference = function (txn, targetId, key) {\r\n        this.localViewReferences.addReference(key, targetId);\r\n        this.orphanedDocuments.delete(key.toString());\r\n        return PersistencePromise.resolve();\r\n    };\r\n    MemoryEagerDelegate.prototype.removeReference = function (txn, targetId, key) {\r\n        this.localViewReferences.removeReference(key, targetId);\r\n        this.orphanedDocuments.add(key.toString());\r\n        return PersistencePromise.resolve();\r\n    };\r\n    MemoryEagerDelegate.prototype.markPotentiallyOrphaned = function (txn, key) {\r\n        this.orphanedDocuments.add(key.toString());\r\n        return PersistencePromise.resolve();\r\n    };\r\n    MemoryEagerDelegate.prototype.removeTarget = function (txn, targetData) {\r\n        var _this = this;\r\n        var orphaned = this.localViewReferences.removeReferencesForId(targetData.targetId);\r\n        orphaned.forEach(function (key) { return _this.orphanedDocuments.add(key.toString()); });\r\n        var cache = this.persistence.getTargetCache();\r\n        return cache\r\n            .getMatchingKeysForTargetId(txn, targetData.targetId)\r\n            .next(function (keys) {\r\n            keys.forEach(function (key) { return _this.orphanedDocuments.add(key.toString()); });\r\n        })\r\n            .next(function () { return cache.removeTargetData(txn, targetData); });\r\n    };\r\n    MemoryEagerDelegate.prototype.onTransactionStarted = function () {\r\n        this._orphanedDocuments = new Set();\r\n    };\r\n    MemoryEagerDelegate.prototype.onTransactionCommitted = function (txn) {\r\n        var _this = this;\r\n        // Remove newly orphaned documents.\r\n        var cache = this.persistence.getRemoteDocumentCache();\r\n        var changeBuffer = cache.newChangeBuffer();\r\n        return PersistencePromise.forEach(this.orphanedDocuments, function (path) {\r\n            var key = DocumentKey.fromPath(path);\r\n            return _this.isReferenced(txn, key).next(function (isReferenced) {\r\n                if (!isReferenced) {\r\n                    changeBuffer.removeEntry(key);\r\n                }\r\n            });\r\n        }).next(function () {\r\n            _this._orphanedDocuments = null;\r\n            return changeBuffer.apply(txn);\r\n        });\r\n    };\r\n    MemoryEagerDelegate.prototype.updateLimboDocument = function (txn, key) {\r\n        var _this = this;\r\n        return this.isReferenced(txn, key).next(function (isReferenced) {\r\n            if (isReferenced) {\r\n                _this.orphanedDocuments.delete(key.toString());\r\n            }\r\n            else {\r\n                _this.orphanedDocuments.add(key.toString());\r\n            }\r\n        });\r\n    };\r\n    MemoryEagerDelegate.prototype.documentSize = function (doc) {\r\n        // For eager GC, we don't care about the document size, there are no size thresholds.\r\n        return 0;\r\n    };\r\n    MemoryEagerDelegate.prototype.isReferenced = function (txn, key) {\r\n        var _this = this;\r\n        return PersistencePromise.or([\r\n            function () { return PersistencePromise.resolve(_this.localViewReferences.containsKey(key)); },\r\n            function () { return _this.persistence.getTargetCache().containsKey(txn, key); },\r\n            function () { return _this.persistence.mutationQueuesContainKey(txn, key); }\r\n        ]);\r\n    };\r\n    return MemoryEagerDelegate;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A query engine that takes advantage of the target document mapping in the\r\n * QueryCache. Query execution is optimized by only reading the documents that\r\n * previously matched a query plus any documents that were edited after the\r\n * query was last listened to.\r\n *\r\n * There are some cases when this optimization is not guaranteed to produce\r\n * the same results as full collection scans. In these cases, query\r\n * processing falls back to full scans. These cases are:\r\n *\r\n * - Limit queries where a document that matched the query previously no longer\r\n *   matches the query.\r\n *\r\n * - Limit queries where a document edit may cause the document to sort below\r\n *   another document that is in the local cache.\r\n *\r\n * - Queries that have never been CURRENT or free of limbo documents.\r\n */\r\nvar QueryEngine = /** @class */ (function () {\r\n    function QueryEngine() {\r\n    }\r\n    /** Sets the document view to query against. */\r\n    QueryEngine.prototype.setLocalDocumentsView = function (localDocuments) {\r\n        this.localDocumentsView = localDocuments;\r\n    };\r\n    /** Returns all local documents matching the specified query. */\r\n    QueryEngine.prototype.getDocumentsMatchingQuery = function (transaction, query, lastLimboFreeSnapshotVersion, remoteKeys) {\r\n        var _this = this;\r\n        // Queries that match all documents don't benefit from using\r\n        // key-based lookups. It is more efficient to scan all documents in a\r\n        // collection, rather than to perform individual lookups.\r\n        if (matchesAllDocuments(query)) {\r\n            return this.executeFullCollectionScan(transaction, query);\r\n        }\r\n        // Queries that have never seen a snapshot without limbo free documents\r\n        // should also be run as a full collection scan.\r\n        if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.min())) {\r\n            return this.executeFullCollectionScan(transaction, query);\r\n        }\r\n        return this.localDocumentsView.getDocuments(transaction, remoteKeys).next(function (documents) {\r\n            var previousResults = _this.applyQuery(query, documents);\r\n            if ((hasLimitToFirst(query) || hasLimitToLast(query)) &&\r\n                _this.needsRefill(query.limitType, previousResults, remoteKeys, lastLimboFreeSnapshotVersion)) {\r\n                return _this.executeFullCollectionScan(transaction, query);\r\n            }\r\n            if (getLogLevel() <= logger.LogLevel.DEBUG) {\r\n                logDebug('QueryEngine', 'Re-using previous result from %s to execute query: %s', lastLimboFreeSnapshotVersion.toString(), stringifyQuery(query));\r\n            }\r\n            // Retrieve all results for documents that were updated since the last\r\n            // limbo-document free remote snapshot.\r\n            return _this.localDocumentsView.getDocumentsMatchingQuery(transaction, query, lastLimboFreeSnapshotVersion).next(function (updatedResults) {\r\n                // We merge `previousResults` into `updateResults`, since\r\n                // `updateResults` is already a DocumentMap. If a document is\r\n                // contained in both lists, then its contents are the same.\r\n                previousResults.forEach(function (doc) {\r\n                    updatedResults = updatedResults.insert(doc.key, doc);\r\n                });\r\n                return updatedResults;\r\n            });\r\n        });\r\n    };\r\n    /** Applies the query filter and sorting to the provided documents.  */\r\n    QueryEngine.prototype.applyQuery = function (query, documents) {\r\n        // Sort the documents and re-apply the query filter since previously\r\n        // matching documents do not necessarily still match the query.\r\n        var queryResults = new SortedSet(newQueryComparator(query));\r\n        documents.forEach(function (_, maybeDoc) {\r\n            if (queryMatches(query, maybeDoc)) {\r\n                queryResults = queryResults.add(maybeDoc);\r\n            }\r\n        });\r\n        return queryResults;\r\n    };\r\n    /**\r\n     * Determines if a limit query needs to be refilled from cache, making it\r\n     * ineligible for index-free execution.\r\n     *\r\n     * @param sortedPreviousResults - The documents that matched the query when it\r\n     * was last synchronized, sorted by the query's comparator.\r\n     * @param remoteKeys - The document keys that matched the query at the last\r\n     * snapshot.\r\n     * @param limboFreeSnapshotVersion - The version of the snapshot when the\r\n     * query was last synchronized.\r\n     */\r\n    QueryEngine.prototype.needsRefill = function (limitType, sortedPreviousResults, remoteKeys, limboFreeSnapshotVersion) {\r\n        // The query needs to be refilled if a previously matching document no\r\n        // longer matches.\r\n        if (remoteKeys.size !== sortedPreviousResults.size) {\r\n            return true;\r\n        }\r\n        // Limit queries are not eligible for index-free query execution if there is\r\n        // a potential that an older document from cache now sorts before a document\r\n        // that was previously part of the limit. This, however, can only happen if\r\n        // the document at the edge of the limit goes out of limit.\r\n        // If a document that is not the limit boundary sorts differently,\r\n        // the boundary of the limit itself did not change and documents from cache\r\n        // will continue to be \"rejected\" by this boundary. Therefore, we can ignore\r\n        // any modifications that don't affect the last document.\r\n        var docAtLimitEdge = limitType === \"F\" /* First */\r\n            ? sortedPreviousResults.last()\r\n            : sortedPreviousResults.first();\r\n        if (!docAtLimitEdge) {\r\n            // We don't need to refill the query if there were already no documents.\r\n            return false;\r\n        }\r\n        return (docAtLimitEdge.hasPendingWrites ||\r\n            docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0);\r\n    };\r\n    QueryEngine.prototype.executeFullCollectionScan = function (transaction, query) {\r\n        if (getLogLevel() <= logger.LogLevel.DEBUG) {\r\n            logDebug('QueryEngine', 'Using full collection scan to execute query:', stringifyQuery(query));\r\n        }\r\n        return this.localDocumentsView.getDocumentsMatchingQuery(transaction, query, SnapshotVersion.min());\r\n    };\r\n    return QueryEngine;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Simple wrapper around a nullable UID. Mostly exists to make code more\r\n * readable.\r\n */\r\nvar User = /** @class */ (function () {\r\n    function User(uid) {\r\n        this.uid = uid;\r\n    }\r\n    User.prototype.isAuthenticated = function () {\r\n        return this.uid != null;\r\n    };\r\n    /**\r\n     * Returns a key representing this user, suitable for inclusion in a\r\n     * dictionary.\r\n     */\r\n    User.prototype.toKey = function () {\r\n        if (this.isAuthenticated()) {\r\n            return 'uid:' + this.uid;\r\n        }\r\n        else {\r\n            return 'anonymous-user';\r\n        }\r\n    };\r\n    User.prototype.isEqual = function (otherUser) {\r\n        return otherUser.uid === this.uid;\r\n    };\r\n    return User;\r\n}());\r\n/** A user with a null UID. */\r\nUser.UNAUTHENTICATED = new User(null);\r\n// TODO(mikelehen): Look into getting a proper uid-equivalent for\r\n// non-FirebaseAuth providers.\r\nUser.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\r\nUser.FIRST_PARTY = new User('first-party-uid');\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// The format of the LocalStorage key that stores the client state is:\r\n//     firestore_clients_<persistence_prefix>_<instance_key>\r\nvar CLIENT_STATE_KEY_PREFIX = 'firestore_clients';\r\n/** Assembles the key for a client state in WebStorage */\r\nfunction createWebStorageClientStateKey(persistenceKey, clientId) {\r\n    return CLIENT_STATE_KEY_PREFIX + \"_\" + persistenceKey + \"_\" + clientId;\r\n}\r\n// The format of the WebStorage key that stores the mutation state is:\r\n//     firestore_mutations_<persistence_prefix>_<batch_id>\r\n//     (for unauthenticated users)\r\n// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>\r\n//\r\n// 'user_uid' is last to avoid needing to escape '_' characters that it might\r\n// contain.\r\nvar MUTATION_BATCH_KEY_PREFIX = 'firestore_mutations';\r\n/** Assembles the key for a mutation batch in WebStorage */\r\nfunction createWebStorageMutationBatchKey(persistenceKey, user, batchId) {\r\n    var mutationKey = MUTATION_BATCH_KEY_PREFIX + \"_\" + persistenceKey + \"_\" + batchId;\r\n    if (user.isAuthenticated()) {\r\n        mutationKey += \"_\" + user.uid;\r\n    }\r\n    return mutationKey;\r\n}\r\n// The format of the WebStorage key that stores a query target's metadata is:\r\n//     firestore_targets_<persistence_prefix>_<target_id>\r\nvar QUERY_TARGET_KEY_PREFIX = 'firestore_targets';\r\n/** Assembles the key for a query state in WebStorage */\r\nfunction createWebStorageQueryTargetMetadataKey(persistenceKey, targetId) {\r\n    return QUERY_TARGET_KEY_PREFIX + \"_\" + persistenceKey + \"_\" + targetId;\r\n}\r\n// The WebStorage prefix that stores the primary tab's online state. The\r\n// format of the key is:\r\n//     firestore_online_state_<persistence_prefix>\r\nvar ONLINE_STATE_KEY_PREFIX = 'firestore_online_state';\r\n/** Assembles the key for the online state of the primary tab. */\r\nfunction createWebStorageOnlineStateKey(persistenceKey) {\r\n    return ONLINE_STATE_KEY_PREFIX + \"_\" + persistenceKey;\r\n}\r\n// The WebStorage prefix that plays as a event to indicate the remote documents\r\n// might have changed due to some secondary tabs loading a bundle.\r\n// format of the key is:\r\n//     firestore_bundle_loaded_<persistenceKey>\r\nvar BUNDLE_LOADED_KEY_PREFIX = 'firestore_bundle_loaded';\r\nfunction createBundleLoadedKey(persistenceKey) {\r\n    return BUNDLE_LOADED_KEY_PREFIX + \"_\" + persistenceKey;\r\n}\r\n// The WebStorage key prefix for the key that stores the last sequence number allocated. The key\r\n// looks like 'firestore_sequence_number_<persistence_prefix>'.\r\nvar SEQUENCE_NUMBER_KEY_PREFIX = 'firestore_sequence_number';\r\n/** Assembles the key for the current sequence number. */\r\nfunction createWebStorageSequenceNumberKey(persistenceKey) {\r\n    return SEQUENCE_NUMBER_KEY_PREFIX + \"_\" + persistenceKey;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$a = 'SharedClientState';\r\n/**\r\n * Holds the state of a mutation batch, including its user ID, batch ID and\r\n * whether the batch is 'pending', 'acknowledged' or 'rejected'.\r\n */\r\n// Visible for testing\r\nvar MutationMetadata = /** @class */ (function () {\r\n    function MutationMetadata(user, batchId, state, error) {\r\n        this.user = user;\r\n        this.batchId = batchId;\r\n        this.state = state;\r\n        this.error = error;\r\n    }\r\n    /**\r\n     * Parses a MutationMetadata from its JSON representation in WebStorage.\r\n     * Logs a warning and returns null if the format of the data is not valid.\r\n     */\r\n    MutationMetadata.fromWebStorageEntry = function (user, batchId, value) {\r\n        var mutationBatch = JSON.parse(value);\r\n        var validData = typeof mutationBatch === 'object' &&\r\n            ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !==\r\n                -1 &&\r\n            (mutationBatch.error === undefined ||\r\n                typeof mutationBatch.error === 'object');\r\n        var firestoreError = undefined;\r\n        if (validData && mutationBatch.error) {\r\n            validData =\r\n                typeof mutationBatch.error.message === 'string' &&\r\n                    typeof mutationBatch.error.code === 'string';\r\n            if (validData) {\r\n                firestoreError = new FirestoreError(mutationBatch.error.code, mutationBatch.error.message);\r\n            }\r\n        }\r\n        if (validData) {\r\n            return new MutationMetadata(user, batchId, mutationBatch.state, firestoreError);\r\n        }\r\n        else {\r\n            logError(LOG_TAG$a, \"Failed to parse mutation state for ID '\" + batchId + \"': \" + value);\r\n            return null;\r\n        }\r\n    };\r\n    MutationMetadata.prototype.toWebStorageJSON = function () {\r\n        var batchMetadata = {\r\n            state: this.state,\r\n            updateTimeMs: Date.now() // Modify the existing value to trigger update.\r\n        };\r\n        if (this.error) {\r\n            batchMetadata.error = {\r\n                code: this.error.code,\r\n                message: this.error.message\r\n            };\r\n        }\r\n        return JSON.stringify(batchMetadata);\r\n    };\r\n    return MutationMetadata;\r\n}());\r\n/**\r\n * Holds the state of a query target, including its target ID and whether the\r\n * target is 'not-current', 'current' or 'rejected'.\r\n */\r\n// Visible for testing\r\nvar QueryTargetMetadata = /** @class */ (function () {\r\n    function QueryTargetMetadata(targetId, state, error) {\r\n        this.targetId = targetId;\r\n        this.state = state;\r\n        this.error = error;\r\n    }\r\n    /**\r\n     * Parses a QueryTargetMetadata from its JSON representation in WebStorage.\r\n     * Logs a warning and returns null if the format of the data is not valid.\r\n     */\r\n    QueryTargetMetadata.fromWebStorageEntry = function (targetId, value) {\r\n        var targetState = JSON.parse(value);\r\n        var validData = typeof targetState === 'object' &&\r\n            ['not-current', 'current', 'rejected'].indexOf(targetState.state) !==\r\n                -1 &&\r\n            (targetState.error === undefined ||\r\n                typeof targetState.error === 'object');\r\n        var firestoreError = undefined;\r\n        if (validData && targetState.error) {\r\n            validData =\r\n                typeof targetState.error.message === 'string' &&\r\n                    typeof targetState.error.code === 'string';\r\n            if (validData) {\r\n                firestoreError = new FirestoreError(targetState.error.code, targetState.error.message);\r\n            }\r\n        }\r\n        if (validData) {\r\n            return new QueryTargetMetadata(targetId, targetState.state, firestoreError);\r\n        }\r\n        else {\r\n            logError(LOG_TAG$a, \"Failed to parse target state for ID '\" + targetId + \"': \" + value);\r\n            return null;\r\n        }\r\n    };\r\n    QueryTargetMetadata.prototype.toWebStorageJSON = function () {\r\n        var targetState = {\r\n            state: this.state,\r\n            updateTimeMs: Date.now() // Modify the existing value to trigger update.\r\n        };\r\n        if (this.error) {\r\n            targetState.error = {\r\n                code: this.error.code,\r\n                message: this.error.message\r\n            };\r\n        }\r\n        return JSON.stringify(targetState);\r\n    };\r\n    return QueryTargetMetadata;\r\n}());\r\n/**\r\n * This class represents the immutable ClientState for a client read from\r\n * WebStorage, containing the list of active query targets.\r\n */\r\nvar RemoteClientState = /** @class */ (function () {\r\n    function RemoteClientState(clientId, activeTargetIds) {\r\n        this.clientId = clientId;\r\n        this.activeTargetIds = activeTargetIds;\r\n    }\r\n    /**\r\n     * Parses a RemoteClientState from the JSON representation in WebStorage.\r\n     * Logs a warning and returns null if the format of the data is not valid.\r\n     */\r\n    RemoteClientState.fromWebStorageEntry = function (clientId, value) {\r\n        var clientState = JSON.parse(value);\r\n        var validData = typeof clientState === 'object' &&\r\n            clientState.activeTargetIds instanceof Array;\r\n        var activeTargetIdsSet = targetIdSet();\r\n        for (var i = 0; validData && i < clientState.activeTargetIds.length; ++i) {\r\n            validData = isSafeInteger(clientState.activeTargetIds[i]);\r\n            activeTargetIdsSet = activeTargetIdsSet.add(clientState.activeTargetIds[i]);\r\n        }\r\n        if (validData) {\r\n            return new RemoteClientState(clientId, activeTargetIdsSet);\r\n        }\r\n        else {\r\n            logError(LOG_TAG$a, \"Failed to parse client data for instance '\" + clientId + \"': \" + value);\r\n            return null;\r\n        }\r\n    };\r\n    return RemoteClientState;\r\n}());\r\n/**\r\n * This class represents the online state for all clients participating in\r\n * multi-tab. The online state is only written to by the primary client, and\r\n * used in secondary clients to update their query views.\r\n */\r\nvar SharedOnlineState = /** @class */ (function () {\r\n    function SharedOnlineState(clientId, onlineState) {\r\n        this.clientId = clientId;\r\n        this.onlineState = onlineState;\r\n    }\r\n    /**\r\n     * Parses a SharedOnlineState from its JSON representation in WebStorage.\r\n     * Logs a warning and returns null if the format of the data is not valid.\r\n     */\r\n    SharedOnlineState.fromWebStorageEntry = function (value) {\r\n        var onlineState = JSON.parse(value);\r\n        var validData = typeof onlineState === 'object' &&\r\n            ['Unknown', 'Online', 'Offline'].indexOf(onlineState.onlineState) !==\r\n                -1 &&\r\n            typeof onlineState.clientId === 'string';\r\n        if (validData) {\r\n            return new SharedOnlineState(onlineState.clientId, onlineState.onlineState);\r\n        }\r\n        else {\r\n            logError(LOG_TAG$a, \"Failed to parse online state: \" + value);\r\n            return null;\r\n        }\r\n    };\r\n    return SharedOnlineState;\r\n}());\r\n/**\r\n * Metadata state of the local client. Unlike `RemoteClientState`, this class is\r\n * mutable and keeps track of all pending mutations, which allows us to\r\n * update the range of pending mutation batch IDs as new mutations are added or\r\n * removed.\r\n *\r\n * The data in `LocalClientState` is not read from WebStorage and instead\r\n * updated via its instance methods. The updated state can be serialized via\r\n * `toWebStorageJSON()`.\r\n */\r\n// Visible for testing.\r\nvar LocalClientState = /** @class */ (function () {\r\n    function LocalClientState() {\r\n        this.activeTargetIds = targetIdSet();\r\n    }\r\n    LocalClientState.prototype.addQueryTarget = function (targetId) {\r\n        this.activeTargetIds = this.activeTargetIds.add(targetId);\r\n    };\r\n    LocalClientState.prototype.removeQueryTarget = function (targetId) {\r\n        this.activeTargetIds = this.activeTargetIds.delete(targetId);\r\n    };\r\n    /**\r\n     * Converts this entry into a JSON-encoded format we can use for WebStorage.\r\n     * Does not encode `clientId` as it is part of the key in WebStorage.\r\n     */\r\n    LocalClientState.prototype.toWebStorageJSON = function () {\r\n        var data = {\r\n            activeTargetIds: this.activeTargetIds.toArray(),\r\n            updateTimeMs: Date.now() // Modify the existing value to trigger update.\r\n        };\r\n        return JSON.stringify(data);\r\n    };\r\n    return LocalClientState;\r\n}());\r\n/**\r\n * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the\r\n * backing store for the SharedClientState. It keeps track of all active\r\n * clients and supports modifications of the local client's data.\r\n */\r\nvar WebStorageSharedClientState = /** @class */ (function () {\r\n    function WebStorageSharedClientState(window, queue, persistenceKey, localClientId, initialUser) {\r\n        this.window = window;\r\n        this.queue = queue;\r\n        this.persistenceKey = persistenceKey;\r\n        this.localClientId = localClientId;\r\n        this.syncEngine = null;\r\n        this.onlineStateHandler = null;\r\n        this.sequenceNumberHandler = null;\r\n        this.storageListener = this.handleWebStorageEvent.bind(this);\r\n        this.activeClients = new SortedMap(primitiveComparator);\r\n        this.started = false;\r\n        /**\r\n         * Captures WebStorage events that occur before `start()` is called. These\r\n         * events are replayed once `WebStorageSharedClientState` is started.\r\n         */\r\n        this.earlyEvents = [];\r\n        // Escape the special characters mentioned here:\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\r\n        var escapedPersistenceKey = persistenceKey.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n        this.storage = this.window.localStorage;\r\n        this.currentUser = initialUser;\r\n        this.localClientStorageKey = createWebStorageClientStateKey(this.persistenceKey, this.localClientId);\r\n        this.sequenceNumberKey = createWebStorageSequenceNumberKey(this.persistenceKey);\r\n        this.activeClients = this.activeClients.insert(this.localClientId, new LocalClientState());\r\n        this.clientStateKeyRe = new RegExp(\"^\" + CLIENT_STATE_KEY_PREFIX + \"_\" + escapedPersistenceKey + \"_([^_]*)$\");\r\n        this.mutationBatchKeyRe = new RegExp(\"^\" + MUTATION_BATCH_KEY_PREFIX + \"_\" + escapedPersistenceKey + \"_(\\\\d+)(?:_(.*))?$\");\r\n        this.queryTargetKeyRe = new RegExp(\"^\" + QUERY_TARGET_KEY_PREFIX + \"_\" + escapedPersistenceKey + \"_(\\\\d+)$\");\r\n        this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);\r\n        this.bundleLoadedKey = createBundleLoadedKey(this.persistenceKey);\r\n        // Rather than adding the storage observer during start(), we add the\r\n        // storage observer during initialization. This ensures that we collect\r\n        // events before other components populate their initial state (during their\r\n        // respective start() calls). Otherwise, we might for example miss a\r\n        // mutation that is added after LocalStore's start() processed the existing\r\n        // mutations but before we observe WebStorage events.\r\n        this.window.addEventListener('storage', this.storageListener);\r\n    }\r\n    /** Returns 'true' if WebStorage is available in the current environment. */\r\n    WebStorageSharedClientState.isAvailable = function (window) {\r\n        return !!(window && window.localStorage);\r\n    };\r\n    WebStorageSharedClientState.prototype.start = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var existingClients, _i, existingClients_1, clientId, storageItem, clientState, onlineStateJSON, onlineState, _d, _e, event_1;\r\n            var _this = this;\r\n            return tslib.__generator(this, function (_f) {\r\n                switch (_f.label) {\r\n                    case 0: return [4 /*yield*/, this.syncEngine.getActiveClients()];\r\n                    case 1:\r\n                        existingClients = _f.sent();\r\n                        for (_i = 0, existingClients_1 = existingClients; _i < existingClients_1.length; _i++) {\r\n                            clientId = existingClients_1[_i];\r\n                            if (clientId === this.localClientId) {\r\n                                continue;\r\n                            }\r\n                            storageItem = this.getItem(createWebStorageClientStateKey(this.persistenceKey, clientId));\r\n                            if (storageItem) {\r\n                                clientState = RemoteClientState.fromWebStorageEntry(clientId, storageItem);\r\n                                if (clientState) {\r\n                                    this.activeClients = this.activeClients.insert(clientState.clientId, clientState);\r\n                                }\r\n                            }\r\n                        }\r\n                        this.persistClientState();\r\n                        onlineStateJSON = this.storage.getItem(this.onlineStateKey);\r\n                        if (onlineStateJSON) {\r\n                            onlineState = this.fromWebStorageOnlineState(onlineStateJSON);\r\n                            if (onlineState) {\r\n                                this.handleOnlineStateEvent(onlineState);\r\n                            }\r\n                        }\r\n                        for (_d = 0, _e = this.earlyEvents; _d < _e.length; _d++) {\r\n                            event_1 = _e[_d];\r\n                            this.handleWebStorageEvent(event_1);\r\n                        }\r\n                        this.earlyEvents = [];\r\n                        // Register a window unload hook to remove the client metadata entry from\r\n                        // WebStorage even if `shutdown()` was not called.\r\n                        this.window.addEventListener('pagehide', function () { return _this.shutdown(); });\r\n                        this.started = true;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    WebStorageSharedClientState.prototype.writeSequenceNumber = function (sequenceNumber) {\r\n        this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));\r\n    };\r\n    WebStorageSharedClientState.prototype.getAllActiveQueryTargets = function () {\r\n        return this.extractActiveQueryTargets(this.activeClients);\r\n    };\r\n    WebStorageSharedClientState.prototype.isActiveQueryTarget = function (targetId) {\r\n        var found = false;\r\n        this.activeClients.forEach(function (key, value) {\r\n            if (value.activeTargetIds.has(targetId)) {\r\n                found = true;\r\n            }\r\n        });\r\n        return found;\r\n    };\r\n    WebStorageSharedClientState.prototype.addPendingMutation = function (batchId) {\r\n        this.persistMutationState(batchId, 'pending');\r\n    };\r\n    WebStorageSharedClientState.prototype.updateMutationState = function (batchId, state, error) {\r\n        this.persistMutationState(batchId, state, error);\r\n        // Once a final mutation result is observed by other clients, they no longer\r\n        // access the mutation's metadata entry. Since WebStorage replays events\r\n        // in order, it is safe to delete the entry right after updating it.\r\n        this.removeMutationState(batchId);\r\n    };\r\n    WebStorageSharedClientState.prototype.addLocalQueryTarget = function (targetId) {\r\n        var queryState = 'not-current';\r\n        // Lookup an existing query state if the target ID was already registered\r\n        // by another tab\r\n        if (this.isActiveQueryTarget(targetId)) {\r\n            var storageItem = this.storage.getItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));\r\n            if (storageItem) {\r\n                var metadata = QueryTargetMetadata.fromWebStorageEntry(targetId, storageItem);\r\n                if (metadata) {\r\n                    queryState = metadata.state;\r\n                }\r\n            }\r\n        }\r\n        this.localClientState.addQueryTarget(targetId);\r\n        this.persistClientState();\r\n        return queryState;\r\n    };\r\n    WebStorageSharedClientState.prototype.removeLocalQueryTarget = function (targetId) {\r\n        this.localClientState.removeQueryTarget(targetId);\r\n        this.persistClientState();\r\n    };\r\n    WebStorageSharedClientState.prototype.isLocalQueryTarget = function (targetId) {\r\n        return this.localClientState.activeTargetIds.has(targetId);\r\n    };\r\n    WebStorageSharedClientState.prototype.clearQueryState = function (targetId) {\r\n        this.removeItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));\r\n    };\r\n    WebStorageSharedClientState.prototype.updateQueryState = function (targetId, state, error) {\r\n        this.persistQueryTargetState(targetId, state, error);\r\n    };\r\n    WebStorageSharedClientState.prototype.handleUserChange = function (user, removedBatchIds, addedBatchIds) {\r\n        var _this = this;\r\n        removedBatchIds.forEach(function (batchId) {\r\n            _this.removeMutationState(batchId);\r\n        });\r\n        this.currentUser = user;\r\n        addedBatchIds.forEach(function (batchId) {\r\n            _this.addPendingMutation(batchId);\r\n        });\r\n    };\r\n    WebStorageSharedClientState.prototype.setOnlineState = function (onlineState) {\r\n        this.persistOnlineState(onlineState);\r\n    };\r\n    WebStorageSharedClientState.prototype.notifyBundleLoaded = function () {\r\n        this.persistBundleLoadedState();\r\n    };\r\n    WebStorageSharedClientState.prototype.shutdown = function () {\r\n        if (this.started) {\r\n            this.window.removeEventListener('storage', this.storageListener);\r\n            this.removeItem(this.localClientStorageKey);\r\n            this.started = false;\r\n        }\r\n    };\r\n    WebStorageSharedClientState.prototype.getItem = function (key) {\r\n        var value = this.storage.getItem(key);\r\n        logDebug(LOG_TAG$a, 'READ', key, value);\r\n        return value;\r\n    };\r\n    WebStorageSharedClientState.prototype.setItem = function (key, value) {\r\n        logDebug(LOG_TAG$a, 'SET', key, value);\r\n        this.storage.setItem(key, value);\r\n    };\r\n    WebStorageSharedClientState.prototype.removeItem = function (key) {\r\n        logDebug(LOG_TAG$a, 'REMOVE', key);\r\n        this.storage.removeItem(key);\r\n    };\r\n    WebStorageSharedClientState.prototype.handleWebStorageEvent = function (event) {\r\n        var _this = this;\r\n        // Note: The function is typed to take Event to be interface-compatible with\r\n        // `Window.addEventListener`.\r\n        var storageEvent = event;\r\n        if (storageEvent.storageArea === this.storage) {\r\n            logDebug(LOG_TAG$a, 'EVENT', storageEvent.key, storageEvent.newValue);\r\n            if (storageEvent.key === this.localClientStorageKey) {\r\n                logError('Received WebStorage notification for local change. Another client might have ' +\r\n                    'garbage-collected our state');\r\n                return;\r\n            }\r\n            this.queue.enqueueRetryable(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n                var clientState, clientId, mutationMetadata, queryTargetMetadata, onlineState, sequenceNumber;\r\n                return tslib.__generator(this, function (_d) {\r\n                    if (!this.started) {\r\n                        this.earlyEvents.push(storageEvent);\r\n                        return [2 /*return*/];\r\n                    }\r\n                    if (storageEvent.key === null) {\r\n                        return [2 /*return*/];\r\n                    }\r\n                    if (this.clientStateKeyRe.test(storageEvent.key)) {\r\n                        if (storageEvent.newValue != null) {\r\n                            clientState = this.fromWebStorageClientState(storageEvent.key, storageEvent.newValue);\r\n                            if (clientState) {\r\n                                return [2 /*return*/, this.handleClientStateEvent(clientState.clientId, clientState)];\r\n                            }\r\n                        }\r\n                        else {\r\n                            clientId = this.fromWebStorageClientStateKey(storageEvent.key);\r\n                            return [2 /*return*/, this.handleClientStateEvent(clientId, null)];\r\n                        }\r\n                    }\r\n                    else if (this.mutationBatchKeyRe.test(storageEvent.key)) {\r\n                        if (storageEvent.newValue !== null) {\r\n                            mutationMetadata = this.fromWebStorageMutationMetadata(storageEvent.key, storageEvent.newValue);\r\n                            if (mutationMetadata) {\r\n                                return [2 /*return*/, this.handleMutationBatchEvent(mutationMetadata)];\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (this.queryTargetKeyRe.test(storageEvent.key)) {\r\n                        if (storageEvent.newValue !== null) {\r\n                            queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(storageEvent.key, storageEvent.newValue);\r\n                            if (queryTargetMetadata) {\r\n                                return [2 /*return*/, this.handleQueryTargetEvent(queryTargetMetadata)];\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (storageEvent.key === this.onlineStateKey) {\r\n                        if (storageEvent.newValue !== null) {\r\n                            onlineState = this.fromWebStorageOnlineState(storageEvent.newValue);\r\n                            if (onlineState) {\r\n                                return [2 /*return*/, this.handleOnlineStateEvent(onlineState)];\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (storageEvent.key === this.sequenceNumberKey) {\r\n                        sequenceNumber = fromWebStorageSequenceNumber(storageEvent.newValue);\r\n                        if (sequenceNumber !== ListenSequence.INVALID) {\r\n                            this.sequenceNumberHandler(sequenceNumber);\r\n                        }\r\n                    }\r\n                    else if (storageEvent.key === this.bundleLoadedKey) {\r\n                        return [2 /*return*/, this.syncEngine.synchronizeWithChangedDocuments()];\r\n                    }\r\n                    return [2 /*return*/];\r\n                });\r\n            }); });\r\n        }\r\n    };\r\n    Object.defineProperty(WebStorageSharedClientState.prototype, \"localClientState\", {\r\n        get: function () {\r\n            return this.activeClients.get(this.localClientId);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    WebStorageSharedClientState.prototype.persistClientState = function () {\r\n        this.setItem(this.localClientStorageKey, this.localClientState.toWebStorageJSON());\r\n    };\r\n    WebStorageSharedClientState.prototype.persistMutationState = function (batchId, state, error) {\r\n        var mutationState = new MutationMetadata(this.currentUser, batchId, state, error);\r\n        var mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);\r\n        this.setItem(mutationKey, mutationState.toWebStorageJSON());\r\n    };\r\n    WebStorageSharedClientState.prototype.removeMutationState = function (batchId) {\r\n        var mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);\r\n        this.removeItem(mutationKey);\r\n    };\r\n    WebStorageSharedClientState.prototype.persistOnlineState = function (onlineState) {\r\n        var entry = {\r\n            clientId: this.localClientId,\r\n            onlineState: onlineState\r\n        };\r\n        this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));\r\n    };\r\n    WebStorageSharedClientState.prototype.persistQueryTargetState = function (targetId, state, error) {\r\n        var targetKey = createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId);\r\n        var targetMetadata = new QueryTargetMetadata(targetId, state, error);\r\n        this.setItem(targetKey, targetMetadata.toWebStorageJSON());\r\n    };\r\n    WebStorageSharedClientState.prototype.persistBundleLoadedState = function () {\r\n        this.setItem(this.bundleLoadedKey, 'value-not-used');\r\n    };\r\n    /**\r\n     * Parses a client state key in WebStorage. Returns null if the key does not\r\n     * match the expected key format.\r\n     */\r\n    WebStorageSharedClientState.prototype.fromWebStorageClientStateKey = function (key) {\r\n        var match = this.clientStateKeyRe.exec(key);\r\n        return match ? match[1] : null;\r\n    };\r\n    /**\r\n     * Parses a client state in WebStorage. Returns 'null' if the value could not\r\n     * be parsed.\r\n     */\r\n    WebStorageSharedClientState.prototype.fromWebStorageClientState = function (key, value) {\r\n        var clientId = this.fromWebStorageClientStateKey(key);\r\n        return RemoteClientState.fromWebStorageEntry(clientId, value);\r\n    };\r\n    /**\r\n     * Parses a mutation batch state in WebStorage. Returns 'null' if the value\r\n     * could not be parsed.\r\n     */\r\n    WebStorageSharedClientState.prototype.fromWebStorageMutationMetadata = function (key, value) {\r\n        var match = this.mutationBatchKeyRe.exec(key);\r\n        var batchId = Number(match[1]);\r\n        var userId = match[2] !== undefined ? match[2] : null;\r\n        return MutationMetadata.fromWebStorageEntry(new User(userId), batchId, value);\r\n    };\r\n    /**\r\n     * Parses a query target state from WebStorage. Returns 'null' if the value\r\n     * could not be parsed.\r\n     */\r\n    WebStorageSharedClientState.prototype.fromWebStorageQueryTargetMetadata = function (key, value) {\r\n        var match = this.queryTargetKeyRe.exec(key);\r\n        var targetId = Number(match[1]);\r\n        return QueryTargetMetadata.fromWebStorageEntry(targetId, value);\r\n    };\r\n    /**\r\n     * Parses an online state from WebStorage. Returns 'null' if the value\r\n     * could not be parsed.\r\n     */\r\n    WebStorageSharedClientState.prototype.fromWebStorageOnlineState = function (value) {\r\n        return SharedOnlineState.fromWebStorageEntry(value);\r\n    };\r\n    WebStorageSharedClientState.prototype.handleMutationBatchEvent = function (mutationBatch) {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                if (mutationBatch.user.uid !== this.currentUser.uid) {\r\n                    logDebug(LOG_TAG$a, \"Ignoring mutation for non-active user \" + mutationBatch.user.uid);\r\n                    return [2 /*return*/];\r\n                }\r\n                return [2 /*return*/, this.syncEngine.applyBatchState(mutationBatch.batchId, mutationBatch.state, mutationBatch.error)];\r\n            });\r\n        });\r\n    };\r\n    WebStorageSharedClientState.prototype.handleQueryTargetEvent = function (targetMetadata) {\r\n        return this.syncEngine.applyTargetState(targetMetadata.targetId, targetMetadata.state, targetMetadata.error);\r\n    };\r\n    WebStorageSharedClientState.prototype.handleClientStateEvent = function (clientId, clientState) {\r\n        var _this = this;\r\n        var updatedClients = clientState\r\n            ? this.activeClients.insert(clientId, clientState)\r\n            : this.activeClients.remove(clientId);\r\n        var existingTargets = this.extractActiveQueryTargets(this.activeClients);\r\n        var newTargets = this.extractActiveQueryTargets(updatedClients);\r\n        var addedTargets = [];\r\n        var removedTargets = [];\r\n        newTargets.forEach(function (targetId) {\r\n            if (!existingTargets.has(targetId)) {\r\n                addedTargets.push(targetId);\r\n            }\r\n        });\r\n        existingTargets.forEach(function (targetId) {\r\n            if (!newTargets.has(targetId)) {\r\n                removedTargets.push(targetId);\r\n            }\r\n        });\r\n        return this.syncEngine.applyActiveTargetsChange(addedTargets, removedTargets).then(function () {\r\n            _this.activeClients = updatedClients;\r\n        });\r\n    };\r\n    WebStorageSharedClientState.prototype.handleOnlineStateEvent = function (onlineState) {\r\n        // We check whether the client that wrote this online state is still active\r\n        // by comparing its client ID to the list of clients kept active in\r\n        // IndexedDb. If a client does not update their IndexedDb client state\r\n        // within 5 seconds, it is considered inactive and we don't emit an online\r\n        // state event.\r\n        if (this.activeClients.get(onlineState.clientId)) {\r\n            this.onlineStateHandler(onlineState.onlineState);\r\n        }\r\n    };\r\n    WebStorageSharedClientState.prototype.extractActiveQueryTargets = function (clients) {\r\n        var activeTargets = targetIdSet();\r\n        clients.forEach(function (kev, value) {\r\n            activeTargets = activeTargets.unionWith(value.activeTargetIds);\r\n        });\r\n        return activeTargets;\r\n    };\r\n    return WebStorageSharedClientState;\r\n}());\r\nfunction fromWebStorageSequenceNumber(seqString) {\r\n    var sequenceNumber = ListenSequence.INVALID;\r\n    if (seqString != null) {\r\n        try {\r\n            var parsed = JSON.parse(seqString);\r\n            hardAssert(typeof parsed === 'number');\r\n            sequenceNumber = parsed;\r\n        }\r\n        catch (e) {\r\n            logError(LOG_TAG$a, 'Failed to read sequence number from WebStorage', e);\r\n        }\r\n    }\r\n    return sequenceNumber;\r\n}\r\n/**\r\n * `MemorySharedClientState` is a simple implementation of SharedClientState for\r\n * clients using memory persistence. The state in this class remains fully\r\n * isolated and no synchronization is performed.\r\n */\r\nvar MemorySharedClientState = /** @class */ (function () {\r\n    function MemorySharedClientState() {\r\n        this.localState = new LocalClientState();\r\n        this.queryState = {};\r\n        this.onlineStateHandler = null;\r\n        this.sequenceNumberHandler = null;\r\n    }\r\n    MemorySharedClientState.prototype.addPendingMutation = function (batchId) {\r\n        // No op.\r\n    };\r\n    MemorySharedClientState.prototype.updateMutationState = function (batchId, state, error) {\r\n        // No op.\r\n    };\r\n    MemorySharedClientState.prototype.addLocalQueryTarget = function (targetId) {\r\n        this.localState.addQueryTarget(targetId);\r\n        return this.queryState[targetId] || 'not-current';\r\n    };\r\n    MemorySharedClientState.prototype.updateQueryState = function (targetId, state, error) {\r\n        this.queryState[targetId] = state;\r\n    };\r\n    MemorySharedClientState.prototype.removeLocalQueryTarget = function (targetId) {\r\n        this.localState.removeQueryTarget(targetId);\r\n    };\r\n    MemorySharedClientState.prototype.isLocalQueryTarget = function (targetId) {\r\n        return this.localState.activeTargetIds.has(targetId);\r\n    };\r\n    MemorySharedClientState.prototype.clearQueryState = function (targetId) {\r\n        delete this.queryState[targetId];\r\n    };\r\n    MemorySharedClientState.prototype.getAllActiveQueryTargets = function () {\r\n        return this.localState.activeTargetIds;\r\n    };\r\n    MemorySharedClientState.prototype.isActiveQueryTarget = function (targetId) {\r\n        return this.localState.activeTargetIds.has(targetId);\r\n    };\r\n    MemorySharedClientState.prototype.start = function () {\r\n        this.localState = new LocalClientState();\r\n        return Promise.resolve();\r\n    };\r\n    MemorySharedClientState.prototype.handleUserChange = function (user, removedBatchIds, addedBatchIds) {\r\n        // No op.\r\n    };\r\n    MemorySharedClientState.prototype.setOnlineState = function (onlineState) {\r\n        // No op.\r\n    };\r\n    MemorySharedClientState.prototype.shutdown = function () { };\r\n    MemorySharedClientState.prototype.writeSequenceNumber = function (sequenceNumber) { };\r\n    MemorySharedClientState.prototype.notifyBundleLoaded = function () {\r\n        // No op.\r\n    };\r\n    return MemorySharedClientState;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar NoopConnectivityMonitor = /** @class */ (function () {\r\n    function NoopConnectivityMonitor() {\r\n    }\r\n    NoopConnectivityMonitor.prototype.addCallback = function (callback) {\r\n        // No-op.\r\n    };\r\n    NoopConnectivityMonitor.prototype.shutdown = function () {\r\n        // No-op.\r\n    };\r\n    return NoopConnectivityMonitor;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides a simple helper class that implements the Stream interface to\r\n * bridge to other implementations that are streams but do not implement the\r\n * interface. The stream callbacks are invoked with the callOn... methods.\r\n */\r\nvar StreamBridge = /** @class */ (function () {\r\n    function StreamBridge(args) {\r\n        this.sendFn = args.sendFn;\r\n        this.closeFn = args.closeFn;\r\n    }\r\n    StreamBridge.prototype.onOpen = function (callback) {\r\n        this.wrappedOnOpen = callback;\r\n    };\r\n    StreamBridge.prototype.onClose = function (callback) {\r\n        this.wrappedOnClose = callback;\r\n    };\r\n    StreamBridge.prototype.onMessage = function (callback) {\r\n        this.wrappedOnMessage = callback;\r\n    };\r\n    StreamBridge.prototype.close = function () {\r\n        this.closeFn();\r\n    };\r\n    StreamBridge.prototype.send = function (msg) {\r\n        this.sendFn(msg);\r\n    };\r\n    StreamBridge.prototype.callOnOpen = function () {\r\n        this.wrappedOnOpen();\r\n    };\r\n    StreamBridge.prototype.callOnClose = function (err) {\r\n        this.wrappedOnClose(err);\r\n    };\r\n    StreamBridge.prototype.callOnMessage = function (msg) {\r\n        this.wrappedOnMessage(msg);\r\n    };\r\n    return StreamBridge;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*\r\n * Utilities for dealing with node.js-style APIs. See nodePromise for more\r\n * details.\r\n */\r\n/**\r\n * Creates a node-style callback that resolves or rejects a new Promise. The\r\n * callback is passed to the given action which can then use the callback as\r\n * a parameter to a node-style function.\r\n *\r\n * The intent is to directly bridge a node-style function (which takes a\r\n * callback) into a Promise without manually converting between the node-style\r\n * callback and the promise at each call.\r\n *\r\n * In effect it allows you to convert:\r\n *\r\n * @example\r\n * new Promise((resolve: (value?: fs.Stats) => void,\r\n *              reject: (error?: any) => void) => {\r\n *   fs.stat(path, (error?: any, stat?: fs.Stats) => {\r\n *     if (error) {\r\n *       reject(error);\r\n *     } else {\r\n *       resolve(stat);\r\n *     }\r\n *   });\r\n * });\r\n *\r\n * Into\r\n * @example\r\n * nodePromise((callback: NodeCallback<fs.Stats>) => {\r\n *   fs.stat(path, callback);\r\n * });\r\n *\r\n * @param action - a function that takes a node-style callback as an argument\r\n *     and then uses that callback to invoke some node-style API.\r\n * @returns a new Promise which will be rejected if the callback is given the\r\n *     first Error parameter or will resolve to the value given otherwise.\r\n */\r\nfunction nodePromise(action) {\r\n    return new Promise(function (resolve, reject) {\r\n        action(function (error, value) {\r\n            if (error) {\r\n                reject(error);\r\n            }\r\n            else {\r\n                resolve(value);\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$9 = 'Connection';\r\nvar X_GOOG_API_CLIENT_VALUE = \"gl-node/\" + process.versions.node + \" fire/\" + SDK_VERSION + \" grpc/\" + package_json.version;\r\nfunction createMetadata(databasePath, token, appId) {\r\n    hardAssert(token === null || token.type === 'OAuth');\r\n    var metadata = new grpcJs.Metadata();\r\n    if (token) {\r\n        for (var header in token.authHeaders) {\r\n            if (token.authHeaders.hasOwnProperty(header)) {\r\n                metadata.set(header, token.authHeaders[header]);\r\n            }\r\n        }\r\n    }\r\n    if (appId) {\r\n        metadata.set('X-Firebase-GMPID', appId);\r\n    }\r\n    metadata.set('X-Goog-Api-Client', X_GOOG_API_CLIENT_VALUE);\r\n    // This header is used to improve routing and project isolation by the\r\n    // backend.\r\n    metadata.set('Google-Cloud-Resource-Prefix', databasePath);\r\n    return metadata;\r\n}\r\n/**\r\n * A Connection implemented by GRPC-Node.\r\n */\r\nvar GrpcConnection = /** @class */ (function () {\r\n    function GrpcConnection(protos, databaseInfo) {\r\n        this.databaseInfo = databaseInfo;\r\n        // We cache stubs for the most-recently-used token.\r\n        this.cachedStub = null;\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.firestore = protos['google']['firestore']['v1'];\r\n        this.databasePath = \"projects/\" + databaseInfo.databaseId.projectId + \"/databases/\" + databaseInfo.databaseId.database;\r\n    }\r\n    GrpcConnection.prototype.ensureActiveStub = function () {\r\n        if (!this.cachedStub) {\r\n            logDebug(LOG_TAG$9, 'Creating Firestore stub.');\r\n            var credentials$1 = this.databaseInfo.ssl\r\n                ? grpcJs.credentials.createSsl()\r\n                : grpcJs.credentials.createInsecure();\r\n            this.cachedStub = new this.firestore.Firestore(this.databaseInfo.host, credentials$1);\r\n        }\r\n        return this.cachedStub;\r\n    };\r\n    GrpcConnection.prototype.invokeRPC = function (rpcName, path, request, token) {\r\n        var stub = this.ensureActiveStub();\r\n        var metadata = createMetadata(this.databasePath, token, this.databaseInfo.appId);\r\n        var jsonRequest = Object.assign({ database: this.databasePath }, request);\r\n        return nodePromise(function (callback) {\r\n            logDebug(LOG_TAG$9, \"RPC '\" + rpcName + \"' invoked with request:\", request);\r\n            return stub[rpcName](jsonRequest, metadata, function (grpcError, value) {\r\n                if (grpcError) {\r\n                    logDebug(LOG_TAG$9, \"RPC '\" + rpcName + \"' failed with error:\", grpcError);\r\n                    callback(new FirestoreError(mapCodeFromRpcCode(grpcError.code), grpcError.message));\r\n                }\r\n                else {\r\n                    logDebug(LOG_TAG$9, \"RPC '\" + rpcName + \"' completed with response:\", value);\r\n                    callback(undefined, value);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    GrpcConnection.prototype.invokeStreamingRPC = function (rpcName, path, request, token) {\r\n        var results = [];\r\n        var responseDeferred = new Deferred();\r\n        logDebug(LOG_TAG$9, \"RPC '\" + rpcName + \"' invoked (streaming) with request:\", request);\r\n        var stub = this.ensureActiveStub();\r\n        var metadata = createMetadata(this.databasePath, token, this.databaseInfo.appId);\r\n        var jsonRequest = Object.assign(Object.assign({}, request), { database: this.databasePath });\r\n        var stream = stub[rpcName](jsonRequest, metadata);\r\n        stream.on('data', function (response) {\r\n            logDebug(LOG_TAG$9, \"RPC \" + rpcName + \" received result:\", response);\r\n            results.push(response);\r\n        });\r\n        stream.on('end', function () {\r\n            logDebug(LOG_TAG$9, \"RPC '\" + rpcName + \"' completed.\");\r\n            responseDeferred.resolve(results);\r\n        });\r\n        stream.on('error', function (grpcError) {\r\n            logDebug(LOG_TAG$9, \"RPC '\" + rpcName + \"' failed with error:\", grpcError);\r\n            var code = mapCodeFromRpcCode(grpcError.code);\r\n            responseDeferred.reject(new FirestoreError(code, grpcError.message));\r\n        });\r\n        return responseDeferred.promise;\r\n    };\r\n    // TODO(mikelehen): This \"method\" is a monster. Should be refactored.\r\n    GrpcConnection.prototype.openStream = function (rpcName, token) {\r\n        var stub = this.ensureActiveStub();\r\n        var metadata = createMetadata(this.databasePath, token, this.databaseInfo.appId);\r\n        var grpcStream = stub[rpcName](metadata);\r\n        var closed = false;\r\n        var close = function (err) {\r\n            if (!closed) {\r\n                closed = true;\r\n                stream.callOnClose(err);\r\n                grpcStream.end();\r\n            }\r\n        };\r\n        var stream = new StreamBridge({\r\n            sendFn: function (msg) {\r\n                if (!closed) {\r\n                    logDebug(LOG_TAG$9, 'GRPC stream sending:', msg);\r\n                    try {\r\n                        grpcStream.write(msg);\r\n                    }\r\n                    catch (e) {\r\n                        // This probably means we didn't conform to the proto.  Make sure to\r\n                        // log the message we sent.\r\n                        logError('Failure sending:', msg);\r\n                        logError('Error:', e);\r\n                        throw e;\r\n                    }\r\n                }\r\n                else {\r\n                    logDebug(LOG_TAG$9, 'Not sending because gRPC stream is closed:', msg);\r\n                }\r\n            },\r\n            closeFn: function () {\r\n                logDebug(LOG_TAG$9, 'GRPC stream closed locally via close().');\r\n                close();\r\n            }\r\n        });\r\n        grpcStream.on('data', function (msg) {\r\n            if (!closed) {\r\n                logDebug(LOG_TAG$9, 'GRPC stream received:', msg);\r\n                stream.callOnMessage(msg);\r\n            }\r\n        });\r\n        grpcStream.on('end', function () {\r\n            logDebug(LOG_TAG$9, 'GRPC stream ended.');\r\n            close();\r\n        });\r\n        grpcStream.on('error', function (grpcError) {\r\n            if (!closed) {\r\n                logWarn(LOG_TAG$9, 'GRPC stream error. Code:', grpcError.code, 'Message:', grpcError.message);\r\n                var code = mapCodeFromRpcCode(grpcError.code);\r\n                close(new FirestoreError(code, grpcError.message));\r\n            }\r\n        });\r\n        logDebug(LOG_TAG$9, 'Opening GRPC stream');\r\n        // TODO(dimond): Since grpc has no explicit open status (or does it?) we\r\n        // simulate an onOpen in the next loop after the stream had it's listeners\r\n        // registered\r\n        setTimeout(function () {\r\n            stream.callOnOpen();\r\n        }, 0);\r\n        return stream;\r\n    };\r\n    return GrpcConnection;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Used by tests so we can match @grpc/proto-loader behavior. */\r\nvar protoLoaderOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    defaults: true,\r\n    oneofs: false\r\n};\r\n/**\r\n * Loads the protocol buffer definitions for Firestore.\r\n *\r\n * @returns The GrpcObject representing our protos.\r\n */\r\nfunction loadProtos() {\r\n    var root = path.resolve(__dirname, \"../protos\");\r\n    var firestoreProtoFile = path.join(root, 'google/firestore/v1/firestore.proto');\r\n    var packageDefinition = protoLoader.loadSync(firestoreProtoFile, Object.assign(Object.assign({}, protoLoaderOptions), { includeDirs: [root] }));\r\n    return grpcJs.loadPackageDefinition(packageDefinition);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Loads the GRPC stack */\r\nfunction newConnection(databaseInfo) {\r\n    var protos = loadProtos();\r\n    return new GrpcConnection(protos, databaseInfo);\r\n}\r\n/** Return the Platform-specific connectivity monitor. */\r\nfunction newConnectivityMonitor() {\r\n    return new NoopConnectivityMonitor();\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The Platform's 'window' implementation or null if not available. */\r\nfunction getWindow() {\r\n    if (process.env.USE_MOCK_PERSISTENCE === 'YES') {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        return window;\r\n    }\r\n    return null;\r\n}\r\n/** The Platform's 'document' implementation or null if not available. */\r\nfunction getDocument() {\r\n    return null;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSerializer(databaseId) {\r\n    return new JsonProtoSerializer(databaseId, /* useProto3Json= */ false);\r\n}\r\n/**\r\n * An instance of the Platform's 'TextEncoder' implementation.\r\n */\r\nfunction newTextEncoder() {\r\n    return new util$1.TextEncoder();\r\n}\r\n/**\r\n * An instance of the Platform's 'TextDecoder' implementation.\r\n */\r\nfunction newTextDecoder() {\r\n    return new util$1.TextDecoder('utf-8');\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$8 = 'ExponentialBackoff';\r\n/**\r\n * Initial backoff time in milliseconds after an error.\r\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\r\n */\r\nvar DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\r\nvar DEFAULT_BACKOFF_FACTOR = 1.5;\r\n/** Maximum backoff time in milliseconds */\r\nvar DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\r\n/**\r\n * A helper for running delayed tasks following an exponential backoff curve\r\n * between attempts.\r\n *\r\n * Each delay is made up of a \"base\" delay which follows the exponential\r\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\r\n * base delay. This prevents clients from accidentally synchronizing their\r\n * delays causing spikes of load to the backend.\r\n */\r\nvar ExponentialBackoff = /** @class */ (function () {\r\n    function ExponentialBackoff(\r\n    /**\r\n     * The AsyncQueue to run backoff operations on.\r\n     */\r\n    queue, \r\n    /**\r\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\r\n     */\r\n    timerId, \r\n    /**\r\n     * The initial delay (used as the base delay on the first retry attempt).\r\n     * Note that jitter will still be applied, so the actual delay could be as\r\n     * little as 0.5*initialDelayMs.\r\n     */\r\n    initialDelayMs, \r\n    /**\r\n     * The multiplier to use to determine the extended base delay after each\r\n     * attempt.\r\n     */\r\n    backoffFactor, \r\n    /**\r\n     * The maximum base delay after which no further backoff is performed.\r\n     * Note that jitter will still be applied, so the actual delay could be as\r\n     * much as 1.5*maxDelayMs.\r\n     */\r\n    maxDelayMs) {\r\n        if (initialDelayMs === void 0) { initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS; }\r\n        if (backoffFactor === void 0) { backoffFactor = DEFAULT_BACKOFF_FACTOR; }\r\n        if (maxDelayMs === void 0) { maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS; }\r\n        this.queue = queue;\r\n        this.timerId = timerId;\r\n        this.initialDelayMs = initialDelayMs;\r\n        this.backoffFactor = backoffFactor;\r\n        this.maxDelayMs = maxDelayMs;\r\n        this.currentBaseMs = 0;\r\n        this.timerPromise = null;\r\n        /** The last backoff attempt, as epoch milliseconds. */\r\n        this.lastAttemptTime = Date.now();\r\n        this.reset();\r\n    }\r\n    /**\r\n     * Resets the backoff delay.\r\n     *\r\n     * The very next backoffAndWait() will have no delay. If it is called again\r\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\r\n     * subsequent ones will increase according to the backoffFactor.\r\n     */\r\n    ExponentialBackoff.prototype.reset = function () {\r\n        this.currentBaseMs = 0;\r\n    };\r\n    /**\r\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\r\n     * RESOURCE_EXHAUSTED error).\r\n     */\r\n    ExponentialBackoff.prototype.resetToMax = function () {\r\n        this.currentBaseMs = this.maxDelayMs;\r\n    };\r\n    /**\r\n     * Returns a promise that resolves after currentDelayMs, and increases the\r\n     * delay for any subsequent attempts. If there was a pending backoff operation\r\n     * already, it will be canceled.\r\n     */\r\n    ExponentialBackoff.prototype.backoffAndRun = function (op) {\r\n        var _this = this;\r\n        // Cancel any pending backoff operation.\r\n        this.cancel();\r\n        // First schedule using the current base (which may be 0 and should be\r\n        // honored as such).\r\n        var desiredDelayWithJitterMs = Math.floor(this.currentBaseMs + this.jitterDelayMs());\r\n        // Guard against lastAttemptTime being in the future due to a clock change.\r\n        var delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);\r\n        // Guard against the backoff delay already being past.\r\n        var remainingDelayMs = Math.max(0, desiredDelayWithJitterMs - delaySoFarMs);\r\n        if (remainingDelayMs > 0) {\r\n            logDebug(LOG_TAG$8, \"Backing off for \" + remainingDelayMs + \" ms \" +\r\n                (\"(base delay: \" + this.currentBaseMs + \" ms, \") +\r\n                (\"delay with jitter: \" + desiredDelayWithJitterMs + \" ms, \") +\r\n                (\"last attempt: \" + delaySoFarMs + \" ms ago)\"));\r\n        }\r\n        this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, remainingDelayMs, function () {\r\n            _this.lastAttemptTime = Date.now();\r\n            return op();\r\n        });\r\n        // Apply backoff factor to determine next delay and ensure it is within\r\n        // bounds.\r\n        this.currentBaseMs *= this.backoffFactor;\r\n        if (this.currentBaseMs < this.initialDelayMs) {\r\n            this.currentBaseMs = this.initialDelayMs;\r\n        }\r\n        if (this.currentBaseMs > this.maxDelayMs) {\r\n            this.currentBaseMs = this.maxDelayMs;\r\n        }\r\n    };\r\n    ExponentialBackoff.prototype.skipBackoff = function () {\r\n        if (this.timerPromise !== null) {\r\n            this.timerPromise.skipDelay();\r\n            this.timerPromise = null;\r\n        }\r\n    };\r\n    ExponentialBackoff.prototype.cancel = function () {\r\n        if (this.timerPromise !== null) {\r\n            this.timerPromise.cancel();\r\n            this.timerPromise = null;\r\n        }\r\n    };\r\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\r\n    ExponentialBackoff.prototype.jitterDelayMs = function () {\r\n        return (Math.random() - 0.5) * this.currentBaseMs;\r\n    };\r\n    return ExponentialBackoff;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$7 = 'PersistentStream';\r\n/** The time a stream stays open after it is marked idle. */\r\nvar IDLE_TIMEOUT_MS = 60 * 1000;\r\n/**\r\n * A PersistentStream is an abstract base class that represents a streaming RPC\r\n * to the Firestore backend. It's built on top of the connections own support\r\n * for streaming RPCs, and adds several critical features for our clients:\r\n *\r\n *   - Exponential backoff on failure\r\n *   - Authentication via CredentialsProvider\r\n *   - Dispatching all callbacks into the shared worker queue\r\n *   - Closing idle streams after 60 seconds of inactivity\r\n *\r\n * Subclasses of PersistentStream implement serialization of models to and\r\n * from the JSON representation of the protocol buffers for a specific\r\n * streaming RPC.\r\n *\r\n * ## Starting and Stopping\r\n *\r\n * Streaming RPCs are stateful and need to be start()ed before messages can\r\n * be sent and received. The PersistentStream will call the onOpen() function\r\n * of the listener once the stream is ready to accept requests.\r\n *\r\n * Should a start() fail, PersistentStream will call the registered onClose()\r\n * listener with a FirestoreError indicating what went wrong.\r\n *\r\n * A PersistentStream can be started and stopped repeatedly.\r\n *\r\n * Generic types:\r\n *  SendType: The type of the outgoing message of the underlying\r\n *    connection stream\r\n *  ReceiveType: The type of the incoming message of the underlying\r\n *    connection stream\r\n *  ListenerType: The type of the listener that will be used for callbacks\r\n */\r\nvar PersistentStream = /** @class */ (function () {\r\n    function PersistentStream(queue, connectionTimerId, idleTimerId, connection, credentialsProvider, listener) {\r\n        this.queue = queue;\r\n        this.idleTimerId = idleTimerId;\r\n        this.connection = connection;\r\n        this.credentialsProvider = credentialsProvider;\r\n        this.listener = listener;\r\n        this.state = 0 /* Initial */;\r\n        /**\r\n         * A close count that's incremented every time the stream is closed; used by\r\n         * getCloseGuardedDispatcher() to invalidate callbacks that happen after\r\n         * close.\r\n         */\r\n        this.closeCount = 0;\r\n        this.idleTimer = null;\r\n        this.stream = null;\r\n        this.backoff = new ExponentialBackoff(queue, connectionTimerId);\r\n    }\r\n    /**\r\n     * Returns true if start() has been called and no error has occurred. True\r\n     * indicates the stream is open or in the process of opening (which\r\n     * encompasses respecting backoff, getting auth tokens, and starting the\r\n     * actual RPC). Use isOpen() to determine if the stream is open and ready for\r\n     * outbound requests.\r\n     */\r\n    PersistentStream.prototype.isStarted = function () {\r\n        return (this.state === 1 /* Starting */ ||\r\n            this.state === 2 /* Open */ ||\r\n            this.state === 4 /* Backoff */);\r\n    };\r\n    /**\r\n     * Returns true if the underlying RPC is open (the onOpen() listener has been\r\n     * called) and the stream is ready for outbound requests.\r\n     */\r\n    PersistentStream.prototype.isOpen = function () {\r\n        return this.state === 2 /* Open */;\r\n    };\r\n    /**\r\n     * Starts the RPC. Only allowed if isStarted() returns false. The stream is\r\n     * not immediately ready for use: onOpen() will be invoked when the RPC is\r\n     * ready for outbound requests, at which point isOpen() will return true.\r\n     *\r\n     * When start returns, isStarted() will return true.\r\n     */\r\n    PersistentStream.prototype.start = function () {\r\n        if (this.state === 3 /* Error */) {\r\n            this.performBackoff();\r\n            return;\r\n        }\r\n        this.auth();\r\n    };\r\n    /**\r\n     * Stops the RPC. This call is idempotent and allowed regardless of the\r\n     * current isStarted() state.\r\n     *\r\n     * When stop returns, isStarted() and isOpen() will both return false.\r\n     */\r\n    PersistentStream.prototype.stop = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        if (!this.isStarted()) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.close(0 /* Initial */)];\r\n                    case 1:\r\n                        _d.sent();\r\n                        _d.label = 2;\r\n                    case 2: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * After an error the stream will usually back off on the next attempt to\r\n     * start it. If the error warrants an immediate restart of the stream, the\r\n     * sender can use this to indicate that the receiver should not back off.\r\n     *\r\n     * Each error will call the onClose() listener. That function can decide to\r\n     * inhibit backoff if required.\r\n     */\r\n    PersistentStream.prototype.inhibitBackoff = function () {\r\n        this.state = 0 /* Initial */;\r\n        this.backoff.reset();\r\n    };\r\n    /**\r\n     * Marks this stream as idle. If no further actions are performed on the\r\n     * stream for one minute, the stream will automatically close itself and\r\n     * notify the stream's onClose() handler with Status.OK. The stream will then\r\n     * be in a !isStarted() state, requiring the caller to start the stream again\r\n     * before further use.\r\n     *\r\n     * Only streams that are in state 'Open' can be marked idle, as all other\r\n     * states imply pending network operations.\r\n     */\r\n    PersistentStream.prototype.markIdle = function () {\r\n        var _this = this;\r\n        // Starts the idle time if we are in state 'Open' and are not yet already\r\n        // running a timer (in which case the previous idle timeout still applies).\r\n        if (this.isOpen() && this.idleTimer === null) {\r\n            this.idleTimer = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, function () { return _this.handleIdleCloseTimer(); });\r\n        }\r\n    };\r\n    /** Sends a message to the underlying stream. */\r\n    PersistentStream.prototype.sendRequest = function (msg) {\r\n        this.cancelIdleCheck();\r\n        this.stream.send(msg);\r\n    };\r\n    /** Called by the idle timer when the stream should close due to inactivity. */\r\n    PersistentStream.prototype.handleIdleCloseTimer = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                if (this.isOpen()) {\r\n                    // When timing out an idle stream there's no reason to force the stream into backoff when\r\n                    // it restarts so set the stream state to Initial instead of Error.\r\n                    return [2 /*return*/, this.close(0 /* Initial */)];\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /** Marks the stream as active again. */\r\n    PersistentStream.prototype.cancelIdleCheck = function () {\r\n        if (this.idleTimer) {\r\n            this.idleTimer.cancel();\r\n            this.idleTimer = null;\r\n        }\r\n    };\r\n    /**\r\n     * Closes the stream and cleans up as necessary:\r\n     *\r\n     * * closes the underlying GRPC stream;\r\n     * * calls the onClose handler with the given 'error';\r\n     * * sets internal stream state to 'finalState';\r\n     * * adjusts the backoff timer based on the error\r\n     *\r\n     * A new stream can be opened by calling start().\r\n     *\r\n     * @param finalState - the intended state of the stream after closing.\r\n     * @param error - the error the connection was closed with.\r\n     */\r\n    PersistentStream.prototype.close = function (finalState, error) {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        // Cancel any outstanding timers (they're guaranteed not to execute).\r\n                        this.cancelIdleCheck();\r\n                        this.backoff.cancel();\r\n                        // Invalidates any stream-related callbacks (e.g. from auth or the\r\n                        // underlying stream), guaranteeing they won't execute.\r\n                        this.closeCount++;\r\n                        if (finalState !== 3 /* Error */) {\r\n                            // If this is an intentional close ensure we don't delay our next connection attempt.\r\n                            this.backoff.reset();\r\n                        }\r\n                        else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\r\n                            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\r\n                            logError(error.toString());\r\n                            logError('Using maximum backoff delay to prevent overloading the backend.');\r\n                            this.backoff.resetToMax();\r\n                        }\r\n                        else if (error && error.code === Code.UNAUTHENTICATED) {\r\n                            // \"unauthenticated\" error means the token was rejected. Try force refreshing it in case it\r\n                            // just expired.\r\n                            this.credentialsProvider.invalidateToken();\r\n                        }\r\n                        // Clean up the underlying stream because we are no longer interested in events.\r\n                        if (this.stream !== null) {\r\n                            this.tearDown();\r\n                            this.stream.close();\r\n                            this.stream = null;\r\n                        }\r\n                        // This state must be assigned before calling onClose() to allow the callback to\r\n                        // inhibit backoff or otherwise manipulate the state in its non-started state.\r\n                        this.state = finalState;\r\n                        // Notify the listener that the stream closed.\r\n                        return [4 /*yield*/, this.listener.onClose(error)];\r\n                    case 1:\r\n                        // Notify the listener that the stream closed.\r\n                        _d.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Can be overridden to perform additional cleanup before the stream is closed.\r\n     * Calling super.tearDown() is not required.\r\n     */\r\n    PersistentStream.prototype.tearDown = function () { };\r\n    PersistentStream.prototype.auth = function () {\r\n        var _this = this;\r\n        this.state = 1 /* Starting */;\r\n        var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\r\n        // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.\r\n        var closeCount = this.closeCount;\r\n        this.credentialsProvider.getToken().then(function (token) {\r\n            // Stream can be stopped while waiting for authentication.\r\n            // TODO(mikelehen): We really should just use dispatchIfNotClosed\r\n            // and let this dispatch onto the queue, but that opened a spec test can\r\n            // of worms that I don't want to deal with in this PR.\r\n            if (_this.closeCount === closeCount) {\r\n                // Normally we'd have to schedule the callback on the AsyncQueue.\r\n                // However, the following calls are safe to be called outside the\r\n                // AsyncQueue since they don't chain asynchronous calls\r\n                _this.startStream(token);\r\n            }\r\n        }, function (error) {\r\n            dispatchIfNotClosed(function () {\r\n                var rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\r\n                return _this.handleStreamClose(rpcError);\r\n            });\r\n        });\r\n    };\r\n    PersistentStream.prototype.startStream = function (token) {\r\n        var _this = this;\r\n        var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\r\n        this.stream = this.startRpc(token);\r\n        this.stream.onOpen(function () {\r\n            dispatchIfNotClosed(function () {\r\n                _this.state = 2 /* Open */;\r\n                return _this.listener.onOpen();\r\n            });\r\n        });\r\n        this.stream.onClose(function (error) {\r\n            dispatchIfNotClosed(function () {\r\n                return _this.handleStreamClose(error);\r\n            });\r\n        });\r\n        this.stream.onMessage(function (msg) {\r\n            dispatchIfNotClosed(function () {\r\n                return _this.onMessage(msg);\r\n            });\r\n        });\r\n    };\r\n    PersistentStream.prototype.performBackoff = function () {\r\n        var _this = this;\r\n        this.state = 4 /* Backoff */;\r\n        this.backoff.backoffAndRun(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                this.state = 0 /* Initial */;\r\n                this.start();\r\n                return [2 /*return*/];\r\n            });\r\n        }); });\r\n    };\r\n    // Visible for tests\r\n    PersistentStream.prototype.handleStreamClose = function (error) {\r\n        logDebug(LOG_TAG$7, \"close with error: \" + error);\r\n        this.stream = null;\r\n        // In theory the stream could close cleanly, however, in our current model\r\n        // we never expect this to happen because if we stop a stream ourselves,\r\n        // this callback will never be called. To prevent cases where we retry\r\n        // without a backoff accidentally, we set the stream to error in all cases.\r\n        return this.close(3 /* Error */, error);\r\n    };\r\n    /**\r\n     * Returns a \"dispatcher\" function that dispatches operations onto the\r\n     * AsyncQueue but only runs them if closeCount remains unchanged. This allows\r\n     * us to turn auth / stream callbacks into no-ops if the stream is closed /\r\n     * re-opened, etc.\r\n     */\r\n    PersistentStream.prototype.getCloseGuardedDispatcher = function (startCloseCount) {\r\n        var _this = this;\r\n        return function (fn) {\r\n            _this.queue.enqueueAndForget(function () {\r\n                if (_this.closeCount === startCloseCount) {\r\n                    return fn();\r\n                }\r\n                else {\r\n                    logDebug(LOG_TAG$7, 'stream callback skipped by getCloseGuardedDispatcher.');\r\n                    return Promise.resolve();\r\n                }\r\n            });\r\n        };\r\n    };\r\n    return PersistentStream;\r\n}());\r\n/**\r\n * A PersistentStream that implements the Listen RPC.\r\n *\r\n * Once the Listen stream has called the onOpen() listener, any number of\r\n * listen() and unlisten() calls can be made to control what changes will be\r\n * sent from the server for ListenResponses.\r\n */\r\nvar PersistentListenStream = /** @class */ (function (_super) {\r\n    tslib.__extends(PersistentListenStream, _super);\r\n    function PersistentListenStream(queue, connection, credentials, serializer, listener) {\r\n        var _this = _super.call(this, queue, \"listen_stream_connection_backoff\" /* ListenStreamConnectionBackoff */, \"listen_stream_idle\" /* ListenStreamIdle */, connection, credentials, listener) || this;\r\n        _this.serializer = serializer;\r\n        return _this;\r\n    }\r\n    PersistentListenStream.prototype.startRpc = function (token) {\r\n        return this.connection.openStream('Listen', token);\r\n    };\r\n    PersistentListenStream.prototype.onMessage = function (watchChangeProto) {\r\n        // A successful response means the stream is healthy\r\n        this.backoff.reset();\r\n        var watchChange = fromWatchChange(this.serializer, watchChangeProto);\r\n        var snapshot = versionFromListenResponse(watchChangeProto);\r\n        return this.listener.onWatchChange(watchChange, snapshot);\r\n    };\r\n    /**\r\n     * Registers interest in the results of the given target. If the target\r\n     * includes a resumeToken it will be included in the request. Results that\r\n     * affect the target will be streamed back as WatchChange messages that\r\n     * reference the targetId.\r\n     */\r\n    PersistentListenStream.prototype.watch = function (targetData) {\r\n        var request = {};\r\n        request.database = getEncodedDatabaseId(this.serializer);\r\n        request.addTarget = toTarget(this.serializer, targetData);\r\n        var labels = toListenRequestLabels(this.serializer, targetData);\r\n        if (labels) {\r\n            request.labels = labels;\r\n        }\r\n        this.sendRequest(request);\r\n    };\r\n    /**\r\n     * Unregisters interest in the results of the target associated with the\r\n     * given targetId.\r\n     */\r\n    PersistentListenStream.prototype.unwatch = function (targetId) {\r\n        var request = {};\r\n        request.database = getEncodedDatabaseId(this.serializer);\r\n        request.removeTarget = targetId;\r\n        this.sendRequest(request);\r\n    };\r\n    return PersistentListenStream;\r\n}(PersistentStream));\r\n/**\r\n * A Stream that implements the Write RPC.\r\n *\r\n * The Write RPC requires the caller to maintain special streamToken\r\n * state in between calls, to help the server understand which responses the\r\n * client has processed by the time the next request is made. Every response\r\n * will contain a streamToken; this value must be passed to the next\r\n * request.\r\n *\r\n * After calling start() on this stream, the next request must be a handshake,\r\n * containing whatever streamToken is on hand. Once a response to this\r\n * request is received, all pending mutations may be submitted. When\r\n * submitting multiple batches of mutations at the same time, it's\r\n * okay to use the same streamToken for the calls to writeMutations.\r\n *\r\n * TODO(b/33271235): Use proto types\r\n */\r\nvar PersistentWriteStream = /** @class */ (function (_super) {\r\n    tslib.__extends(PersistentWriteStream, _super);\r\n    function PersistentWriteStream(queue, connection, credentials, serializer, listener) {\r\n        var _this = _super.call(this, queue, \"write_stream_connection_backoff\" /* WriteStreamConnectionBackoff */, \"write_stream_idle\" /* WriteStreamIdle */, connection, credentials, listener) || this;\r\n        _this.serializer = serializer;\r\n        _this.handshakeComplete_ = false;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(PersistentWriteStream.prototype, \"handshakeComplete\", {\r\n        /**\r\n         * Tracks whether or not a handshake has been successfully exchanged and\r\n         * the stream is ready to accept mutations.\r\n         */\r\n        get: function () {\r\n            return this.handshakeComplete_;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    // Override of PersistentStream.start\r\n    PersistentWriteStream.prototype.start = function () {\r\n        this.handshakeComplete_ = false;\r\n        this.lastStreamToken = undefined;\r\n        _super.prototype.start.call(this);\r\n    };\r\n    PersistentWriteStream.prototype.tearDown = function () {\r\n        if (this.handshakeComplete_) {\r\n            this.writeMutations([]);\r\n        }\r\n    };\r\n    PersistentWriteStream.prototype.startRpc = function (token) {\r\n        return this.connection.openStream('Write', token);\r\n    };\r\n    PersistentWriteStream.prototype.onMessage = function (responseProto) {\r\n        // Always capture the last stream token.\r\n        hardAssert(!!responseProto.streamToken);\r\n        this.lastStreamToken = responseProto.streamToken;\r\n        if (!this.handshakeComplete_) {\r\n            // The first response is always the handshake response\r\n            hardAssert(!responseProto.writeResults || responseProto.writeResults.length === 0);\r\n            this.handshakeComplete_ = true;\r\n            return this.listener.onHandshakeComplete();\r\n        }\r\n        else {\r\n            // A successful first write response means the stream is healthy,\r\n            // Note, that we could consider a successful handshake healthy, however,\r\n            // the write itself might be causing an error we want to back off from.\r\n            this.backoff.reset();\r\n            var results = fromWriteResults(responseProto.writeResults, responseProto.commitTime);\r\n            var commitVersion = fromVersion(responseProto.commitTime);\r\n            return this.listener.onMutationResult(commitVersion, results);\r\n        }\r\n    };\r\n    /**\r\n     * Sends an initial streamToken to the server, performing the handshake\r\n     * required to make the StreamingWrite RPC work. Subsequent\r\n     * calls should wait until onHandshakeComplete was called.\r\n     */\r\n    PersistentWriteStream.prototype.writeHandshake = function () {\r\n        // TODO(dimond): Support stream resumption. We intentionally do not set the\r\n        // stream token on the handshake, ignoring any stream token we might have.\r\n        var request = {};\r\n        request.database = getEncodedDatabaseId(this.serializer);\r\n        this.sendRequest(request);\r\n    };\r\n    /** Sends a group of mutations to the Firestore backend to apply. */\r\n    PersistentWriteStream.prototype.writeMutations = function (mutations) {\r\n        var _this = this;\r\n        var request = {\r\n            streamToken: this.lastStreamToken,\r\n            writes: mutations.map(function (mutation) { return toMutation(_this.serializer, mutation); })\r\n        };\r\n        this.sendRequest(request);\r\n    };\r\n    return PersistentWriteStream;\r\n}(PersistentStream));\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Datastore and its related methods are a wrapper around the external Google\r\n * Cloud Datastore grpc API, which provides an interface that is more convenient\r\n * for the rest of the client SDK architecture to consume.\r\n */\r\nvar Datastore = /** @class */ (function () {\r\n    function Datastore() {\r\n    }\r\n    return Datastore;\r\n}());\r\n/**\r\n * An implementation of Datastore that exposes additional state for internal\r\n * consumption.\r\n */\r\nvar DatastoreImpl = /** @class */ (function (_super) {\r\n    tslib.__extends(DatastoreImpl, _super);\r\n    function DatastoreImpl(credentials, connection, serializer) {\r\n        var _this = _super.call(this) || this;\r\n        _this.credentials = credentials;\r\n        _this.connection = connection;\r\n        _this.serializer = serializer;\r\n        _this.terminated = false;\r\n        return _this;\r\n    }\r\n    DatastoreImpl.prototype.verifyInitialized = function () {\r\n        if (this.terminated) {\r\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'The client has already been terminated.');\r\n        }\r\n    };\r\n    /** Gets an auth token and invokes the provided RPC. */\r\n    DatastoreImpl.prototype.invokeRPC = function (rpcName, path, request) {\r\n        var _this = this;\r\n        this.verifyInitialized();\r\n        return this.credentials\r\n            .getToken()\r\n            .then(function (token) {\r\n            return _this.connection.invokeRPC(rpcName, path, request, token);\r\n        })\r\n            .catch(function (error) {\r\n            if (error.name === 'FirebaseError') {\r\n                if (error.code === Code.UNAUTHENTICATED) {\r\n                    _this.credentials.invalidateToken();\r\n                }\r\n                throw error;\r\n            }\r\n            else {\r\n                throw new FirestoreError(Code.UNKNOWN, error.toString());\r\n            }\r\n        });\r\n    };\r\n    /** Gets an auth token and invokes the provided RPC with streamed results. */\r\n    DatastoreImpl.prototype.invokeStreamingRPC = function (rpcName, path, request) {\r\n        var _this = this;\r\n        this.verifyInitialized();\r\n        return this.credentials\r\n            .getToken()\r\n            .then(function (token) {\r\n            return _this.connection.invokeStreamingRPC(rpcName, path, request, token);\r\n        })\r\n            .catch(function (error) {\r\n            if (error.name === 'FirebaseError') {\r\n                if (error.code === Code.UNAUTHENTICATED) {\r\n                    _this.credentials.invalidateToken();\r\n                }\r\n                throw error;\r\n            }\r\n            else {\r\n                throw new FirestoreError(Code.UNKNOWN, error.toString());\r\n            }\r\n        });\r\n    };\r\n    DatastoreImpl.prototype.terminate = function () {\r\n        this.terminated = true;\r\n    };\r\n    return DatastoreImpl;\r\n}(Datastore));\r\n// TODO(firestorexp): Make sure there is only one Datastore instance per\r\n// firestore-exp client.\r\nfunction newDatastore(credentials, connection, serializer) {\r\n    return new DatastoreImpl(credentials, connection, serializer);\r\n}\r\nfunction invokeCommitRpc(datastore, mutations) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var datastoreImpl, path, request;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    datastoreImpl = debugCast(datastore);\r\n                    path = getEncodedDatabaseId(datastoreImpl.serializer) + '/documents';\r\n                    request = {\r\n                        writes: mutations.map(function (m) { return toMutation(datastoreImpl.serializer, m); })\r\n                    };\r\n                    return [4 /*yield*/, datastoreImpl.invokeRPC('Commit', path, request)];\r\n                case 1:\r\n                    _d.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction invokeBatchGetDocumentsRpc(datastore, keys) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var datastoreImpl, path, request, response, docs, result;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    datastoreImpl = debugCast(datastore);\r\n                    path = getEncodedDatabaseId(datastoreImpl.serializer) + '/documents';\r\n                    request = {\r\n                        documents: keys.map(function (k) { return toName(datastoreImpl.serializer, k); })\r\n                    };\r\n                    return [4 /*yield*/, datastoreImpl.invokeStreamingRPC('BatchGetDocuments', path, request)];\r\n                case 1:\r\n                    response = _d.sent();\r\n                    docs = new Map();\r\n                    response.forEach(function (proto) {\r\n                        var doc = fromBatchGetDocumentsResponse(datastoreImpl.serializer, proto);\r\n                        docs.set(doc.key.toString(), doc);\r\n                    });\r\n                    result = [];\r\n                    keys.forEach(function (key) {\r\n                        var doc = docs.get(key.toString());\r\n                        hardAssert(!!doc);\r\n                        result.push(doc);\r\n                    });\r\n                    return [2 /*return*/, result];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction newPersistentWriteStream(datastore, queue, listener) {\r\n    var datastoreImpl = debugCast(datastore);\r\n    datastoreImpl.verifyInitialized();\r\n    return new PersistentWriteStream(queue, datastoreImpl.connection, datastoreImpl.credentials, datastoreImpl.serializer, listener);\r\n}\r\nfunction newPersistentWatchStream(datastore, queue, listener) {\r\n    var datastoreImpl = debugCast(datastore);\r\n    datastoreImpl.verifyInitialized();\r\n    return new PersistentListenStream(queue, datastoreImpl.connection, datastoreImpl.credentials, datastoreImpl.serializer, listener);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$6 = 'OnlineStateTracker';\r\n// To deal with transient failures, we allow multiple stream attempts before\r\n// giving up and transitioning from OnlineState.Unknown to Offline.\r\n// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.\r\n// @jdimond thinks that bug is sufficiently fixed so that we can set this back\r\n// to 1. If that works okay, we could potentially remove this logic entirely.\r\nvar MAX_WATCH_STREAM_FAILURES = 1;\r\n// To deal with stream attempts that don't succeed or fail in a timely manner,\r\n// we have a timeout for OnlineState to reach Online or Offline.\r\n// If the timeout is reached, we transition to Offline rather than waiting\r\n// indefinitely.\r\nvar ONLINE_STATE_TIMEOUT_MS = 10 * 1000;\r\n/**\r\n * A component used by the RemoteStore to track the OnlineState (that is,\r\n * whether or not the client as a whole should be considered to be online or\r\n * offline), implementing the appropriate heuristics.\r\n *\r\n * In particular, when the client is trying to connect to the backend, we\r\n * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for\r\n * a connection to succeed. If we have too many failures or the timeout elapses,\r\n * then we set the OnlineState to Offline, and the client will behave as if\r\n * it is offline (get()s will return cached data, etc.).\r\n */\r\nvar OnlineStateTracker = /** @class */ (function () {\r\n    function OnlineStateTracker(asyncQueue, onlineStateHandler) {\r\n        this.asyncQueue = asyncQueue;\r\n        this.onlineStateHandler = onlineStateHandler;\r\n        /** The current OnlineState. */\r\n        this.state = \"Unknown\" /* Unknown */;\r\n        /**\r\n         * A count of consecutive failures to open the stream. If it reaches the\r\n         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to\r\n         * Offline.\r\n         */\r\n        this.watchStreamFailures = 0;\r\n        /**\r\n         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we\r\n         * transition from OnlineState.Unknown to OnlineState.Offline without waiting\r\n         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).\r\n         */\r\n        this.onlineStateTimer = null;\r\n        /**\r\n         * Whether the client should log a warning message if it fails to connect to\r\n         * the backend (initially true, cleared after a successful stream, or if we've\r\n         * logged the message already).\r\n         */\r\n        this.shouldWarnClientIsOffline = true;\r\n    }\r\n    /**\r\n     * Called by RemoteStore when a watch stream is started (including on each\r\n     * backoff attempt).\r\n     *\r\n     * If this is the first attempt, it sets the OnlineState to Unknown and starts\r\n     * the onlineStateTimer.\r\n     */\r\n    OnlineStateTracker.prototype.handleWatchStreamStart = function () {\r\n        var _this = this;\r\n        if (this.watchStreamFailures === 0) {\r\n            this.setAndBroadcast(\"Unknown\" /* Unknown */);\r\n            this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(\"online_state_timeout\" /* OnlineStateTimeout */, ONLINE_STATE_TIMEOUT_MS, function () {\r\n                _this.onlineStateTimer = null;\r\n                _this.logClientOfflineWarningIfNecessary(\"Backend didn't respond within \" + ONLINE_STATE_TIMEOUT_MS / 1000 + \" \" +\r\n                    \"seconds.\");\r\n                _this.setAndBroadcast(\"Offline\" /* Offline */);\r\n                // NOTE: handleWatchStreamFailure() will continue to increment\r\n                // watchStreamFailures even though we are already marked Offline,\r\n                // but this is non-harmful.\r\n                return Promise.resolve();\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Updates our OnlineState as appropriate after the watch stream reports a\r\n     * failure. The first failure moves us to the 'Unknown' state. We then may\r\n     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we\r\n     * actually transition to the 'Offline' state.\r\n     */\r\n    OnlineStateTracker.prototype.handleWatchStreamFailure = function (error) {\r\n        if (this.state === \"Online\" /* Online */) {\r\n            this.setAndBroadcast(\"Unknown\" /* Unknown */);\r\n        }\r\n        else {\r\n            this.watchStreamFailures++;\r\n            if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {\r\n                this.clearOnlineStateTimer();\r\n                this.logClientOfflineWarningIfNecessary(\"Connection failed \" + MAX_WATCH_STREAM_FAILURES + \" \" +\r\n                    (\"times. Most recent error: \" + error.toString()));\r\n                this.setAndBroadcast(\"Offline\" /* Offline */);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Explicitly sets the OnlineState to the specified state.\r\n     *\r\n     * Note that this resets our timers / failure counters, etc. used by our\r\n     * Offline heuristics, so must not be used in place of\r\n     * handleWatchStreamStart() and handleWatchStreamFailure().\r\n     */\r\n    OnlineStateTracker.prototype.set = function (newState) {\r\n        this.clearOnlineStateTimer();\r\n        this.watchStreamFailures = 0;\r\n        if (newState === \"Online\" /* Online */) {\r\n            // We've connected to watch at least once. Don't warn the developer\r\n            // about being offline going forward.\r\n            this.shouldWarnClientIsOffline = false;\r\n        }\r\n        this.setAndBroadcast(newState);\r\n    };\r\n    OnlineStateTracker.prototype.setAndBroadcast = function (newState) {\r\n        if (newState !== this.state) {\r\n            this.state = newState;\r\n            this.onlineStateHandler(newState);\r\n        }\r\n    };\r\n    OnlineStateTracker.prototype.logClientOfflineWarningIfNecessary = function (details) {\r\n        var message = \"Could not reach Cloud Firestore backend. \" + details + \"\\n\" +\r\n            \"This typically indicates that your device does not have a healthy \" +\r\n            \"Internet connection at the moment. The client will operate in offline \" +\r\n            \"mode until it is able to successfully connect to the backend.\";\r\n        if (this.shouldWarnClientIsOffline) {\r\n            logError(message);\r\n            this.shouldWarnClientIsOffline = false;\r\n        }\r\n        else {\r\n            logDebug(LOG_TAG$6, message);\r\n        }\r\n    };\r\n    OnlineStateTracker.prototype.clearOnlineStateTimer = function () {\r\n        if (this.onlineStateTimer !== null) {\r\n            this.onlineStateTimer.cancel();\r\n            this.onlineStateTimer = null;\r\n        }\r\n    };\r\n    return OnlineStateTracker;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$5 = 'RemoteStore';\r\n// TODO(b/35853402): Negotiate this with the stream.\r\nvar MAX_PENDING_WRITES = 10;\r\nvar RemoteStoreImpl = /** @class */ (function () {\r\n    function RemoteStoreImpl(\r\n    /**\r\n     * The local store, used to fill the write pipeline with outbound mutations.\r\n     */\r\n    localStore, \r\n    /** The client-side proxy for interacting with the backend. */\r\n    datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {\r\n        var _this = this;\r\n        this.localStore = localStore;\r\n        this.datastore = datastore;\r\n        this.asyncQueue = asyncQueue;\r\n        this.remoteSyncer = {};\r\n        /**\r\n         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the\r\n         * LocalStore via fillWritePipeline() and have or will send to the write\r\n         * stream.\r\n         *\r\n         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or\r\n         * restart the write stream. When the stream is established the writes in the\r\n         * pipeline will be sent in order.\r\n         *\r\n         * Writes remain in writePipeline until they are acknowledged by the backend\r\n         * and thus will automatically be re-sent if the stream is interrupted /\r\n         * restarted before they're acknowledged.\r\n         *\r\n         * Write responses from the backend are linked to their originating request\r\n         * purely based on order, and so we can just shift() writes from the front of\r\n         * the writePipeline as we receive responses.\r\n         */\r\n        this.writePipeline = [];\r\n        /**\r\n         * A mapping of watched targets that the client cares about tracking and the\r\n         * user has explicitly called a 'listen' for this target.\r\n         *\r\n         * These targets may or may not have been sent to or acknowledged by the\r\n         * server. On re-establishing the listen stream, these targets should be sent\r\n         * to the server. The targets removed with unlistens are removed eagerly\r\n         * without waiting for confirmation from the listen stream.\r\n         */\r\n        this.listenTargets = new Map();\r\n        /**\r\n         * A set of reasons for why the RemoteStore may be offline. If empty, the\r\n         * RemoteStore may start its network connections.\r\n         */\r\n        this.offlineCauses = new Set();\r\n        /**\r\n         * Event handlers that get called when the network is disabled or enabled.\r\n         *\r\n         * PORTING NOTE: These functions are used on the Web client to create the\r\n         * underlying streams (to support tree-shakeable streams). On Android and iOS,\r\n         * the streams are created during construction of RemoteStore.\r\n         */\r\n        this.onNetworkStatusChange = [];\r\n        this.connectivityMonitor = connectivityMonitor;\r\n        this.connectivityMonitor.addCallback(function (_) {\r\n            asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n                return tslib.__generator(this, function (_d) {\r\n                    switch (_d.label) {\r\n                        case 0:\r\n                            if (!canUseNetwork(this)) return [3 /*break*/, 2];\r\n                            logDebug(LOG_TAG$5, 'Restarting streams for network reachability change.');\r\n                            return [4 /*yield*/, restartNetwork(this)];\r\n                        case 1:\r\n                            _d.sent();\r\n                            _d.label = 2;\r\n                        case 2: return [2 /*return*/];\r\n                    }\r\n                });\r\n            }); });\r\n        });\r\n        this.onlineStateTracker = new OnlineStateTracker(asyncQueue, onlineStateHandler);\r\n    }\r\n    return RemoteStoreImpl;\r\n}());\r\nfunction newRemoteStore(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {\r\n    return new RemoteStoreImpl(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor);\r\n}\r\n/** Re-enables the network. Idempotent. */\r\nfunction remoteStoreEnableNetwork(remoteStore) {\r\n    var remoteStoreImpl = debugCast(remoteStore);\r\n    remoteStoreImpl.offlineCauses.delete(0 /* UserDisabled */);\r\n    return enableNetworkInternal(remoteStoreImpl);\r\n}\r\nfunction enableNetworkInternal(remoteStoreImpl) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var _i, _d, networkStatusHandler;\r\n        return tslib.__generator(this, function (_e) {\r\n            switch (_e.label) {\r\n                case 0:\r\n                    if (!canUseNetwork(remoteStoreImpl)) return [3 /*break*/, 4];\r\n                    _i = 0, _d = remoteStoreImpl.onNetworkStatusChange;\r\n                    _e.label = 1;\r\n                case 1:\r\n                    if (!(_i < _d.length)) return [3 /*break*/, 4];\r\n                    networkStatusHandler = _d[_i];\r\n                    return [4 /*yield*/, networkStatusHandler(/* enabled= */ true)];\r\n                case 2:\r\n                    _e.sent();\r\n                    _e.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Temporarily disables the network. The network can be re-enabled using\r\n * enableNetwork().\r\n */\r\nfunction remoteStoreDisableNetwork(remoteStore) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var remoteStoreImpl;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    remoteStoreImpl = debugCast(remoteStore);\r\n                    remoteStoreImpl.offlineCauses.add(0 /* UserDisabled */);\r\n                    return [4 /*yield*/, disableNetworkInternal(remoteStoreImpl)];\r\n                case 1:\r\n                    _d.sent();\r\n                    // Set the OnlineState to Offline so get()s return from cache, etc.\r\n                    remoteStoreImpl.onlineStateTracker.set(\"Offline\" /* Offline */);\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction disableNetworkInternal(remoteStoreImpl) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var _i, _d, networkStatusHandler;\r\n        return tslib.__generator(this, function (_e) {\r\n            switch (_e.label) {\r\n                case 0:\r\n                    _i = 0, _d = remoteStoreImpl.onNetworkStatusChange;\r\n                    _e.label = 1;\r\n                case 1:\r\n                    if (!(_i < _d.length)) return [3 /*break*/, 4];\r\n                    networkStatusHandler = _d[_i];\r\n                    return [4 /*yield*/, networkStatusHandler(/* enabled= */ false)];\r\n                case 2:\r\n                    _e.sent();\r\n                    _e.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction remoteStoreShutdown(remoteStore) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var remoteStoreImpl;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    remoteStoreImpl = debugCast(remoteStore);\r\n                    logDebug(LOG_TAG$5, 'RemoteStore shutting down.');\r\n                    remoteStoreImpl.offlineCauses.add(5 /* Shutdown */);\r\n                    return [4 /*yield*/, disableNetworkInternal(remoteStoreImpl)];\r\n                case 1:\r\n                    _d.sent();\r\n                    remoteStoreImpl.connectivityMonitor.shutdown();\r\n                    // Set the OnlineState to Unknown (rather than Offline) to avoid potentially\r\n                    // triggering spurious listener events with cached data, etc.\r\n                    remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* Unknown */);\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Starts new listen for the given target. Uses resume token if provided. It\r\n * is a no-op if the target of given `TargetData` is already being listened to.\r\n */\r\nfunction remoteStoreListen(remoteStore, targetData) {\r\n    var remoteStoreImpl = debugCast(remoteStore);\r\n    if (remoteStoreImpl.listenTargets.has(targetData.targetId)) {\r\n        return;\r\n    }\r\n    // Mark this as something the client is currently listening for.\r\n    remoteStoreImpl.listenTargets.set(targetData.targetId, targetData);\r\n    if (shouldStartWatchStream(remoteStoreImpl)) {\r\n        // The listen will be sent in onWatchStreamOpen\r\n        startWatchStream(remoteStoreImpl);\r\n    }\r\n    else if (ensureWatchStream(remoteStoreImpl).isOpen()) {\r\n        sendWatchRequest(remoteStoreImpl, targetData);\r\n    }\r\n}\r\n/**\r\n * Removes the listen from server. It is a no-op if the given target id is\r\n * not being listened to.\r\n */\r\nfunction remoteStoreUnlisten(remoteStore, targetId) {\r\n    var remoteStoreImpl = debugCast(remoteStore);\r\n    var watchStream = ensureWatchStream(remoteStoreImpl);\r\n    remoteStoreImpl.listenTargets.delete(targetId);\r\n    if (watchStream.isOpen()) {\r\n        sendUnwatchRequest(remoteStoreImpl, targetId);\r\n    }\r\n    if (remoteStoreImpl.listenTargets.size === 0) {\r\n        if (watchStream.isOpen()) {\r\n            watchStream.markIdle();\r\n        }\r\n        else if (canUseNetwork(remoteStoreImpl)) {\r\n            // Revert to OnlineState.Unknown if the watch stream is not open and we\r\n            // have no listeners, since without any listens to send we cannot\r\n            // confirm if the stream is healthy and upgrade to OnlineState.Online.\r\n            remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* Unknown */);\r\n        }\r\n    }\r\n}\r\n/**\r\n * We need to increment the the expected number of pending responses we're due\r\n * from watch so we wait for the ack to process any messages from this target.\r\n */\r\nfunction sendWatchRequest(remoteStoreImpl, targetData) {\r\n    remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetData.targetId);\r\n    ensureWatchStream(remoteStoreImpl).watch(targetData);\r\n}\r\n/**\r\n * We need to increment the expected number of pending responses we're due\r\n * from watch so we wait for the removal on the server before we process any\r\n * messages from this target.\r\n */\r\nfunction sendUnwatchRequest(remoteStoreImpl, targetId) {\r\n    remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetId);\r\n    ensureWatchStream(remoteStoreImpl).unwatch(targetId);\r\n}\r\nfunction startWatchStream(remoteStoreImpl) {\r\n    remoteStoreImpl.watchChangeAggregator = new WatchChangeAggregator({\r\n        getRemoteKeysForTarget: function (targetId) { return remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget(targetId); },\r\n        getTargetDataForTarget: function (targetId) { return remoteStoreImpl.listenTargets.get(targetId) || null; }\r\n    });\r\n    ensureWatchStream(remoteStoreImpl).start();\r\n    remoteStoreImpl.onlineStateTracker.handleWatchStreamStart();\r\n}\r\n/**\r\n * Returns whether the watch stream should be started because it's necessary\r\n * and has not yet been started.\r\n */\r\nfunction shouldStartWatchStream(remoteStoreImpl) {\r\n    return (canUseNetwork(remoteStoreImpl) &&\r\n        !ensureWatchStream(remoteStoreImpl).isStarted() &&\r\n        remoteStoreImpl.listenTargets.size > 0);\r\n}\r\nfunction canUseNetwork(remoteStore) {\r\n    var remoteStoreImpl = debugCast(remoteStore);\r\n    return remoteStoreImpl.offlineCauses.size === 0;\r\n}\r\nfunction cleanUpWatchStreamState(remoteStoreImpl) {\r\n    remoteStoreImpl.watchChangeAggregator = undefined;\r\n}\r\nfunction onWatchStreamOpen(remoteStoreImpl) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        return tslib.__generator(this, function (_d) {\r\n            remoteStoreImpl.listenTargets.forEach(function (targetData, targetId) {\r\n                sendWatchRequest(remoteStoreImpl, targetData);\r\n            });\r\n            return [2 /*return*/];\r\n        });\r\n    });\r\n}\r\nfunction onWatchStreamClose(remoteStoreImpl, error) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        return tslib.__generator(this, function (_d) {\r\n            cleanUpWatchStreamState(remoteStoreImpl);\r\n            // If we still need the watch stream, retry the connection.\r\n            if (shouldStartWatchStream(remoteStoreImpl)) {\r\n                remoteStoreImpl.onlineStateTracker.handleWatchStreamFailure(error);\r\n                startWatchStream(remoteStoreImpl);\r\n            }\r\n            else {\r\n                // No need to restart watch stream because there are no active targets.\r\n                // The online state is set to unknown because there is no active attempt\r\n                // at establishing a connection\r\n                remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* Unknown */);\r\n            }\r\n            return [2 /*return*/];\r\n        });\r\n    });\r\n}\r\nfunction onWatchStreamChange(remoteStoreImpl, watchChange, snapshotVersion) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var e_4, lastRemoteSnapshotVersion, e_5;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    // Mark the client as online since we got a message from the server\r\n                    remoteStoreImpl.onlineStateTracker.set(\"Online\" /* Online */);\r\n                    if (!(watchChange instanceof WatchTargetChange &&\r\n                        watchChange.state === 2 /* Removed */ &&\r\n                        watchChange.cause)) return [3 /*break*/, 6];\r\n                    _d.label = 1;\r\n                case 1:\r\n                    _d.trys.push([1, 3, , 5]);\r\n                    return [4 /*yield*/, handleTargetError(remoteStoreImpl, watchChange)];\r\n                case 2:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 5];\r\n                case 3:\r\n                    e_4 = _d.sent();\r\n                    logDebug(LOG_TAG$5, 'Failed to remove targets %s: %s ', watchChange.targetIds.join(','), e_4);\r\n                    return [4 /*yield*/, disableNetworkUntilRecovery(remoteStoreImpl, e_4)];\r\n                case 4:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 5];\r\n                case 5: return [2 /*return*/];\r\n                case 6:\r\n                    if (watchChange instanceof DocumentWatchChange) {\r\n                        remoteStoreImpl.watchChangeAggregator.handleDocumentChange(watchChange);\r\n                    }\r\n                    else if (watchChange instanceof ExistenceFilterChange) {\r\n                        remoteStoreImpl.watchChangeAggregator.handleExistenceFilter(watchChange);\r\n                    }\r\n                    else {\r\n                        remoteStoreImpl.watchChangeAggregator.handleTargetChange(watchChange);\r\n                    }\r\n                    if (!!snapshotVersion.isEqual(SnapshotVersion.min())) return [3 /*break*/, 13];\r\n                    _d.label = 7;\r\n                case 7:\r\n                    _d.trys.push([7, 11, , 13]);\r\n                    return [4 /*yield*/, localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore)];\r\n                case 8:\r\n                    lastRemoteSnapshotVersion = _d.sent();\r\n                    if (!(snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0)) return [3 /*break*/, 10];\r\n                    // We have received a target change with a global snapshot if the snapshot\r\n                    // version is not equal to SnapshotVersion.min().\r\n                    return [4 /*yield*/, raiseWatchSnapshot(remoteStoreImpl, snapshotVersion)];\r\n                case 9:\r\n                    // We have received a target change with a global snapshot if the snapshot\r\n                    // version is not equal to SnapshotVersion.min().\r\n                    _d.sent();\r\n                    _d.label = 10;\r\n                case 10: return [3 /*break*/, 13];\r\n                case 11:\r\n                    e_5 = _d.sent();\r\n                    logDebug(LOG_TAG$5, 'Failed to raise snapshot:', e_5);\r\n                    return [4 /*yield*/, disableNetworkUntilRecovery(remoteStoreImpl, e_5)];\r\n                case 12:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 13];\r\n                case 13: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Recovery logic for IndexedDB errors that takes the network offline until\r\n * `op` succeeds. Retries are scheduled with backoff using\r\n * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is\r\n * validated via a generic operation.\r\n *\r\n * The returned Promise is resolved once the network is disabled and before\r\n * any retry attempt.\r\n */\r\nfunction disableNetworkUntilRecovery(remoteStoreImpl, e, op) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var _this = this;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    if (!isIndexedDbTransactionError(e)) return [3 /*break*/, 2];\r\n                    remoteStoreImpl.offlineCauses.add(1 /* IndexedDbFailed */);\r\n                    // Disable network and raise offline snapshots\r\n                    return [4 /*yield*/, disableNetworkInternal(remoteStoreImpl)];\r\n                case 1:\r\n                    // Disable network and raise offline snapshots\r\n                    _d.sent();\r\n                    remoteStoreImpl.onlineStateTracker.set(\"Offline\" /* Offline */);\r\n                    if (!op) {\r\n                        // Use a simple read operation to determine if IndexedDB recovered.\r\n                        // Ideally, we would expose a health check directly on SimpleDb, but\r\n                        // RemoteStore only has access to persistence through LocalStore.\r\n                        op = function () { return localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore); };\r\n                    }\r\n                    // Probe IndexedDB periodically and re-enable network\r\n                    remoteStoreImpl.asyncQueue.enqueueRetryable(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n                        return tslib.__generator(this, function (_d) {\r\n                            switch (_d.label) {\r\n                                case 0:\r\n                                    logDebug(LOG_TAG$5, 'Retrying IndexedDB access');\r\n                                    return [4 /*yield*/, op()];\r\n                                case 1:\r\n                                    _d.sent();\r\n                                    remoteStoreImpl.offlineCauses.delete(1 /* IndexedDbFailed */);\r\n                                    return [4 /*yield*/, enableNetworkInternal(remoteStoreImpl)];\r\n                                case 2:\r\n                                    _d.sent();\r\n                                    return [2 /*return*/];\r\n                            }\r\n                        });\r\n                    }); });\r\n                    return [3 /*break*/, 3];\r\n                case 2: throw e;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Executes `op`. If `op` fails, takes the network offline until `op`\r\n * succeeds. Returns after the first attempt.\r\n */\r\nfunction executeWithRecovery(remoteStoreImpl, op) {\r\n    return op().catch(function (e) { return disableNetworkUntilRecovery(remoteStoreImpl, e, op); });\r\n}\r\n/**\r\n * Takes a batch of changes from the Datastore, repackages them as a\r\n * RemoteEvent, and passes that on to the listener, which is typically the\r\n * SyncEngine.\r\n */\r\nfunction raiseWatchSnapshot(remoteStoreImpl, snapshotVersion) {\r\n    var remoteEvent = remoteStoreImpl.watchChangeAggregator.createRemoteEvent(snapshotVersion);\r\n    // Update in-memory resume tokens. LocalStore will update the\r\n    // persistent view of these when applying the completed RemoteEvent.\r\n    remoteEvent.targetChanges.forEach(function (change, targetId) {\r\n        if (change.resumeToken.approximateByteSize() > 0) {\r\n            var targetData = remoteStoreImpl.listenTargets.get(targetId);\r\n            // A watched target might have been removed already.\r\n            if (targetData) {\r\n                remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(change.resumeToken, snapshotVersion));\r\n            }\r\n        }\r\n    });\r\n    // Re-establish listens for the targets that have been invalidated by\r\n    // existence filter mismatches.\r\n    remoteEvent.targetMismatches.forEach(function (targetId) {\r\n        var targetData = remoteStoreImpl.listenTargets.get(targetId);\r\n        if (!targetData) {\r\n            // A watched target might have been removed already.\r\n            return;\r\n        }\r\n        // Clear the resume token for the target, since we're in a known mismatch\r\n        // state.\r\n        remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(ByteString.EMPTY_BYTE_STRING, targetData.snapshotVersion));\r\n        // Cause a hard reset by unwatching and rewatching immediately, but\r\n        // deliberately don't send a resume token so that we get a full update.\r\n        sendUnwatchRequest(remoteStoreImpl, targetId);\r\n        // Mark the target we send as being on behalf of an existence filter\r\n        // mismatch, but don't actually retain that in listenTargets. This ensures\r\n        // that we flag the first re-listen this way without impacting future\r\n        // listens of this target (that might happen e.g. on reconnect).\r\n        var requestTargetData = new TargetData(targetData.target, targetId, 1 /* ExistenceFilterMismatch */, targetData.sequenceNumber);\r\n        sendWatchRequest(remoteStoreImpl, requestTargetData);\r\n    });\r\n    return remoteStoreImpl.remoteSyncer.applyRemoteEvent(remoteEvent);\r\n}\r\n/** Handles an error on a target */\r\nfunction handleTargetError(remoteStoreImpl, watchChange) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var error, _i, _d, targetId;\r\n        return tslib.__generator(this, function (_e) {\r\n            switch (_e.label) {\r\n                case 0:\r\n                    error = watchChange.cause;\r\n                    _i = 0, _d = watchChange.targetIds;\r\n                    _e.label = 1;\r\n                case 1:\r\n                    if (!(_i < _d.length)) return [3 /*break*/, 4];\r\n                    targetId = _d[_i];\r\n                    if (!remoteStoreImpl.listenTargets.has(targetId)) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, remoteStoreImpl.remoteSyncer.rejectListen(targetId, error)];\r\n                case 2:\r\n                    _e.sent();\r\n                    remoteStoreImpl.listenTargets.delete(targetId);\r\n                    remoteStoreImpl.watchChangeAggregator.removeTarget(targetId);\r\n                    _e.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Attempts to fill our write pipeline with writes from the LocalStore.\r\n *\r\n * Called internally to bootstrap or refill the write pipeline and by\r\n * SyncEngine whenever there are new mutations to process.\r\n *\r\n * Starts the write stream if necessary.\r\n */\r\nfunction fillWritePipeline(remoteStore) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var remoteStoreImpl, writeStream, lastBatchIdRetrieved, batch, e_6;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    remoteStoreImpl = debugCast(remoteStore);\r\n                    writeStream = ensureWriteStream(remoteStoreImpl);\r\n                    lastBatchIdRetrieved = remoteStoreImpl.writePipeline.length > 0\r\n                        ? remoteStoreImpl.writePipeline[remoteStoreImpl.writePipeline.length - 1]\r\n                            .batchId\r\n                        : BATCHID_UNKNOWN;\r\n                    _d.label = 1;\r\n                case 1:\r\n                    if (!canAddToWritePipeline(remoteStoreImpl)) return [3 /*break*/, 7];\r\n                    _d.label = 2;\r\n                case 2:\r\n                    _d.trys.push([2, 4, , 6]);\r\n                    return [4 /*yield*/, localStoreGetNextMutationBatch(remoteStoreImpl.localStore, lastBatchIdRetrieved)];\r\n                case 3:\r\n                    batch = _d.sent();\r\n                    if (batch === null) {\r\n                        if (remoteStoreImpl.writePipeline.length === 0) {\r\n                            writeStream.markIdle();\r\n                        }\r\n                        return [3 /*break*/, 7];\r\n                    }\r\n                    else {\r\n                        lastBatchIdRetrieved = batch.batchId;\r\n                        addToWritePipeline(remoteStoreImpl, batch);\r\n                    }\r\n                    return [3 /*break*/, 6];\r\n                case 4:\r\n                    e_6 = _d.sent();\r\n                    return [4 /*yield*/, disableNetworkUntilRecovery(remoteStoreImpl, e_6)];\r\n                case 5:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 6: return [3 /*break*/, 1];\r\n                case 7:\r\n                    if (shouldStartWriteStream(remoteStoreImpl)) {\r\n                        startWriteStream(remoteStoreImpl);\r\n                    }\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns true if we can add to the write pipeline (i.e. the network is\r\n * enabled and the write pipeline is not full).\r\n */\r\nfunction canAddToWritePipeline(remoteStoreImpl) {\r\n    return (canUseNetwork(remoteStoreImpl) &&\r\n        remoteStoreImpl.writePipeline.length < MAX_PENDING_WRITES);\r\n}\r\n/**\r\n * Queues additional writes to be sent to the write stream, sending them\r\n * immediately if the write stream is established.\r\n */\r\nfunction addToWritePipeline(remoteStoreImpl, batch) {\r\n    remoteStoreImpl.writePipeline.push(batch);\r\n    var writeStream = ensureWriteStream(remoteStoreImpl);\r\n    if (writeStream.isOpen() && writeStream.handshakeComplete) {\r\n        writeStream.writeMutations(batch.mutations);\r\n    }\r\n}\r\nfunction shouldStartWriteStream(remoteStoreImpl) {\r\n    return (canUseNetwork(remoteStoreImpl) &&\r\n        !ensureWriteStream(remoteStoreImpl).isStarted() &&\r\n        remoteStoreImpl.writePipeline.length > 0);\r\n}\r\nfunction startWriteStream(remoteStoreImpl) {\r\n    ensureWriteStream(remoteStoreImpl).start();\r\n}\r\nfunction onWriteStreamOpen(remoteStoreImpl) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        return tslib.__generator(this, function (_d) {\r\n            ensureWriteStream(remoteStoreImpl).writeHandshake();\r\n            return [2 /*return*/];\r\n        });\r\n    });\r\n}\r\nfunction onWriteHandshakeComplete(remoteStoreImpl) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var writeStream, _i, _d, batch;\r\n        return tslib.__generator(this, function (_e) {\r\n            writeStream = ensureWriteStream(remoteStoreImpl);\r\n            // Send the write pipeline now that the stream is established.\r\n            for (_i = 0, _d = remoteStoreImpl.writePipeline; _i < _d.length; _i++) {\r\n                batch = _d[_i];\r\n                writeStream.writeMutations(batch.mutations);\r\n            }\r\n            return [2 /*return*/];\r\n        });\r\n    });\r\n}\r\nfunction onMutationResult(remoteStoreImpl, commitVersion, results) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var batch, success;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    batch = remoteStoreImpl.writePipeline.shift();\r\n                    success = MutationBatchResult.from(batch, commitVersion, results);\r\n                    return [4 /*yield*/, executeWithRecovery(remoteStoreImpl, function () { return remoteStoreImpl.remoteSyncer.applySuccessfulWrite(success); })];\r\n                case 1:\r\n                    _d.sent();\r\n                    // It's possible that with the completion of this mutation another\r\n                    // slot has freed up.\r\n                    return [4 /*yield*/, fillWritePipeline(remoteStoreImpl)];\r\n                case 2:\r\n                    // It's possible that with the completion of this mutation another\r\n                    // slot has freed up.\r\n                    _d.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction onWriteStreamClose(remoteStoreImpl, error) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    if (!(error && ensureWriteStream(remoteStoreImpl).handshakeComplete)) return [3 /*break*/, 2];\r\n                    // This error affects the actual write.\r\n                    return [4 /*yield*/, handleWriteError(remoteStoreImpl, error)];\r\n                case 1:\r\n                    // This error affects the actual write.\r\n                    _d.sent();\r\n                    _d.label = 2;\r\n                case 2:\r\n                    // The write stream might have been started by refilling the write\r\n                    // pipeline for failed writes\r\n                    if (shouldStartWriteStream(remoteStoreImpl)) {\r\n                        startWriteStream(remoteStoreImpl);\r\n                    }\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction handleWriteError(remoteStoreImpl, error) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var batch_1;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    if (!isPermanentWriteError(error.code)) return [3 /*break*/, 3];\r\n                    batch_1 = remoteStoreImpl.writePipeline.shift();\r\n                    // In this case it's also unlikely that the server itself is melting\r\n                    // down -- this was just a bad request so inhibit backoff on the next\r\n                    // restart.\r\n                    ensureWriteStream(remoteStoreImpl).inhibitBackoff();\r\n                    return [4 /*yield*/, executeWithRecovery(remoteStoreImpl, function () { return remoteStoreImpl.remoteSyncer.rejectFailedWrite(batch_1.batchId, error); })];\r\n                case 1:\r\n                    _d.sent();\r\n                    // It's possible that with the completion of this mutation\r\n                    // another slot has freed up.\r\n                    return [4 /*yield*/, fillWritePipeline(remoteStoreImpl)];\r\n                case 2:\r\n                    // It's possible that with the completion of this mutation\r\n                    // another slot has freed up.\r\n                    _d.sent();\r\n                    _d.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction restartNetwork(remoteStore) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var remoteStoreImpl;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    remoteStoreImpl = debugCast(remoteStore);\r\n                    remoteStoreImpl.offlineCauses.add(4 /* ConnectivityChange */);\r\n                    return [4 /*yield*/, disableNetworkInternal(remoteStoreImpl)];\r\n                case 1:\r\n                    _d.sent();\r\n                    remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* Unknown */);\r\n                    remoteStoreImpl.offlineCauses.delete(4 /* ConnectivityChange */);\r\n                    return [4 /*yield*/, enableNetworkInternal(remoteStoreImpl)];\r\n                case 2:\r\n                    _d.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction remoteStoreHandleCredentialChange(remoteStore, user) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var remoteStoreImpl, usesNetwork;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    remoteStoreImpl = debugCast(remoteStore);\r\n                    remoteStoreImpl.asyncQueue.verifyOperationInProgress();\r\n                    logDebug(LOG_TAG$5, 'RemoteStore received new credentials');\r\n                    usesNetwork = canUseNetwork(remoteStoreImpl);\r\n                    // Tear down and re-create our network streams. This will ensure we get a\r\n                    // fresh auth token for the new user and re-fill the write pipeline with\r\n                    // new mutations from the LocalStore (since mutations are per-user).\r\n                    remoteStoreImpl.offlineCauses.add(3 /* CredentialChange */);\r\n                    return [4 /*yield*/, disableNetworkInternal(remoteStoreImpl)];\r\n                case 1:\r\n                    _d.sent();\r\n                    if (usesNetwork) {\r\n                        // Don't set the network status to Unknown if we are offline.\r\n                        remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* Unknown */);\r\n                    }\r\n                    return [4 /*yield*/, remoteStoreImpl.remoteSyncer.handleCredentialChange(user)];\r\n                case 2:\r\n                    _d.sent();\r\n                    remoteStoreImpl.offlineCauses.delete(3 /* CredentialChange */);\r\n                    return [4 /*yield*/, enableNetworkInternal(remoteStoreImpl)];\r\n                case 3:\r\n                    _d.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Toggles the network state when the client gains or loses its primary lease.\r\n */\r\nfunction remoteStoreApplyPrimaryState(remoteStore, isPrimary) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var remoteStoreImpl;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    remoteStoreImpl = debugCast(remoteStore);\r\n                    if (!isPrimary) return [3 /*break*/, 2];\r\n                    remoteStoreImpl.offlineCauses.delete(2 /* IsSecondary */);\r\n                    return [4 /*yield*/, enableNetworkInternal(remoteStoreImpl)];\r\n                case 1:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 2:\r\n                    if (!!isPrimary) return [3 /*break*/, 4];\r\n                    remoteStoreImpl.offlineCauses.add(2 /* IsSecondary */);\r\n                    return [4 /*yield*/, disableNetworkInternal(remoteStoreImpl)];\r\n                case 3:\r\n                    _d.sent();\r\n                    remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* Unknown */);\r\n                    _d.label = 4;\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * If not yet initialized, registers the WatchStream and its network state\r\n * callback with `remoteStoreImpl`. Returns the existing stream if one is\r\n * already available.\r\n *\r\n * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.\r\n * This is not done on Web to allow it to be tree-shaken.\r\n */\r\nfunction ensureWatchStream(remoteStoreImpl) {\r\n    var _this = this;\r\n    if (!remoteStoreImpl.watchStream) {\r\n        // Create stream (but note that it is not started yet).\r\n        remoteStoreImpl.watchStream = newPersistentWatchStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {\r\n            onOpen: onWatchStreamOpen.bind(null, remoteStoreImpl),\r\n            onClose: onWatchStreamClose.bind(null, remoteStoreImpl),\r\n            onWatchChange: onWatchStreamChange.bind(null, remoteStoreImpl)\r\n        });\r\n        remoteStoreImpl.onNetworkStatusChange.push(function (enabled) { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        if (!enabled) return [3 /*break*/, 1];\r\n                        remoteStoreImpl.watchStream.inhibitBackoff();\r\n                        if (shouldStartWatchStream(remoteStoreImpl)) {\r\n                            startWatchStream(remoteStoreImpl);\r\n                        }\r\n                        else {\r\n                            remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* Unknown */);\r\n                        }\r\n                        return [3 /*break*/, 3];\r\n                    case 1: return [4 /*yield*/, remoteStoreImpl.watchStream.stop()];\r\n                    case 2:\r\n                        _d.sent();\r\n                        cleanUpWatchStreamState(remoteStoreImpl);\r\n                        _d.label = 3;\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n    return remoteStoreImpl.watchStream;\r\n}\r\n/**\r\n * If not yet initialized, registers the WriteStream and its network state\r\n * callback with `remoteStoreImpl`. Returns the existing stream if one is\r\n * already available.\r\n *\r\n * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.\r\n * This is not done on Web to allow it to be tree-shaken.\r\n */\r\nfunction ensureWriteStream(remoteStoreImpl) {\r\n    var _this = this;\r\n    if (!remoteStoreImpl.writeStream) {\r\n        // Create stream (but note that it is not started yet).\r\n        remoteStoreImpl.writeStream = newPersistentWriteStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {\r\n            onOpen: onWriteStreamOpen.bind(null, remoteStoreImpl),\r\n            onClose: onWriteStreamClose.bind(null, remoteStoreImpl),\r\n            onHandshakeComplete: onWriteHandshakeComplete.bind(null, remoteStoreImpl),\r\n            onMutationResult: onMutationResult.bind(null, remoteStoreImpl)\r\n        });\r\n        remoteStoreImpl.onNetworkStatusChange.push(function (enabled) { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        if (!enabled) return [3 /*break*/, 2];\r\n                        remoteStoreImpl.writeStream.inhibitBackoff();\r\n                        // This will start the write stream if necessary.\r\n                        return [4 /*yield*/, fillWritePipeline(remoteStoreImpl)];\r\n                    case 1:\r\n                        // This will start the write stream if necessary.\r\n                        _d.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 2: return [4 /*yield*/, remoteStoreImpl.writeStream.stop()];\r\n                    case 3:\r\n                        _d.sent();\r\n                        if (remoteStoreImpl.writePipeline.length > 0) {\r\n                            logDebug(LOG_TAG$5, \"Stopping write stream with \" + remoteStoreImpl.writePipeline.length + \" pending writes\");\r\n                            remoteStoreImpl.writePipeline = [];\r\n                        }\r\n                        _d.label = 4;\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n    return remoteStoreImpl.writeStream;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$4 = 'AsyncQueue';\r\n/**\r\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\r\n *\r\n * It is created via DelayedOperation.createAndSchedule().\r\n *\r\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\r\n *\r\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\r\n * in newer versions of TypeScript defines `finally`, which is not available in\r\n * IE.\r\n */\r\nvar DelayedOperation = /** @class */ (function () {\r\n    function DelayedOperation(asyncQueue, timerId, targetTimeMs, op, removalCallback) {\r\n        this.asyncQueue = asyncQueue;\r\n        this.timerId = timerId;\r\n        this.targetTimeMs = targetTimeMs;\r\n        this.op = op;\r\n        this.removalCallback = removalCallback;\r\n        this.deferred = new Deferred();\r\n        this.then = this.deferred.promise.then.bind(this.deferred.promise);\r\n        // It's normal for the deferred promise to be canceled (due to cancellation)\r\n        // and so we attach a dummy catch callback to avoid\r\n        // 'UnhandledPromiseRejectionWarning' log spam.\r\n        this.deferred.promise.catch(function (err) { });\r\n    }\r\n    /**\r\n     * Creates and returns a DelayedOperation that has been scheduled to be\r\n     * executed on the provided asyncQueue after the provided delayMs.\r\n     *\r\n     * @param asyncQueue - The queue to schedule the operation on.\r\n     * @param id - A Timer ID identifying the type of operation this is.\r\n     * @param delayMs - The delay (ms) before the operation should be scheduled.\r\n     * @param op - The operation to run.\r\n     * @param removalCallback - A callback to be called synchronously once the\r\n     *   operation is executed or canceled, notifying the AsyncQueue to remove it\r\n     *   from its delayedOperations list.\r\n     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\r\n     *   the DelayedOperation class public.\r\n     */\r\n    DelayedOperation.createAndSchedule = function (asyncQueue, timerId, delayMs, op, removalCallback) {\r\n        var targetTime = Date.now() + delayMs;\r\n        var delayedOp = new DelayedOperation(asyncQueue, timerId, targetTime, op, removalCallback);\r\n        delayedOp.start(delayMs);\r\n        return delayedOp;\r\n    };\r\n    /**\r\n     * Starts the timer. This is called immediately after construction by\r\n     * createAndSchedule().\r\n     */\r\n    DelayedOperation.prototype.start = function (delayMs) {\r\n        var _this = this;\r\n        this.timerHandle = setTimeout(function () { return _this.handleDelayElapsed(); }, delayMs);\r\n    };\r\n    /**\r\n     * Queues the operation to run immediately (if it hasn't already been run or\r\n     * canceled).\r\n     */\r\n    DelayedOperation.prototype.skipDelay = function () {\r\n        return this.handleDelayElapsed();\r\n    };\r\n    /**\r\n     * Cancels the operation if it hasn't already been executed or canceled. The\r\n     * promise will be rejected.\r\n     *\r\n     * As long as the operation has not yet been run, calling cancel() provides a\r\n     * guarantee that the operation will not be run.\r\n     */\r\n    DelayedOperation.prototype.cancel = function (reason) {\r\n        if (this.timerHandle !== null) {\r\n            this.clearTimeout();\r\n            this.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled' + (reason ? ': ' + reason : '')));\r\n        }\r\n    };\r\n    DelayedOperation.prototype.handleDelayElapsed = function () {\r\n        var _this = this;\r\n        this.asyncQueue.enqueueAndForget(function () {\r\n            if (_this.timerHandle !== null) {\r\n                _this.clearTimeout();\r\n                return _this.op().then(function (result) {\r\n                    return _this.deferred.resolve(result);\r\n                });\r\n            }\r\n            else {\r\n                return Promise.resolve();\r\n            }\r\n        });\r\n    };\r\n    DelayedOperation.prototype.clearTimeout = function () {\r\n        if (this.timerHandle !== null) {\r\n            this.removalCallback(this);\r\n            clearTimeout(this.timerHandle);\r\n            this.timerHandle = null;\r\n        }\r\n    };\r\n    return DelayedOperation;\r\n}());\r\n/**\r\n * Returns a FirestoreError that can be surfaced to the user if the provided\r\n * error is an IndexedDbTransactionError. Re-throws the error otherwise.\r\n */\r\nfunction wrapInUserErrorIfRecoverable(e, msg) {\r\n    logError(LOG_TAG$4, msg + \": \" + e);\r\n    if (isIndexedDbTransactionError(e)) {\r\n        return new FirestoreError(Code.UNAVAILABLE, msg + \": \" + e);\r\n    }\r\n    else {\r\n        throw e;\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\r\n * in order specified by the provided comparator. We always add a document key\r\n * comparator on top of what is provided to guarantee document equality based on\r\n * the key.\r\n */\r\nvar DocumentSet = /** @class */ (function () {\r\n    /** The default ordering is by key if the comparator is omitted */\r\n    function DocumentSet(comp) {\r\n        // We are adding document key comparator to the end as it's the only\r\n        // guaranteed unique property of a document.\r\n        if (comp) {\r\n            this.comparator = function (d1, d2) { return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key); };\r\n        }\r\n        else {\r\n            this.comparator = function (d1, d2) { return DocumentKey.comparator(d1.key, d2.key); };\r\n        }\r\n        this.keyedMap = documentMap();\r\n        this.sortedSet = new SortedMap(this.comparator);\r\n    }\r\n    /**\r\n     * Returns an empty copy of the existing DocumentSet, using the same\r\n     * comparator.\r\n     */\r\n    DocumentSet.emptySet = function (oldSet) {\r\n        return new DocumentSet(oldSet.comparator);\r\n    };\r\n    DocumentSet.prototype.has = function (key) {\r\n        return this.keyedMap.get(key) != null;\r\n    };\r\n    DocumentSet.prototype.get = function (key) {\r\n        return this.keyedMap.get(key);\r\n    };\r\n    DocumentSet.prototype.first = function () {\r\n        return this.sortedSet.minKey();\r\n    };\r\n    DocumentSet.prototype.last = function () {\r\n        return this.sortedSet.maxKey();\r\n    };\r\n    DocumentSet.prototype.isEmpty = function () {\r\n        return this.sortedSet.isEmpty();\r\n    };\r\n    /**\r\n     * Returns the index of the provided key in the document set, or -1 if the\r\n     * document key is not present in the set;\r\n     */\r\n    DocumentSet.prototype.indexOf = function (key) {\r\n        var doc = this.keyedMap.get(key);\r\n        return doc ? this.sortedSet.indexOf(doc) : -1;\r\n    };\r\n    Object.defineProperty(DocumentSet.prototype, \"size\", {\r\n        get: function () {\r\n            return this.sortedSet.size;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /** Iterates documents in order defined by \"comparator\" */\r\n    DocumentSet.prototype.forEach = function (cb) {\r\n        this.sortedSet.inorderTraversal(function (k, v) {\r\n            cb(k);\r\n            return false;\r\n        });\r\n    };\r\n    /** Inserts or updates a document with the same key */\r\n    DocumentSet.prototype.add = function (doc) {\r\n        // First remove the element if we have it.\r\n        var set = this.delete(doc.key);\r\n        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\r\n    };\r\n    /** Deletes a document with a given key */\r\n    DocumentSet.prototype.delete = function (key) {\r\n        var doc = this.get(key);\r\n        if (!doc) {\r\n            return this;\r\n        }\r\n        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\r\n    };\r\n    DocumentSet.prototype.isEqual = function (other) {\r\n        if (!(other instanceof DocumentSet)) {\r\n            return false;\r\n        }\r\n        if (this.size !== other.size) {\r\n            return false;\r\n        }\r\n        var thisIt = this.sortedSet.getIterator();\r\n        var otherIt = other.sortedSet.getIterator();\r\n        while (thisIt.hasNext()) {\r\n            var thisDoc = thisIt.getNext().key;\r\n            var otherDoc = otherIt.getNext().key;\r\n            if (!thisDoc.isEqual(otherDoc)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    DocumentSet.prototype.toString = function () {\r\n        var docStrings = [];\r\n        this.forEach(function (doc) {\r\n            docStrings.push(doc.toString());\r\n        });\r\n        if (docStrings.length === 0) {\r\n            return 'DocumentSet ()';\r\n        }\r\n        else {\r\n            return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\r\n        }\r\n    };\r\n    DocumentSet.prototype.copy = function (keyedMap, sortedSet) {\r\n        var newSet = new DocumentSet();\r\n        newSet.comparator = this.comparator;\r\n        newSet.keyedMap = keyedMap;\r\n        newSet.sortedSet = sortedSet;\r\n        return newSet;\r\n    };\r\n    return DocumentSet;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\r\n * duplicate events for the same doc.\r\n */\r\nvar DocumentChangeSet = /** @class */ (function () {\r\n    function DocumentChangeSet() {\r\n        this.changeMap = new SortedMap(DocumentKey.comparator);\r\n    }\r\n    DocumentChangeSet.prototype.track = function (change) {\r\n        var key = change.doc.key;\r\n        var oldChange = this.changeMap.get(key);\r\n        if (!oldChange) {\r\n            this.changeMap = this.changeMap.insert(key, change);\r\n            return;\r\n        }\r\n        // Merge the new change with the existing change.\r\n        if (change.type !== 0 /* Added */ &&\r\n            oldChange.type === 3 /* Metadata */) {\r\n            this.changeMap = this.changeMap.insert(key, change);\r\n        }\r\n        else if (change.type === 3 /* Metadata */ &&\r\n            oldChange.type !== 1 /* Removed */) {\r\n            this.changeMap = this.changeMap.insert(key, {\r\n                type: oldChange.type,\r\n                doc: change.doc\r\n            });\r\n        }\r\n        else if (change.type === 2 /* Modified */ &&\r\n            oldChange.type === 2 /* Modified */) {\r\n            this.changeMap = this.changeMap.insert(key, {\r\n                type: 2 /* Modified */,\r\n                doc: change.doc\r\n            });\r\n        }\r\n        else if (change.type === 2 /* Modified */ &&\r\n            oldChange.type === 0 /* Added */) {\r\n            this.changeMap = this.changeMap.insert(key, {\r\n                type: 0 /* Added */,\r\n                doc: change.doc\r\n            });\r\n        }\r\n        else if (change.type === 1 /* Removed */ &&\r\n            oldChange.type === 0 /* Added */) {\r\n            this.changeMap = this.changeMap.remove(key);\r\n        }\r\n        else if (change.type === 1 /* Removed */ &&\r\n            oldChange.type === 2 /* Modified */) {\r\n            this.changeMap = this.changeMap.insert(key, {\r\n                type: 1 /* Removed */,\r\n                doc: oldChange.doc\r\n            });\r\n        }\r\n        else if (change.type === 0 /* Added */ &&\r\n            oldChange.type === 1 /* Removed */) {\r\n            this.changeMap = this.changeMap.insert(key, {\r\n                type: 2 /* Modified */,\r\n                doc: change.doc\r\n            });\r\n        }\r\n        else {\r\n            // This includes these cases, which don't make sense:\r\n            // Added->Added\r\n            // Removed->Removed\r\n            // Modified->Added\r\n            // Removed->Modified\r\n            // Metadata->Added\r\n            // Removed->Metadata\r\n            fail();\r\n        }\r\n    };\r\n    DocumentChangeSet.prototype.getChanges = function () {\r\n        var changes = [];\r\n        this.changeMap.inorderTraversal(function (key, change) {\r\n            changes.push(change);\r\n        });\r\n        return changes;\r\n    };\r\n    return DocumentChangeSet;\r\n}());\r\nvar ViewSnapshot = /** @class */ (function () {\r\n    function ViewSnapshot(query, docs, oldDocs, docChanges, mutatedKeys, fromCache, syncStateChanged, excludesMetadataChanges) {\r\n        this.query = query;\r\n        this.docs = docs;\r\n        this.oldDocs = oldDocs;\r\n        this.docChanges = docChanges;\r\n        this.mutatedKeys = mutatedKeys;\r\n        this.fromCache = fromCache;\r\n        this.syncStateChanged = syncStateChanged;\r\n        this.excludesMetadataChanges = excludesMetadataChanges;\r\n    }\r\n    /** Returns a view snapshot as if all documents in the snapshot were added. */\r\n    ViewSnapshot.fromInitialDocuments = function (query, documents, mutatedKeys, fromCache) {\r\n        var changes = [];\r\n        documents.forEach(function (doc) {\r\n            changes.push({ type: 0 /* Added */, doc: doc });\r\n        });\r\n        return new ViewSnapshot(query, documents, DocumentSet.emptySet(documents), changes, mutatedKeys, fromCache, \r\n        /* syncStateChanged= */ true, \r\n        /* excludesMetadataChanges= */ false);\r\n    };\r\n    Object.defineProperty(ViewSnapshot.prototype, \"hasPendingWrites\", {\r\n        get: function () {\r\n            return !this.mutatedKeys.isEmpty();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    ViewSnapshot.prototype.isEqual = function (other) {\r\n        if (this.fromCache !== other.fromCache ||\r\n            this.syncStateChanged !== other.syncStateChanged ||\r\n            !this.mutatedKeys.isEqual(other.mutatedKeys) ||\r\n            !queryEquals(this.query, other.query) ||\r\n            !this.docs.isEqual(other.docs) ||\r\n            !this.oldDocs.isEqual(other.oldDocs)) {\r\n            return false;\r\n        }\r\n        var changes = this.docChanges;\r\n        var otherChanges = other.docChanges;\r\n        if (changes.length !== otherChanges.length) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < changes.length; i++) {\r\n            if (changes[i].type !== otherChanges[i].type ||\r\n                !changes[i].doc.isEqual(otherChanges[i].doc)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return ViewSnapshot;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Holds the listeners and the last received ViewSnapshot for a query being\r\n * tracked by EventManager.\r\n */\r\nvar QueryListenersInfo = /** @class */ (function () {\r\n    function QueryListenersInfo() {\r\n        this.viewSnap = undefined;\r\n        this.listeners = [];\r\n    }\r\n    return QueryListenersInfo;\r\n}());\r\nfunction newEventManager() {\r\n    return new EventManagerImpl();\r\n}\r\nvar EventManagerImpl = /** @class */ (function () {\r\n    function EventManagerImpl() {\r\n        this.queries = new ObjectMap(function (q) { return canonifyQuery(q); }, queryEquals);\r\n        this.onlineState = \"Unknown\" /* Unknown */;\r\n        this.snapshotsInSyncListeners = new Set();\r\n    }\r\n    return EventManagerImpl;\r\n}());\r\nfunction eventManagerListen(eventManager, listener) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var eventManagerImpl, query, firstListen, queryInfo, _d, e_7, firestoreError, raisedEvent;\r\n        return tslib.__generator(this, function (_e) {\r\n            switch (_e.label) {\r\n                case 0:\r\n                    eventManagerImpl = debugCast(eventManager);\r\n                    query = listener.query;\r\n                    firstListen = false;\r\n                    queryInfo = eventManagerImpl.queries.get(query);\r\n                    if (!queryInfo) {\r\n                        firstListen = true;\r\n                        queryInfo = new QueryListenersInfo();\r\n                    }\r\n                    if (!firstListen) return [3 /*break*/, 4];\r\n                    _e.label = 1;\r\n                case 1:\r\n                    _e.trys.push([1, 3, , 4]);\r\n                    _d = queryInfo;\r\n                    return [4 /*yield*/, eventManagerImpl.onListen(query)];\r\n                case 2:\r\n                    _d.viewSnap = _e.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_7 = _e.sent();\r\n                    firestoreError = wrapInUserErrorIfRecoverable(e_7, \"Initialization of query '\" + stringifyQuery(listener.query) + \"' failed\");\r\n                    listener.onError(firestoreError);\r\n                    return [2 /*return*/];\r\n                case 4:\r\n                    eventManagerImpl.queries.set(query, queryInfo);\r\n                    queryInfo.listeners.push(listener);\r\n                    // Run global snapshot listeners if a consistent snapshot has been emitted.\r\n                    listener.applyOnlineStateChange(eventManagerImpl.onlineState);\r\n                    if (queryInfo.viewSnap) {\r\n                        raisedEvent = listener.onViewSnapshot(queryInfo.viewSnap);\r\n                        if (raisedEvent) {\r\n                            raiseSnapshotsInSyncEvent(eventManagerImpl);\r\n                        }\r\n                    }\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventManagerUnlisten(eventManager, listener) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var eventManagerImpl, query, lastListen, queryInfo, i;\r\n        return tslib.__generator(this, function (_d) {\r\n            eventManagerImpl = debugCast(eventManager);\r\n            query = listener.query;\r\n            lastListen = false;\r\n            queryInfo = eventManagerImpl.queries.get(query);\r\n            if (queryInfo) {\r\n                i = queryInfo.listeners.indexOf(listener);\r\n                if (i >= 0) {\r\n                    queryInfo.listeners.splice(i, 1);\r\n                    lastListen = queryInfo.listeners.length === 0;\r\n                }\r\n            }\r\n            if (lastListen) {\r\n                eventManagerImpl.queries.delete(query);\r\n                return [2 /*return*/, eventManagerImpl.onUnlisten(query)];\r\n            }\r\n            return [2 /*return*/];\r\n        });\r\n    });\r\n}\r\nfunction eventManagerOnWatchChange(eventManager, viewSnaps) {\r\n    var eventManagerImpl = debugCast(eventManager);\r\n    var raisedEvent = false;\r\n    for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {\r\n        var viewSnap = viewSnaps_1[_i];\r\n        var query_1 = viewSnap.query;\r\n        var queryInfo = eventManagerImpl.queries.get(query_1);\r\n        if (queryInfo) {\r\n            for (var _d = 0, _e = queryInfo.listeners; _d < _e.length; _d++) {\r\n                var listener = _e[_d];\r\n                if (listener.onViewSnapshot(viewSnap)) {\r\n                    raisedEvent = true;\r\n                }\r\n            }\r\n            queryInfo.viewSnap = viewSnap;\r\n        }\r\n    }\r\n    if (raisedEvent) {\r\n        raiseSnapshotsInSyncEvent(eventManagerImpl);\r\n    }\r\n}\r\nfunction eventManagerOnWatchError(eventManager, query, error) {\r\n    var eventManagerImpl = debugCast(eventManager);\r\n    var queryInfo = eventManagerImpl.queries.get(query);\r\n    if (queryInfo) {\r\n        for (var _i = 0, _d = queryInfo.listeners; _i < _d.length; _i++) {\r\n            var listener = _d[_i];\r\n            listener.onError(error);\r\n        }\r\n    }\r\n    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\r\n    // after an error.\r\n    eventManagerImpl.queries.delete(query);\r\n}\r\nfunction eventManagerOnOnlineStateChange(eventManager, onlineState) {\r\n    var eventManagerImpl = debugCast(eventManager);\r\n    eventManagerImpl.onlineState = onlineState;\r\n    var raisedEvent = false;\r\n    eventManagerImpl.queries.forEach(function (_, queryInfo) {\r\n        for (var _i = 0, _d = queryInfo.listeners; _i < _d.length; _i++) {\r\n            var listener = _d[_i];\r\n            // Run global snapshot listeners if a consistent snapshot has been emitted.\r\n            if (listener.applyOnlineStateChange(onlineState)) {\r\n                raisedEvent = true;\r\n            }\r\n        }\r\n    });\r\n    if (raisedEvent) {\r\n        raiseSnapshotsInSyncEvent(eventManagerImpl);\r\n    }\r\n}\r\nfunction addSnapshotsInSyncListener(eventManager, observer) {\r\n    var eventManagerImpl = debugCast(eventManager);\r\n    eventManagerImpl.snapshotsInSyncListeners.add(observer);\r\n    // Immediately fire an initial event, indicating all existing listeners\r\n    // are in-sync.\r\n    observer.next();\r\n}\r\nfunction removeSnapshotsInSyncListener(eventManager, observer) {\r\n    var eventManagerImpl = debugCast(eventManager);\r\n    eventManagerImpl.snapshotsInSyncListeners.delete(observer);\r\n}\r\n// Call all global snapshot listeners that have been set.\r\nfunction raiseSnapshotsInSyncEvent(eventManagerImpl) {\r\n    eventManagerImpl.snapshotsInSyncListeners.forEach(function (observer) {\r\n        observer.next();\r\n    });\r\n}\r\n/**\r\n * QueryListener takes a series of internal view snapshots and determines\r\n * when to raise the event.\r\n *\r\n * It uses an Observer to dispatch events.\r\n */\r\nvar QueryListener = /** @class */ (function () {\r\n    function QueryListener(query, queryObserver, options) {\r\n        this.query = query;\r\n        this.queryObserver = queryObserver;\r\n        /**\r\n         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\r\n         * observer. This flag is set to true once we've actually raised an event.\r\n         */\r\n        this.raisedInitialEvent = false;\r\n        this.snap = null;\r\n        this.onlineState = \"Unknown\" /* Unknown */;\r\n        this.options = options || {};\r\n    }\r\n    /**\r\n     * Applies the new ViewSnapshot to this listener, raising a user-facing event\r\n     * if applicable (depending on what changed, whether the user has opted into\r\n     * metadata-only changes, etc.). Returns true if a user-facing event was\r\n     * indeed raised.\r\n     */\r\n    QueryListener.prototype.onViewSnapshot = function (snap) {\r\n        if (!this.options.includeMetadataChanges) {\r\n            // Remove the metadata only changes.\r\n            var docChanges = [];\r\n            for (var _i = 0, _d = snap.docChanges; _i < _d.length; _i++) {\r\n                var docChange = _d[_i];\r\n                if (docChange.type !== 3 /* Metadata */) {\r\n                    docChanges.push(docChange);\r\n                }\r\n            }\r\n            snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.mutatedKeys, snap.fromCache, snap.syncStateChanged, \r\n            /* excludesMetadataChanges= */ true);\r\n        }\r\n        var raisedEvent = false;\r\n        if (!this.raisedInitialEvent) {\r\n            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\r\n                this.raiseInitialEvent(snap);\r\n                raisedEvent = true;\r\n            }\r\n        }\r\n        else if (this.shouldRaiseEvent(snap)) {\r\n            this.queryObserver.next(snap);\r\n            raisedEvent = true;\r\n        }\r\n        this.snap = snap;\r\n        return raisedEvent;\r\n    };\r\n    QueryListener.prototype.onError = function (error) {\r\n        this.queryObserver.error(error);\r\n    };\r\n    /** Returns whether a snapshot was raised. */\r\n    QueryListener.prototype.applyOnlineStateChange = function (onlineState) {\r\n        this.onlineState = onlineState;\r\n        var raisedEvent = false;\r\n        if (this.snap &&\r\n            !this.raisedInitialEvent &&\r\n            this.shouldRaiseInitialEvent(this.snap, onlineState)) {\r\n            this.raiseInitialEvent(this.snap);\r\n            raisedEvent = true;\r\n        }\r\n        return raisedEvent;\r\n    };\r\n    QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {\r\n        // Always raise the first event when we're synced\r\n        if (!snap.fromCache) {\r\n            return true;\r\n        }\r\n        // NOTE: We consider OnlineState.Unknown as online (it should become Offline\r\n        // or Online if we wait long enough).\r\n        var maybeOnline = onlineState !== \"Offline\" /* Offline */;\r\n        // Don't raise the event if we're online, aren't synced yet (checked\r\n        // above) and are waiting for a sync.\r\n        if (this.options.waitForSyncWhenOnline && maybeOnline) {\r\n            return false;\r\n        }\r\n        // Raise data from cache if we have any documents or we are offline\r\n        return !snap.docs.isEmpty() || onlineState === \"Offline\" /* Offline */;\r\n    };\r\n    QueryListener.prototype.shouldRaiseEvent = function (snap) {\r\n        // We don't need to handle includeDocumentMetadataChanges here because\r\n        // the Metadata only changes have already been stripped out if needed.\r\n        // At this point the only changes we will see are the ones we should\r\n        // propagate.\r\n        if (snap.docChanges.length > 0) {\r\n            return true;\r\n        }\r\n        var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\r\n        if (snap.syncStateChanged || hasPendingWritesChanged) {\r\n            return this.options.includeMetadataChanges === true;\r\n        }\r\n        // Generally we should have hit one of the cases above, but it's possible\r\n        // to get here if there were only metadata docChanges and they got\r\n        // stripped out.\r\n        return false;\r\n    };\r\n    QueryListener.prototype.raiseInitialEvent = function (snap) {\r\n        snap = ViewSnapshot.fromInitialDocuments(snap.query, snap.docs, snap.mutatedKeys, snap.fromCache);\r\n        this.raisedInitialEvent = true;\r\n        this.queryObserver.next(snap);\r\n    };\r\n    return QueryListener;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A set of changes to what documents are currently in view and out of view for\r\n * a given query. These changes are sent to the LocalStore by the View (via\r\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\r\n */\r\nvar LocalViewChanges = /** @class */ (function () {\r\n    function LocalViewChanges(targetId, fromCache, addedKeys, removedKeys) {\r\n        this.targetId = targetId;\r\n        this.fromCache = fromCache;\r\n        this.addedKeys = addedKeys;\r\n        this.removedKeys = removedKeys;\r\n    }\r\n    LocalViewChanges.fromSnapshot = function (targetId, viewSnapshot) {\r\n        var addedKeys = documentKeySet();\r\n        var removedKeys = documentKeySet();\r\n        for (var _i = 0, _d = viewSnapshot.docChanges; _i < _d.length; _i++) {\r\n            var docChange = _d[_i];\r\n            switch (docChange.type) {\r\n                case 0 /* Added */:\r\n                    addedKeys = addedKeys.add(docChange.doc.key);\r\n                    break;\r\n                case 1 /* Removed */:\r\n                    removedKeys = removedKeys.add(docChange.doc.key);\r\n                    break;\r\n                // do nothing\r\n            }\r\n        }\r\n        return new LocalViewChanges(targetId, viewSnapshot.fromCache, addedKeys, removedKeys);\r\n    };\r\n    return LocalViewChanges;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar BundleLoadResult = /** @class */ (function () {\r\n    function BundleLoadResult(progress, changedDocs) {\r\n        this.progress = progress;\r\n        this.changedDocs = changedDocs;\r\n    }\r\n    return BundleLoadResult;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to convert objects from bundles to model objects in the SDK.\r\n */\r\nvar BundleConverterImpl = /** @class */ (function () {\r\n    function BundleConverterImpl(serializer) {\r\n        this.serializer = serializer;\r\n    }\r\n    BundleConverterImpl.prototype.toDocumentKey = function (name) {\r\n        return fromName(this.serializer, name);\r\n    };\r\n    /**\r\n     * Converts a BundleDocument to a MutableDocument.\r\n     */\r\n    BundleConverterImpl.prototype.toMutableDocument = function (bundledDoc) {\r\n        if (bundledDoc.metadata.exists) {\r\n            return fromDocument(this.serializer, bundledDoc.document, false);\r\n        }\r\n        else {\r\n            return MutableDocument.newNoDocument(this.toDocumentKey(bundledDoc.metadata.name), this.toSnapshotVersion(bundledDoc.metadata.readTime));\r\n        }\r\n    };\r\n    BundleConverterImpl.prototype.toSnapshotVersion = function (time) {\r\n        return fromVersion(time);\r\n    };\r\n    return BundleConverterImpl;\r\n}());\r\n/**\r\n * A class to process the elements from a bundle, load them into local\r\n * storage and provide progress update while loading.\r\n */\r\nvar BundleLoader = /** @class */ (function () {\r\n    function BundleLoader(bundleMetadata, localStore, serializer) {\r\n        this.bundleMetadata = bundleMetadata;\r\n        this.localStore = localStore;\r\n        this.serializer = serializer;\r\n        /** Batched queries to be saved into storage */\r\n        this.queries = [];\r\n        /** Batched documents to be saved into storage */\r\n        this.documents = [];\r\n        this.progress = bundleInitialProgress(bundleMetadata);\r\n    }\r\n    /**\r\n     * Adds an element from the bundle to the loader.\r\n     *\r\n     * Returns a new progress if adding the element leads to a new progress,\r\n     * otherwise returns null.\r\n     */\r\n    BundleLoader.prototype.addSizedElement = function (element) {\r\n        this.progress.bytesLoaded += element.byteLength;\r\n        var documentsLoaded = this.progress.documentsLoaded;\r\n        if (element.payload.namedQuery) {\r\n            this.queries.push(element.payload.namedQuery);\r\n        }\r\n        else if (element.payload.documentMetadata) {\r\n            this.documents.push({ metadata: element.payload.documentMetadata });\r\n            if (!element.payload.documentMetadata.exists) {\r\n                ++documentsLoaded;\r\n            }\r\n        }\r\n        else if (element.payload.document) {\r\n            this.documents[this.documents.length - 1].document =\r\n                element.payload.document;\r\n            ++documentsLoaded;\r\n        }\r\n        if (documentsLoaded !== this.progress.documentsLoaded) {\r\n            this.progress.documentsLoaded = documentsLoaded;\r\n            return Object.assign({}, this.progress);\r\n        }\r\n        return null;\r\n    };\r\n    BundleLoader.prototype.getQueryDocumentMapping = function (documents) {\r\n        var queryDocumentMap = new Map();\r\n        var bundleConverter = new BundleConverterImpl(this.serializer);\r\n        for (var _i = 0, documents_2 = documents; _i < documents_2.length; _i++) {\r\n            var bundleDoc = documents_2[_i];\r\n            if (bundleDoc.metadata.queries) {\r\n                var documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);\r\n                for (var _d = 0, _e = bundleDoc.metadata.queries; _d < _e.length; _d++) {\r\n                    var queryName = _e[_d];\r\n                    var documentKeys = (queryDocumentMap.get(queryName) || documentKeySet()).add(documentKey);\r\n                    queryDocumentMap.set(queryName, documentKeys);\r\n                }\r\n            }\r\n        }\r\n        return queryDocumentMap;\r\n    };\r\n    /**\r\n     * Update the progress to 'Success' and return the updated progress.\r\n     */\r\n    BundleLoader.prototype.complete = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var changedDocuments, queryDocumentMap, _i, _d, q;\r\n            return tslib.__generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0: return [4 /*yield*/, localStoreApplyBundledDocuments(this.localStore, new BundleConverterImpl(this.serializer), this.documents, this.bundleMetadata.id)];\r\n                    case 1:\r\n                        changedDocuments = _e.sent();\r\n                        queryDocumentMap = this.getQueryDocumentMapping(this.documents);\r\n                        _i = 0, _d = this.queries;\r\n                        _e.label = 2;\r\n                    case 2:\r\n                        if (!(_i < _d.length)) return [3 /*break*/, 5];\r\n                        q = _d[_i];\r\n                        return [4 /*yield*/, localStoreSaveNamedQuery(this.localStore, q, queryDocumentMap.get(q.name))];\r\n                    case 3:\r\n                        _e.sent();\r\n                        _e.label = 4;\r\n                    case 4:\r\n                        _i++;\r\n                        return [3 /*break*/, 2];\r\n                    case 5:\r\n                        this.progress.taskState = 'Success';\r\n                        return [2 /*return*/, new BundleLoadResult(Object.assign({}, this.progress), changedDocuments)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return BundleLoader;\r\n}());\r\n/**\r\n * Returns a `LoadBundleTaskProgress` representing the initial progress of\r\n * loading a bundle.\r\n */\r\nfunction bundleInitialProgress(metadata) {\r\n    return {\r\n        taskState: 'Running',\r\n        documentsLoaded: 0,\r\n        bytesLoaded: 0,\r\n        totalDocuments: metadata.totalDocuments,\r\n        totalBytes: metadata.totalBytes\r\n    };\r\n}\r\n/**\r\n * Returns a `LoadBundleTaskProgress` representing the progress that the loading\r\n * has succeeded.\r\n */\r\nfunction bundleSuccessProgress(metadata) {\r\n    return {\r\n        taskState: 'Success',\r\n        documentsLoaded: metadata.totalDocuments,\r\n        bytesLoaded: metadata.totalBytes,\r\n        totalDocuments: metadata.totalDocuments,\r\n        totalBytes: metadata.totalBytes\r\n    };\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AddedLimboDocument = /** @class */ (function () {\r\n    function AddedLimboDocument(key) {\r\n        this.key = key;\r\n    }\r\n    return AddedLimboDocument;\r\n}());\r\nvar RemovedLimboDocument = /** @class */ (function () {\r\n    function RemovedLimboDocument(key) {\r\n        this.key = key;\r\n    }\r\n    return RemovedLimboDocument;\r\n}());\r\n/**\r\n * View is responsible for computing the final merged truth of what docs are in\r\n * a query. It gets notified of local and remote changes to docs, and applies\r\n * the query filters and limits to determine the most correct possible results.\r\n */\r\nvar View = /** @class */ (function () {\r\n    function View(query, \r\n    /** Documents included in the remote target */\r\n    _syncedDocuments) {\r\n        this.query = query;\r\n        this._syncedDocuments = _syncedDocuments;\r\n        this.syncState = null;\r\n        /**\r\n         * A flag whether the view is current with the backend. A view is considered\r\n         * current after it has seen the current flag from the backend and did not\r\n         * lose consistency within the watch stream (e.g. because of an existence\r\n         * filter mismatch).\r\n         */\r\n        this.current = false;\r\n        /** Documents in the view but not in the remote target */\r\n        this.limboDocuments = documentKeySet();\r\n        /** Document Keys that have local changes */\r\n        this.mutatedKeys = documentKeySet();\r\n        this.docComparator = newQueryComparator(query);\r\n        this.documentSet = new DocumentSet(this.docComparator);\r\n    }\r\n    Object.defineProperty(View.prototype, \"syncedDocuments\", {\r\n        /**\r\n         * The set of remote documents that the server has told us belongs to the target associated with\r\n         * this view.\r\n         */\r\n        get: function () {\r\n            return this._syncedDocuments;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Iterates over a set of doc changes, applies the query limit, and computes\r\n     * what the new results should be, what the changes were, and whether we may\r\n     * need to go back to the local cache for more results. Does not make any\r\n     * changes to the view.\r\n     * @param docChanges - The doc changes to apply to this view.\r\n     * @param previousChanges - If this is being called with a refill, then start\r\n     *        with this set of docs and changes instead of the current view.\r\n     * @returns a new set of docs, changes, and refill flag.\r\n     */\r\n    View.prototype.computeDocChanges = function (docChanges, previousChanges) {\r\n        var _this = this;\r\n        var changeSet = previousChanges\r\n            ? previousChanges.changeSet\r\n            : new DocumentChangeSet();\r\n        var oldDocumentSet = previousChanges\r\n            ? previousChanges.documentSet\r\n            : this.documentSet;\r\n        var newMutatedKeys = previousChanges\r\n            ? previousChanges.mutatedKeys\r\n            : this.mutatedKeys;\r\n        var newDocumentSet = oldDocumentSet;\r\n        var needsRefill = false;\r\n        // Track the last doc in a (full) limit. This is necessary, because some\r\n        // update (a delete, or an update moving a doc past the old limit) might\r\n        // mean there is some other document in the local cache that either should\r\n        // come (1) between the old last limit doc and the new last document, in the\r\n        // case of updates, or (2) after the new last document, in the case of\r\n        // deletes. So we keep this doc at the old limit to compare the updates to.\r\n        //\r\n        // Note that this should never get used in a refill (when previousChanges is\r\n        // set), because there will only be adds -- no deletes or updates.\r\n        var lastDocInLimit = hasLimitToFirst(this.query) && oldDocumentSet.size === this.query.limit\r\n            ? oldDocumentSet.last()\r\n            : null;\r\n        var firstDocInLimit = hasLimitToLast(this.query) && oldDocumentSet.size === this.query.limit\r\n            ? oldDocumentSet.first()\r\n            : null;\r\n        docChanges.inorderTraversal(function (key, entry) {\r\n            var oldDoc = oldDocumentSet.get(key);\r\n            var newDoc = queryMatches(_this.query, entry) ? entry : null;\r\n            var oldDocHadPendingMutations = oldDoc\r\n                ? _this.mutatedKeys.has(oldDoc.key)\r\n                : false;\r\n            var newDocHasPendingMutations = newDoc\r\n                ? newDoc.hasLocalMutations ||\r\n                    // We only consider committed mutations for documents that were\r\n                    // mutated during the lifetime of the view.\r\n                    (_this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations)\r\n                : false;\r\n            var changeApplied = false;\r\n            // Calculate change\r\n            if (oldDoc && newDoc) {\r\n                var docsEqual = oldDoc.data.isEqual(newDoc.data);\r\n                if (!docsEqual) {\r\n                    if (!_this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {\r\n                        changeSet.track({\r\n                            type: 2 /* Modified */,\r\n                            doc: newDoc\r\n                        });\r\n                        changeApplied = true;\r\n                        if ((lastDocInLimit &&\r\n                            _this.docComparator(newDoc, lastDocInLimit) > 0) ||\r\n                            (firstDocInLimit &&\r\n                                _this.docComparator(newDoc, firstDocInLimit) < 0)) {\r\n                            // This doc moved from inside the limit to outside the limit.\r\n                            // That means there may be some other doc in the local cache\r\n                            // that should be included instead.\r\n                            needsRefill = true;\r\n                        }\r\n                    }\r\n                }\r\n                else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {\r\n                    changeSet.track({ type: 3 /* Metadata */, doc: newDoc });\r\n                    changeApplied = true;\r\n                }\r\n            }\r\n            else if (!oldDoc && newDoc) {\r\n                changeSet.track({ type: 0 /* Added */, doc: newDoc });\r\n                changeApplied = true;\r\n            }\r\n            else if (oldDoc && !newDoc) {\r\n                changeSet.track({ type: 1 /* Removed */, doc: oldDoc });\r\n                changeApplied = true;\r\n                if (lastDocInLimit || firstDocInLimit) {\r\n                    // A doc was removed from a full limit query. We'll need to\r\n                    // requery from the local cache to see if we know about some other\r\n                    // doc that should be in the results.\r\n                    needsRefill = true;\r\n                }\r\n            }\r\n            if (changeApplied) {\r\n                if (newDoc) {\r\n                    newDocumentSet = newDocumentSet.add(newDoc);\r\n                    if (newDocHasPendingMutations) {\r\n                        newMutatedKeys = newMutatedKeys.add(key);\r\n                    }\r\n                    else {\r\n                        newMutatedKeys = newMutatedKeys.delete(key);\r\n                    }\r\n                }\r\n                else {\r\n                    newDocumentSet = newDocumentSet.delete(key);\r\n                    newMutatedKeys = newMutatedKeys.delete(key);\r\n                }\r\n            }\r\n        });\r\n        // Drop documents out to meet limit/limitToLast requirement.\r\n        if (hasLimitToFirst(this.query) || hasLimitToLast(this.query)) {\r\n            while (newDocumentSet.size > this.query.limit) {\r\n                var oldDoc = hasLimitToFirst(this.query)\r\n                    ? newDocumentSet.last()\r\n                    : newDocumentSet.first();\r\n                newDocumentSet = newDocumentSet.delete(oldDoc.key);\r\n                newMutatedKeys = newMutatedKeys.delete(oldDoc.key);\r\n                changeSet.track({ type: 1 /* Removed */, doc: oldDoc });\r\n            }\r\n        }\r\n        return {\r\n            documentSet: newDocumentSet,\r\n            changeSet: changeSet,\r\n            needsRefill: needsRefill,\r\n            mutatedKeys: newMutatedKeys\r\n        };\r\n    };\r\n    View.prototype.shouldWaitForSyncedDocument = function (oldDoc, newDoc) {\r\n        // We suppress the initial change event for documents that were modified as\r\n        // part of a write acknowledgment (e.g. when the value of a server transform\r\n        // is applied) as Watch will send us the same document again.\r\n        // By suppressing the event, we only raise two user visible events (one with\r\n        // `hasPendingWrites` and the final state of the document) instead of three\r\n        // (one with `hasPendingWrites`, the modified document with\r\n        // `hasPendingWrites` and the final state of the document).\r\n        return (oldDoc.hasLocalMutations &&\r\n            newDoc.hasCommittedMutations &&\r\n            !newDoc.hasLocalMutations);\r\n    };\r\n    /**\r\n     * Updates the view with the given ViewDocumentChanges and optionally updates\r\n     * limbo docs and sync state from the provided target change.\r\n     * @param docChanges - The set of changes to make to the view's docs.\r\n     * @param updateLimboDocuments - Whether to update limbo documents based on\r\n     *        this change.\r\n     * @param targetChange - A target change to apply for computing limbo docs and\r\n     *        sync state.\r\n     * @returns A new ViewChange with the given docs, changes, and sync state.\r\n     */\r\n    // PORTING NOTE: The iOS/Android clients always compute limbo document changes.\r\n    View.prototype.applyChanges = function (docChanges, updateLimboDocuments, targetChange) {\r\n        var _this = this;\r\n        var oldDocs = this.documentSet;\r\n        this.documentSet = docChanges.documentSet;\r\n        this.mutatedKeys = docChanges.mutatedKeys;\r\n        // Sort changes based on type and query comparator\r\n        var changes = docChanges.changeSet.getChanges();\r\n        changes.sort(function (c1, c2) {\r\n            return (compareChangeType(c1.type, c2.type) ||\r\n                _this.docComparator(c1.doc, c2.doc));\r\n        });\r\n        this.applyTargetChange(targetChange);\r\n        var limboChanges = updateLimboDocuments\r\n            ? this.updateLimboDocuments()\r\n            : [];\r\n        var synced = this.limboDocuments.size === 0 && this.current;\r\n        var newSyncState = synced ? 1 /* Synced */ : 0 /* Local */;\r\n        var syncStateChanged = newSyncState !== this.syncState;\r\n        this.syncState = newSyncState;\r\n        if (changes.length === 0 && !syncStateChanged) {\r\n            // no changes\r\n            return { limboChanges: limboChanges };\r\n        }\r\n        else {\r\n            var snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, docChanges.mutatedKeys, newSyncState === 0 /* Local */, syncStateChanged, \r\n            /* excludesMetadataChanges= */ false);\r\n            return {\r\n                snapshot: snap,\r\n                limboChanges: limboChanges\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * Applies an OnlineState change to the view, potentially generating a\r\n     * ViewChange if the view's syncState changes as a result.\r\n     */\r\n    View.prototype.applyOnlineStateChange = function (onlineState) {\r\n        if (this.current && onlineState === \"Offline\" /* Offline */) {\r\n            // If we're offline, set `current` to false and then call applyChanges()\r\n            // to refresh our syncState and generate a ViewChange as appropriate. We\r\n            // are guaranteed to get a new TargetChange that sets `current` back to\r\n            // true once the client is back online.\r\n            this.current = false;\r\n            return this.applyChanges({\r\n                documentSet: this.documentSet,\r\n                changeSet: new DocumentChangeSet(),\r\n                mutatedKeys: this.mutatedKeys,\r\n                needsRefill: false\r\n            }, \r\n            /* updateLimboDocuments= */ false);\r\n        }\r\n        else {\r\n            // No effect, just return a no-op ViewChange.\r\n            return { limboChanges: [] };\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether the doc for the given key should be in limbo.\r\n     */\r\n    View.prototype.shouldBeInLimbo = function (key) {\r\n        // If the remote end says it's part of this query, it's not in limbo.\r\n        if (this._syncedDocuments.has(key)) {\r\n            return false;\r\n        }\r\n        // The local store doesn't think it's a result, so it shouldn't be in limbo.\r\n        if (!this.documentSet.has(key)) {\r\n            return false;\r\n        }\r\n        // If there are local changes to the doc, they might explain why the server\r\n        // doesn't know that it's part of the query. So don't put it in limbo.\r\n        // TODO(klimt): Ideally, we would only consider changes that might actually\r\n        // affect this specific query.\r\n        if (this.documentSet.get(key).hasLocalMutations) {\r\n            return false;\r\n        }\r\n        // Everything else is in limbo.\r\n        return true;\r\n    };\r\n    /**\r\n     * Updates syncedDocuments, current, and limbo docs based on the given change.\r\n     * Returns the list of changes to which docs are in limbo.\r\n     */\r\n    View.prototype.applyTargetChange = function (targetChange) {\r\n        var _this = this;\r\n        if (targetChange) {\r\n            targetChange.addedDocuments.forEach(function (key) { return (_this._syncedDocuments = _this._syncedDocuments.add(key)); });\r\n            targetChange.modifiedDocuments.forEach(function (key) {\r\n            });\r\n            targetChange.removedDocuments.forEach(function (key) { return (_this._syncedDocuments = _this._syncedDocuments.delete(key)); });\r\n            this.current = targetChange.current;\r\n        }\r\n    };\r\n    View.prototype.updateLimboDocuments = function () {\r\n        var _this = this;\r\n        // We can only determine limbo documents when we're in-sync with the server.\r\n        if (!this.current) {\r\n            return [];\r\n        }\r\n        // TODO(klimt): Do this incrementally so that it's not quadratic when\r\n        // updating many documents.\r\n        var oldLimboDocuments = this.limboDocuments;\r\n        this.limboDocuments = documentKeySet();\r\n        this.documentSet.forEach(function (doc) {\r\n            if (_this.shouldBeInLimbo(doc.key)) {\r\n                _this.limboDocuments = _this.limboDocuments.add(doc.key);\r\n            }\r\n        });\r\n        // Diff the new limbo docs with the old limbo docs.\r\n        var changes = [];\r\n        oldLimboDocuments.forEach(function (key) {\r\n            if (!_this.limboDocuments.has(key)) {\r\n                changes.push(new RemovedLimboDocument(key));\r\n            }\r\n        });\r\n        this.limboDocuments.forEach(function (key) {\r\n            if (!oldLimboDocuments.has(key)) {\r\n                changes.push(new AddedLimboDocument(key));\r\n            }\r\n        });\r\n        return changes;\r\n    };\r\n    /**\r\n     * Update the in-memory state of the current view with the state read from\r\n     * persistence.\r\n     *\r\n     * We update the query view whenever a client's primary status changes:\r\n     * - When a client transitions from primary to secondary, it can miss\r\n     *   LocalStorage updates and its query views may temporarily not be\r\n     *   synchronized with the state on disk.\r\n     * - For secondary to primary transitions, the client needs to update the list\r\n     *   of `syncedDocuments` since secondary clients update their query views\r\n     *   based purely on synthesized RemoteEvents.\r\n     *\r\n     * @param queryResult.documents - The documents that match the query according\r\n     * to the LocalStore.\r\n     * @param queryResult.remoteKeys - The keys of the documents that match the\r\n     * query according to the backend.\r\n     *\r\n     * @returns The ViewChange that resulted from this synchronization.\r\n     */\r\n    // PORTING NOTE: Multi-tab only.\r\n    View.prototype.synchronizeWithPersistedState = function (queryResult) {\r\n        this._syncedDocuments = queryResult.remoteKeys;\r\n        this.limboDocuments = documentKeySet();\r\n        var docChanges = this.computeDocChanges(queryResult.documents);\r\n        return this.applyChanges(docChanges, /*updateLimboDocuments=*/ true);\r\n    };\r\n    /**\r\n     * Returns a view snapshot as if this query was just listened to. Contains\r\n     * a document add for every existing document and the `fromCache` and\r\n     * `hasPendingWrites` status of the already established view.\r\n     */\r\n    // PORTING NOTE: Multi-tab only.\r\n    View.prototype.computeInitialSnapshot = function () {\r\n        return ViewSnapshot.fromInitialDocuments(this.query, this.documentSet, this.mutatedKeys, this.syncState === 0 /* Local */);\r\n    };\r\n    return View;\r\n}());\r\nfunction compareChangeType(c1, c2) {\r\n    var order = function (change) {\r\n        switch (change) {\r\n            case 0 /* Added */:\r\n                return 1;\r\n            case 2 /* Modified */:\r\n                return 2;\r\n            case 3 /* Metadata */:\r\n                // A metadata change is converted to a modified change at the public\r\n                // api layer.  Since we sort by document key and then change type,\r\n                // metadata and modified changes must be sorted equivalently.\r\n                return 2;\r\n            case 1 /* Removed */:\r\n                return 0;\r\n            default:\r\n                return fail();\r\n        }\r\n    };\r\n    return order(c1) - order(c2);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$3 = 'SyncEngine';\r\n/**\r\n * QueryView contains all of the data that SyncEngine needs to keep track of for\r\n * a particular query.\r\n */\r\nvar QueryView = /** @class */ (function () {\r\n    function QueryView(\r\n    /**\r\n     * The query itself.\r\n     */\r\n    query, \r\n    /**\r\n     * The target number created by the client that is used in the watch\r\n     * stream to identify this query.\r\n     */\r\n    targetId, \r\n    /**\r\n     * The view is responsible for computing the final merged truth of what\r\n     * docs are in the query. It gets notified of local and remote changes,\r\n     * and applies the query filters and limits to determine the most correct\r\n     * possible results.\r\n     */\r\n    view) {\r\n        this.query = query;\r\n        this.targetId = targetId;\r\n        this.view = view;\r\n    }\r\n    return QueryView;\r\n}());\r\n/** Tracks a limbo resolution. */\r\nvar LimboResolution = /** @class */ (function () {\r\n    function LimboResolution(key) {\r\n        this.key = key;\r\n        /**\r\n         * Set to true once we've received a document. This is used in\r\n         * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to\r\n         * decide whether it needs to manufacture a delete event for the target once\r\n         * the target is CURRENT.\r\n         */\r\n        this.receivedDocument = false;\r\n    }\r\n    return LimboResolution;\r\n}());\r\n/**\r\n * An implementation of `SyncEngine` coordinating with other parts of SDK.\r\n *\r\n * The parts of SyncEngine that act as a callback to RemoteStore need to be\r\n * registered individually. This is done in `syncEngineWrite()` and\r\n * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods\r\n * serve as entry points to RemoteStore's functionality.\r\n *\r\n * Note: some field defined in this class might have public access level, but\r\n * the class is not exported so they are only accessible from this module.\r\n * This is useful to implement optional features (like bundles) in free\r\n * functions, such that they are tree-shakeable.\r\n */\r\nvar SyncEngineImpl = /** @class */ (function () {\r\n    function SyncEngineImpl(localStore, remoteStore, eventManager, \r\n    // PORTING NOTE: Manages state synchronization in multi-tab environments.\r\n    sharedClientState, currentUser, maxConcurrentLimboResolutions) {\r\n        this.localStore = localStore;\r\n        this.remoteStore = remoteStore;\r\n        this.eventManager = eventManager;\r\n        this.sharedClientState = sharedClientState;\r\n        this.currentUser = currentUser;\r\n        this.maxConcurrentLimboResolutions = maxConcurrentLimboResolutions;\r\n        this.syncEngineListener = {};\r\n        this.queryViewsByQuery = new ObjectMap(function (q) { return canonifyQuery(q); }, queryEquals);\r\n        this.queriesByTarget = new Map();\r\n        /**\r\n         * The keys of documents that are in limbo for which we haven't yet started a\r\n         * limbo resolution query. The strings in this set are the result of calling\r\n         * `key.path.canonicalString()` where `key` is a `DocumentKey` object.\r\n         *\r\n         * The `Set` type was chosen because it provides efficient lookup and removal\r\n         * of arbitrary elements and it also maintains insertion order, providing the\r\n         * desired queue-like FIFO semantics.\r\n         */\r\n        this.enqueuedLimboResolutions = new Set();\r\n        /**\r\n         * Keeps track of the target ID for each document that is in limbo with an\r\n         * active target.\r\n         */\r\n        this.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);\r\n        /**\r\n         * Keeps track of the information about an active limbo resolution for each\r\n         * active target ID that was started for the purpose of limbo resolution.\r\n         */\r\n        this.activeLimboResolutionsByTarget = new Map();\r\n        this.limboDocumentRefs = new ReferenceSet();\r\n        /** Stores user completion handlers, indexed by User and BatchId. */\r\n        this.mutationUserCallbacks = {};\r\n        /** Stores user callbacks waiting for all pending writes to be acknowledged. */\r\n        this.pendingWritesCallbacks = new Map();\r\n        this.limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();\r\n        this.onlineState = \"Unknown\" /* Unknown */;\r\n        // The primary state is set to `true` or `false` immediately after Firestore\r\n        // startup. In the interim, a client should only be considered primary if\r\n        // `isPrimary` is true.\r\n        this._isPrimaryClient = undefined;\r\n    }\r\n    Object.defineProperty(SyncEngineImpl.prototype, \"isPrimaryClient\", {\r\n        get: function () {\r\n            return this._isPrimaryClient === true;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return SyncEngineImpl;\r\n}());\r\nfunction newSyncEngine(localStore, remoteStore, eventManager, \r\n// PORTING NOTE: Manages state synchronization in multi-tab environments.\r\nsharedClientState, currentUser, maxConcurrentLimboResolutions, isPrimary) {\r\n    var syncEngine = new SyncEngineImpl(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions);\r\n    if (isPrimary) {\r\n        syncEngine._isPrimaryClient = true;\r\n    }\r\n    return syncEngine;\r\n}\r\n/**\r\n * Initiates the new listen, resolves promise when listen enqueued to the\r\n * server. All the subsequent view snapshots or errors are sent to the\r\n * subscribed handlers. Returns the initial snapshot.\r\n */\r\nfunction syncEngineListen(syncEngine, query) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, targetId, viewSnapshot, queryView, targetData, status_1;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = ensureWatchCallbacks(syncEngine);\r\n                    queryView = syncEngineImpl.queryViewsByQuery.get(query);\r\n                    if (!queryView) return [3 /*break*/, 1];\r\n                    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view\r\n                    // already exists when EventManager calls us for the first time. This\r\n                    // happens when the primary tab is already listening to this query on\r\n                    // behalf of another tab and the user of the primary also starts listening\r\n                    // to the query. EventManager will not have an assigned target ID in this\r\n                    // case and calls `listen` to obtain this ID.\r\n                    targetId = queryView.targetId;\r\n                    syncEngineImpl.sharedClientState.addLocalQueryTarget(targetId);\r\n                    viewSnapshot = queryView.view.computeInitialSnapshot();\r\n                    return [3 /*break*/, 4];\r\n                case 1: return [4 /*yield*/, localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(query))];\r\n                case 2:\r\n                    targetData = _d.sent();\r\n                    status_1 = syncEngineImpl.sharedClientState.addLocalQueryTarget(targetData.targetId);\r\n                    targetId = targetData.targetId;\r\n                    return [4 /*yield*/, initializeViewAndComputeSnapshot(syncEngineImpl, query, targetId, status_1 === 'current')];\r\n                case 3:\r\n                    viewSnapshot = _d.sent();\r\n                    if (syncEngineImpl.isPrimaryClient) {\r\n                        remoteStoreListen(syncEngineImpl.remoteStore, targetData);\r\n                    }\r\n                    _d.label = 4;\r\n                case 4: return [2 /*return*/, viewSnapshot];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Registers a view for a previously unknown query and computes its initial\r\n * snapshot.\r\n */\r\nfunction initializeViewAndComputeSnapshot(syncEngineImpl, query, targetId, current) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var queryResult, view, viewDocChanges, synthesizedTargetChange, viewChange, data;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    // PORTING NOTE: On Web only, we inject the code that registers new Limbo\r\n                    // targets based on view changes. This allows us to only depend on Limbo\r\n                    // changes when user code includes queries.\r\n                    syncEngineImpl.applyDocChanges = function (queryView, changes, remoteEvent) { return applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent); };\r\n                    return [4 /*yield*/, localStoreExecuteQuery(syncEngineImpl.localStore, query, \r\n                        /* usePreviousResults= */ true)];\r\n                case 1:\r\n                    queryResult = _d.sent();\r\n                    view = new View(query, queryResult.remoteKeys);\r\n                    viewDocChanges = view.computeDocChanges(queryResult.documents);\r\n                    synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current && syncEngineImpl.onlineState !== \"Offline\" /* Offline */);\r\n                    viewChange = view.applyChanges(viewDocChanges, \r\n                    /* updateLimboDocuments= */ syncEngineImpl.isPrimaryClient, synthesizedTargetChange);\r\n                    updateTrackedLimbos(syncEngineImpl, targetId, viewChange.limboChanges);\r\n                    data = new QueryView(query, targetId, view);\r\n                    syncEngineImpl.queryViewsByQuery.set(query, data);\r\n                    if (syncEngineImpl.queriesByTarget.has(targetId)) {\r\n                        syncEngineImpl.queriesByTarget.get(targetId).push(query);\r\n                    }\r\n                    else {\r\n                        syncEngineImpl.queriesByTarget.set(targetId, [query]);\r\n                    }\r\n                    return [2 /*return*/, viewChange.snapshot];\r\n            }\r\n        });\r\n    });\r\n}\r\n/** Stops listening to the query. */\r\nfunction syncEngineUnlisten(syncEngine, query) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, queryView, queries, targetRemainsActive;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    queryView = syncEngineImpl.queryViewsByQuery.get(query);\r\n                    queries = syncEngineImpl.queriesByTarget.get(queryView.targetId);\r\n                    if (queries.length > 1) {\r\n                        syncEngineImpl.queriesByTarget.set(queryView.targetId, queries.filter(function (q) { return !queryEquals(q, query); }));\r\n                        syncEngineImpl.queryViewsByQuery.delete(query);\r\n                        return [2 /*return*/];\r\n                    }\r\n                    if (!syncEngineImpl.isPrimaryClient) return [3 /*break*/, 3];\r\n                    // We need to remove the local query target first to allow us to verify\r\n                    // whether any other client is still interested in this target.\r\n                    syncEngineImpl.sharedClientState.removeLocalQueryTarget(queryView.targetId);\r\n                    targetRemainsActive = syncEngineImpl.sharedClientState.isActiveQueryTarget(queryView.targetId);\r\n                    if (!!targetRemainsActive) return [3 /*break*/, 2];\r\n                    return [4 /*yield*/, localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId, \r\n                        /*keepPersistedTargetData=*/ false)\r\n                            .then(function () {\r\n                            syncEngineImpl.sharedClientState.clearQueryState(queryView.targetId);\r\n                            remoteStoreUnlisten(syncEngineImpl.remoteStore, queryView.targetId);\r\n                            removeAndCleanupTarget(syncEngineImpl, queryView.targetId);\r\n                        })\r\n                            .catch(ignoreIfPrimaryLeaseLoss)];\r\n                case 1:\r\n                    _d.sent();\r\n                    _d.label = 2;\r\n                case 2: return [3 /*break*/, 5];\r\n                case 3:\r\n                    removeAndCleanupTarget(syncEngineImpl, queryView.targetId);\r\n                    return [4 /*yield*/, localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId, \r\n                        /*keepPersistedTargetData=*/ true)];\r\n                case 4:\r\n                    _d.sent();\r\n                    _d.label = 5;\r\n                case 5: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Initiates the write of local mutation batch which involves adding the\r\n * writes to the mutation queue, notifying the remote store about new\r\n * mutations and raising events for any changes this write caused.\r\n *\r\n * The promise returned by this call is resolved when the above steps\r\n * have completed, *not* when the write was acked by the backend. The\r\n * userCallback is resolved once the write was acked/rejected by the\r\n * backend (or failed locally for any other reason).\r\n */\r\nfunction syncEngineWrite(syncEngine, batch, userCallback) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, result, e_8, error;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = syncEngineEnsureWriteCallbacks(syncEngine);\r\n                    _d.label = 1;\r\n                case 1:\r\n                    _d.trys.push([1, 5, , 6]);\r\n                    return [4 /*yield*/, localStoreWriteLocally(syncEngineImpl.localStore, batch)];\r\n                case 2:\r\n                    result = _d.sent();\r\n                    syncEngineImpl.sharedClientState.addPendingMutation(result.batchId);\r\n                    addMutationCallback(syncEngineImpl, result.batchId, userCallback);\r\n                    return [4 /*yield*/, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.changes)];\r\n                case 3:\r\n                    _d.sent();\r\n                    return [4 /*yield*/, fillWritePipeline(syncEngineImpl.remoteStore)];\r\n                case 4:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 5:\r\n                    e_8 = _d.sent();\r\n                    error = wrapInUserErrorIfRecoverable(e_8, \"Failed to persist write\");\r\n                    userCallback.reject(error);\r\n                    return [3 /*break*/, 6];\r\n                case 6: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Applies one remote event to the sync engine, notifying any views of the\r\n * changes, and releasing any pending mutation batches that would become\r\n * visible because of the snapshot version the remote event contains.\r\n */\r\nfunction syncEngineApplyRemoteEvent(syncEngine, remoteEvent) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, changes, error_2;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    _d.label = 1;\r\n                case 1:\r\n                    _d.trys.push([1, 4, , 6]);\r\n                    return [4 /*yield*/, localStoreApplyRemoteEventToLocalCache(syncEngineImpl.localStore, remoteEvent)];\r\n                case 2:\r\n                    changes = _d.sent();\r\n                    // Update `receivedDocument` as appropriate for any limbo targets.\r\n                    remoteEvent.targetChanges.forEach(function (targetChange, targetId) {\r\n                        var limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\r\n                        if (limboResolution) {\r\n                            // Since this is a limbo resolution lookup, it's for a single document\r\n                            // and it could be added, modified, or removed, but not a combination.\r\n                            hardAssert(targetChange.addedDocuments.size +\r\n                                targetChange.modifiedDocuments.size +\r\n                                targetChange.removedDocuments.size <=\r\n                                1);\r\n                            if (targetChange.addedDocuments.size > 0) {\r\n                                limboResolution.receivedDocument = true;\r\n                            }\r\n                            else if (targetChange.modifiedDocuments.size > 0) {\r\n                                hardAssert(limboResolution.receivedDocument);\r\n                            }\r\n                            else if (targetChange.removedDocuments.size > 0) {\r\n                                hardAssert(limboResolution.receivedDocument);\r\n                                limboResolution.receivedDocument = false;\r\n                            }\r\n                            else ;\r\n                        }\r\n                    });\r\n                    return [4 /*yield*/, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, remoteEvent)];\r\n                case 3:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 4:\r\n                    error_2 = _d.sent();\r\n                    return [4 /*yield*/, ignoreIfPrimaryLeaseLoss(error_2)];\r\n                case 5:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 6: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Applies an OnlineState change to the sync engine and notifies any views of\r\n * the change.\r\n */\r\nfunction syncEngineApplyOnlineStateChange(syncEngine, onlineState, source) {\r\n    var syncEngineImpl = debugCast(syncEngine);\r\n    // If we are the secondary client, we explicitly ignore the remote store's\r\n    // online state (the local client may go offline, even though the primary\r\n    // tab remains online) and only apply the primary tab's online state from\r\n    // SharedClientState.\r\n    if ((syncEngineImpl.isPrimaryClient &&\r\n        source === 0 /* RemoteStore */) ||\r\n        (!syncEngineImpl.isPrimaryClient &&\r\n            source === 1 /* SharedClientState */)) {\r\n        var newViewSnapshots_1 = [];\r\n        syncEngineImpl.queryViewsByQuery.forEach(function (query, queryView) {\r\n            var viewChange = queryView.view.applyOnlineStateChange(onlineState);\r\n            if (viewChange.snapshot) {\r\n                newViewSnapshots_1.push(viewChange.snapshot);\r\n            }\r\n        });\r\n        eventManagerOnOnlineStateChange(syncEngineImpl.eventManager, onlineState);\r\n        if (newViewSnapshots_1.length) {\r\n            syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots_1);\r\n        }\r\n        syncEngineImpl.onlineState = onlineState;\r\n        if (syncEngineImpl.isPrimaryClient) {\r\n            syncEngineImpl.sharedClientState.setOnlineState(onlineState);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Rejects the listen for the given targetID. This can be triggered by the\r\n * backend for any active target.\r\n *\r\n * @param syncEngine - The sync engine implementation.\r\n * @param targetId - The targetID corresponds to one previously initiated by the\r\n * user as part of TargetData passed to listen() on RemoteStore.\r\n * @param err - A description of the condition that has forced the rejection.\r\n * Nearly always this will be an indication that the user is no longer\r\n * authorized to see the data matching the target.\r\n */\r\nfunction syncEngineRejectListen(syncEngine, targetId, err) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, limboResolution, limboKey, documentUpdates, resolvedLimboDocuments, event_2;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    // PORTING NOTE: Multi-tab only.\r\n                    syncEngineImpl.sharedClientState.updateQueryState(targetId, 'rejected', err);\r\n                    limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\r\n                    limboKey = limboResolution && limboResolution.key;\r\n                    if (!limboKey) return [3 /*break*/, 2];\r\n                    documentUpdates = new SortedMap(DocumentKey.comparator);\r\n                    documentUpdates = documentUpdates.insert(limboKey, MutableDocument.newNoDocument(limboKey, SnapshotVersion.min()));\r\n                    resolvedLimboDocuments = documentKeySet().add(limboKey);\r\n                    event_2 = new RemoteEvent(SnapshotVersion.min(), \r\n                    /* targetChanges= */ new Map(), \r\n                    /* targetMismatches= */ new SortedSet(primitiveComparator), documentUpdates, resolvedLimboDocuments);\r\n                    return [4 /*yield*/, syncEngineApplyRemoteEvent(syncEngineImpl, event_2)];\r\n                case 1:\r\n                    _d.sent();\r\n                    // Since this query failed, we won't want to manually unlisten to it.\r\n                    // We only remove it from bookkeeping after we successfully applied the\r\n                    // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to\r\n                    // this query when the RemoteStore restarts the Watch stream, which should\r\n                    // re-trigger the target failure.\r\n                    syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(limboKey);\r\n                    syncEngineImpl.activeLimboResolutionsByTarget.delete(targetId);\r\n                    pumpEnqueuedLimboResolutions(syncEngineImpl);\r\n                    return [3 /*break*/, 4];\r\n                case 2: return [4 /*yield*/, localStoreReleaseTarget(syncEngineImpl.localStore, targetId, \r\n                    /* keepPersistedTargetData */ false)\r\n                        .then(function () { return removeAndCleanupTarget(syncEngineImpl, targetId, err); })\r\n                        .catch(ignoreIfPrimaryLeaseLoss)];\r\n                case 3:\r\n                    _d.sent();\r\n                    _d.label = 4;\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction syncEngineApplySuccessfulWrite(syncEngine, mutationBatchResult) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, batchId, changes, error_3;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    batchId = mutationBatchResult.batch.batchId;\r\n                    _d.label = 1;\r\n                case 1:\r\n                    _d.trys.push([1, 4, , 6]);\r\n                    return [4 /*yield*/, localStoreAcknowledgeBatch(syncEngineImpl.localStore, mutationBatchResult)];\r\n                case 2:\r\n                    changes = _d.sent();\r\n                    // The local store may or may not be able to apply the write result and\r\n                    // raise events immediately (depending on whether the watcher is caught\r\n                    // up), so we raise user callbacks first so that they consistently happen\r\n                    // before listen events.\r\n                    processUserCallback(syncEngineImpl, batchId, /*error=*/ null);\r\n                    triggerPendingWritesCallbacks(syncEngineImpl, batchId);\r\n                    syncEngineImpl.sharedClientState.updateMutationState(batchId, 'acknowledged');\r\n                    return [4 /*yield*/, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes)];\r\n                case 3:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 4:\r\n                    error_3 = _d.sent();\r\n                    return [4 /*yield*/, ignoreIfPrimaryLeaseLoss(error_3)];\r\n                case 5:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 6: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction syncEngineRejectFailedWrite(syncEngine, batchId, error) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, changes, error_4;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    _d.label = 1;\r\n                case 1:\r\n                    _d.trys.push([1, 4, , 6]);\r\n                    return [4 /*yield*/, localStoreRejectBatch(syncEngineImpl.localStore, batchId)];\r\n                case 2:\r\n                    changes = _d.sent();\r\n                    // The local store may or may not be able to apply the write result and\r\n                    // raise events immediately (depending on whether the watcher is caught up),\r\n                    // so we raise user callbacks first so that they consistently happen before\r\n                    // listen events.\r\n                    processUserCallback(syncEngineImpl, batchId, error);\r\n                    triggerPendingWritesCallbacks(syncEngineImpl, batchId);\r\n                    syncEngineImpl.sharedClientState.updateMutationState(batchId, 'rejected', error);\r\n                    return [4 /*yield*/, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes)];\r\n                case 3:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 4:\r\n                    error_4 = _d.sent();\r\n                    return [4 /*yield*/, ignoreIfPrimaryLeaseLoss(error_4)];\r\n                case 5:\r\n                    _d.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 6: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Registers a user callback that resolves when all pending mutations at the moment of calling\r\n * are acknowledged .\r\n */\r\nfunction syncEngineRegisterPendingWritesCallback(syncEngine, callback) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, highestBatchId, callbacks, e_9, firestoreError;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    if (!canUseNetwork(syncEngineImpl.remoteStore)) {\r\n                        logDebug(LOG_TAG$3, 'The network is disabled. The task returned by ' +\r\n                            \"'awaitPendingWrites()' will not complete until the network is enabled.\");\r\n                    }\r\n                    _d.label = 1;\r\n                case 1:\r\n                    _d.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, localStoreGetHighestUnacknowledgedBatchId(syncEngineImpl.localStore)];\r\n                case 2:\r\n                    highestBatchId = _d.sent();\r\n                    if (highestBatchId === BATCHID_UNKNOWN) {\r\n                        // Trigger the callback right away if there is no pending writes at the moment.\r\n                        callback.resolve();\r\n                        return [2 /*return*/];\r\n                    }\r\n                    callbacks = syncEngineImpl.pendingWritesCallbacks.get(highestBatchId) || [];\r\n                    callbacks.push(callback);\r\n                    syncEngineImpl.pendingWritesCallbacks.set(highestBatchId, callbacks);\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_9 = _d.sent();\r\n                    firestoreError = wrapInUserErrorIfRecoverable(e_9, 'Initialization of waitForPendingWrites() operation failed');\r\n                    callback.reject(firestoreError);\r\n                    return [3 /*break*/, 4];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,\r\n * if there are any.\r\n */\r\nfunction triggerPendingWritesCallbacks(syncEngineImpl, batchId) {\r\n    (syncEngineImpl.pendingWritesCallbacks.get(batchId) || []).forEach(function (callback) {\r\n        callback.resolve();\r\n    });\r\n    syncEngineImpl.pendingWritesCallbacks.delete(batchId);\r\n}\r\n/** Reject all outstanding callbacks waiting for pending writes to complete. */\r\nfunction rejectOutstandingPendingWritesCallbacks(syncEngineImpl, errorMessage) {\r\n    syncEngineImpl.pendingWritesCallbacks.forEach(function (callbacks) {\r\n        callbacks.forEach(function (callback) {\r\n            callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));\r\n        });\r\n    });\r\n    syncEngineImpl.pendingWritesCallbacks.clear();\r\n}\r\nfunction addMutationCallback(syncEngineImpl, batchId, callback) {\r\n    var newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];\r\n    if (!newCallbacks) {\r\n        newCallbacks = new SortedMap(primitiveComparator);\r\n    }\r\n    newCallbacks = newCallbacks.insert(batchId, callback);\r\n    syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;\r\n}\r\n/**\r\n * Resolves or rejects the user callback for the given batch and then discards\r\n * it.\r\n */\r\nfunction processUserCallback(syncEngine, batchId, error) {\r\n    var syncEngineImpl = debugCast(syncEngine);\r\n    var newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];\r\n    // NOTE: Mutations restored from persistence won't have callbacks, so it's\r\n    // okay for there to be no callback for this ID.\r\n    if (newCallbacks) {\r\n        var callback = newCallbacks.get(batchId);\r\n        if (callback) {\r\n            if (error) {\r\n                callback.reject(error);\r\n            }\r\n            else {\r\n                callback.resolve();\r\n            }\r\n            newCallbacks = newCallbacks.remove(batchId);\r\n        }\r\n        syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;\r\n    }\r\n}\r\nfunction removeAndCleanupTarget(syncEngineImpl, targetId, error) {\r\n    if (error === void 0) { error = null; }\r\n    syncEngineImpl.sharedClientState.removeLocalQueryTarget(targetId);\r\n    for (var _i = 0, _d = syncEngineImpl.queriesByTarget.get(targetId); _i < _d.length; _i++) {\r\n        var query_2 = _d[_i];\r\n        syncEngineImpl.queryViewsByQuery.delete(query_2);\r\n        if (error) {\r\n            syncEngineImpl.syncEngineListener.onWatchError(query_2, error);\r\n        }\r\n    }\r\n    syncEngineImpl.queriesByTarget.delete(targetId);\r\n    if (syncEngineImpl.isPrimaryClient) {\r\n        var limboKeys = syncEngineImpl.limboDocumentRefs.removeReferencesForId(targetId);\r\n        limboKeys.forEach(function (limboKey) {\r\n            var isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboKey);\r\n            if (!isReferenced) {\r\n                // We removed the last reference for this key\r\n                removeLimboTarget(syncEngineImpl, limboKey);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction removeLimboTarget(syncEngineImpl, key) {\r\n    syncEngineImpl.enqueuedLimboResolutions.delete(key.path.canonicalString());\r\n    // It's possible that the target already got removed because the query failed. In that case,\r\n    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.\r\n    var limboTargetId = syncEngineImpl.activeLimboTargetsByKey.get(key);\r\n    if (limboTargetId === null) {\r\n        // This target already got removed, because the query failed.\r\n        return;\r\n    }\r\n    remoteStoreUnlisten(syncEngineImpl.remoteStore, limboTargetId);\r\n    syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(key);\r\n    syncEngineImpl.activeLimboResolutionsByTarget.delete(limboTargetId);\r\n    pumpEnqueuedLimboResolutions(syncEngineImpl);\r\n}\r\nfunction updateTrackedLimbos(syncEngineImpl, targetId, limboChanges) {\r\n    for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {\r\n        var limboChange = limboChanges_1[_i];\r\n        if (limboChange instanceof AddedLimboDocument) {\r\n            syncEngineImpl.limboDocumentRefs.addReference(limboChange.key, targetId);\r\n            trackLimboChange(syncEngineImpl, limboChange);\r\n        }\r\n        else if (limboChange instanceof RemovedLimboDocument) {\r\n            logDebug(LOG_TAG$3, 'Document no longer in limbo: ' + limboChange.key);\r\n            syncEngineImpl.limboDocumentRefs.removeReference(limboChange.key, targetId);\r\n            var isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboChange.key);\r\n            if (!isReferenced) {\r\n                // We removed the last reference for this key\r\n                removeLimboTarget(syncEngineImpl, limboChange.key);\r\n            }\r\n        }\r\n        else {\r\n            fail();\r\n        }\r\n    }\r\n}\r\nfunction trackLimboChange(syncEngineImpl, limboChange) {\r\n    var key = limboChange.key;\r\n    var keyString = key.path.canonicalString();\r\n    if (!syncEngineImpl.activeLimboTargetsByKey.get(key) &&\r\n        !syncEngineImpl.enqueuedLimboResolutions.has(keyString)) {\r\n        logDebug(LOG_TAG$3, 'New document in limbo: ' + key);\r\n        syncEngineImpl.enqueuedLimboResolutions.add(keyString);\r\n        pumpEnqueuedLimboResolutions(syncEngineImpl);\r\n    }\r\n}\r\n/**\r\n * Starts listens for documents in limbo that are enqueued for resolution,\r\n * subject to a maximum number of concurrent resolutions.\r\n *\r\n * Without bounding the number of concurrent resolutions, the server can fail\r\n * with \"resource exhausted\" errors which can lead to pathological client\r\n * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.\r\n */\r\nfunction pumpEnqueuedLimboResolutions(syncEngineImpl) {\r\n    while (syncEngineImpl.enqueuedLimboResolutions.size > 0 &&\r\n        syncEngineImpl.activeLimboTargetsByKey.size <\r\n            syncEngineImpl.maxConcurrentLimboResolutions) {\r\n        var keyString = syncEngineImpl.enqueuedLimboResolutions.values().next()\r\n            .value;\r\n        syncEngineImpl.enqueuedLimboResolutions.delete(keyString);\r\n        var key = new DocumentKey(ResourcePath.fromString(keyString));\r\n        var limboTargetId = syncEngineImpl.limboTargetIdGenerator.next();\r\n        syncEngineImpl.activeLimboResolutionsByTarget.set(limboTargetId, new LimboResolution(key));\r\n        syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.insert(key, limboTargetId);\r\n        remoteStoreListen(syncEngineImpl.remoteStore, new TargetData(queryToTarget(newQueryForPath(key.path)), limboTargetId, 2 /* LimboResolution */, ListenSequence.INVALID));\r\n    }\r\n}\r\nfunction syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, changes, remoteEvent) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, newSnaps, docChangesInAllViews, queriesProcessed;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    newSnaps = [];\r\n                    docChangesInAllViews = [];\r\n                    queriesProcessed = [];\r\n                    if (syncEngineImpl.queryViewsByQuery.isEmpty()) {\r\n                        // Return early since `onWatchChange()` might not have been assigned yet.\r\n                        return [2 /*return*/];\r\n                    }\r\n                    syncEngineImpl.queryViewsByQuery.forEach(function (_, queryView) {\r\n                        queriesProcessed.push(syncEngineImpl\r\n                            .applyDocChanges(queryView, changes, remoteEvent)\r\n                            .then(function (viewSnapshot) {\r\n                            if (viewSnapshot) {\r\n                                if (syncEngineImpl.isPrimaryClient) {\r\n                                    syncEngineImpl.sharedClientState.updateQueryState(queryView.targetId, viewSnapshot.fromCache ? 'not-current' : 'current');\r\n                                }\r\n                                newSnaps.push(viewSnapshot);\r\n                                var docChanges = LocalViewChanges.fromSnapshot(queryView.targetId, viewSnapshot);\r\n                                docChangesInAllViews.push(docChanges);\r\n                            }\r\n                        }));\r\n                    });\r\n                    return [4 /*yield*/, Promise.all(queriesProcessed)];\r\n                case 1:\r\n                    _d.sent();\r\n                    syncEngineImpl.syncEngineListener.onWatchChange(newSnaps);\r\n                    return [4 /*yield*/, localStoreNotifyLocalViewChanges(syncEngineImpl.localStore, docChangesInAllViews)];\r\n                case 2:\r\n                    _d.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var viewDocChanges, targetChange, viewChange;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    viewDocChanges = queryView.view.computeDocChanges(changes);\r\n                    if (!viewDocChanges.needsRefill) return [3 /*break*/, 2];\r\n                    return [4 /*yield*/, localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query, \r\n                        /* usePreviousResults= */ false).then(function (_d) {\r\n                            var documents = _d.documents;\r\n                            return queryView.view.computeDocChanges(documents, viewDocChanges);\r\n                        })];\r\n                case 1:\r\n                    // The query has a limit and some docs were removed, so we need\r\n                    // to re-run the query against the local store to make sure we\r\n                    // didn't lose any good docs that had been past the limit.\r\n                    viewDocChanges = _d.sent();\r\n                    _d.label = 2;\r\n                case 2:\r\n                    targetChange = remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);\r\n                    viewChange = queryView.view.applyChanges(viewDocChanges, \r\n                    /* updateLimboDocuments= */ syncEngineImpl.isPrimaryClient, targetChange);\r\n                    updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewChange.limboChanges);\r\n                    return [2 /*return*/, viewChange.snapshot];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction syncEngineHandleCredentialChange(syncEngine, user) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, userChanged, result;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    userChanged = !syncEngineImpl.currentUser.isEqual(user);\r\n                    if (!userChanged) return [3 /*break*/, 3];\r\n                    logDebug(LOG_TAG$3, 'User change. New user:', user.toKey());\r\n                    return [4 /*yield*/, localStoreHandleUserChange(syncEngineImpl.localStore, user)];\r\n                case 1:\r\n                    result = _d.sent();\r\n                    syncEngineImpl.currentUser = user;\r\n                    // Fails tasks waiting for pending writes requested by previous user.\r\n                    rejectOutstandingPendingWritesCallbacks(syncEngineImpl, \"'waitForPendingWrites' promise is rejected due to a user change.\");\r\n                    // TODO(b/114226417): Consider calling this only in the primary tab.\r\n                    syncEngineImpl.sharedClientState.handleUserChange(user, result.removedBatchIds, result.addedBatchIds);\r\n                    return [4 /*yield*/, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.affectedDocuments)];\r\n                case 2:\r\n                    _d.sent();\r\n                    _d.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction syncEngineGetRemoteKeysForTarget(syncEngine, targetId) {\r\n    var syncEngineImpl = debugCast(syncEngine);\r\n    var limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\r\n    if (limboResolution && limboResolution.receivedDocument) {\r\n        return documentKeySet().add(limboResolution.key);\r\n    }\r\n    else {\r\n        var keySet = documentKeySet();\r\n        var queries = syncEngineImpl.queriesByTarget.get(targetId);\r\n        if (!queries) {\r\n            return keySet;\r\n        }\r\n        for (var _i = 0, queries_1 = queries; _i < queries_1.length; _i++) {\r\n            var query_3 = queries_1[_i];\r\n            var queryView = syncEngineImpl.queryViewsByQuery.get(query_3);\r\n            keySet = keySet.unionWith(queryView.view.syncedDocuments);\r\n        }\r\n        return keySet;\r\n    }\r\n}\r\n/**\r\n * Reconcile the list of synced documents in an existing view with those\r\n * from persistence.\r\n */\r\nfunction synchronizeViewAndComputeSnapshot(syncEngine, queryView) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, queryResult, viewSnapshot;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    return [4 /*yield*/, localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query, \r\n                        /* usePreviousResults= */ true)];\r\n                case 1:\r\n                    queryResult = _d.sent();\r\n                    viewSnapshot = queryView.view.synchronizeWithPersistedState(queryResult);\r\n                    if (syncEngineImpl.isPrimaryClient) {\r\n                        updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewSnapshot.limboChanges);\r\n                    }\r\n                    return [2 /*return*/, viewSnapshot];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Retrieves newly changed documents from remote document cache and raises\r\n * snapshots if needed.\r\n */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction syncEngineSynchronizeWithChangedDocuments(syncEngine) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl;\r\n        return tslib.__generator(this, function (_d) {\r\n            syncEngineImpl = debugCast(syncEngine);\r\n            return [2 /*return*/, localStoreGetNewDocumentChanges(syncEngineImpl.localStore).then(function (changes) { return syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes); })];\r\n        });\r\n    });\r\n}\r\n/** Applies a mutation state to an existing batch.  */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction syncEngineApplyBatchState(syncEngine, batchId, batchState, error) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, documents;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    return [4 /*yield*/, localStoreLookupMutationDocuments(syncEngineImpl.localStore, batchId)];\r\n                case 1:\r\n                    documents = _d.sent();\r\n                    if (documents === null) {\r\n                        // A throttled tab may not have seen the mutation before it was completed\r\n                        // and removed from the mutation queue, in which case we won't have cached\r\n                        // the affected documents. In this case we can safely ignore the update\r\n                        // since that means we didn't apply the mutation locally at all (if we\r\n                        // had, we would have cached the affected documents), and so we will just\r\n                        // see any resulting document changes via normal remote document updates\r\n                        // as applicable.\r\n                        logDebug(LOG_TAG$3, 'Cannot apply mutation batch with id: ' + batchId);\r\n                        return [2 /*return*/];\r\n                    }\r\n                    if (!(batchState === 'pending')) return [3 /*break*/, 3];\r\n                    // If we are the primary client, we need to send this write to the\r\n                    // backend. Secondary clients will ignore these writes since their remote\r\n                    // connection is disabled.\r\n                    return [4 /*yield*/, fillWritePipeline(syncEngineImpl.remoteStore)];\r\n                case 2:\r\n                    // If we are the primary client, we need to send this write to the\r\n                    // backend. Secondary clients will ignore these writes since their remote\r\n                    // connection is disabled.\r\n                    _d.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    if (batchState === 'acknowledged' || batchState === 'rejected') {\r\n                        // NOTE: Both these methods are no-ops for batches that originated from\r\n                        // other clients.\r\n                        processUserCallback(syncEngineImpl, batchId, error ? error : null);\r\n                        triggerPendingWritesCallbacks(syncEngineImpl, batchId);\r\n                        localStoreRemoveCachedMutationBatchMetadata(syncEngineImpl.localStore, batchId);\r\n                    }\r\n                    else {\r\n                        fail();\r\n                    }\r\n                    _d.label = 4;\r\n                case 4: return [4 /*yield*/, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, documents)];\r\n                case 5:\r\n                    _d.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/** Applies a query target change from a different tab. */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction syncEngineApplyPrimaryState(syncEngine, isPrimary) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, activeTargets, activeQueries, _i, activeQueries_1, targetData, activeTargets_1, p_1;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    ensureWatchCallbacks(syncEngineImpl);\r\n                    syncEngineEnsureWriteCallbacks(syncEngineImpl);\r\n                    if (!(isPrimary === true && syncEngineImpl._isPrimaryClient !== true)) return [3 /*break*/, 3];\r\n                    activeTargets = syncEngineImpl.sharedClientState.getAllActiveQueryTargets();\r\n                    return [4 /*yield*/, synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets.toArray())];\r\n                case 1:\r\n                    activeQueries = _d.sent();\r\n                    syncEngineImpl._isPrimaryClient = true;\r\n                    return [4 /*yield*/, remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, true)];\r\n                case 2:\r\n                    _d.sent();\r\n                    for (_i = 0, activeQueries_1 = activeQueries; _i < activeQueries_1.length; _i++) {\r\n                        targetData = activeQueries_1[_i];\r\n                        remoteStoreListen(syncEngineImpl.remoteStore, targetData);\r\n                    }\r\n                    return [3 /*break*/, 7];\r\n                case 3:\r\n                    if (!(isPrimary === false && syncEngineImpl._isPrimaryClient !== false)) return [3 /*break*/, 7];\r\n                    activeTargets_1 = [];\r\n                    p_1 = Promise.resolve();\r\n                    syncEngineImpl.queriesByTarget.forEach(function (_, targetId) {\r\n                        if (syncEngineImpl.sharedClientState.isLocalQueryTarget(targetId)) {\r\n                            activeTargets_1.push(targetId);\r\n                        }\r\n                        else {\r\n                            p_1 = p_1.then(function () {\r\n                                removeAndCleanupTarget(syncEngineImpl, targetId);\r\n                                return localStoreReleaseTarget(syncEngineImpl.localStore, targetId, \r\n                                /*keepPersistedTargetData=*/ true);\r\n                            });\r\n                        }\r\n                        remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\r\n                    });\r\n                    return [4 /*yield*/, p_1];\r\n                case 4:\r\n                    _d.sent();\r\n                    return [4 /*yield*/, synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets_1)];\r\n                case 5:\r\n                    _d.sent();\r\n                    resetLimboDocuments(syncEngineImpl);\r\n                    syncEngineImpl._isPrimaryClient = false;\r\n                    return [4 /*yield*/, remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, false)];\r\n                case 6:\r\n                    _d.sent();\r\n                    _d.label = 7;\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction resetLimboDocuments(syncEngine) {\r\n    var syncEngineImpl = debugCast(syncEngine);\r\n    syncEngineImpl.activeLimboResolutionsByTarget.forEach(function (_, targetId) {\r\n        remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\r\n    });\r\n    syncEngineImpl.limboDocumentRefs.removeAllReferences();\r\n    syncEngineImpl.activeLimboResolutionsByTarget = new Map();\r\n    syncEngineImpl.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);\r\n}\r\n/**\r\n * Reconcile the query views of the provided query targets with the state from\r\n * persistence. Raises snapshots for any changes that affect the local\r\n * client and returns the updated state of all target's query data.\r\n *\r\n * @param syncEngine - The sync engine implementation\r\n * @param targets - the list of targets with views that need to be recomputed\r\n * @param transitionToPrimary - `true` iff the tab transitions from a secondary\r\n * tab to a primary tab\r\n */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction synchronizeQueryViewsAndRaiseSnapshots(syncEngine, targets, transitionToPrimary) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, activeQueries, newViewSnapshots, _i, targets_1, targetId, targetData, queries, _d, queries_2, query_4, queryView, viewChange, target;\r\n        return tslib.__generator(this, function (_e) {\r\n            switch (_e.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    activeQueries = [];\r\n                    newViewSnapshots = [];\r\n                    _i = 0, targets_1 = targets;\r\n                    _e.label = 1;\r\n                case 1:\r\n                    if (!(_i < targets_1.length)) return [3 /*break*/, 13];\r\n                    targetId = targets_1[_i];\r\n                    targetData = void 0;\r\n                    queries = syncEngineImpl.queriesByTarget.get(targetId);\r\n                    if (!(queries && queries.length !== 0)) return [3 /*break*/, 7];\r\n                    return [4 /*yield*/, localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(queries[0]))];\r\n                case 2:\r\n                    // For queries that have a local View, we fetch their current state\r\n                    // from LocalStore (as the resume token and the snapshot version\r\n                    // might have changed) and reconcile their views with the persisted\r\n                    // state (the list of syncedDocuments may have gotten out of sync).\r\n                    targetData = _e.sent();\r\n                    _d = 0, queries_2 = queries;\r\n                    _e.label = 3;\r\n                case 3:\r\n                    if (!(_d < queries_2.length)) return [3 /*break*/, 6];\r\n                    query_4 = queries_2[_d];\r\n                    queryView = syncEngineImpl.queryViewsByQuery.get(query_4);\r\n                    return [4 /*yield*/, synchronizeViewAndComputeSnapshot(syncEngineImpl, queryView)];\r\n                case 4:\r\n                    viewChange = _e.sent();\r\n                    if (viewChange.snapshot) {\r\n                        newViewSnapshots.push(viewChange.snapshot);\r\n                    }\r\n                    _e.label = 5;\r\n                case 5:\r\n                    _d++;\r\n                    return [3 /*break*/, 3];\r\n                case 6: return [3 /*break*/, 11];\r\n                case 7: return [4 /*yield*/, localStoreGetCachedTarget(syncEngineImpl.localStore, targetId)];\r\n                case 8:\r\n                    target = _e.sent();\r\n                    return [4 /*yield*/, localStoreAllocateTarget(syncEngineImpl.localStore, target)];\r\n                case 9:\r\n                    targetData = _e.sent();\r\n                    return [4 /*yield*/, initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetId, \r\n                        /*current=*/ false)];\r\n                case 10:\r\n                    _e.sent();\r\n                    _e.label = 11;\r\n                case 11:\r\n                    activeQueries.push(targetData);\r\n                    _e.label = 12;\r\n                case 12:\r\n                    _i++;\r\n                    return [3 /*break*/, 1];\r\n                case 13:\r\n                    syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots);\r\n                    return [2 /*return*/, activeQueries];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Creates a `Query` object from the specified `Target`. There is no way to\r\n * obtain the original `Query`, so we synthesize a `Query` from the `Target`\r\n * object.\r\n *\r\n * The synthesized result might be different from the original `Query`, but\r\n * since the synthesized `Query` should return the same results as the\r\n * original one (only the presentation of results might differ), the potential\r\n * difference will not cause issues.\r\n */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction synthesizeTargetToQuery(target) {\r\n    return newQuery(target.path, target.collectionGroup, target.orderBy, target.filters, target.limit, \"F\" /* First */, target.startAt, target.endAt);\r\n}\r\n/** Returns the IDs of the clients that are currently active. */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction syncEngineGetActiveClients(syncEngine) {\r\n    var syncEngineImpl = debugCast(syncEngine);\r\n    return localStoreGetActiveClients(syncEngineImpl.localStore);\r\n}\r\n/** Applies a query target change from a different tab. */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction syncEngineApplyTargetState(syncEngine, targetId, state, error) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, _d, changes, synthesizedRemoteEvent;\r\n        return tslib.__generator(this, function (_e) {\r\n            switch (_e.label) {\r\n                case 0:\r\n                    syncEngineImpl = debugCast(syncEngine);\r\n                    if (syncEngineImpl._isPrimaryClient) {\r\n                        // If we receive a target state notification via WebStorage, we are\r\n                        // either already secondary or another tab has taken the primary lease.\r\n                        logDebug(LOG_TAG$3, 'Ignoring unexpected query state notification.');\r\n                        return [2 /*return*/];\r\n                    }\r\n                    if (!syncEngineImpl.queriesByTarget.has(targetId)) return [3 /*break*/, 7];\r\n                    _d = state;\r\n                    switch (_d) {\r\n                        case 'current': return [3 /*break*/, 1];\r\n                        case 'not-current': return [3 /*break*/, 1];\r\n                        case 'rejected': return [3 /*break*/, 4];\r\n                    }\r\n                    return [3 /*break*/, 6];\r\n                case 1: return [4 /*yield*/, localStoreGetNewDocumentChanges(syncEngineImpl.localStore)];\r\n                case 2:\r\n                    changes = _e.sent();\r\n                    synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(targetId, state === 'current');\r\n                    return [4 /*yield*/, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, synthesizedRemoteEvent)];\r\n                case 3:\r\n                    _e.sent();\r\n                    return [3 /*break*/, 7];\r\n                case 4: return [4 /*yield*/, localStoreReleaseTarget(syncEngineImpl.localStore, targetId, \r\n                    /* keepPersistedTargetData */ true)];\r\n                case 5:\r\n                    _e.sent();\r\n                    removeAndCleanupTarget(syncEngineImpl, targetId, error);\r\n                    return [3 /*break*/, 7];\r\n                case 6:\r\n                    fail();\r\n                    _e.label = 7;\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/** Adds or removes Watch targets for queries from different tabs. */\r\nfunction syncEngineApplyActiveTargetsChange(syncEngine, added, removed) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var syncEngineImpl, _i, added_1, targetId, target, targetData, _loop_5, _d, removed_1, targetId;\r\n        return tslib.__generator(this, function (_e) {\r\n            switch (_e.label) {\r\n                case 0:\r\n                    syncEngineImpl = ensureWatchCallbacks(syncEngine);\r\n                    if (!syncEngineImpl._isPrimaryClient) {\r\n                        return [2 /*return*/];\r\n                    }\r\n                    _i = 0, added_1 = added;\r\n                    _e.label = 1;\r\n                case 1:\r\n                    if (!(_i < added_1.length)) return [3 /*break*/, 6];\r\n                    targetId = added_1[_i];\r\n                    if (syncEngineImpl.queriesByTarget.has(targetId)) {\r\n                        // A target might have been added in a previous attempt\r\n                        logDebug(LOG_TAG$3, 'Adding an already active target ' + targetId);\r\n                        return [3 /*break*/, 5];\r\n                    }\r\n                    return [4 /*yield*/, localStoreGetCachedTarget(syncEngineImpl.localStore, targetId)];\r\n                case 2:\r\n                    target = _e.sent();\r\n                    return [4 /*yield*/, localStoreAllocateTarget(syncEngineImpl.localStore, target)];\r\n                case 3:\r\n                    targetData = _e.sent();\r\n                    return [4 /*yield*/, initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetData.targetId, \r\n                        /*current=*/ false)];\r\n                case 4:\r\n                    _e.sent();\r\n                    remoteStoreListen(syncEngineImpl.remoteStore, targetData);\r\n                    _e.label = 5;\r\n                case 5:\r\n                    _i++;\r\n                    return [3 /*break*/, 1];\r\n                case 6:\r\n                    _loop_5 = function (targetId) {\r\n                        return tslib.__generator(this, function (_f) {\r\n                            switch (_f.label) {\r\n                                case 0:\r\n                                    // Check that the target is still active since the target might have been\r\n                                    // removed if it has been rejected by the backend.\r\n                                    if (!syncEngineImpl.queriesByTarget.has(targetId)) {\r\n                                        return [2 /*return*/, \"continue\"];\r\n                                    }\r\n                                    // Release queries that are still active.\r\n                                    return [4 /*yield*/, localStoreReleaseTarget(syncEngineImpl.localStore, targetId, \r\n                                        /* keepPersistedTargetData */ false)\r\n                                            .then(function () {\r\n                                            remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\r\n                                            removeAndCleanupTarget(syncEngineImpl, targetId);\r\n                                        })\r\n                                            .catch(ignoreIfPrimaryLeaseLoss)];\r\n                                case 1:\r\n                                    // Release queries that are still active.\r\n                                    _f.sent();\r\n                                    return [2 /*return*/];\r\n                            }\r\n                        });\r\n                    };\r\n                    _d = 0, removed_1 = removed;\r\n                    _e.label = 7;\r\n                case 7:\r\n                    if (!(_d < removed_1.length)) return [3 /*break*/, 10];\r\n                    targetId = removed_1[_d];\r\n                    return [5 /*yield**/, _loop_5(targetId)];\r\n                case 8:\r\n                    _e.sent();\r\n                    _e.label = 9;\r\n                case 9:\r\n                    _d++;\r\n                    return [3 /*break*/, 7];\r\n                case 10: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction ensureWatchCallbacks(syncEngine) {\r\n    var syncEngineImpl = debugCast(syncEngine);\r\n    syncEngineImpl.remoteStore.remoteSyncer.applyRemoteEvent = syncEngineApplyRemoteEvent.bind(null, syncEngineImpl);\r\n    syncEngineImpl.remoteStore.remoteSyncer.getRemoteKeysForTarget = syncEngineGetRemoteKeysForTarget.bind(null, syncEngineImpl);\r\n    syncEngineImpl.remoteStore.remoteSyncer.rejectListen = syncEngineRejectListen.bind(null, syncEngineImpl);\r\n    syncEngineImpl.syncEngineListener.onWatchChange = eventManagerOnWatchChange.bind(null, syncEngineImpl.eventManager);\r\n    syncEngineImpl.syncEngineListener.onWatchError = eventManagerOnWatchError.bind(null, syncEngineImpl.eventManager);\r\n    return syncEngineImpl;\r\n}\r\nfunction syncEngineEnsureWriteCallbacks(syncEngine) {\r\n    var syncEngineImpl = debugCast(syncEngine);\r\n    syncEngineImpl.remoteStore.remoteSyncer.applySuccessfulWrite = syncEngineApplySuccessfulWrite.bind(null, syncEngineImpl);\r\n    syncEngineImpl.remoteStore.remoteSyncer.rejectFailedWrite = syncEngineRejectFailedWrite.bind(null, syncEngineImpl);\r\n    return syncEngineImpl;\r\n}\r\n/**\r\n * Loads a Firestore bundle into the SDK. The returned promise resolves when\r\n * the bundle finished loading.\r\n *\r\n * @param syncEngine - SyncEngine to use.\r\n * @param bundleReader - Bundle to load into the SDK.\r\n * @param task - LoadBundleTask used to update the loading progress to public API.\r\n */\r\nfunction syncEngineLoadBundle(syncEngine, bundleReader, task) {\r\n    var syncEngineImpl = debugCast(syncEngine);\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    loadBundleImpl(syncEngineImpl, bundleReader, task).then(function () {\r\n        syncEngineImpl.sharedClientState.notifyBundleLoaded();\r\n    });\r\n}\r\nfunction loadBundleImpl(syncEngine, reader, task) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var metadata, skip, loader, element, progress, result, e_10;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    _d.trys.push([0, 13, , 14]);\r\n                    return [4 /*yield*/, reader.getMetadata()];\r\n                case 1:\r\n                    metadata = _d.sent();\r\n                    return [4 /*yield*/, localStoreHasNewerBundle(syncEngine.localStore, metadata)];\r\n                case 2:\r\n                    skip = _d.sent();\r\n                    if (!skip) return [3 /*break*/, 4];\r\n                    return [4 /*yield*/, reader.close()];\r\n                case 3:\r\n                    _d.sent();\r\n                    task._completeWith(bundleSuccessProgress(metadata));\r\n                    return [2 /*return*/];\r\n                case 4:\r\n                    task._updateProgress(bundleInitialProgress(metadata));\r\n                    loader = new BundleLoader(metadata, syncEngine.localStore, reader.serializer);\r\n                    return [4 /*yield*/, reader.nextElement()];\r\n                case 5:\r\n                    element = _d.sent();\r\n                    _d.label = 6;\r\n                case 6:\r\n                    if (!element) return [3 /*break*/, 9];\r\n                    return [4 /*yield*/, loader.addSizedElement(element)];\r\n                case 7:\r\n                    progress = _d.sent();\r\n                    if (progress) {\r\n                        task._updateProgress(progress);\r\n                    }\r\n                    return [4 /*yield*/, reader.nextElement()];\r\n                case 8:\r\n                    element = _d.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 9: return [4 /*yield*/, loader.complete()];\r\n                case 10:\r\n                    result = _d.sent();\r\n                    // TODO(b/160876443): This currently raises snapshots with\r\n                    // `fromCache=false` if users already listen to some queries and bundles\r\n                    // has newer version.\r\n                    return [4 /*yield*/, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, result.changedDocs, \r\n                        /* remoteEvent */ undefined)];\r\n                case 11:\r\n                    // TODO(b/160876443): This currently raises snapshots with\r\n                    // `fromCache=false` if users already listen to some queries and bundles\r\n                    // has newer version.\r\n                    _d.sent();\r\n                    // Save metadata, so loading the same bundle will skip.\r\n                    return [4 /*yield*/, localStoreSaveBundle(syncEngine.localStore, metadata)];\r\n                case 12:\r\n                    // Save metadata, so loading the same bundle will skip.\r\n                    _d.sent();\r\n                    task._completeWith(result.progress);\r\n                    return [3 /*break*/, 14];\r\n                case 13:\r\n                    e_10 = _d.sent();\r\n                    logWarn(LOG_TAG$3, \"Loading bundle failed with \" + e_10);\r\n                    task._failWith(e_10);\r\n                    return [3 /*break*/, 14];\r\n                case 14: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides all components needed for Firestore with in-memory persistence.\r\n * Uses EagerGC garbage collection.\r\n */\r\nvar MemoryOfflineComponentProvider = /** @class */ (function () {\r\n    function MemoryOfflineComponentProvider() {\r\n        this.synchronizeTabs = false;\r\n    }\r\n    MemoryOfflineComponentProvider.prototype.initialize = function (cfg) {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        this.serializer = newSerializer(cfg.databaseInfo.databaseId);\r\n                        this.sharedClientState = this.createSharedClientState(cfg);\r\n                        this.persistence = this.createPersistence(cfg);\r\n                        return [4 /*yield*/, this.persistence.start()];\r\n                    case 1:\r\n                        _d.sent();\r\n                        this.gcScheduler = this.createGarbageCollectionScheduler(cfg);\r\n                        this.localStore = this.createLocalStore(cfg);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MemoryOfflineComponentProvider.prototype.createGarbageCollectionScheduler = function (cfg) {\r\n        return null;\r\n    };\r\n    MemoryOfflineComponentProvider.prototype.createLocalStore = function (cfg) {\r\n        return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);\r\n    };\r\n    MemoryOfflineComponentProvider.prototype.createPersistence = function (cfg) {\r\n        return new MemoryPersistence(MemoryEagerDelegate.factory, this.serializer);\r\n    };\r\n    MemoryOfflineComponentProvider.prototype.createSharedClientState = function (cfg) {\r\n        return new MemorySharedClientState();\r\n    };\r\n    MemoryOfflineComponentProvider.prototype.terminate = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        if (this.gcScheduler) {\r\n                            this.gcScheduler.stop();\r\n                        }\r\n                        return [4 /*yield*/, this.sharedClientState.shutdown()];\r\n                    case 1:\r\n                        _d.sent();\r\n                        return [4 /*yield*/, this.persistence.shutdown()];\r\n                    case 2:\r\n                        _d.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return MemoryOfflineComponentProvider;\r\n}());\r\n/**\r\n * Provides all components needed for Firestore with IndexedDB persistence.\r\n */\r\nvar IndexedDbOfflineComponentProvider = /** @class */ (function (_super) {\r\n    tslib.__extends(IndexedDbOfflineComponentProvider, _super);\r\n    function IndexedDbOfflineComponentProvider(onlineComponentProvider, cacheSizeBytes, forceOwnership) {\r\n        var _this = _super.call(this) || this;\r\n        _this.onlineComponentProvider = onlineComponentProvider;\r\n        _this.cacheSizeBytes = cacheSizeBytes;\r\n        _this.forceOwnership = forceOwnership;\r\n        _this.synchronizeTabs = false;\r\n        return _this;\r\n    }\r\n    IndexedDbOfflineComponentProvider.prototype.initialize = function (cfg) {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0: return [4 /*yield*/, _super.prototype.initialize.call(this, cfg)];\r\n                    case 1:\r\n                        _d.sent();\r\n                        return [4 /*yield*/, localStoreSynchronizeLastDocumentChangeReadTime(this.localStore)];\r\n                    case 2:\r\n                        _d.sent();\r\n                        return [4 /*yield*/, this.onlineComponentProvider.initialize(this, cfg)];\r\n                    case 3:\r\n                        _d.sent();\r\n                        // Enqueue writes from a previous session\r\n                        return [4 /*yield*/, syncEngineEnsureWriteCallbacks(this.onlineComponentProvider.syncEngine)];\r\n                    case 4:\r\n                        // Enqueue writes from a previous session\r\n                        _d.sent();\r\n                        return [4 /*yield*/, fillWritePipeline(this.onlineComponentProvider.remoteStore)];\r\n                    case 5:\r\n                        _d.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    IndexedDbOfflineComponentProvider.prototype.createLocalStore = function (cfg) {\r\n        return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);\r\n    };\r\n    IndexedDbOfflineComponentProvider.prototype.createGarbageCollectionScheduler = function (cfg) {\r\n        var garbageCollector = this.persistence.referenceDelegate\r\n            .garbageCollector;\r\n        return new LruScheduler(garbageCollector, cfg.asyncQueue);\r\n    };\r\n    IndexedDbOfflineComponentProvider.prototype.createPersistence = function (cfg) {\r\n        var persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);\r\n        var lruParams = this.cacheSizeBytes !== undefined\r\n            ? LruParams.withCacheSize(this.cacheSizeBytes)\r\n            : LruParams.DEFAULT;\r\n        return new IndexedDbPersistence(this.synchronizeTabs, persistenceKey, cfg.clientId, lruParams, cfg.asyncQueue, getWindow(), getDocument(), this.serializer, this.sharedClientState, !!this.forceOwnership);\r\n    };\r\n    IndexedDbOfflineComponentProvider.prototype.createSharedClientState = function (cfg) {\r\n        return new MemorySharedClientState();\r\n    };\r\n    return IndexedDbOfflineComponentProvider;\r\n}(MemoryOfflineComponentProvider));\r\n/**\r\n * Provides all components needed for Firestore with multi-tab IndexedDB\r\n * persistence.\r\n *\r\n * In the legacy client, this provider is used to provide both multi-tab and\r\n * non-multi-tab persistence since we cannot tell at build time whether\r\n * `synchronizeTabs` will be enabled.\r\n */\r\nvar MultiTabOfflineComponentProvider = /** @class */ (function (_super) {\r\n    tslib.__extends(MultiTabOfflineComponentProvider, _super);\r\n    function MultiTabOfflineComponentProvider(onlineComponentProvider, cacheSizeBytes) {\r\n        var _this = _super.call(this, onlineComponentProvider, cacheSizeBytes, /* forceOwnership= */ false) || this;\r\n        _this.onlineComponentProvider = onlineComponentProvider;\r\n        _this.cacheSizeBytes = cacheSizeBytes;\r\n        _this.synchronizeTabs = true;\r\n        return _this;\r\n    }\r\n    MultiTabOfflineComponentProvider.prototype.initialize = function (cfg) {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var syncEngine;\r\n            var _this = this;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0: return [4 /*yield*/, _super.prototype.initialize.call(this, cfg)];\r\n                    case 1:\r\n                        _d.sent();\r\n                        syncEngine = this.onlineComponentProvider.syncEngine;\r\n                        if (!(this.sharedClientState instanceof WebStorageSharedClientState)) return [3 /*break*/, 3];\r\n                        this.sharedClientState.syncEngine = {\r\n                            applyBatchState: syncEngineApplyBatchState.bind(null, syncEngine),\r\n                            applyTargetState: syncEngineApplyTargetState.bind(null, syncEngine),\r\n                            applyActiveTargetsChange: syncEngineApplyActiveTargetsChange.bind(null, syncEngine),\r\n                            getActiveClients: syncEngineGetActiveClients.bind(null, syncEngine),\r\n                            synchronizeWithChangedDocuments: syncEngineSynchronizeWithChangedDocuments.bind(null, syncEngine)\r\n                        };\r\n                        return [4 /*yield*/, this.sharedClientState.start()];\r\n                    case 2:\r\n                        _d.sent();\r\n                        _d.label = 3;\r\n                    case 3: \r\n                    // NOTE: This will immediately call the listener, so we make sure to\r\n                    // set it after localStore / remoteStore are started.\r\n                    return [4 /*yield*/, this.persistence.setPrimaryStateListener(function (isPrimary) { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n                            return tslib.__generator(this, function (_d) {\r\n                                switch (_d.label) {\r\n                                    case 0: return [4 /*yield*/, syncEngineApplyPrimaryState(this.onlineComponentProvider.syncEngine, isPrimary)];\r\n                                    case 1:\r\n                                        _d.sent();\r\n                                        if (this.gcScheduler) {\r\n                                            if (isPrimary && !this.gcScheduler.started) {\r\n                                                this.gcScheduler.start(this.localStore);\r\n                                            }\r\n                                            else if (!isPrimary) {\r\n                                                this.gcScheduler.stop();\r\n                                            }\r\n                                        }\r\n                                        return [2 /*return*/];\r\n                                }\r\n                            });\r\n                        }); })];\r\n                    case 4:\r\n                        // NOTE: This will immediately call the listener, so we make sure to\r\n                        // set it after localStore / remoteStore are started.\r\n                        _d.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MultiTabOfflineComponentProvider.prototype.createSharedClientState = function (cfg) {\r\n        var window = getWindow();\r\n        if (!WebStorageSharedClientState.isAvailable(window)) {\r\n            throw new FirestoreError(Code.UNIMPLEMENTED, 'IndexedDB persistence is only available on platforms that support LocalStorage.');\r\n        }\r\n        var persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);\r\n        return new WebStorageSharedClientState(window, cfg.asyncQueue, persistenceKey, cfg.clientId, cfg.initialUser);\r\n    };\r\n    return MultiTabOfflineComponentProvider;\r\n}(IndexedDbOfflineComponentProvider));\r\n/**\r\n * Initializes and wires the components that are needed to interface with the\r\n * network.\r\n */\r\nvar OnlineComponentProvider = /** @class */ (function () {\r\n    function OnlineComponentProvider() {\r\n    }\r\n    OnlineComponentProvider.prototype.initialize = function (offlineComponentProvider, cfg) {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        if (this.localStore) {\r\n                            // OnlineComponentProvider may get initialized multiple times if\r\n                            // multi-tab persistence is used.\r\n                            return [2 /*return*/];\r\n                        }\r\n                        this.localStore = offlineComponentProvider.localStore;\r\n                        this.sharedClientState = offlineComponentProvider.sharedClientState;\r\n                        this.datastore = this.createDatastore(cfg);\r\n                        this.remoteStore = this.createRemoteStore(cfg);\r\n                        this.eventManager = this.createEventManager(cfg);\r\n                        this.syncEngine = this.createSyncEngine(cfg, \r\n                        /* startAsPrimary=*/ !offlineComponentProvider.synchronizeTabs);\r\n                        this.sharedClientState.onlineStateHandler = function (onlineState) { return syncEngineApplyOnlineStateChange(_this.syncEngine, onlineState, 1 /* SharedClientState */); };\r\n                        this.remoteStore.remoteSyncer.handleCredentialChange = syncEngineHandleCredentialChange.bind(null, this.syncEngine);\r\n                        return [4 /*yield*/, remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient)];\r\n                    case 1:\r\n                        _d.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    OnlineComponentProvider.prototype.createEventManager = function (cfg) {\r\n        return newEventManager();\r\n    };\r\n    OnlineComponentProvider.prototype.createDatastore = function (cfg) {\r\n        var serializer = newSerializer(cfg.databaseInfo.databaseId);\r\n        var connection = newConnection(cfg.databaseInfo);\r\n        return newDatastore(cfg.credentials, connection, serializer);\r\n    };\r\n    OnlineComponentProvider.prototype.createRemoteStore = function (cfg) {\r\n        var _this = this;\r\n        return newRemoteStore(this.localStore, this.datastore, cfg.asyncQueue, function (onlineState) { return syncEngineApplyOnlineStateChange(_this.syncEngine, onlineState, 0 /* RemoteStore */); }, newConnectivityMonitor());\r\n    };\r\n    OnlineComponentProvider.prototype.createSyncEngine = function (cfg, startAsPrimary) {\r\n        return newSyncEngine(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, cfg.initialUser, cfg.maxConcurrentLimboResolutions, startAsPrimary);\r\n    };\r\n    OnlineComponentProvider.prototype.terminate = function () {\r\n        return remoteStoreShutdown(this.remoteStore);\r\n    };\r\n    return OnlineComponentProvider;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * How many bytes to read each time when `ReadableStreamReader.read()` is\r\n * called. Only applicable for byte streams that we control (e.g. those backed\r\n * by an UInt8Array).\r\n */\r\nvar DEFAULT_BYTES_PER_READ = 10240;\r\n/**\r\n * Builds a `ByteStreamReader` from a UInt8Array.\r\n * @param source - The data source to use.\r\n * @param bytesPerRead - How many bytes each `read()` from the returned reader\r\n *        will read.\r\n */\r\nfunction toByteStreamReaderHelper(source, bytesPerRead) {\r\n    if (bytesPerRead === void 0) { bytesPerRead = DEFAULT_BYTES_PER_READ; }\r\n    var readFrom = 0;\r\n    var reader = {\r\n        read: function () {\r\n            return tslib.__awaiter(this, void 0, void 0, function () {\r\n                var result;\r\n                return tslib.__generator(this, function (_d) {\r\n                    if (readFrom < source.byteLength) {\r\n                        result = {\r\n                            value: source.slice(readFrom, readFrom + bytesPerRead),\r\n                            done: false\r\n                        };\r\n                        readFrom += bytesPerRead;\r\n                        return [2 /*return*/, result];\r\n                    }\r\n                    return [2 /*return*/, { done: true }];\r\n                });\r\n            });\r\n        },\r\n        cancel: function () {\r\n            return tslib.__awaiter(this, void 0, void 0, function () { return tslib.__generator(this, function (_d) {\r\n                return [2 /*return*/];\r\n            }); });\r\n        },\r\n        releaseLock: function () { },\r\n        closed: Promise.reject('unimplemented')\r\n    };\r\n    return reader;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction validateNonEmptyArgument(functionName, argumentName, argument) {\r\n    if (!argument) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() cannot be called with an empty \" + argumentName + \".\");\r\n    }\r\n}\r\nfunction validateSetOptions(methodName, options) {\r\n    if (options === undefined) {\r\n        return {\r\n            merge: false\r\n        };\r\n    }\r\n    if (options.mergeFields !== undefined && options.merge !== undefined) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid options passed to function \" + methodName + \"(): You cannot \" +\r\n            'specify both \"merge\" and \"mergeFields\".');\r\n    }\r\n    return options;\r\n}\r\n/**\r\n * Validates that two boolean options are not set at the same time.\r\n */\r\nfunction validateIsNotUsedTogether(optionName1, argument1, optionName2, argument2) {\r\n    if (argument1 === true && argument2 === true) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, optionName1 + \" and \" + optionName2 + \" cannot be used together.\");\r\n    }\r\n}\r\n/**\r\n * Validates that `path` refers to a document (indicated by the fact it contains\r\n * an even numbers of segments).\r\n */\r\nfunction validateDocumentPath(path) {\r\n    if (!DocumentKey.isDocumentKey(path)) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid document reference. Document references must have an even number of segments, but \" + path + \" has \" + path.length + \".\");\r\n    }\r\n}\r\n/**\r\n * Validates that `path` refers to a collection (indicated by the fact it\r\n * contains an odd numbers of segments).\r\n */\r\nfunction validateCollectionPath(path) {\r\n    if (DocumentKey.isDocumentKey(path)) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid collection reference. Collection references must have an odd number of segments, but \" + path + \" has \" + path.length + \".\");\r\n    }\r\n}\r\n/**\r\n * Returns true if it's a non-null object without a custom prototype\r\n * (i.e. excludes Array, Date, etc.).\r\n */\r\nfunction isPlainObject(input) {\r\n    return (typeof input === 'object' &&\r\n        input !== null &&\r\n        (Object.getPrototypeOf(input) === Object.prototype ||\r\n            Object.getPrototypeOf(input) === null));\r\n}\r\n/** Returns a string describing the type / value of the provided input. */\r\nfunction valueDescription(input) {\r\n    if (input === undefined) {\r\n        return 'undefined';\r\n    }\r\n    else if (input === null) {\r\n        return 'null';\r\n    }\r\n    else if (typeof input === 'string') {\r\n        if (input.length > 20) {\r\n            input = input.substring(0, 20) + \"...\";\r\n        }\r\n        return JSON.stringify(input);\r\n    }\r\n    else if (typeof input === 'number' || typeof input === 'boolean') {\r\n        return '' + input;\r\n    }\r\n    else if (typeof input === 'object') {\r\n        if (input instanceof Array) {\r\n            return 'an array';\r\n        }\r\n        else {\r\n            var customObjectName = tryGetCustomObjectType(input);\r\n            if (customObjectName) {\r\n                return \"a custom \" + customObjectName + \" object\";\r\n            }\r\n            else {\r\n                return 'an object';\r\n            }\r\n        }\r\n    }\r\n    else if (typeof input === 'function') {\r\n        return 'a function';\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\n/** Hacky method to try to get the constructor name for an object. */\r\nfunction tryGetCustomObjectType(input) {\r\n    if (input.constructor) {\r\n        var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\r\n        var results = funcNameRegex.exec(input.constructor.toString());\r\n        if (results && results.length > 1) {\r\n            return results[1];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\r\n * underlying instance. Throws if  `obj` is not an instance of `T`.\r\n *\r\n * This cast is used in the Lite and Full SDK to verify instance types for\r\n * arguments passed to the public API.\r\n */\r\nfunction cast(obj, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconstructor) {\r\n    if ('_delegate' in obj) {\r\n        // Unwrap Compat types\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        obj = obj._delegate;\r\n    }\r\n    if (!(obj instanceof constructor)) {\r\n        if (constructor.name === obj.constructor.name) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Type does not match the expected instance. Did you pass a ' +\r\n                \"reference from a different Firestore SDK?\");\r\n        }\r\n        else {\r\n            var description = valueDescription(obj);\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Expected type '\" + constructor.name + \"', but it was: \" + description);\r\n        }\r\n    }\r\n    return obj;\r\n}\r\nfunction validatePositiveNumber(functionName, n) {\r\n    if (n <= 0) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + functionName + \"() requires a positive number, but it was: \" + n + \".\");\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * On Node, only supported data source is a `Uint8Array` for now.\r\n */\r\nfunction toByteStreamReader(source, bytesPerRead) {\r\n    if (!(source instanceof Uint8Array)) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"NodePlatform.toByteStreamReader expects source to be Uint8Array, got \" + valueDescription(source));\r\n    }\r\n    return toByteStreamReaderHelper(source, bytesPerRead);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*\r\n * A wrapper implementation of Observer<T> that will dispatch events\r\n * asynchronously. To allow immediate silencing, a mute call is added which\r\n * causes events scheduled to no longer be raised.\r\n */\r\nvar AsyncObserver = /** @class */ (function () {\r\n    function AsyncObserver(observer) {\r\n        this.observer = observer;\r\n        /**\r\n         * When set to true, will not raise future events. Necessary to deal with\r\n         * async detachment of listener.\r\n         */\r\n        this.muted = false;\r\n    }\r\n    AsyncObserver.prototype.next = function (value) {\r\n        if (this.observer.next) {\r\n            this.scheduleEvent(this.observer.next, value);\r\n        }\r\n    };\r\n    AsyncObserver.prototype.error = function (error) {\r\n        if (this.observer.error) {\r\n            this.scheduleEvent(this.observer.error, error);\r\n        }\r\n        else {\r\n            console.error('Uncaught Error in snapshot listener:', error);\r\n        }\r\n    };\r\n    AsyncObserver.prototype.mute = function () {\r\n        this.muted = true;\r\n    };\r\n    AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {\r\n        var _this = this;\r\n        if (!this.muted) {\r\n            setTimeout(function () {\r\n                if (!_this.muted) {\r\n                    eventHandler(event);\r\n                }\r\n            }, 0);\r\n        }\r\n    };\r\n    return AsyncObserver;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A complete element in the bundle stream, together with the byte length it\r\n * occupies in the stream.\r\n */\r\nvar SizedBundleElement = /** @class */ (function () {\r\n    function SizedBundleElement(payload, \r\n    // How many bytes this element takes to store in the bundle.\r\n    byteLength) {\r\n        this.payload = payload;\r\n        this.byteLength = byteLength;\r\n    }\r\n    SizedBundleElement.prototype.isBundleMetadata = function () {\r\n        return 'metadata' in this.payload;\r\n    };\r\n    return SizedBundleElement;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class representing a bundle.\r\n *\r\n * Takes a bundle stream or buffer, and presents abstractions to read bundled\r\n * elements out of the underlying content.\r\n */\r\nvar BundleReaderImpl = /** @class */ (function () {\r\n    function BundleReaderImpl(\r\n    /** The reader to read from underlying binary bundle data source. */\r\n    reader, serializer) {\r\n        var _this = this;\r\n        this.reader = reader;\r\n        this.serializer = serializer;\r\n        /** Cached bundle metadata. */\r\n        this.metadata = new Deferred();\r\n        /**\r\n         * Internal buffer to hold bundle content, accumulating incomplete element\r\n         * content.\r\n         */\r\n        this.buffer = new Uint8Array();\r\n        this.textDecoder = newTextDecoder();\r\n        // Read the metadata (which is the first element).\r\n        this.nextElementImpl().then(function (element) {\r\n            if (element && element.isBundleMetadata()) {\r\n                _this.metadata.resolve(element.payload.metadata);\r\n            }\r\n            else {\r\n                _this.metadata.reject(new Error(\"The first element of the bundle is not a metadata, it is\\n             \" + JSON.stringify(element === null || element === void 0 ? void 0 : element.payload)));\r\n            }\r\n        }, function (error) { return _this.metadata.reject(error); });\r\n    }\r\n    BundleReaderImpl.prototype.close = function () {\r\n        return this.reader.cancel();\r\n    };\r\n    BundleReaderImpl.prototype.getMetadata = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                return [2 /*return*/, this.metadata.promise];\r\n            });\r\n        });\r\n    };\r\n    BundleReaderImpl.prototype.nextElement = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0: \r\n                    // Makes sure metadata is read before proceeding.\r\n                    return [4 /*yield*/, this.getMetadata()];\r\n                    case 1:\r\n                        // Makes sure metadata is read before proceeding.\r\n                        _d.sent();\r\n                        return [2 /*return*/, this.nextElementImpl()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reads from the head of internal buffer, and pulling more data from\r\n     * underlying stream if a complete element cannot be found, until an\r\n     * element(including the prefixed length and the JSON string) is found.\r\n     *\r\n     * Once a complete element is read, it is dropped from internal buffer.\r\n     *\r\n     * Returns either the bundled element, or null if we have reached the end of\r\n     * the stream.\r\n     */\r\n    BundleReaderImpl.prototype.nextElementImpl = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var lengthBuffer, lengthString, length, jsonString;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0: return [4 /*yield*/, this.readLength()];\r\n                    case 1:\r\n                        lengthBuffer = _d.sent();\r\n                        if (lengthBuffer === null) {\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        lengthString = this.textDecoder.decode(lengthBuffer);\r\n                        length = Number(lengthString);\r\n                        if (isNaN(length)) {\r\n                            this.raiseError(\"length string (\" + lengthString + \") is not valid number\");\r\n                        }\r\n                        return [4 /*yield*/, this.readJsonString(length)];\r\n                    case 2:\r\n                        jsonString = _d.sent();\r\n                        return [2 /*return*/, new SizedBundleElement(JSON.parse(jsonString), lengthBuffer.length + length)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /** First index of '{' from the underlying buffer. */\r\n    BundleReaderImpl.prototype.indexOfOpenBracket = function () {\r\n        return this.buffer.findIndex(function (v) { return v === '{'.charCodeAt(0); });\r\n    };\r\n    /**\r\n     * Reads from the beginning of the internal buffer, until the first '{', and\r\n     * return the content.\r\n     *\r\n     * If reached end of the stream, returns a null.\r\n     */\r\n    BundleReaderImpl.prototype.readLength = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var done, position, result;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        if (!(this.indexOfOpenBracket() < 0)) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.pullMoreDataToBuffer()];\r\n                    case 1:\r\n                        done = _d.sent();\r\n                        if (done) {\r\n                            return [3 /*break*/, 2];\r\n                        }\r\n                        return [3 /*break*/, 0];\r\n                    case 2:\r\n                        // Broke out of the loop because underlying stream is closed, and there\r\n                        // happens to be no more data to process.\r\n                        if (this.buffer.length === 0) {\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        position = this.indexOfOpenBracket();\r\n                        // Broke out of the loop because underlying stream is closed, but still\r\n                        // cannot find an open bracket.\r\n                        if (position < 0) {\r\n                            this.raiseError('Reached the end of bundle when a length string is expected.');\r\n                        }\r\n                        result = this.buffer.slice(0, position);\r\n                        // Update the internal buffer to drop the read length.\r\n                        this.buffer = this.buffer.slice(position);\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reads from a specified position from the internal buffer, for a specified\r\n     * number of bytes, pulling more data from the underlying stream if needed.\r\n     *\r\n     * Returns a string decoded from the read bytes.\r\n     */\r\n    BundleReaderImpl.prototype.readJsonString = function (length) {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var done, result;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        if (!(this.buffer.length < length)) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.pullMoreDataToBuffer()];\r\n                    case 1:\r\n                        done = _d.sent();\r\n                        if (done) {\r\n                            this.raiseError('Reached the end of bundle when more is expected.');\r\n                        }\r\n                        return [3 /*break*/, 0];\r\n                    case 2:\r\n                        result = this.textDecoder.decode(this.buffer.slice(0, length));\r\n                        // Update the internal buffer to drop the read json string.\r\n                        this.buffer = this.buffer.slice(length);\r\n                        return [2 /*return*/, result];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    BundleReaderImpl.prototype.raiseError = function (message) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.reader.cancel();\r\n        throw new Error(\"Invalid bundle format: \" + message);\r\n    };\r\n    /**\r\n     * Pulls more data from underlying stream to internal buffer.\r\n     * Returns a boolean indicating whether the stream is finished.\r\n     */\r\n    BundleReaderImpl.prototype.pullMoreDataToBuffer = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var result, newBuffer;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0: return [4 /*yield*/, this.reader.read()];\r\n                    case 1:\r\n                        result = _d.sent();\r\n                        if (!result.done) {\r\n                            newBuffer = new Uint8Array(this.buffer.length + result.value.length);\r\n                            newBuffer.set(this.buffer);\r\n                            newBuffer.set(result.value, this.buffer.length);\r\n                            this.buffer = newBuffer;\r\n                        }\r\n                        return [2 /*return*/, result.done];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return BundleReaderImpl;\r\n}());\r\nfunction newBundleReader(reader, serializer) {\r\n    return new BundleReaderImpl(reader, serializer);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Internal transaction object responsible for accumulating the mutations to\r\n * perform and the base versions for any documents read.\r\n */\r\nvar Transaction$3 = /** @class */ (function () {\r\n    function Transaction$3(datastore) {\r\n        this.datastore = datastore;\r\n        // The version of each document that was read during this transaction.\r\n        this.readVersions = new Map();\r\n        this.mutations = [];\r\n        this.committed = false;\r\n        /**\r\n         * A deferred usage error that occurred previously in this transaction that\r\n         * will cause the transaction to fail once it actually commits.\r\n         */\r\n        this.lastWriteError = null;\r\n        /**\r\n         * Set of documents that have been written in the transaction.\r\n         *\r\n         * When there's more than one write to the same key in a transaction, any\r\n         * writes after the first are handled differently.\r\n         */\r\n        this.writtenDocs = new Set();\r\n    }\r\n    Transaction$3.prototype.lookup = function (keys) {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var docs;\r\n            var _this = this;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        this.ensureCommitNotCalled();\r\n                        if (this.mutations.length > 0) {\r\n                            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Firestore transactions require all reads to be executed before all writes.');\r\n                        }\r\n                        return [4 /*yield*/, invokeBatchGetDocumentsRpc(this.datastore, keys)];\r\n                    case 1:\r\n                        docs = _d.sent();\r\n                        docs.forEach(function (doc) { return _this.recordVersion(doc); });\r\n                        return [2 /*return*/, docs];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Transaction$3.prototype.set = function (key, data) {\r\n        this.write(data.toMutation(key, this.precondition(key)));\r\n        this.writtenDocs.add(key.toString());\r\n    };\r\n    Transaction$3.prototype.update = function (key, data) {\r\n        try {\r\n            this.write(data.toMutation(key, this.preconditionForUpdate(key)));\r\n        }\r\n        catch (e) {\r\n            this.lastWriteError = e;\r\n        }\r\n        this.writtenDocs.add(key.toString());\r\n    };\r\n    Transaction$3.prototype.delete = function (key) {\r\n        this.write(new DeleteMutation(key, this.precondition(key)));\r\n        this.writtenDocs.add(key.toString());\r\n    };\r\n    Transaction$3.prototype.commit = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var unwritten;\r\n            var _this = this;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        this.ensureCommitNotCalled();\r\n                        if (this.lastWriteError) {\r\n                            throw this.lastWriteError;\r\n                        }\r\n                        unwritten = this.readVersions;\r\n                        // For each mutation, note that the doc was written.\r\n                        this.mutations.forEach(function (mutation) {\r\n                            unwritten.delete(mutation.key.toString());\r\n                        });\r\n                        // For each document that was read but not written to, we want to perform\r\n                        // a `verify` operation.\r\n                        unwritten.forEach(function (_, path) {\r\n                            var key = DocumentKey.fromPath(path);\r\n                            _this.mutations.push(new VerifyMutation(key, _this.precondition(key)));\r\n                        });\r\n                        return [4 /*yield*/, invokeCommitRpc(this.datastore, this.mutations)];\r\n                    case 1:\r\n                        _d.sent();\r\n                        this.committed = true;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Transaction$3.prototype.recordVersion = function (doc) {\r\n        var docVersion;\r\n        if (doc.isFoundDocument()) {\r\n            docVersion = doc.version;\r\n        }\r\n        else if (doc.isNoDocument()) {\r\n            // For deleted docs, we must use baseVersion 0 when we overwrite them.\r\n            docVersion = SnapshotVersion.min();\r\n        }\r\n        else {\r\n            throw fail();\r\n        }\r\n        var existingVersion = this.readVersions.get(doc.key.toString());\r\n        if (existingVersion) {\r\n            if (!docVersion.isEqual(existingVersion)) {\r\n                // This transaction will fail no matter what.\r\n                throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\r\n            }\r\n        }\r\n        else {\r\n            this.readVersions.set(doc.key.toString(), docVersion);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the version of this document when it was read in this transaction,\r\n     * as a precondition, or no precondition if it was not read.\r\n     */\r\n    Transaction$3.prototype.precondition = function (key) {\r\n        var version = this.readVersions.get(key.toString());\r\n        if (!this.writtenDocs.has(key.toString()) && version) {\r\n            return Precondition.updateTime(version);\r\n        }\r\n        else {\r\n            return Precondition.none();\r\n        }\r\n    };\r\n    /**\r\n     * Returns the precondition for a document if the operation is an update.\r\n     */\r\n    Transaction$3.prototype.preconditionForUpdate = function (key) {\r\n        var version = this.readVersions.get(key.toString());\r\n        // The first time a document is written, we want to take into account the\r\n        // read time and existence\r\n        if (!this.writtenDocs.has(key.toString()) && version) {\r\n            if (version.isEqual(SnapshotVersion.min())) {\r\n                // The document doesn't exist, so fail the transaction.\r\n                // This has to be validated locally because you can't send a\r\n                // precondition that a document does not exist without changing the\r\n                // semantics of the backend write to be an insert. This is the reverse\r\n                // of what we want, since we want to assert that the document doesn't\r\n                // exist but then send the update and have it fail. Since we can't\r\n                // express that to the backend, we have to validate locally.\r\n                // Note: this can change once we can send separate verify writes in the\r\n                // transaction.\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't update a document that doesn't exist.\");\r\n            }\r\n            // Document exists, base precondition on document update time.\r\n            return Precondition.updateTime(version);\r\n        }\r\n        else {\r\n            // Document was not read, so we just use the preconditions for a blind\r\n            // update.\r\n            return Precondition.exists(true);\r\n        }\r\n    };\r\n    Transaction$3.prototype.write = function (mutation) {\r\n        this.ensureCommitNotCalled();\r\n        this.mutations.push(mutation);\r\n    };\r\n    Transaction$3.prototype.ensureCommitNotCalled = function () {\r\n    };\r\n    return Transaction$3;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DEFAULT_MAX_ATTEMPTS_COUNT = 5;\r\n/**\r\n * TransactionRunner encapsulates the logic needed to run and retry transactions\r\n * with backoff.\r\n */\r\nvar TransactionRunner = /** @class */ (function () {\r\n    function TransactionRunner(asyncQueue, datastore, updateFunction, deferred) {\r\n        this.asyncQueue = asyncQueue;\r\n        this.datastore = datastore;\r\n        this.updateFunction = updateFunction;\r\n        this.deferred = deferred;\r\n        this.attemptsRemaining = DEFAULT_MAX_ATTEMPTS_COUNT;\r\n        this.backoff = new ExponentialBackoff(this.asyncQueue, \"transaction_retry\" /* TransactionRetry */);\r\n    }\r\n    /** Runs the transaction and sets the result on deferred. */\r\n    TransactionRunner.prototype.run = function () {\r\n        this.attemptsRemaining -= 1;\r\n        this.runWithBackOff();\r\n    };\r\n    TransactionRunner.prototype.runWithBackOff = function () {\r\n        var _this = this;\r\n        this.backoff.backoffAndRun(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n            var transaction, userPromise;\r\n            var _this = this;\r\n            return tslib.__generator(this, function (_d) {\r\n                transaction = new Transaction$3(this.datastore);\r\n                userPromise = this.tryRunUpdateFunction(transaction);\r\n                if (userPromise) {\r\n                    userPromise\r\n                        .then(function (result) {\r\n                        _this.asyncQueue.enqueueAndForget(function () {\r\n                            return transaction\r\n                                .commit()\r\n                                .then(function () {\r\n                                _this.deferred.resolve(result);\r\n                            })\r\n                                .catch(function (commitError) {\r\n                                _this.handleTransactionError(commitError);\r\n                            });\r\n                        });\r\n                    })\r\n                        .catch(function (userPromiseError) {\r\n                        _this.handleTransactionError(userPromiseError);\r\n                    });\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        }); });\r\n    };\r\n    TransactionRunner.prototype.tryRunUpdateFunction = function (transaction) {\r\n        try {\r\n            var userPromise = this.updateFunction(transaction);\r\n            if (isNullOrUndefined(userPromise) ||\r\n                !userPromise.catch ||\r\n                !userPromise.then) {\r\n                this.deferred.reject(Error('Transaction callback must return a Promise'));\r\n                return null;\r\n            }\r\n            return userPromise;\r\n        }\r\n        catch (error) {\r\n            // Do not retry errors thrown by user provided updateFunction.\r\n            this.deferred.reject(error);\r\n            return null;\r\n        }\r\n    };\r\n    TransactionRunner.prototype.handleTransactionError = function (error) {\r\n        var _this = this;\r\n        if (this.attemptsRemaining > 0 && this.isRetryableTransactionError(error)) {\r\n            this.attemptsRemaining -= 1;\r\n            this.asyncQueue.enqueueAndForget(function () {\r\n                _this.runWithBackOff();\r\n                return Promise.resolve();\r\n            });\r\n        }\r\n        else {\r\n            this.deferred.reject(error);\r\n        }\r\n    };\r\n    TransactionRunner.prototype.isRetryableTransactionError = function (error) {\r\n        if (error.name === 'FirebaseError') {\r\n            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\r\n            // non-matching document versions with ABORTED. These errors should be retried.\r\n            var code = error.code;\r\n            return (code === 'aborted' ||\r\n                code === 'failed-precondition' ||\r\n                !isPermanentError(code));\r\n        }\r\n        return false;\r\n    };\r\n    return TransactionRunner;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$2 = 'FirestoreClient';\r\nvar MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;\r\n/**\r\n * FirestoreClient is a top-level class that constructs and owns all of the\r\n * pieces of the client SDK architecture. It is responsible for creating the\r\n * async queue that is shared by all of the other components in the system.\r\n */\r\nvar FirestoreClient = /** @class */ (function () {\r\n    function FirestoreClient(credentials, \r\n    /**\r\n     * Asynchronous queue responsible for all of our internal processing. When\r\n     * we get incoming work from the user (via public API) or the network\r\n     * (incoming GRPC messages), we should always schedule onto this queue.\r\n     * This ensures all of our work is properly serialized (e.g. we don't\r\n     * start processing a new operation while the previous one is waiting for\r\n     * an async I/O to complete).\r\n     */\r\n    asyncQueue, databaseInfo) {\r\n        var _this = this;\r\n        this.credentials = credentials;\r\n        this.asyncQueue = asyncQueue;\r\n        this.databaseInfo = databaseInfo;\r\n        this.user = User.UNAUTHENTICATED;\r\n        this.clientId = AutoId.newId();\r\n        this.credentialListener = function () { return Promise.resolve(); };\r\n        this.credentials.setChangeListener(asyncQueue, function (user) { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        logDebug(LOG_TAG$2, 'Received user=', user.uid);\r\n                        return [4 /*yield*/, this.credentialListener(user)];\r\n                    case 1:\r\n                        _d.sent();\r\n                        this.user = user;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    }\r\n    FirestoreClient.prototype.getConfiguration = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                return [2 /*return*/, {\r\n                        asyncQueue: this.asyncQueue,\r\n                        databaseInfo: this.databaseInfo,\r\n                        clientId: this.clientId,\r\n                        credentials: this.credentials,\r\n                        initialUser: this.user,\r\n                        maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS\r\n                    }];\r\n            });\r\n        });\r\n    };\r\n    FirestoreClient.prototype.setCredentialChangeListener = function (listener) {\r\n        this.credentialListener = listener;\r\n    };\r\n    /**\r\n     * Checks that the client has not been terminated. Ensures that other methods on\r\n     * this class cannot be called after the client is terminated.\r\n     */\r\n    FirestoreClient.prototype.verifyNotTerminated = function () {\r\n        if (this.asyncQueue.isShuttingDown) {\r\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'The client has already been terminated.');\r\n        }\r\n    };\r\n    FirestoreClient.prototype.terminate = function () {\r\n        var _this = this;\r\n        this.asyncQueue.enterRestrictedMode();\r\n        var deferred = new Deferred();\r\n        this.asyncQueue.enqueueAndForgetEvenWhileRestricted(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n            var e_11, firestoreError;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        _d.trys.push([0, 5, , 6]);\r\n                        if (!this.onlineComponents) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.onlineComponents.terminate()];\r\n                    case 1:\r\n                        _d.sent();\r\n                        _d.label = 2;\r\n                    case 2:\r\n                        if (!this.offlineComponents) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, this.offlineComponents.terminate()];\r\n                    case 3:\r\n                        _d.sent();\r\n                        _d.label = 4;\r\n                    case 4:\r\n                        // `removeChangeListener` must be called after shutting down the\r\n                        // RemoteStore as it will prevent the RemoteStore from retrieving\r\n                        // auth tokens.\r\n                        this.credentials.removeChangeListener();\r\n                        deferred.resolve();\r\n                        return [3 /*break*/, 6];\r\n                    case 5:\r\n                        e_11 = _d.sent();\r\n                        firestoreError = wrapInUserErrorIfRecoverable(e_11, \"Failed to shutdown persistence\");\r\n                        deferred.reject(firestoreError);\r\n                        return [3 /*break*/, 6];\r\n                    case 6: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n        return deferred.promise;\r\n    };\r\n    return FirestoreClient;\r\n}());\r\nfunction setOfflineComponentProvider(client, offlineComponentProvider) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var configuration, currentUser;\r\n        var _this = this;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    client.asyncQueue.verifyOperationInProgress();\r\n                    logDebug(LOG_TAG$2, 'Initializing OfflineComponentProvider');\r\n                    return [4 /*yield*/, client.getConfiguration()];\r\n                case 1:\r\n                    configuration = _d.sent();\r\n                    return [4 /*yield*/, offlineComponentProvider.initialize(configuration)];\r\n                case 2:\r\n                    _d.sent();\r\n                    currentUser = configuration.initialUser;\r\n                    client.setCredentialChangeListener(function (user) { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n                        return tslib.__generator(this, function (_d) {\r\n                            switch (_d.label) {\r\n                                case 0:\r\n                                    if (!!currentUser.isEqual(user)) return [3 /*break*/, 2];\r\n                                    return [4 /*yield*/, localStoreHandleUserChange(offlineComponentProvider.localStore, user)];\r\n                                case 1:\r\n                                    _d.sent();\r\n                                    currentUser = user;\r\n                                    _d.label = 2;\r\n                                case 2: return [2 /*return*/];\r\n                            }\r\n                        });\r\n                    }); });\r\n                    // When a user calls clearPersistence() in one client, all other clients\r\n                    // need to be terminated to allow the delete to succeed.\r\n                    offlineComponentProvider.persistence.setDatabaseDeletedListener(function () { return client.terminate(); });\r\n                    client.offlineComponents = offlineComponentProvider;\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction setOnlineComponentProvider(client, onlineComponentProvider) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var offlineComponentProvider, configuration;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    client.asyncQueue.verifyOperationInProgress();\r\n                    return [4 /*yield*/, ensureOfflineComponents(client)];\r\n                case 1:\r\n                    offlineComponentProvider = _d.sent();\r\n                    logDebug(LOG_TAG$2, 'Initializing OnlineComponentProvider');\r\n                    return [4 /*yield*/, client.getConfiguration()];\r\n                case 2:\r\n                    configuration = _d.sent();\r\n                    return [4 /*yield*/, onlineComponentProvider.initialize(offlineComponentProvider, configuration)];\r\n                case 3:\r\n                    _d.sent();\r\n                    // The CredentialChangeListener of the online component provider takes\r\n                    // precedence over the offline component provider.\r\n                    client.setCredentialChangeListener(function (user) { return remoteStoreHandleCredentialChange(onlineComponentProvider.remoteStore, user); });\r\n                    client.onlineComponents = onlineComponentProvider;\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction ensureOfflineComponents(client) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    if (!!client.offlineComponents) return [3 /*break*/, 2];\r\n                    logDebug(LOG_TAG$2, 'Using default OfflineComponentProvider');\r\n                    return [4 /*yield*/, setOfflineComponentProvider(client, new MemoryOfflineComponentProvider())];\r\n                case 1:\r\n                    _d.sent();\r\n                    _d.label = 2;\r\n                case 2: return [2 /*return*/, client.offlineComponents];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction ensureOnlineComponents(client) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    if (!!client.onlineComponents) return [3 /*break*/, 2];\r\n                    logDebug(LOG_TAG$2, 'Using default OnlineComponentProvider');\r\n                    return [4 /*yield*/, setOnlineComponentProvider(client, new OnlineComponentProvider())];\r\n                case 1:\r\n                    _d.sent();\r\n                    _d.label = 2;\r\n                case 2: return [2 /*return*/, client.onlineComponents];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction getPersistence(client) {\r\n    return ensureOfflineComponents(client).then(function (c) { return c.persistence; });\r\n}\r\nfunction getLocalStore(client) {\r\n    return ensureOfflineComponents(client).then(function (c) { return c.localStore; });\r\n}\r\nfunction getRemoteStore(client) {\r\n    return ensureOnlineComponents(client).then(function (c) { return c.remoteStore; });\r\n}\r\nfunction getSyncEngine(client) {\r\n    return ensureOnlineComponents(client).then(function (c) { return c.syncEngine; });\r\n}\r\nfunction getDatastore(client) {\r\n    return ensureOnlineComponents(client).then(function (c) { return c.datastore; });\r\n}\r\nfunction getEventManager(client) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var onlineComponentProvider, eventManager;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, ensureOnlineComponents(client)];\r\n                case 1:\r\n                    onlineComponentProvider = _d.sent();\r\n                    eventManager = onlineComponentProvider.eventManager;\r\n                    eventManager.onListen = syncEngineListen.bind(null, onlineComponentProvider.syncEngine);\r\n                    eventManager.onUnlisten = syncEngineUnlisten.bind(null, onlineComponentProvider.syncEngine);\r\n                    return [2 /*return*/, eventManager];\r\n            }\r\n        });\r\n    });\r\n}\r\n/** Enables the network connection and re-enqueues all pending operations. */\r\nfunction firestoreClientEnableNetwork(client) {\r\n    var _this = this;\r\n    return client.asyncQueue.enqueue(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var persistence, remoteStore;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, getPersistence(client)];\r\n                case 1:\r\n                    persistence = _d.sent();\r\n                    return [4 /*yield*/, getRemoteStore(client)];\r\n                case 2:\r\n                    remoteStore = _d.sent();\r\n                    persistence.setNetworkEnabled(true);\r\n                    return [2 /*return*/, remoteStoreEnableNetwork(remoteStore)];\r\n            }\r\n        });\r\n    }); });\r\n}\r\n/** Disables the network connection. Pending operations will not complete. */\r\nfunction firestoreClientDisableNetwork(client) {\r\n    var _this = this;\r\n    return client.asyncQueue.enqueue(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var persistence, remoteStore;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, getPersistence(client)];\r\n                case 1:\r\n                    persistence = _d.sent();\r\n                    return [4 /*yield*/, getRemoteStore(client)];\r\n                case 2:\r\n                    remoteStore = _d.sent();\r\n                    persistence.setNetworkEnabled(false);\r\n                    return [2 /*return*/, remoteStoreDisableNetwork(remoteStore)];\r\n            }\r\n        });\r\n    }); });\r\n}\r\n/**\r\n * Returns a Promise that resolves when all writes that were pending at the time\r\n * this method was called received server acknowledgement. An acknowledgement\r\n * can be either acceptance or rejection.\r\n */\r\nfunction firestoreClientWaitForPendingWrites(client) {\r\n    var _this = this;\r\n    var deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var syncEngine;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, getSyncEngine(client)];\r\n                case 1:\r\n                    syncEngine = _d.sent();\r\n                    return [2 /*return*/, syncEngineRegisterPendingWritesCallback(syncEngine, deferred)];\r\n            }\r\n        });\r\n    }); });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientListen(client, query, options, observer) {\r\n    var _this = this;\r\n    var wrappedObserver = new AsyncObserver(observer);\r\n    var listener = new QueryListener(query, wrappedObserver, options);\r\n    client.asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var eventManager;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, getEventManager(client)];\r\n                case 1:\r\n                    eventManager = _d.sent();\r\n                    return [2 /*return*/, eventManagerListen(eventManager, listener)];\r\n            }\r\n        });\r\n    }); });\r\n    return function () {\r\n        wrappedObserver.mute();\r\n        client.asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n            var eventManager;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0: return [4 /*yield*/, getEventManager(client)];\r\n                    case 1:\r\n                        eventManager = _d.sent();\r\n                        return [2 /*return*/, eventManagerUnlisten(eventManager, listener)];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n}\r\nfunction firestoreClientGetDocumentFromLocalCache(client, docKey) {\r\n    var _this = this;\r\n    var deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var localStore;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, getLocalStore(client)];\r\n                case 1:\r\n                    localStore = _d.sent();\r\n                    return [2 /*return*/, readDocumentFromCache(localStore, docKey, deferred)];\r\n            }\r\n        });\r\n    }); });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientGetDocumentViaSnapshotListener(client, key, options) {\r\n    var _this = this;\r\n    if (options === void 0) { options = {}; }\r\n    var deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var eventManager;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, getEventManager(client)];\r\n                case 1:\r\n                    eventManager = _d.sent();\r\n                    return [2 /*return*/, readDocumentViaSnapshotListener(eventManager, client.asyncQueue, key, options, deferred)];\r\n            }\r\n        });\r\n    }); });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientGetDocumentsFromLocalCache(client, query) {\r\n    var _this = this;\r\n    var deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var localStore;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, getLocalStore(client)];\r\n                case 1:\r\n                    localStore = _d.sent();\r\n                    return [2 /*return*/, executeQueryFromCache(localStore, query, deferred)];\r\n            }\r\n        });\r\n    }); });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientGetDocumentsViaSnapshotListener(client, query, options) {\r\n    var _this = this;\r\n    if (options === void 0) { options = {}; }\r\n    var deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var eventManager;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, getEventManager(client)];\r\n                case 1:\r\n                    eventManager = _d.sent();\r\n                    return [2 /*return*/, executeQueryViaSnapshotListener(eventManager, client.asyncQueue, query, options, deferred)];\r\n            }\r\n        });\r\n    }); });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientWrite(client, mutations) {\r\n    var _this = this;\r\n    var deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var syncEngine;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, getSyncEngine(client)];\r\n                case 1:\r\n                    syncEngine = _d.sent();\r\n                    return [2 /*return*/, syncEngineWrite(syncEngine, mutations, deferred)];\r\n            }\r\n        });\r\n    }); });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientAddSnapshotsInSyncListener(client, observer) {\r\n    var _this = this;\r\n    var wrappedObserver = new AsyncObserver(observer);\r\n    client.asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var eventManager;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, getEventManager(client)];\r\n                case 1:\r\n                    eventManager = _d.sent();\r\n                    return [2 /*return*/, addSnapshotsInSyncListener(eventManager, wrappedObserver)];\r\n            }\r\n        });\r\n    }); });\r\n    return function () {\r\n        wrappedObserver.mute();\r\n        client.asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n            var eventManager;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0: return [4 /*yield*/, getEventManager(client)];\r\n                    case 1:\r\n                        eventManager = _d.sent();\r\n                        return [2 /*return*/, removeSnapshotsInSyncListener(eventManager, wrappedObserver)];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n}\r\n/**\r\n * Takes an updateFunction in which a set of reads and writes can be performed\r\n * atomically. In the updateFunction, the client can read and write values\r\n * using the supplied transaction object. After the updateFunction, all\r\n * changes will be committed. If a retryable error occurs (ex: some other\r\n * client has changed any of the data referenced), then the updateFunction\r\n * will be called again after a backoff. If the updateFunction still fails\r\n * after all retries, then the transaction will be rejected.\r\n *\r\n * The transaction object passed to the updateFunction contains methods for\r\n * accessing documents and collections. Unlike other datastore access, data\r\n * accessed with the transaction will not reflect local changes that have not\r\n * been committed. For this reason, it is required that all reads are\r\n * performed before any writes. Transactions must be performed while online.\r\n */\r\nfunction firestoreClientTransaction(client, updateFunction) {\r\n    var _this = this;\r\n    var deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var datastore;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0: return [4 /*yield*/, getDatastore(client)];\r\n                case 1:\r\n                    datastore = _d.sent();\r\n                    new TransactionRunner(client.asyncQueue, datastore, updateFunction, deferred).run();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n    return deferred.promise;\r\n}\r\nfunction readDocumentFromCache(localStore, docKey, result) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var document_4, e_12, firestoreError;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    _d.trys.push([0, 2, , 3]);\r\n                    return [4 /*yield*/, localStoreReadDocument(localStore, docKey)];\r\n                case 1:\r\n                    document_4 = _d.sent();\r\n                    if (document_4.isFoundDocument()) {\r\n                        result.resolve(document_4);\r\n                    }\r\n                    else if (document_4.isNoDocument()) {\r\n                        result.resolve(null);\r\n                    }\r\n                    else {\r\n                        result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from cache. (However, this document may ' +\r\n                            \"exist on the server. Run again without setting 'source' in \" +\r\n                            'the GetOptions to attempt to retrieve the document from the ' +\r\n                            'server.)'));\r\n                    }\r\n                    return [3 /*break*/, 3];\r\n                case 2:\r\n                    e_12 = _d.sent();\r\n                    firestoreError = wrapInUserErrorIfRecoverable(e_12, \"Failed to get document '\" + docKey + \" from cache\");\r\n                    result.reject(firestoreError);\r\n                    return [3 /*break*/, 3];\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Retrieves a latency-compensated document from the backend via a\r\n * SnapshotListener.\r\n */\r\nfunction readDocumentViaSnapshotListener(eventManager, asyncQueue, key, options, result) {\r\n    var wrappedObserver = new AsyncObserver({\r\n        next: function (snap) {\r\n            // Remove query first before passing event to user to avoid\r\n            // user actions affecting the now stale query.\r\n            asyncQueue.enqueueAndForget(function () { return eventManagerUnlisten(eventManager, listener); });\r\n            var exists = snap.docs.has(key);\r\n            if (!exists && snap.fromCache) {\r\n                // TODO(dimond): If we're online and the document doesn't\r\n                // exist then we resolve with a doc.exists set to false. If\r\n                // we're offline however, we reject the Promise in this\r\n                // case. Two options: 1) Cache the negative response from\r\n                // the server so we can deliver that even when you're\r\n                // offline 2) Actually reject the Promise in the online case\r\n                // if the document doesn't exist.\r\n                result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document because the client is offline.'));\r\n            }\r\n            else if (exists &&\r\n                snap.fromCache &&\r\n                options &&\r\n                options.source === 'server') {\r\n                result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from server. (However, this ' +\r\n                    'document does exist in the local cache. Run again ' +\r\n                    'without setting source to \"server\" to ' +\r\n                    'retrieve the cached document.)'));\r\n            }\r\n            else {\r\n                result.resolve(snap);\r\n            }\r\n        },\r\n        error: function (e) { return result.reject(e); }\r\n    });\r\n    var listener = new QueryListener(newQueryForPath(key.path), wrappedObserver, {\r\n        includeMetadataChanges: true,\r\n        waitForSyncWhenOnline: true\r\n    });\r\n    return eventManagerListen(eventManager, listener);\r\n}\r\nfunction executeQueryFromCache(localStore, query, result) {\r\n    return tslib.__awaiter(this, void 0, void 0, function () {\r\n        var queryResult, view, viewDocChanges, viewChange, e_13, firestoreError;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    _d.trys.push([0, 2, , 3]);\r\n                    return [4 /*yield*/, localStoreExecuteQuery(localStore, query, \r\n                        /* usePreviousResults= */ true)];\r\n                case 1:\r\n                    queryResult = _d.sent();\r\n                    view = new View(query, queryResult.remoteKeys);\r\n                    viewDocChanges = view.computeDocChanges(queryResult.documents);\r\n                    viewChange = view.applyChanges(viewDocChanges, \r\n                    /* updateLimboDocuments= */ false);\r\n                    result.resolve(viewChange.snapshot);\r\n                    return [3 /*break*/, 3];\r\n                case 2:\r\n                    e_13 = _d.sent();\r\n                    firestoreError = wrapInUserErrorIfRecoverable(e_13, \"Failed to execute query '\" + query + \" against cache\");\r\n                    result.reject(firestoreError);\r\n                    return [3 /*break*/, 3];\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Retrieves a latency-compensated query snapshot from the backend via a\r\n * SnapshotListener.\r\n */\r\nfunction executeQueryViaSnapshotListener(eventManager, asyncQueue, query, options, result) {\r\n    var wrappedObserver = new AsyncObserver({\r\n        next: function (snapshot) {\r\n            // Remove query first before passing event to user to avoid\r\n            // user actions affecting the now stale query.\r\n            asyncQueue.enqueueAndForget(function () { return eventManagerUnlisten(eventManager, listener); });\r\n            if (snapshot.fromCache && options.source === 'server') {\r\n                result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get documents from server. (However, these ' +\r\n                    'documents may exist in the local cache. Run again ' +\r\n                    'without setting source to \"server\" to ' +\r\n                    'retrieve the cached documents.)'));\r\n            }\r\n            else {\r\n                result.resolve(snapshot);\r\n            }\r\n        },\r\n        error: function (e) { return result.reject(e); }\r\n    });\r\n    var listener = new QueryListener(query, wrappedObserver, {\r\n        includeMetadataChanges: true,\r\n        waitForSyncWhenOnline: true\r\n    });\r\n    return eventManagerListen(eventManager, listener);\r\n}\r\nfunction firestoreClientLoadBundle(client, databaseId, data, resultTask) {\r\n    var _this = this;\r\n    var reader = createBundleReader(data, newSerializer(databaseId));\r\n    client.asyncQueue.enqueueAndForget(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var _d;\r\n        return tslib.__generator(this, function (_e) {\r\n            switch (_e.label) {\r\n                case 0:\r\n                    _d = syncEngineLoadBundle;\r\n                    return [4 /*yield*/, getSyncEngine(client)];\r\n                case 1:\r\n                    _d.apply(void 0, [_e.sent(), reader, resultTask]);\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nfunction firestoreClientGetNamedQuery(client, queryName) {\r\n    var _this = this;\r\n    return client.asyncQueue.enqueue(function () { return tslib.__awaiter(_this, void 0, void 0, function () { var _d; return tslib.__generator(this, function (_e) {\r\n        switch (_e.label) {\r\n            case 0:\r\n                _d = localStoreGetNamedQuery;\r\n                return [4 /*yield*/, getLocalStore(client)];\r\n            case 1: return [2 /*return*/, _d.apply(void 0, [_e.sent(), queryName])];\r\n        }\r\n    }); }); });\r\n}\r\nfunction createBundleReader(data, serializer) {\r\n    var content;\r\n    if (typeof data === 'string') {\r\n        content = newTextEncoder().encode(data);\r\n    }\r\n    else {\r\n        content = data;\r\n    }\r\n    return newBundleReader(toByteStreamReader(content), serializer);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DatabaseInfo = /** @class */ (function () {\r\n    /**\r\n     * Constructs a DatabaseInfo using the provided host, databaseId and\r\n     * persistenceKey.\r\n     *\r\n     * @param databaseId - The database to use.\r\n     * @param appId - The Firebase App Id.\r\n     * @param persistenceKey - A unique identifier for this Firestore's local\r\n     * storage (used in conjunction with the databaseId).\r\n     * @param host - The Firestore backend host to connect to.\r\n     * @param ssl - Whether to use SSL when connecting.\r\n     * @param forceLongPolling - Whether to use the forceLongPolling option\r\n     * when using WebChannel as the network transport.\r\n     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\r\n     * option when using WebChannel as the network transport.\r\n     * @param useFetchStreams Whether to use the Fetch API instead of\r\n     * XMLHTTPRequest\r\n     */\r\n    function DatabaseInfo(databaseId, appId, persistenceKey, host, ssl, forceLongPolling, autoDetectLongPolling, useFetchStreams) {\r\n        this.databaseId = databaseId;\r\n        this.appId = appId;\r\n        this.persistenceKey = persistenceKey;\r\n        this.host = host;\r\n        this.ssl = ssl;\r\n        this.forceLongPolling = forceLongPolling;\r\n        this.autoDetectLongPolling = autoDetectLongPolling;\r\n        this.useFetchStreams = useFetchStreams;\r\n    }\r\n    return DatabaseInfo;\r\n}());\r\n/** The default database name for a project. */\r\nvar DEFAULT_DATABASE_NAME = '(default)';\r\n/** Represents the database ID a Firestore client is associated with. */\r\nvar DatabaseId = /** @class */ (function () {\r\n    function DatabaseId(projectId, database) {\r\n        this.projectId = projectId;\r\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\r\n    }\r\n    Object.defineProperty(DatabaseId.prototype, \"isDefaultDatabase\", {\r\n        get: function () {\r\n            return this.database === DEFAULT_DATABASE_NAME;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DatabaseId.prototype.isEqual = function (other) {\r\n        return (other instanceof DatabaseId &&\r\n            other.projectId === this.projectId &&\r\n            other.database === this.database);\r\n    };\r\n    return DatabaseId;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG$1 = 'ComponentProvider';\r\n/**\r\n * An instance map that ensures only one Datastore exists per Firestore\r\n * instance.\r\n */\r\nvar datastoreInstances = new Map();\r\n/**\r\n * Removes all components associated with the provided instance. Must be called\r\n * when the `Firestore` instance is terminated.\r\n */\r\nfunction removeComponents(firestore) {\r\n    var datastore = datastoreInstances.get(firestore);\r\n    if (datastore) {\r\n        logDebug(LOG_TAG$1, 'Removing Datastore');\r\n        datastoreInstances.delete(firestore);\r\n        datastore.terminate();\r\n    }\r\n}\r\nfunction makeDatabaseInfo(databaseId, appId, persistenceKey, settings) {\r\n    return new DatabaseInfo(databaseId, appId, persistenceKey, settings.host, settings.ssl, settings.experimentalForceLongPolling, settings.experimentalAutoDetectLongPolling, settings.useFetchStreams);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar OAuthToken = /** @class */ (function () {\r\n    function OAuthToken(value, user) {\r\n        this.user = user;\r\n        this.type = 'OAuth';\r\n        this.authHeaders = {};\r\n        // Set the headers using Object Literal notation to avoid minification\r\n        this.authHeaders['Authorization'] = \"Bearer \" + value;\r\n    }\r\n    return OAuthToken;\r\n}());\r\n/** A CredentialsProvider that always yields an empty token. */\r\nvar EmptyCredentialsProvider = /** @class */ (function () {\r\n    function EmptyCredentialsProvider() {\r\n        /**\r\n         * Stores the listener registered with setChangeListener()\r\n         * This isn't actually necessary since the UID never changes, but we use this\r\n         * to verify the listen contract is adhered to in tests.\r\n         */\r\n        this.changeListener = null;\r\n    }\r\n    EmptyCredentialsProvider.prototype.getToken = function () {\r\n        return Promise.resolve(null);\r\n    };\r\n    EmptyCredentialsProvider.prototype.invalidateToken = function () { };\r\n    EmptyCredentialsProvider.prototype.setChangeListener = function (asyncQueue, changeListener) {\r\n        this.changeListener = changeListener;\r\n        // Fire with initial user.\r\n        asyncQueue.enqueueRetryable(function () { return changeListener(User.UNAUTHENTICATED); });\r\n    };\r\n    EmptyCredentialsProvider.prototype.removeChangeListener = function () {\r\n        this.changeListener = null;\r\n    };\r\n    return EmptyCredentialsProvider;\r\n}());\r\n/**\r\n * A CredentialsProvider that always returns a constant token. Used for\r\n * emulator token mocking.\r\n */\r\nvar EmulatorCredentialsProvider = /** @class */ (function () {\r\n    function EmulatorCredentialsProvider(token) {\r\n        this.token = token;\r\n        /**\r\n         * Stores the listener registered with setChangeListener()\r\n         * This isn't actually necessary since the UID never changes, but we use this\r\n         * to verify the listen contract is adhered to in tests.\r\n         */\r\n        this.changeListener = null;\r\n    }\r\n    EmulatorCredentialsProvider.prototype.getToken = function () {\r\n        return Promise.resolve(this.token);\r\n    };\r\n    EmulatorCredentialsProvider.prototype.invalidateToken = function () { };\r\n    EmulatorCredentialsProvider.prototype.setChangeListener = function (asyncQueue, changeListener) {\r\n        var _this = this;\r\n        this.changeListener = changeListener;\r\n        // Fire with initial user.\r\n        asyncQueue.enqueueRetryable(function () { return changeListener(_this.token.user); });\r\n    };\r\n    EmulatorCredentialsProvider.prototype.removeChangeListener = function () {\r\n        this.changeListener = null;\r\n    };\r\n    return EmulatorCredentialsProvider;\r\n}());\r\nvar FirebaseCredentialsProvider = /** @class */ (function () {\r\n    function FirebaseCredentialsProvider(authProvider) {\r\n        var _this = this;\r\n        /** Tracks the current User. */\r\n        this.currentUser = User.UNAUTHENTICATED;\r\n        /** Promise that allows blocking on the initialization of Firebase Auth. */\r\n        this.authDeferred = new Deferred();\r\n        /**\r\n         * Counter used to detect if the token changed while a getToken request was\r\n         * outstanding.\r\n         */\r\n        this.tokenCounter = 0;\r\n        this.forceRefresh = false;\r\n        this.auth = null;\r\n        this.asyncQueue = null;\r\n        this.tokenListener = function () {\r\n            _this.tokenCounter++;\r\n            _this.currentUser = _this.getUser();\r\n            _this.authDeferred.resolve();\r\n            if (_this.changeListener) {\r\n                _this.asyncQueue.enqueueRetryable(function () { return _this.changeListener(_this.currentUser); });\r\n            }\r\n        };\r\n        var registerAuth = function (auth) {\r\n            logDebug('FirebaseCredentialsProvider', 'Auth detected');\r\n            _this.auth = auth;\r\n            _this.auth.addAuthTokenListener(_this.tokenListener);\r\n        };\r\n        authProvider.onInit(function (auth) { return registerAuth(auth); });\r\n        // Our users can initialize Auth right after Firestore, so we give it\r\n        // a chance to register itself with the component framework before we\r\n        // determine whether to start up in unauthenticated mode.\r\n        setTimeout(function () {\r\n            if (!_this.auth) {\r\n                var auth = authProvider.getImmediate({ optional: true });\r\n                if (auth) {\r\n                    registerAuth(auth);\r\n                }\r\n                else {\r\n                    // If auth is still not available, proceed with `null` user\r\n                    logDebug('FirebaseCredentialsProvider', 'Auth not yet detected');\r\n                    _this.authDeferred.resolve();\r\n                }\r\n            }\r\n        }, 0);\r\n    }\r\n    FirebaseCredentialsProvider.prototype.getToken = function () {\r\n        var _this = this;\r\n        // Take note of the current value of the tokenCounter so that this method\r\n        // can fail (with an ABORTED error) if there is a token change while the\r\n        // request is outstanding.\r\n        var initialTokenCounter = this.tokenCounter;\r\n        var forceRefresh = this.forceRefresh;\r\n        this.forceRefresh = false;\r\n        if (!this.auth) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.auth.getToken(forceRefresh).then(function (tokenData) {\r\n            // Cancel the request since the token changed while the request was\r\n            // outstanding so the response is potentially for a previous user (which\r\n            // user, we can't be sure).\r\n            if (_this.tokenCounter !== initialTokenCounter) {\r\n                logDebug('FirebaseCredentialsProvider', 'getToken aborted due to token change.');\r\n                return _this.getToken();\r\n            }\r\n            else {\r\n                if (tokenData) {\r\n                    hardAssert(typeof tokenData.accessToken === 'string');\r\n                    return new OAuthToken(tokenData.accessToken, _this.currentUser);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    FirebaseCredentialsProvider.prototype.invalidateToken = function () {\r\n        this.forceRefresh = true;\r\n    };\r\n    FirebaseCredentialsProvider.prototype.setChangeListener = function (asyncQueue, changeListener) {\r\n        var _this = this;\r\n        this.asyncQueue = asyncQueue;\r\n        // Blocks the AsyncQueue until the next user is available.\r\n        this.asyncQueue.enqueueRetryable(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0: return [4 /*yield*/, this.authDeferred.promise];\r\n                    case 1:\r\n                        _d.sent();\r\n                        return [4 /*yield*/, changeListener(this.currentUser)];\r\n                    case 2:\r\n                        _d.sent();\r\n                        this.changeListener = changeListener;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    FirebaseCredentialsProvider.prototype.removeChangeListener = function () {\r\n        if (this.auth) {\r\n            this.auth.removeAuthTokenListener(this.tokenListener);\r\n        }\r\n        this.changeListener = function () { return Promise.resolve(); };\r\n    };\r\n    // Auth.getUid() can return null even with a user logged in. It is because\r\n    // getUid() is synchronous, but the auth code populating Uid is asynchronous.\r\n    // This method should only be called in the AuthTokenListener callback\r\n    // to guarantee to get the actual user.\r\n    FirebaseCredentialsProvider.prototype.getUser = function () {\r\n        var currentUid = this.auth && this.auth.getUid();\r\n        hardAssert(currentUid === null || typeof currentUid === 'string');\r\n        return new User(currentUid);\r\n    };\r\n    return FirebaseCredentialsProvider;\r\n}());\r\n/*\r\n * FirstPartyToken provides a fresh token each time its value\r\n * is requested, because if the token is too old, requests will be rejected.\r\n * Technically this may no longer be necessary since the SDK should gracefully\r\n * recover from unauthenticated errors (see b/33147818 for context), but it's\r\n * safer to keep the implementation as-is.\r\n */\r\nvar FirstPartyToken = /** @class */ (function () {\r\n    function FirstPartyToken(gapi, sessionIndex, iamToken) {\r\n        this.gapi = gapi;\r\n        this.sessionIndex = sessionIndex;\r\n        this.iamToken = iamToken;\r\n        this.type = 'FirstParty';\r\n        this.user = User.FIRST_PARTY;\r\n    }\r\n    Object.defineProperty(FirstPartyToken.prototype, \"authHeaders\", {\r\n        get: function () {\r\n            var headers = {\r\n                'X-Goog-AuthUser': this.sessionIndex\r\n            };\r\n            // Use array notation to prevent minification\r\n            var authHeader = this.gapi['auth']['getAuthHeaderValueForFirstParty']([]);\r\n            if (authHeader) {\r\n                headers['Authorization'] = authHeader;\r\n            }\r\n            if (this.iamToken) {\r\n                headers['X-Goog-Iam-Authorization-Token'] = this.iamToken;\r\n            }\r\n            return headers;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return FirstPartyToken;\r\n}());\r\n/*\r\n * Provides user credentials required for the Firestore JavaScript SDK\r\n * to authenticate the user, using technique that is only available\r\n * to applications hosted by Google.\r\n */\r\nvar FirstPartyCredentialsProvider = /** @class */ (function () {\r\n    function FirstPartyCredentialsProvider(gapi, sessionIndex, iamToken) {\r\n        this.gapi = gapi;\r\n        this.sessionIndex = sessionIndex;\r\n        this.iamToken = iamToken;\r\n    }\r\n    FirstPartyCredentialsProvider.prototype.getToken = function () {\r\n        return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex, this.iamToken));\r\n    };\r\n    FirstPartyCredentialsProvider.prototype.setChangeListener = function (asyncQueue, changeListener) {\r\n        // Fire with initial uid.\r\n        asyncQueue.enqueueRetryable(function () { return changeListener(User.FIRST_PARTY); });\r\n    };\r\n    FirstPartyCredentialsProvider.prototype.removeChangeListener = function () { };\r\n    FirstPartyCredentialsProvider.prototype.invalidateToken = function () { };\r\n    return FirstPartyCredentialsProvider;\r\n}());\r\n/**\r\n * Builds a CredentialsProvider depending on the type of\r\n * the credentials passed in.\r\n */\r\nfunction makeCredentialsProvider(credentials) {\r\n    if (!credentials) {\r\n        return new EmptyCredentialsProvider();\r\n    }\r\n    switch (credentials['type']) {\r\n        case 'gapi':\r\n            var client = credentials['client'];\r\n            // Make sure this really is a Gapi client.\r\n            hardAssert(!!(typeof client === 'object' &&\r\n                client !== null &&\r\n                client['auth'] &&\r\n                client['auth']['getAuthHeaderValueForFirstParty']));\r\n            return new FirstPartyCredentialsProvider(client, credentials['sessionIndex'] || '0', credentials['iamToken'] || null);\r\n        case 'provider':\r\n            return credentials['client'];\r\n        default:\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// settings() defaults:\r\nvar DEFAULT_HOST = 'firestore.googleapis.com';\r\nvar DEFAULT_SSL = true;\r\n/**\r\n * A concrete type describing all the values that can be applied via a\r\n * user-supplied firestore.Settings object. This is a separate type so that\r\n * defaults can be supplied and the value can be checked for equality.\r\n */\r\nvar FirestoreSettingsImpl = /** @class */ (function () {\r\n    function FirestoreSettingsImpl(settings) {\r\n        var _a;\r\n        if (settings.host === undefined) {\r\n            if (settings.ssl !== undefined) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\r\n            }\r\n            this.host = DEFAULT_HOST;\r\n            this.ssl = DEFAULT_SSL;\r\n        }\r\n        else {\r\n            this.host = settings.host;\r\n            this.ssl = (_a = settings.ssl) !== null && _a !== void 0 ? _a : DEFAULT_SSL;\r\n        }\r\n        this.credentials = settings.credentials;\r\n        this.ignoreUndefinedProperties = !!settings.ignoreUndefinedProperties;\r\n        if (settings.cacheSizeBytes === undefined) {\r\n            this.cacheSizeBytes = LRU_DEFAULT_CACHE_SIZE_BYTES;\r\n        }\r\n        else {\r\n            if (settings.cacheSizeBytes !== LRU_COLLECTION_DISABLED &&\r\n                settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"cacheSizeBytes must be at least \" + LRU_MINIMUM_CACHE_SIZE_BYTES);\r\n            }\r\n            else {\r\n                this.cacheSizeBytes = settings.cacheSizeBytes;\r\n            }\r\n        }\r\n        this.experimentalForceLongPolling = !!settings.experimentalForceLongPolling;\r\n        this.experimentalAutoDetectLongPolling =\r\n            !!settings.experimentalAutoDetectLongPolling;\r\n        this.useFetchStreams = !!settings.useFetchStreams;\r\n        validateIsNotUsedTogether('experimentalForceLongPolling', settings.experimentalForceLongPolling, 'experimentalAutoDetectLongPolling', settings.experimentalAutoDetectLongPolling);\r\n    }\r\n    FirestoreSettingsImpl.prototype.isEqual = function (other) {\r\n        return (this.host === other.host &&\r\n            this.ssl === other.ssl &&\r\n            this.credentials === other.credentials &&\r\n            this.cacheSizeBytes === other.cacheSizeBytes &&\r\n            this.experimentalForceLongPolling ===\r\n                other.experimentalForceLongPolling &&\r\n            this.experimentalAutoDetectLongPolling ===\r\n                other.experimentalAutoDetectLongPolling &&\r\n            this.ignoreUndefinedProperties === other.ignoreUndefinedProperties &&\r\n            this.useFetchStreams === other.useFetchStreams);\r\n    };\r\n    return FirestoreSettingsImpl;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The Cloud Firestore service interface.\r\n *\r\n * Do not call this constructor directly. Instead, use {@link getFirestore}.\r\n */\r\nvar Firestore$2 = /** @class */ (function () {\r\n    /** @hideconstructor */\r\n    function Firestore$2(databaseIdOrApp, authProvider) {\r\n        /**\r\n         * Whether it's a Firestore or Firestore Lite instance.\r\n         */\r\n        this.type = 'firestore-lite';\r\n        this._persistenceKey = '(lite)';\r\n        this._settings = new FirestoreSettingsImpl({});\r\n        this._settingsFrozen = false;\r\n        if (databaseIdOrApp instanceof DatabaseId) {\r\n            this._databaseId = databaseIdOrApp;\r\n            this._credentials = new EmptyCredentialsProvider();\r\n        }\r\n        else {\r\n            this._app = databaseIdOrApp;\r\n            this._databaseId = databaseIdFromApp(databaseIdOrApp);\r\n            this._credentials = new FirebaseCredentialsProvider(authProvider);\r\n        }\r\n    }\r\n    Object.defineProperty(Firestore$2.prototype, \"app\", {\r\n        /**\r\n         * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\r\n         * instance.\r\n         */\r\n        get: function () {\r\n            if (!this._app) {\r\n                throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\r\n                    'not available');\r\n            }\r\n            return this._app;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Firestore$2.prototype, \"_initialized\", {\r\n        get: function () {\r\n            return this._settingsFrozen;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Firestore$2.prototype, \"_terminated\", {\r\n        get: function () {\r\n            return this._terminateTask !== undefined;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Firestore$2.prototype._setSettings = function (settings) {\r\n        if (this._settingsFrozen) {\r\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +\r\n                'be changed. You can only modify settings before calling any other ' +\r\n                'methods on a Firestore object.');\r\n        }\r\n        this._settings = new FirestoreSettingsImpl(settings);\r\n        if (settings.credentials !== undefined) {\r\n            this._credentials = makeCredentialsProvider(settings.credentials);\r\n        }\r\n    };\r\n    Firestore$2.prototype._getSettings = function () {\r\n        return this._settings;\r\n    };\r\n    Firestore$2.prototype._freezeSettings = function () {\r\n        this._settingsFrozen = true;\r\n        return this._settings;\r\n    };\r\n    Firestore$2.prototype._delete = function () {\r\n        if (!this._terminateTask) {\r\n            this._terminateTask = this._terminate();\r\n        }\r\n        return this._terminateTask;\r\n    };\r\n    /** Returns a JSON-serializable representation of this Firestore instance. */\r\n    Firestore$2.prototype.toJSON = function () {\r\n        return {\r\n            app: this._app,\r\n            databaseId: this._databaseId,\r\n            settings: this._settings\r\n        };\r\n    };\r\n    /**\r\n     * Terminates all components used by this client. Subclasses can override\r\n     * this method to clean up their own dependencies, but must also call this\r\n     * method.\r\n     *\r\n     * Only ever called once.\r\n     */\r\n    Firestore$2.prototype._terminate = function () {\r\n        removeComponents(this);\r\n        return Promise.resolve();\r\n    };\r\n    return Firestore$2;\r\n}());\r\nfunction databaseIdFromApp(app) {\r\n    if (!Object.prototype.hasOwnProperty.apply(app.options, ['projectId'])) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\r\n    }\r\n    return new DatabaseId(app.options.projectId);\r\n}\r\n/**\r\n * Modify this instance to communicate with the Cloud Firestore emulator.\r\n *\r\n * Note: This must be called before this instance has been used to do any\r\n * operations.\r\n *\r\n * @param firestore - The Firestore instance to configure to connect to the\r\n * emulator.\r\n * @param host - the emulator host (ex: localhost).\r\n * @param port - the emulator port (ex: 9000).\r\n * @param options.mockUserToken - the mock auth token to use for unit testing\r\n * Security Rules.\r\n */\r\nfunction connectFirestoreEmulator(firestore, host, port, options) {\r\n    if (options === void 0) { options = {}; }\r\n    firestore = cast(firestore, Firestore$2);\r\n    var settings = firestore._getSettings();\r\n    if (settings.host !== DEFAULT_HOST && settings.host !== host) {\r\n        logWarn('Host has been set in both settings() and useEmulator(), emulator host ' +\r\n            'will be used');\r\n    }\r\n    firestore._setSettings(Object.assign(Object.assign({}, settings), { host: host + \":\" + port, ssl: false }));\r\n    if (options.mockUserToken) {\r\n        // Let createMockUserToken validate first (catches common mistakes like\r\n        // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\r\n        var token = util.createMockUserToken(options.mockUserToken);\r\n        var uid = options.mockUserToken.sub || options.mockUserToken.user_id;\r\n        if (!uid) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n        }\r\n        firestore._credentials = new EmulatorCredentialsProvider(new OAuthToken(token, new User(uid)));\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A `DocumentReference` refers to a document location in a Firestore database\r\n * and can be used to write, read, or listen to the location. The document at\r\n * the referenced location may or may not exist.\r\n */\r\nvar DocumentReference$1 = /** @class */ (function () {\r\n    /** @hideconstructor */\r\n    function DocumentReference$1(firestore, \r\n    /**\r\n     * If provided, the `FirestoreDataConverter` associated with this instance.\r\n     */\r\n    converter, _key) {\r\n        this.converter = converter;\r\n        this._key = _key;\r\n        /** The type of this Firestore reference. */\r\n        this.type = 'document';\r\n        this.firestore = firestore;\r\n    }\r\n    Object.defineProperty(DocumentReference$1.prototype, \"_path\", {\r\n        get: function () {\r\n            return this._key.path;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocumentReference$1.prototype, \"id\", {\r\n        /**\r\n         * The document's identifier within its collection.\r\n         */\r\n        get: function () {\r\n            return this._key.path.lastSegment();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocumentReference$1.prototype, \"path\", {\r\n        /**\r\n         * A string representing the path of the referenced document (relative\r\n         * to the root of the database).\r\n         */\r\n        get: function () {\r\n            return this._key.path.canonicalString();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocumentReference$1.prototype, \"parent\", {\r\n        /**\r\n         * The collection this `DocumentReference` belongs to.\r\n         */\r\n        get: function () {\r\n            return new CollectionReference$1(this.firestore, this.converter, this._key.path.popLast());\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DocumentReference$1.prototype.withConverter = function (converter) {\r\n        return new DocumentReference$1(this.firestore, converter, this._key);\r\n    };\r\n    return DocumentReference$1;\r\n}());\r\n/**\r\n * A `Query` refers to a Query which you can read or listen to. You can also\r\n * construct refined `Query` objects by adding filters and ordering.\r\n */\r\nvar Query$1 = /** @class */ (function () {\r\n    // This is the lite version of the Query class in the main SDK.\r\n    /** @hideconstructor protected */\r\n    function Query$1(firestore, \r\n    /**\r\n     * If provided, the `FirestoreDataConverter` associated with this instance.\r\n     */\r\n    converter, _query) {\r\n        this.converter = converter;\r\n        this._query = _query;\r\n        /** The type of this Firestore reference. */\r\n        this.type = 'query';\r\n        this.firestore = firestore;\r\n    }\r\n    Query$1.prototype.withConverter = function (converter) {\r\n        return new Query$1(this.firestore, converter, this._query);\r\n    };\r\n    return Query$1;\r\n}());\r\n/**\r\n * A `CollectionReference` object can be used for adding documents, getting\r\n * document references, and querying for documents (using {@link query}).\r\n */\r\nvar CollectionReference$1 = /** @class */ (function (_super) {\r\n    tslib.__extends(CollectionReference$1, _super);\r\n    /** @hideconstructor */\r\n    function CollectionReference$1(firestore, converter, _path) {\r\n        var _this = _super.call(this, firestore, converter, newQueryForPath(_path)) || this;\r\n        _this._path = _path;\r\n        /** The type of this Firestore reference. */\r\n        _this.type = 'collection';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CollectionReference$1.prototype, \"id\", {\r\n        /** The collection's identifier. */\r\n        get: function () {\r\n            return this._query.path.lastSegment();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CollectionReference$1.prototype, \"path\", {\r\n        /**\r\n         * A string representing the path of the referenced collection (relative\r\n         * to the root of the database).\r\n         */\r\n        get: function () {\r\n            return this._query.path.canonicalString();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CollectionReference$1.prototype, \"parent\", {\r\n        /**\r\n         * A reference to the containing `DocumentReference` if this is a\r\n         * subcollection. If this isn't a subcollection, the reference is null.\r\n         */\r\n        get: function () {\r\n            var parentPath = this._path.popLast();\r\n            if (parentPath.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                return new DocumentReference$1(this.firestore, \r\n                /* converter= */ null, new DocumentKey(parentPath));\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    CollectionReference$1.prototype.withConverter = function (converter) {\r\n        return new CollectionReference$1(this.firestore, converter, this._path);\r\n    };\r\n    return CollectionReference$1;\r\n}(Query$1));\r\nfunction collection(parent, path) {\r\n    var pathSegments = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        pathSegments[_i - 2] = arguments[_i];\r\n    }\r\n    parent = util.getModularInstance(parent);\r\n    validateNonEmptyArgument('collection', 'path', path);\r\n    if (parent instanceof Firestore$2) {\r\n        var absolutePath = ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path], pathSegments));\r\n        validateCollectionPath(absolutePath);\r\n        return new CollectionReference$1(parent, /* converter= */ null, absolutePath);\r\n    }\r\n    else {\r\n        if (!(parent instanceof DocumentReference$1) &&\r\n            !(parent instanceof CollectionReference$1)) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Expected first argument to collection() to be a CollectionReference, ' +\r\n                'a DocumentReference or FirebaseFirestore');\r\n        }\r\n        var absolutePath = ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([parent.path], pathSegments)).child(ResourcePath.fromString(path));\r\n        validateCollectionPath(absolutePath);\r\n        return new CollectionReference$1(parent.firestore, \r\n        /* converter= */ null, absolutePath);\r\n    }\r\n}\r\n// TODO(firestorelite): Consider using ErrorFactory -\r\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\r\n/**\r\n * Creates and returns a new `Query` instance that includes all documents in the\r\n * database that are contained in a collection or subcollection with the\r\n * given `collectionId`.\r\n *\r\n * @param firestore - A reference to the root Firestore instance.\r\n * @param collectionId - Identifies the collections to query over. Every\r\n * collection or subcollection with this ID as the last segment of its path\r\n * will be included. Cannot contain a slash.\r\n * @returns The created `Query`.\r\n */\r\nfunction collectionGroup(firestore, collectionId) {\r\n    firestore = cast(firestore, Firestore$2);\r\n    validateNonEmptyArgument('collectionGroup', 'collection id', collectionId);\r\n    if (collectionId.indexOf('/') >= 0) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid collection ID '\" + collectionId + \"' passed to function \" +\r\n            \"collectionGroup(). Collection IDs must not contain '/'.\");\r\n    }\r\n    return new Query$1(firestore, \r\n    /* converter= */ null, newQueryForCollectionGroup(collectionId));\r\n}\r\nfunction doc(parent, path) {\r\n    var pathSegments = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        pathSegments[_i - 2] = arguments[_i];\r\n    }\r\n    parent = util.getModularInstance(parent);\r\n    // We allow omission of 'pathString' but explicitly prohibit passing in both\r\n    // 'undefined' and 'null'.\r\n    if (arguments.length === 1) {\r\n        path = AutoId.newId();\r\n    }\r\n    validateNonEmptyArgument('doc', 'path', path);\r\n    if (parent instanceof Firestore$2) {\r\n        var absolutePath = ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path], pathSegments));\r\n        validateDocumentPath(absolutePath);\r\n        return new DocumentReference$1(parent, \r\n        /* converter= */ null, new DocumentKey(absolutePath));\r\n    }\r\n    else {\r\n        if (!(parent instanceof DocumentReference$1) &&\r\n            !(parent instanceof CollectionReference$1)) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Expected first argument to collection() to be a CollectionReference, ' +\r\n                'a DocumentReference or FirebaseFirestore');\r\n        }\r\n        var absolutePath = parent._path.child(ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path], pathSegments)));\r\n        validateDocumentPath(absolutePath);\r\n        return new DocumentReference$1(parent.firestore, parent instanceof CollectionReference$1 ? parent.converter : null, new DocumentKey(absolutePath));\r\n    }\r\n}\r\n/**\r\n * Returns true if the provided references are equal.\r\n *\r\n * @param left - A reference to compare.\r\n * @param right - A reference to compare.\r\n * @returns true if the references point to the same location in the same\r\n * Firestore database.\r\n */\r\nfunction refEqual(left, right) {\r\n    left = util.getModularInstance(left);\r\n    right = util.getModularInstance(right);\r\n    if ((left instanceof DocumentReference$1 ||\r\n        left instanceof CollectionReference$1) &&\r\n        (right instanceof DocumentReference$1 || right instanceof CollectionReference$1)) {\r\n        return (left.firestore === right.firestore &&\r\n            left.path === right.path &&\r\n            left.converter === right.converter);\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Returns true if the provided queries point to the same collection and apply\r\n * the same constraints.\r\n *\r\n * @param left - A `Query` to compare.\r\n * @param right - A `Query` to compare.\r\n * @returns true if the references point to the same location in the same\r\n * Firestore database.\r\n */\r\nfunction queryEqual(left, right) {\r\n    left = util.getModularInstance(left);\r\n    right = util.getModularInstance(right);\r\n    if (left instanceof Query$1 && right instanceof Query$1) {\r\n        return (left.firestore === right.firestore &&\r\n            queryEquals(left._query, right._query) &&\r\n            left.converter === right.converter);\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_TAG = 'AsyncQueue';\r\nvar AsyncQueueImpl = /** @class */ (function () {\r\n    function AsyncQueueImpl() {\r\n        var _this = this;\r\n        // The last promise in the queue.\r\n        this.tail = Promise.resolve();\r\n        // A list of retryable operations. Retryable operations are run in order and\r\n        // retried with backoff.\r\n        this.retryableOps = [];\r\n        // Is this AsyncQueue being shut down? Once it is set to true, it will not\r\n        // be changed again.\r\n        this._isShuttingDown = false;\r\n        // Operations scheduled to be queued in the future. Operations are\r\n        // automatically removed after they are run or canceled.\r\n        this.delayedOperations = [];\r\n        // visible for testing\r\n        this.failure = null;\r\n        // Flag set while there's an outstanding AsyncQueue operation, used for\r\n        // assertion sanity-checks.\r\n        this.operationInProgress = false;\r\n        // Enabled during shutdown on Safari to prevent future access to IndexedDB.\r\n        this.skipNonRestrictedTasks = false;\r\n        // List of TimerIds to fast-forward delays for.\r\n        this.timerIdsToSkip = [];\r\n        // Backoff timer used to schedule retries for retryable operations\r\n        this.backoff = new ExponentialBackoff(this, \"async_queue_retry\" /* AsyncQueueRetry */);\r\n        // Visibility handler that triggers an immediate retry of all retryable\r\n        // operations. Meant to speed up recovery when we regain file system access\r\n        // after page comes into foreground.\r\n        this.visibilityHandler = function () {\r\n            _this.backoff.skipBackoff();\r\n        };\r\n    }\r\n    Object.defineProperty(AsyncQueueImpl.prototype, \"isShuttingDown\", {\r\n        get: function () {\r\n            return this._isShuttingDown;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds a new operation to the queue without waiting for it to complete (i.e.\r\n     * we ignore the Promise result).\r\n     */\r\n    AsyncQueueImpl.prototype.enqueueAndForget = function (op) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.enqueue(op);\r\n    };\r\n    AsyncQueueImpl.prototype.enqueueAndForgetEvenWhileRestricted = function (op) {\r\n        this.verifyNotFailed();\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.enqueueInternal(op);\r\n    };\r\n    AsyncQueueImpl.prototype.enterRestrictedMode = function (purgeExistingTasks) {\r\n        if (!this._isShuttingDown) {\r\n            this._isShuttingDown = true;\r\n            this.skipNonRestrictedTasks = purgeExistingTasks || false;\r\n        }\r\n    };\r\n    AsyncQueueImpl.prototype.enqueue = function (op) {\r\n        var _this = this;\r\n        this.verifyNotFailed();\r\n        if (this._isShuttingDown) {\r\n            // Return a Promise which never resolves.\r\n            return new Promise(function () { });\r\n        }\r\n        // Create a deferred Promise that we can return to the callee. This\r\n        // allows us to return a \"hanging Promise\" only to the callee and still\r\n        // advance the queue even when the operation is not run.\r\n        var task = new Deferred();\r\n        return this.enqueueInternal(function () {\r\n            if (_this._isShuttingDown && _this.skipNonRestrictedTasks) {\r\n                // We do not resolve 'task'\r\n                return Promise.resolve();\r\n            }\r\n            op().then(task.resolve, task.reject);\r\n            return task.promise;\r\n        }).then(function () { return task.promise; });\r\n    };\r\n    AsyncQueueImpl.prototype.enqueueRetryable = function (op) {\r\n        var _this = this;\r\n        this.enqueueAndForget(function () {\r\n            _this.retryableOps.push(op);\r\n            return _this.retryNextOp();\r\n        });\r\n    };\r\n    /**\r\n     * Runs the next operation from the retryable queue. If the operation fails,\r\n     * reschedules with backoff.\r\n     */\r\n    AsyncQueueImpl.prototype.retryNextOp = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var e_14;\r\n            var _this = this;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        if (this.retryableOps.length === 0) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        _d.label = 1;\r\n                    case 1:\r\n                        _d.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.retryableOps[0]()];\r\n                    case 2:\r\n                        _d.sent();\r\n                        this.retryableOps.shift();\r\n                        this.backoff.reset();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_14 = _d.sent();\r\n                        if (isIndexedDbTransactionError(e_14)) {\r\n                            logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e_14);\r\n                        }\r\n                        else {\r\n                            throw e_14; // Failure will be handled by AsyncQueue\r\n                        }\r\n                        return [3 /*break*/, 4];\r\n                    case 4:\r\n                        if (this.retryableOps.length > 0) {\r\n                            // If there are additional operations, we re-schedule `retryNextOp()`.\r\n                            // This is necessary to run retryable operations that failed during\r\n                            // their initial attempt since we don't know whether they are already\r\n                            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\r\n                            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\r\n                            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\r\n                            // call scheduled here.\r\n                            // Since `backoffAndRun()` cancels an existing backoff and schedules a\r\n                            // new backoff on every call, there is only ever a single additional\r\n                            // operation in the queue.\r\n                            this.backoff.backoffAndRun(function () { return _this.retryNextOp(); });\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    AsyncQueueImpl.prototype.enqueueInternal = function (op) {\r\n        var _this = this;\r\n        var newTail = this.tail.then(function () {\r\n            _this.operationInProgress = true;\r\n            return op()\r\n                .catch(function (error) {\r\n                _this.failure = error;\r\n                _this.operationInProgress = false;\r\n                var message = getMessageOrStack(error);\r\n                logError('INTERNAL UNHANDLED ERROR: ', message);\r\n                // Re-throw the error so that this.tail becomes a rejected Promise and\r\n                // all further attempts to chain (via .then) will just short-circuit\r\n                // and return the rejected Promise.\r\n                throw error;\r\n            })\r\n                .then(function (result) {\r\n                _this.operationInProgress = false;\r\n                return result;\r\n            });\r\n        });\r\n        this.tail = newTail;\r\n        return newTail;\r\n    };\r\n    AsyncQueueImpl.prototype.enqueueAfterDelay = function (timerId, delayMs, op) {\r\n        var _this = this;\r\n        this.verifyNotFailed();\r\n        // Fast-forward delays for timerIds that have been overriden.\r\n        if (this.timerIdsToSkip.indexOf(timerId) > -1) {\r\n            delayMs = 0;\r\n        }\r\n        var delayedOp = DelayedOperation.createAndSchedule(this, timerId, delayMs, op, function (removedOp) { return _this.removeDelayedOperation(removedOp); });\r\n        this.delayedOperations.push(delayedOp);\r\n        return delayedOp;\r\n    };\r\n    AsyncQueueImpl.prototype.verifyNotFailed = function () {\r\n        if (this.failure) {\r\n            fail();\r\n        }\r\n    };\r\n    AsyncQueueImpl.prototype.verifyOperationInProgress = function () {\r\n    };\r\n    /**\r\n     * Waits until all currently queued tasks are finished executing. Delayed\r\n     * operations are not run.\r\n     */\r\n    AsyncQueueImpl.prototype.drain = function () {\r\n        return tslib.__awaiter(this, void 0, void 0, function () {\r\n            var currentTail;\r\n            return tslib.__generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        currentTail = this.tail;\r\n                        return [4 /*yield*/, currentTail];\r\n                    case 1:\r\n                        _d.sent();\r\n                        _d.label = 2;\r\n                    case 2:\r\n                        if (currentTail !== this.tail) return [3 /*break*/, 0];\r\n                        _d.label = 3;\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * For Tests: Determine if a delayed operation with a particular TimerId\r\n     * exists.\r\n     */\r\n    AsyncQueueImpl.prototype.containsDelayedOperation = function (timerId) {\r\n        for (var _i = 0, _d = this.delayedOperations; _i < _d.length; _i++) {\r\n            var op = _d[_i];\r\n            if (op.timerId === timerId) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * For Tests: Runs some or all delayed operations early.\r\n     *\r\n     * @param lastTimerId - Delayed operations up to and including this TimerId\r\n     * will be drained. Pass TimerId.All to run all delayed operations.\r\n     * @returns a Promise that resolves once all operations have been run.\r\n     */\r\n    AsyncQueueImpl.prototype.runAllDelayedOperationsUntil = function (lastTimerId) {\r\n        var _this = this;\r\n        // Note that draining may generate more delayed ops, so we do that first.\r\n        return this.drain().then(function () {\r\n            // Run ops in the same order they'd run if they ran naturally.\r\n            _this.delayedOperations.sort(function (a, b) { return a.targetTimeMs - b.targetTimeMs; });\r\n            for (var _i = 0, _d = _this.delayedOperations; _i < _d.length; _i++) {\r\n                var op = _d[_i];\r\n                op.skipDelay();\r\n                if (lastTimerId !== \"all\" /* All */ && op.timerId === lastTimerId) {\r\n                    break;\r\n                }\r\n            }\r\n            return _this.drain();\r\n        });\r\n    };\r\n    /**\r\n     * For Tests: Skip all subsequent delays for a timer id.\r\n     */\r\n    AsyncQueueImpl.prototype.skipDelaysForTimerId = function (timerId) {\r\n        this.timerIdsToSkip.push(timerId);\r\n    };\r\n    /** Called once a DelayedOperation is run or canceled. */\r\n    AsyncQueueImpl.prototype.removeDelayedOperation = function (op) {\r\n        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\r\n        var index = this.delayedOperations.indexOf(op);\r\n        this.delayedOperations.splice(index, 1);\r\n    };\r\n    return AsyncQueueImpl;\r\n}());\r\nfunction newAsyncQueue() {\r\n    return new AsyncQueueImpl();\r\n}\r\n/**\r\n * Chrome includes Error.message in Error.stack. Other browsers do not.\r\n * This returns expected output of message + stack when available.\r\n * @param error - Error or FirestoreError\r\n */\r\nfunction getMessageOrStack(error) {\r\n    var message = error.message || '';\r\n    if (error.stack) {\r\n        if (error.stack.includes(error.message)) {\r\n            message = error.stack;\r\n        }\r\n        else {\r\n            message = error.message + '\\n' + error.stack;\r\n        }\r\n    }\r\n    return message;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents the task of loading a Firestore bundle. It provides progress of bundle\r\n * loading, as well as task completion and error events.\r\n *\r\n * The API is compatible with `Promise<LoadBundleTaskProgress>`.\r\n */\r\nvar LoadBundleTask = /** @class */ (function () {\r\n    function LoadBundleTask() {\r\n        this._progressObserver = {};\r\n        this._taskCompletionResolver = new Deferred();\r\n        this._lastProgress = {\r\n            taskState: 'Running',\r\n            totalBytes: 0,\r\n            totalDocuments: 0,\r\n            bytesLoaded: 0,\r\n            documentsLoaded: 0\r\n        };\r\n    }\r\n    /**\r\n     * Registers functions to listen to bundle loading progress events.\r\n     * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur\r\n     *   each time a Firestore document is loaded from the bundle.\r\n     * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the\r\n     *   error, and there should be no more updates after this.\r\n     * @param complete - Called when the loading task is complete.\r\n     */\r\n    LoadBundleTask.prototype.onProgress = function (next, error, complete) {\r\n        this._progressObserver = {\r\n            next: next,\r\n            error: error,\r\n            complete: complete\r\n        };\r\n    };\r\n    /**\r\n     * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.\r\n     *\r\n     * @param onRejected - Called when an error occurs during bundle loading.\r\n     */\r\n    LoadBundleTask.prototype.catch = function (onRejected) {\r\n        return this._taskCompletionResolver.promise.catch(onRejected);\r\n    };\r\n    /**\r\n     * Implements the `Promise<LoadBundleTaskProgress>.then` interface.\r\n     *\r\n     * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.\r\n     *   The update will always have its `taskState` set to `\"Success\"`.\r\n     * @param onRejected - Called when an error occurs during bundle loading.\r\n     */\r\n    LoadBundleTask.prototype.then = function (onFulfilled, onRejected) {\r\n        return this._taskCompletionResolver.promise.then(onFulfilled, onRejected);\r\n    };\r\n    /**\r\n     * Notifies all observers that bundle loading has completed, with a provided\r\n     * `LoadBundleTaskProgress` object.\r\n     *\r\n     * @private\r\n     */\r\n    LoadBundleTask.prototype._completeWith = function (progress) {\r\n        this._updateProgress(progress);\r\n        if (this._progressObserver.complete) {\r\n            this._progressObserver.complete();\r\n        }\r\n        this._taskCompletionResolver.resolve(progress);\r\n    };\r\n    /**\r\n     * Notifies all observers that bundle loading has failed, with a provided\r\n     * `Error` as the reason.\r\n     *\r\n     * @private\r\n     */\r\n    LoadBundleTask.prototype._failWith = function (error) {\r\n        this._lastProgress.taskState = 'Error';\r\n        if (this._progressObserver.next) {\r\n            this._progressObserver.next(this._lastProgress);\r\n        }\r\n        if (this._progressObserver.error) {\r\n            this._progressObserver.error(error);\r\n        }\r\n        this._taskCompletionResolver.reject(error);\r\n    };\r\n    /**\r\n     * Notifies a progress update of loading a bundle.\r\n     * @param progress - The new progress.\r\n     *\r\n     * @private\r\n     */\r\n    LoadBundleTask.prototype._updateProgress = function (progress) {\r\n        this._lastProgress = progress;\r\n        if (this._progressObserver.next) {\r\n            this._progressObserver.next(progress);\r\n        }\r\n    };\r\n    return LoadBundleTask;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** DOMException error code constants. */\r\nvar DOM_EXCEPTION_INVALID_STATE = 11;\r\nvar DOM_EXCEPTION_ABORTED = 20;\r\nvar DOM_EXCEPTION_QUOTA_EXCEEDED = 22;\r\n/**\r\n * Constant used to indicate the LRU garbage collection should be disabled.\r\n * Set this value as the `cacheSizeBytes` on the settings passed to the\r\n * `Firestore` instance.\r\n */\r\nvar CACHE_SIZE_UNLIMITED = LRU_COLLECTION_DISABLED;\r\n/**\r\n * The Cloud Firestore service interface.\r\n *\r\n * Do not call this constructor directly. Instead, use {@link getFirestore}.\r\n */\r\nvar Firestore$1 = /** @class */ (function (_super) {\r\n    tslib.__extends(Firestore$1, _super);\r\n    /** @hideconstructor */\r\n    function Firestore$1(databaseIdOrApp, authProvider) {\r\n        var _this = _super.call(this, databaseIdOrApp, authProvider) || this;\r\n        /**\r\n         * Whether it's a Firestore or Firestore Lite instance.\r\n         */\r\n        _this.type = 'firestore';\r\n        _this._queue = newAsyncQueue();\r\n        _this._persistenceKey =\r\n            'name' in databaseIdOrApp ? databaseIdOrApp.name : '[DEFAULT]';\r\n        return _this;\r\n    }\r\n    Firestore$1.prototype._terminate = function () {\r\n        if (!this._firestoreClient) {\r\n            // The client must be initialized to ensure that all subsequent API\r\n            // usage throws an exception.\r\n            configureFirestore(this);\r\n        }\r\n        return this._firestoreClient.terminate();\r\n    };\r\n    return Firestore$1;\r\n}(Firestore$2));\r\n/**\r\n * @internal\r\n */\r\nfunction ensureFirestoreConfigured(firestore) {\r\n    if (!firestore._firestoreClient) {\r\n        configureFirestore(firestore);\r\n    }\r\n    firestore._firestoreClient.verifyNotTerminated();\r\n    return firestore._firestoreClient;\r\n}\r\nfunction configureFirestore(firestore) {\r\n    var _a;\r\n    var settings = firestore._freezeSettings();\r\n    var databaseInfo = makeDatabaseInfo(firestore._databaseId, ((_a = firestore._app) === null || _a === void 0 ? void 0 : _a.options.appId) || '', firestore._persistenceKey, settings);\r\n    firestore._firestoreClient = new FirestoreClient(firestore._credentials, firestore._queue, databaseInfo);\r\n}\r\n/**\r\n * Attempts to enable persistent storage, if possible.\r\n *\r\n * Must be called before any other functions (other than\r\n * {@link initializeFirestore}, {@link getFirestore} or\r\n * {@link clearIndexedDbPersistence}.\r\n *\r\n * If this fails, `enableIndexedDbPersistence()` will reject the promise it\r\n * returns. Note that even after this failure, the `Firestore` instance will\r\n * remain usable, however offline persistence will be disabled.\r\n *\r\n * There are several reasons why this can fail, which can be identified by\r\n * the `code` on the error.\r\n *\r\n *   * failed-precondition: The app is already open in another browser tab.\r\n *   * unimplemented: The browser is incompatible with the offline\r\n *     persistence implementation.\r\n *\r\n * @param firestore - The `Firestore` instance to enable persistence for.\r\n * @param persistenceSettings - Optional settings object to configure\r\n * persistence.\r\n * @returns A promise that represents successfully enabling persistent storage.\r\n */\r\nfunction enableIndexedDbPersistence(firestore, persistenceSettings) {\r\n    firestore = cast(firestore, Firestore$1);\r\n    verifyNotInitialized(firestore);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    var settings = firestore._freezeSettings();\r\n    var onlineComponentProvider = new OnlineComponentProvider();\r\n    var offlineComponentProvider = new IndexedDbOfflineComponentProvider(onlineComponentProvider, settings.cacheSizeBytes, persistenceSettings === null || persistenceSettings === void 0 ? void 0 : persistenceSettings.forceOwnership);\r\n    return setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider);\r\n}\r\n/**\r\n * Attempts to enable multi-tab persistent storage, if possible. If enabled\r\n * across all tabs, all operations share access to local persistence, including\r\n * shared execution of queries and latency-compensated local document updates\r\n * across all connected instances.\r\n *\r\n * If this fails, `enableMultiTabIndexedDbPersistence()` will reject the promise\r\n * it returns. Note that even after this failure, the `Firestore` instance will\r\n * remain usable, however offline persistence will be disabled.\r\n *\r\n * There are several reasons why this can fail, which can be identified by\r\n * the `code` on the error.\r\n *\r\n *   * failed-precondition: The app is already open in another browser tab and\r\n *     multi-tab is not enabled.\r\n *   * unimplemented: The browser is incompatible with the offline\r\n *     persistence implementation.\r\n *\r\n * @param firestore - The `Firestore` instance to enable persistence for.\r\n * @returns A promise that represents successfully enabling persistent\r\n * storage.\r\n */\r\nfunction enableMultiTabIndexedDbPersistence(firestore) {\r\n    firestore = cast(firestore, Firestore$1);\r\n    verifyNotInitialized(firestore);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    var settings = firestore._freezeSettings();\r\n    var onlineComponentProvider = new OnlineComponentProvider();\r\n    var offlineComponentProvider = new MultiTabOfflineComponentProvider(onlineComponentProvider, settings.cacheSizeBytes);\r\n    return setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider);\r\n}\r\n/**\r\n * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.\r\n * If the operation fails with a recoverable error (see\r\n * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected\r\n * but the client remains usable.\r\n */\r\nfunction setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider) {\r\n    var _this = this;\r\n    var persistenceResult = new Deferred();\r\n    return client.asyncQueue\r\n        .enqueue(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var e_15;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    _d.trys.push([0, 3, , 4]);\r\n                    return [4 /*yield*/, setOfflineComponentProvider(client, offlineComponentProvider)];\r\n                case 1:\r\n                    _d.sent();\r\n                    return [4 /*yield*/, setOnlineComponentProvider(client, onlineComponentProvider)];\r\n                case 2:\r\n                    _d.sent();\r\n                    persistenceResult.resolve();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_15 = _d.sent();\r\n                    if (!canFallbackFromIndexedDbError(e_15)) {\r\n                        throw e_15;\r\n                    }\r\n                    console.warn('Error enabling offline persistence. Falling back to ' +\r\n                        'persistence disabled: ' +\r\n                        e_15);\r\n                    persistenceResult.reject(e_15);\r\n                    return [3 /*break*/, 4];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); })\r\n        .then(function () { return persistenceResult.promise; });\r\n}\r\n/**\r\n * Decides whether the provided error allows us to gracefully disable\r\n * persistence (as opposed to crashing the client).\r\n */\r\nfunction canFallbackFromIndexedDbError(error) {\r\n    if (error.name === 'FirebaseError') {\r\n        return (error.code === Code.FAILED_PRECONDITION ||\r\n            error.code === Code.UNIMPLEMENTED);\r\n    }\r\n    else if (typeof DOMException !== 'undefined' &&\r\n        error instanceof DOMException) {\r\n        // There are a few known circumstances where we can open IndexedDb but\r\n        // trying to read/write will fail (e.g. quota exceeded). For\r\n        // well-understood cases, we attempt to detect these and then gracefully\r\n        // fall back to memory persistence.\r\n        // NOTE: Rather than continue to add to this list, we could decide to\r\n        // always fall back, with the risk that we might accidentally hide errors\r\n        // representing actual SDK bugs.\r\n        return (\r\n        // When the browser is out of quota we could get either quota exceeded\r\n        // or an aborted error depending on whether the error happened during\r\n        // schema migration.\r\n        error.code === DOM_EXCEPTION_QUOTA_EXCEEDED ||\r\n            error.code === DOM_EXCEPTION_ABORTED ||\r\n            // Firefox Private Browsing mode disables IndexedDb and returns\r\n            // INVALID_STATE for any usage.\r\n            error.code === DOM_EXCEPTION_INVALID_STATE);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Clears the persistent storage. This includes pending writes and cached\r\n * documents.\r\n *\r\n * Must be called while the `Firestore` instance is not started (after the app is\r\n * terminated or when the app is first initialized). On startup, this function\r\n * must be called before other functions (other than {@link\r\n * initializeFirestore} or {@link getFirestore})). If the `Firestore`\r\n * instance is still running, the promise will be rejected with the error code\r\n * of `failed-precondition`.\r\n *\r\n * Note: `clearIndexedDbPersistence()` is primarily intended to help write\r\n * reliable tests that use Cloud Firestore. It uses an efficient mechanism for\r\n * dropping existing data but does not attempt to securely overwrite or\r\n * otherwise make cached data unrecoverable. For applications that are sensitive\r\n * to the disclosure of cached data in between user sessions, we strongly\r\n * recommend not enabling persistence at all.\r\n *\r\n * @param firestore - The `Firestore` instance to clear persistence for.\r\n * @returns A promise that is resolved when the persistent storage is\r\n * cleared. Otherwise, the promise is rejected with an error.\r\n */\r\nfunction clearIndexedDbPersistence(firestore) {\r\n    var _this = this;\r\n    if (firestore._initialized && !firestore._terminated) {\r\n        throw new FirestoreError(Code.FAILED_PRECONDITION, 'Persistence can only be cleared before a Firestore instance is ' +\r\n            'initialized or after it is terminated.');\r\n    }\r\n    var deferred = new Deferred();\r\n    firestore._queue.enqueueAndForgetEvenWhileRestricted(function () { return tslib.__awaiter(_this, void 0, void 0, function () {\r\n        var e_16;\r\n        return tslib.__generator(this, function (_d) {\r\n            switch (_d.label) {\r\n                case 0:\r\n                    _d.trys.push([0, 2, , 3]);\r\n                    return [4 /*yield*/, indexedDbClearPersistence(indexedDbStoragePrefix(firestore._databaseId, firestore._persistenceKey))];\r\n                case 1:\r\n                    _d.sent();\r\n                    deferred.resolve();\r\n                    return [3 /*break*/, 3];\r\n                case 2:\r\n                    e_16 = _d.sent();\r\n                    deferred.reject(e_16);\r\n                    return [3 /*break*/, 3];\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Waits until all currently pending writes for the active user have been\r\n * acknowledged by the backend.\r\n *\r\n * The returned Promise resolves immediately if there are no outstanding writes.\r\n * Otherwise, the Promise waits for all previously issued writes (including\r\n * those written in a previous app session), but it does not wait for writes\r\n * that were added after the function is called. If you want to wait for\r\n * additional writes, call `waitForPendingWrites()` again.\r\n *\r\n * Any outstanding `waitForPendingWrites()` Promises are rejected during user\r\n * changes.\r\n *\r\n * @returns A Promise which resolves when all currently pending writes have been\r\n * acknowledged by the backend.\r\n */\r\nfunction waitForPendingWrites(firestore) {\r\n    firestore = cast(firestore, Firestore$1);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientWaitForPendingWrites(client);\r\n}\r\n/**\r\n * Re-enables use of the network for this Firestore instance after a prior\r\n * call to {@link disableNetwork}.\r\n *\r\n * @returns A promise that is resolved once the network has been enabled.\r\n */\r\nfunction enableNetwork(firestore) {\r\n    firestore = cast(firestore, Firestore$1);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientEnableNetwork(client);\r\n}\r\n/**\r\n * Disables network usage for this instance. It can be re-enabled via {@link\r\n * enableNetwork}. While the network is disabled, any snapshot listeners,\r\n * `getDoc()` or `getDocs()` calls will return results from cache, and any write\r\n * operations will be queued until the network is restored.\r\n *\r\n * @returns A promise that is resolved once the network has been disabled.\r\n */\r\nfunction disableNetwork(firestore) {\r\n    firestore = cast(firestore, Firestore$1);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientDisableNetwork(client);\r\n}\r\n/**\r\n * Loads a Firestore bundle into the local cache.\r\n *\r\n * @param firestore - The `Firestore` instance to load bundles for for.\r\n * @param bundleData - An object representing the bundle to be loaded. Valid objects are\r\n *   `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.\r\n *\r\n * @returns\r\n *   A `LoadBundleTask` object, which notifies callers with progress updates, and completion\r\n *   or error events. It can be used as a `Promise<LoadBundleTaskProgress>`.\r\n */\r\nfunction loadBundle(firestore, bundleData) {\r\n    firestore = cast(firestore, Firestore$1);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    var resultTask = new LoadBundleTask();\r\n    firestoreClientLoadBundle(client, firestore._databaseId, bundleData, resultTask);\r\n    return resultTask;\r\n}\r\n/**\r\n * Reads a Firestore `Query` from local cache, identified by the given name.\r\n *\r\n * The named queries are packaged  into bundles on the server side (along\r\n * with resulting documents), and loaded to local cache using `loadBundle`. Once in local\r\n * cache, use this method to extract a `Query` by name.\r\n */\r\nfunction namedQuery(firestore, name) {\r\n    firestore = cast(firestore, Firestore$1);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientGetNamedQuery(client, name).then(function (namedQuery) {\r\n        if (!namedQuery) {\r\n            return null;\r\n        }\r\n        return new Query$1(firestore, null, namedQuery.query);\r\n    });\r\n}\r\nfunction verifyNotInitialized(firestore) {\r\n    if (firestore._initialized || firestore._terminated) {\r\n        throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer be ' +\r\n            'enabled. You can only enable persistence before calling any other ' +\r\n            'methods on a Firestore object.');\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A `FieldPath` refers to a field in a document. The path may consist of a\r\n * single field name (referring to a top-level field in the document), or a\r\n * list of field names (referring to a nested field in the document).\r\n *\r\n * Create a `FieldPath` by providing field names. If more than one field\r\n * name is provided, the path will point to a nested field in a document.\r\n */\r\nvar FieldPath = /** @class */ (function () {\r\n    /**\r\n     * Creates a FieldPath from the provided field names. If more than one field\r\n     * name is provided, the path will point to a nested field in a document.\r\n     *\r\n     * @param fieldNames - A list of field names.\r\n     */\r\n    function FieldPath() {\r\n        var fieldNames = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            fieldNames[_i] = arguments[_i];\r\n        }\r\n        for (var i = 0; i < fieldNames.length; ++i) {\r\n            if (fieldNames[i].length === 0) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid field name at argument $(i + 1). \" +\r\n                    'Field names must not be empty.');\r\n            }\r\n        }\r\n        this._internalPath = new FieldPath$1(fieldNames);\r\n    }\r\n    /**\r\n     * Returns true if this `FieldPath` is equal to the provided one.\r\n     *\r\n     * @param other - The `FieldPath` to compare against.\r\n     * @returns true if this `FieldPath` is equal to the provided one.\r\n     */\r\n    FieldPath.prototype.isEqual = function (other) {\r\n        return this._internalPath.isEqual(other._internalPath);\r\n    };\r\n    return FieldPath;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing an array of bytes.\r\n */\r\nvar Bytes = /** @class */ (function () {\r\n    /** @hideconstructor */\r\n    function Bytes(byteString) {\r\n        this._byteString = byteString;\r\n    }\r\n    /**\r\n     * Creates a new `Bytes` object from the given Base64 string, converting it to\r\n     * bytes.\r\n     *\r\n     * @param base64 - The Base64 string used to create the `Bytes` object.\r\n     */\r\n    Bytes.fromBase64String = function (base64) {\r\n        try {\r\n            return new Bytes(ByteString.fromBase64String(base64));\r\n        }\r\n        catch (e) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct data from Base64 string: ' + e);\r\n        }\r\n    };\r\n    /**\r\n     * Creates a new `Bytes` object from the given Uint8Array.\r\n     *\r\n     * @param array - The Uint8Array used to create the `Bytes` object.\r\n     */\r\n    Bytes.fromUint8Array = function (array) {\r\n        return new Bytes(ByteString.fromUint8Array(array));\r\n    };\r\n    /**\r\n     * Returns the underlying bytes as a Base64-encoded string.\r\n     *\r\n     * @returns The Base64-encoded string created from the `Bytes` object.\r\n     */\r\n    Bytes.prototype.toBase64 = function () {\r\n        return this._byteString.toBase64();\r\n    };\r\n    /**\r\n     * Returns the underlying bytes in a new `Uint8Array`.\r\n     *\r\n     * @returns The Uint8Array created from the `Bytes` object.\r\n     */\r\n    Bytes.prototype.toUint8Array = function () {\r\n        return this._byteString.toUint8Array();\r\n    };\r\n    /**\r\n     * Returns a string representation of the `Bytes` object.\r\n     *\r\n     * @returns A string representation of the `Bytes` object.\r\n     */\r\n    Bytes.prototype.toString = function () {\r\n        return 'Bytes(base64: ' + this.toBase64() + ')';\r\n    };\r\n    /**\r\n     * Returns true if this `Bytes` object is equal to the provided one.\r\n     *\r\n     * @param other - The `Bytes` object to compare against.\r\n     * @returns true if this `Bytes` object is equal to the provided one.\r\n     */\r\n    Bytes.prototype.isEqual = function (other) {\r\n        return this._byteString.isEqual(other._byteString);\r\n    };\r\n    return Bytes;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Sentinel values that can be used when writing document fields with `set()`\r\n * or `update()`.\r\n */\r\nvar FieldValue = /** @class */ (function () {\r\n    /**\r\n     * @param _methodName - The public API endpoint that returns this class.\r\n     * @hideconstructor\r\n     */\r\n    function FieldValue(_methodName) {\r\n        this._methodName = _methodName;\r\n    }\r\n    return FieldValue;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a geographic location in Firestore. The\r\n * location is represented as latitude/longitude pair.\r\n *\r\n * Latitude values are in the range of [-90, 90].\r\n * Longitude values are in the range of [-180, 180].\r\n */\r\nvar GeoPoint = /** @class */ (function () {\r\n    /**\r\n     * Creates a new immutable `GeoPoint` object with the provided latitude and\r\n     * longitude values.\r\n     * @param latitude - The latitude as number between -90 and 90.\r\n     * @param longitude - The longitude as number between -180 and 180.\r\n     */\r\n    function GeoPoint(latitude, longitude) {\r\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\r\n        }\r\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\r\n        }\r\n        this._lat = latitude;\r\n        this._long = longitude;\r\n    }\r\n    Object.defineProperty(GeoPoint.prototype, \"latitude\", {\r\n        /**\r\n         * The latitude of this `GeoPoint` instance.\r\n         */\r\n        get: function () {\r\n            return this._lat;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GeoPoint.prototype, \"longitude\", {\r\n        /**\r\n         * The longitude of this `GeoPoint` instance.\r\n         */\r\n        get: function () {\r\n            return this._long;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns true if this `GeoPoint` is equal to the provided one.\r\n     *\r\n     * @param other - The `GeoPoint` to compare against.\r\n     * @returns true if this `GeoPoint` is equal to the provided one.\r\n     */\r\n    GeoPoint.prototype.isEqual = function (other) {\r\n        return this._lat === other._lat && this._long === other._long;\r\n    };\r\n    /** Returns a JSON-serializable representation of this GeoPoint. */\r\n    GeoPoint.prototype.toJSON = function () {\r\n        return { latitude: this._lat, longitude: this._long };\r\n    };\r\n    /**\r\n     * Actually private to JS consumers of our API, so this function is prefixed\r\n     * with an underscore.\r\n     */\r\n    GeoPoint.prototype._compareTo = function (other) {\r\n        return (primitiveComparator(this._lat, other._lat) ||\r\n            primitiveComparator(this._long, other._long));\r\n    };\r\n    return GeoPoint;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RESERVED_FIELD_REGEX = /^__.*__$/;\r\n/** The result of parsing document data (e.g. for a setData call). */\r\nvar ParsedSetData = /** @class */ (function () {\r\n    function ParsedSetData(data, fieldMask, fieldTransforms) {\r\n        this.data = data;\r\n        this.fieldMask = fieldMask;\r\n        this.fieldTransforms = fieldTransforms;\r\n    }\r\n    ParsedSetData.prototype.toMutation = function (key, precondition) {\r\n        if (this.fieldMask !== null) {\r\n            return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);\r\n        }\r\n        else {\r\n            return new SetMutation(key, this.data, precondition, this.fieldTransforms);\r\n        }\r\n    };\r\n    return ParsedSetData;\r\n}());\r\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\r\nvar ParsedUpdateData = /** @class */ (function () {\r\n    function ParsedUpdateData(data, \r\n    // The fieldMask does not include document transforms.\r\n    fieldMask, fieldTransforms) {\r\n        this.data = data;\r\n        this.fieldMask = fieldMask;\r\n        this.fieldTransforms = fieldTransforms;\r\n    }\r\n    ParsedUpdateData.prototype.toMutation = function (key, precondition) {\r\n        return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);\r\n    };\r\n    return ParsedUpdateData;\r\n}());\r\nfunction isWrite(dataSource) {\r\n    switch (dataSource) {\r\n        case 0 /* Set */: // fall through\r\n        case 2 /* MergeSet */: // fall through\r\n        case 1 /* Update */:\r\n            return true;\r\n        case 3 /* Argument */:\r\n        case 4 /* ArrayArgument */:\r\n            return false;\r\n        default:\r\n            throw fail();\r\n    }\r\n}\r\n/** A \"context\" object passed around while parsing user data. */\r\nvar ParseContextImpl = /** @class */ (function () {\r\n    /**\r\n     * Initializes a ParseContext with the given source and path.\r\n     *\r\n     * @param settings - The settings for the parser.\r\n     * @param databaseId - The database ID of the Firestore instance.\r\n     * @param serializer - The serializer to use to generate the Value proto.\r\n     * @param ignoreUndefinedProperties - Whether to ignore undefined properties\r\n     * rather than throw.\r\n     * @param fieldTransforms - A mutable list of field transforms encountered\r\n     * while parsing the data.\r\n     * @param fieldMask - A mutable list of field paths encountered while parsing\r\n     * the data.\r\n     *\r\n     * TODO(b/34871131): We don't support array paths right now, so path can be\r\n     * null to indicate the context represents any location within an array (in\r\n     * which case certain features will not work and errors will be somewhat\r\n     * compromised).\r\n     */\r\n    function ParseContextImpl(settings, databaseId, serializer, ignoreUndefinedProperties, fieldTransforms, fieldMask) {\r\n        this.settings = settings;\r\n        this.databaseId = databaseId;\r\n        this.serializer = serializer;\r\n        this.ignoreUndefinedProperties = ignoreUndefinedProperties;\r\n        // Minor hack: If fieldTransforms is undefined, we assume this is an\r\n        // external call and we need to validate the entire path.\r\n        if (fieldTransforms === undefined) {\r\n            this.validatePath();\r\n        }\r\n        this.fieldTransforms = fieldTransforms || [];\r\n        this.fieldMask = fieldMask || [];\r\n    }\r\n    Object.defineProperty(ParseContextImpl.prototype, \"path\", {\r\n        get: function () {\r\n            return this.settings.path;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParseContextImpl.prototype, \"dataSource\", {\r\n        get: function () {\r\n            return this.settings.dataSource;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /** Returns a new context with the specified settings overwritten. */\r\n    ParseContextImpl.prototype.contextWith = function (configuration) {\r\n        return new ParseContextImpl(Object.assign(Object.assign({}, this.settings), configuration), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\r\n    };\r\n    ParseContextImpl.prototype.childContextForField = function (field) {\r\n        var _a;\r\n        var childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);\r\n        var context = this.contextWith({ path: childPath, arrayElement: false });\r\n        context.validatePathSegment(field);\r\n        return context;\r\n    };\r\n    ParseContextImpl.prototype.childContextForFieldPath = function (field) {\r\n        var _a;\r\n        var childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);\r\n        var context = this.contextWith({ path: childPath, arrayElement: false });\r\n        context.validatePath();\r\n        return context;\r\n    };\r\n    ParseContextImpl.prototype.childContextForArray = function (index) {\r\n        // TODO(b/34871131): We don't support array paths right now; so make path\r\n        // undefined.\r\n        return this.contextWith({ path: undefined, arrayElement: true });\r\n    };\r\n    ParseContextImpl.prototype.createError = function (reason) {\r\n        return createError(reason, this.settings.methodName, this.settings.hasConverter || false, this.path, this.settings.targetDoc);\r\n    };\r\n    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\r\n    ParseContextImpl.prototype.contains = function (fieldPath) {\r\n        return (this.fieldMask.find(function (field) { return fieldPath.isPrefixOf(field); }) !== undefined ||\r\n            this.fieldTransforms.find(function (transform) { return fieldPath.isPrefixOf(transform.field); }) !== undefined);\r\n    };\r\n    ParseContextImpl.prototype.validatePath = function () {\r\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\r\n        // within arrays.\r\n        if (!this.path) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < this.path.length; i++) {\r\n            this.validatePathSegment(this.path.get(i));\r\n        }\r\n    };\r\n    ParseContextImpl.prototype.validatePathSegment = function (segment) {\r\n        if (segment.length === 0) {\r\n            throw this.createError('Document fields must not be empty');\r\n        }\r\n        if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\r\n            throw this.createError('Document fields cannot begin and end with \"__\"');\r\n        }\r\n    };\r\n    return ParseContextImpl;\r\n}());\r\n/**\r\n * Helper for parsing raw user input (provided via the API) into internal model\r\n * classes.\r\n */\r\nvar UserDataReader = /** @class */ (function () {\r\n    function UserDataReader(databaseId, ignoreUndefinedProperties, serializer) {\r\n        this.databaseId = databaseId;\r\n        this.ignoreUndefinedProperties = ignoreUndefinedProperties;\r\n        this.serializer = serializer || newSerializer(databaseId);\r\n    }\r\n    /** Creates a new top-level parse context. */\r\n    UserDataReader.prototype.createContext = function (dataSource, methodName, targetDoc, hasConverter) {\r\n        if (hasConverter === void 0) { hasConverter = false; }\r\n        return new ParseContextImpl({\r\n            dataSource: dataSource,\r\n            methodName: methodName,\r\n            targetDoc: targetDoc,\r\n            path: FieldPath$1.emptyPath(),\r\n            arrayElement: false,\r\n            hasConverter: hasConverter\r\n        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\r\n    };\r\n    return UserDataReader;\r\n}());\r\nfunction newUserDataReader(firestore) {\r\n    var settings = firestore._freezeSettings();\r\n    var serializer = newSerializer(firestore._databaseId);\r\n    return new UserDataReader(firestore._databaseId, !!settings.ignoreUndefinedProperties, serializer);\r\n}\r\n/** Parse document data from a set() call. */\r\nfunction parseSetData(userDataReader, methodName, targetDoc, input, hasConverter, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var context = userDataReader.createContext(options.merge || options.mergeFields\r\n        ? 2 /* MergeSet */\r\n        : 0 /* Set */, methodName, targetDoc, hasConverter);\r\n    validatePlainObject('Data must be an object, but it was:', context, input);\r\n    var updateData = parseObject(input, context);\r\n    var fieldMask;\r\n    var fieldTransforms;\r\n    if (options.merge) {\r\n        fieldMask = new FieldMask(context.fieldMask);\r\n        fieldTransforms = context.fieldTransforms;\r\n    }\r\n    else if (options.mergeFields) {\r\n        var validatedFieldPaths = [];\r\n        for (var _i = 0, _d = options.mergeFields; _i < _d.length; _i++) {\r\n            var stringOrFieldPath = _d[_i];\r\n            var fieldPath = fieldPathFromArgument$1(methodName, stringOrFieldPath, targetDoc);\r\n            if (!context.contains(fieldPath)) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Field '\" + fieldPath + \"' is specified in your field mask but missing from your input data.\");\r\n            }\r\n            if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {\r\n                validatedFieldPaths.push(fieldPath);\r\n            }\r\n        }\r\n        fieldMask = new FieldMask(validatedFieldPaths);\r\n        fieldTransforms = context.fieldTransforms.filter(function (transform) { return fieldMask.covers(transform.field); });\r\n    }\r\n    else {\r\n        fieldMask = null;\r\n        fieldTransforms = context.fieldTransforms;\r\n    }\r\n    return new ParsedSetData(new ObjectValue(updateData), fieldMask, fieldTransforms);\r\n}\r\nvar DeleteFieldValueImpl = /** @class */ (function (_super) {\r\n    tslib.__extends(DeleteFieldValueImpl, _super);\r\n    function DeleteFieldValueImpl() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DeleteFieldValueImpl.prototype._toFieldTransform = function (context) {\r\n        if (context.dataSource === 2 /* MergeSet */) {\r\n            // No transform to add for a delete, but we need to add it to our\r\n            // fieldMask so it gets deleted.\r\n            context.fieldMask.push(context.path);\r\n        }\r\n        else if (context.dataSource === 1 /* Update */) {\r\n            throw context.createError(this._methodName + \"() can only appear at the top level \" +\r\n                'of your update data');\r\n        }\r\n        else {\r\n            // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\r\n            throw context.createError(this._methodName + \"() cannot be used with set() unless you pass \" +\r\n                '{merge:true}');\r\n        }\r\n        return null;\r\n    };\r\n    DeleteFieldValueImpl.prototype.isEqual = function (other) {\r\n        return other instanceof DeleteFieldValueImpl;\r\n    };\r\n    return DeleteFieldValueImpl;\r\n}(FieldValue));\r\n/**\r\n * Creates a child context for parsing SerializableFieldValues.\r\n *\r\n * This is different than calling `ParseContext.contextWith` because it keeps\r\n * the fieldTransforms and fieldMask separate.\r\n *\r\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\r\n * Although these values are used with writes, any elements in these FieldValues\r\n * are not considered writes since they cannot contain any FieldValue sentinels,\r\n * etc.\r\n *\r\n * @param fieldValue - The sentinel FieldValue for which to create a child\r\n *     context.\r\n * @param context - The parent context.\r\n * @param arrayElement - Whether or not the FieldValue has an array.\r\n */\r\nfunction createSentinelChildContext(fieldValue, context, arrayElement) {\r\n    return new ParseContextImpl({\r\n        dataSource: 3 /* Argument */,\r\n        targetDoc: context.settings.targetDoc,\r\n        methodName: fieldValue._methodName,\r\n        arrayElement: arrayElement\r\n    }, context.databaseId, context.serializer, context.ignoreUndefinedProperties);\r\n}\r\nvar ServerTimestampFieldValueImpl = /** @class */ (function (_super) {\r\n    tslib.__extends(ServerTimestampFieldValueImpl, _super);\r\n    function ServerTimestampFieldValueImpl() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ServerTimestampFieldValueImpl.prototype._toFieldTransform = function (context) {\r\n        return new FieldTransform(context.path, new ServerTimestampTransform());\r\n    };\r\n    ServerTimestampFieldValueImpl.prototype.isEqual = function (other) {\r\n        return other instanceof ServerTimestampFieldValueImpl;\r\n    };\r\n    return ServerTimestampFieldValueImpl;\r\n}(FieldValue));\r\nvar ArrayUnionFieldValueImpl = /** @class */ (function (_super) {\r\n    tslib.__extends(ArrayUnionFieldValueImpl, _super);\r\n    function ArrayUnionFieldValueImpl(methodName, _elements) {\r\n        var _this = _super.call(this, methodName) || this;\r\n        _this._elements = _elements;\r\n        return _this;\r\n    }\r\n    ArrayUnionFieldValueImpl.prototype._toFieldTransform = function (context) {\r\n        var parseContext = createSentinelChildContext(this, context, \r\n        /*array=*/ true);\r\n        var parsedElements = this._elements.map(function (element) { return parseData(element, parseContext); });\r\n        var arrayUnion = new ArrayUnionTransformOperation(parsedElements);\r\n        return new FieldTransform(context.path, arrayUnion);\r\n    };\r\n    ArrayUnionFieldValueImpl.prototype.isEqual = function (other) {\r\n        // TODO(mrschmidt): Implement isEquals\r\n        return this === other;\r\n    };\r\n    return ArrayUnionFieldValueImpl;\r\n}(FieldValue));\r\nvar ArrayRemoveFieldValueImpl = /** @class */ (function (_super) {\r\n    tslib.__extends(ArrayRemoveFieldValueImpl, _super);\r\n    function ArrayRemoveFieldValueImpl(methodName, _elements) {\r\n        var _this = _super.call(this, methodName) || this;\r\n        _this._elements = _elements;\r\n        return _this;\r\n    }\r\n    ArrayRemoveFieldValueImpl.prototype._toFieldTransform = function (context) {\r\n        var parseContext = createSentinelChildContext(this, context, \r\n        /*array=*/ true);\r\n        var parsedElements = this._elements.map(function (element) { return parseData(element, parseContext); });\r\n        var arrayUnion = new ArrayRemoveTransformOperation(parsedElements);\r\n        return new FieldTransform(context.path, arrayUnion);\r\n    };\r\n    ArrayRemoveFieldValueImpl.prototype.isEqual = function (other) {\r\n        // TODO(mrschmidt): Implement isEquals\r\n        return this === other;\r\n    };\r\n    return ArrayRemoveFieldValueImpl;\r\n}(FieldValue));\r\nvar NumericIncrementFieldValueImpl = /** @class */ (function (_super) {\r\n    tslib.__extends(NumericIncrementFieldValueImpl, _super);\r\n    function NumericIncrementFieldValueImpl(methodName, _operand) {\r\n        var _this = _super.call(this, methodName) || this;\r\n        _this._operand = _operand;\r\n        return _this;\r\n    }\r\n    NumericIncrementFieldValueImpl.prototype._toFieldTransform = function (context) {\r\n        var numericIncrement = new NumericIncrementTransformOperation(context.serializer, toNumber(context.serializer, this._operand));\r\n        return new FieldTransform(context.path, numericIncrement);\r\n    };\r\n    NumericIncrementFieldValueImpl.prototype.isEqual = function (other) {\r\n        // TODO(mrschmidt): Implement isEquals\r\n        return this === other;\r\n    };\r\n    return NumericIncrementFieldValueImpl;\r\n}(FieldValue));\r\n/** Parse update data from an update() call. */\r\nfunction parseUpdateData(userDataReader, methodName, targetDoc, input) {\r\n    var context = userDataReader.createContext(1 /* Update */, methodName, targetDoc);\r\n    validatePlainObject('Data must be an object, but it was:', context, input);\r\n    var fieldMaskPaths = [];\r\n    var updateData = ObjectValue.empty();\r\n    forEach(input, function (key, value) {\r\n        var path = fieldPathFromDotSeparatedString(methodName, key, targetDoc);\r\n        // For Compat types, we have to \"extract\" the underlying types before\r\n        // performing validation.\r\n        value = util.getModularInstance(value);\r\n        var childContext = context.childContextForFieldPath(path);\r\n        if (value instanceof DeleteFieldValueImpl) {\r\n            // Add it to the field mask, but don't add anything to updateData.\r\n            fieldMaskPaths.push(path);\r\n        }\r\n        else {\r\n            var parsedValue = parseData(value, childContext);\r\n            if (parsedValue != null) {\r\n                fieldMaskPaths.push(path);\r\n                updateData.set(path, parsedValue);\r\n            }\r\n        }\r\n    });\r\n    var mask = new FieldMask(fieldMaskPaths);\r\n    return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\r\n}\r\n/** Parse update data from a list of field/value arguments. */\r\nfunction parseUpdateVarargs(userDataReader, methodName, targetDoc, field, value, moreFieldsAndValues) {\r\n    var context = userDataReader.createContext(1 /* Update */, methodName, targetDoc);\r\n    var keys = [fieldPathFromArgument$1(methodName, field, targetDoc)];\r\n    var values = [value];\r\n    if (moreFieldsAndValues.length % 2 !== 0) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Function \" + methodName + \"() needs to be called with an even number \" +\r\n            'of arguments that alternate between field names and values.');\r\n    }\r\n    for (var i = 0; i < moreFieldsAndValues.length; i += 2) {\r\n        keys.push(fieldPathFromArgument$1(methodName, moreFieldsAndValues[i]));\r\n        values.push(moreFieldsAndValues[i + 1]);\r\n    }\r\n    var fieldMaskPaths = [];\r\n    var updateData = ObjectValue.empty();\r\n    // We iterate in reverse order to pick the last value for a field if the\r\n    // user specified the field multiple times.\r\n    for (var i = keys.length - 1; i >= 0; --i) {\r\n        if (!fieldMaskContains(fieldMaskPaths, keys[i])) {\r\n            var path = keys[i];\r\n            var value_1 = values[i];\r\n            // For Compat types, we have to \"extract\" the underlying types before\r\n            // performing validation.\r\n            value_1 = util.getModularInstance(value_1);\r\n            var childContext = context.childContextForFieldPath(path);\r\n            if (value_1 instanceof DeleteFieldValueImpl) {\r\n                // Add it to the field mask, but don't add anything to updateData.\r\n                fieldMaskPaths.push(path);\r\n            }\r\n            else {\r\n                var parsedValue = parseData(value_1, childContext);\r\n                if (parsedValue != null) {\r\n                    fieldMaskPaths.push(path);\r\n                    updateData.set(path, parsedValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    var mask = new FieldMask(fieldMaskPaths);\r\n    return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\r\n}\r\n/**\r\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\r\n * bound).\r\n *\r\n * @param allowArrays - Whether the query value is an array that may directly\r\n * contain additional arrays (e.g. the operand of an `in` query).\r\n */\r\nfunction parseQueryValue(userDataReader, methodName, input, allowArrays) {\r\n    if (allowArrays === void 0) { allowArrays = false; }\r\n    var context = userDataReader.createContext(allowArrays ? 4 /* ArrayArgument */ : 3 /* Argument */, methodName);\r\n    var parsed = parseData(input, context);\r\n    return parsed;\r\n}\r\n/**\r\n * Parses user data to Protobuf Values.\r\n *\r\n * @param input - Data to be parsed.\r\n * @param context - A context object representing the current path being parsed,\r\n * the source of the data being parsed, etc.\r\n * @returns The parsed value, or null if the value was a FieldValue sentinel\r\n * that should not be included in the resulting parsed data.\r\n */\r\nfunction parseData(input, context) {\r\n    // Unwrap the API type from the Compat SDK. This will return the API type\r\n    // from firestore-exp.\r\n    input = util.getModularInstance(input);\r\n    if (looksLikeJsonObject(input)) {\r\n        validatePlainObject('Unsupported field value:', context, input);\r\n        return parseObject(input, context);\r\n    }\r\n    else if (input instanceof FieldValue) {\r\n        // FieldValues usually parse into transforms (except FieldValue.delete())\r\n        // in which case we do not want to include this field in our parsed data\r\n        // (as doing so will overwrite the field directly prior to the transform\r\n        // trying to transform it). So we don't add this location to\r\n        // context.fieldMask and we return null as our parsing result.\r\n        parseSentinelFieldValue(input, context);\r\n        return null;\r\n    }\r\n    else if (input === undefined && context.ignoreUndefinedProperties) {\r\n        // If the input is undefined it can never participate in the fieldMask, so\r\n        // don't handle this below. If `ignoreUndefinedProperties` is false,\r\n        // `parseScalarValue` will reject an undefined value.\r\n        return null;\r\n    }\r\n    else {\r\n        // If context.path is null we are inside an array and we don't support\r\n        // field mask paths more granular than the top-level array.\r\n        if (context.path) {\r\n            context.fieldMask.push(context.path);\r\n        }\r\n        if (input instanceof Array) {\r\n            // TODO(b/34871131): Include the path containing the array in the error\r\n            // message.\r\n            // In the case of IN queries, the parsed data is an array (representing\r\n            // the set of values to be included for the IN query) that may directly\r\n            // contain additional arrays (each representing an individual field\r\n            // value), so we disable this validation.\r\n            if (context.settings.arrayElement &&\r\n                context.dataSource !== 4 /* ArrayArgument */) {\r\n                throw context.createError('Nested arrays are not supported');\r\n            }\r\n            return parseArray(input, context);\r\n        }\r\n        else {\r\n            return parseScalarValue(input, context);\r\n        }\r\n    }\r\n}\r\nfunction parseObject(obj, context) {\r\n    var fields = {};\r\n    if (isEmpty(obj)) {\r\n        // If we encounter an empty object, we explicitly add it to the update\r\n        // mask to ensure that the server creates a map entry.\r\n        if (context.path && context.path.length > 0) {\r\n            context.fieldMask.push(context.path);\r\n        }\r\n    }\r\n    else {\r\n        forEach(obj, function (key, val) {\r\n            var parsedValue = parseData(val, context.childContextForField(key));\r\n            if (parsedValue != null) {\r\n                fields[key] = parsedValue;\r\n            }\r\n        });\r\n    }\r\n    return { mapValue: { fields: fields } };\r\n}\r\nfunction parseArray(array, context) {\r\n    var values = [];\r\n    var entryIndex = 0;\r\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\r\n        var entry = array_1[_i];\r\n        var parsedEntry = parseData(entry, context.childContextForArray(entryIndex));\r\n        if (parsedEntry == null) {\r\n            // Just include nulls in the array for fields being replaced with a\r\n            // sentinel.\r\n            parsedEntry = { nullValue: 'NULL_VALUE' };\r\n        }\r\n        values.push(parsedEntry);\r\n        entryIndex++;\r\n    }\r\n    return { arrayValue: { values: values } };\r\n}\r\n/**\r\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\r\n * context.fieldTransforms.\r\n */\r\nfunction parseSentinelFieldValue(value, context) {\r\n    // Sentinels are only supported with writes, and not within arrays.\r\n    if (!isWrite(context.dataSource)) {\r\n        throw context.createError(value._methodName + \"() can only be used with update() and set()\");\r\n    }\r\n    if (!context.path) {\r\n        throw context.createError(value._methodName + \"() is not currently supported inside arrays\");\r\n    }\r\n    var fieldTransform = value._toFieldTransform(context);\r\n    if (fieldTransform) {\r\n        context.fieldTransforms.push(fieldTransform);\r\n    }\r\n}\r\n/**\r\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\r\n *\r\n * @returns The parsed value\r\n */\r\nfunction parseScalarValue(value, context) {\r\n    value = util.getModularInstance(value);\r\n    if (value === null) {\r\n        return { nullValue: 'NULL_VALUE' };\r\n    }\r\n    else if (typeof value === 'number') {\r\n        return toNumber(context.serializer, value);\r\n    }\r\n    else if (typeof value === 'boolean') {\r\n        return { booleanValue: value };\r\n    }\r\n    else if (typeof value === 'string') {\r\n        return { stringValue: value };\r\n    }\r\n    else if (value instanceof Date) {\r\n        var timestamp = Timestamp.fromDate(value);\r\n        return {\r\n            timestampValue: toTimestamp(context.serializer, timestamp)\r\n        };\r\n    }\r\n    else if (value instanceof Timestamp) {\r\n        // Firestore backend truncates precision down to microseconds. To ensure\r\n        // offline mode works the same with regards to truncation, perform the\r\n        // truncation immediately without waiting for the backend to do that.\r\n        var timestamp = new Timestamp(value.seconds, Math.floor(value.nanoseconds / 1000) * 1000);\r\n        return {\r\n            timestampValue: toTimestamp(context.serializer, timestamp)\r\n        };\r\n    }\r\n    else if (value instanceof GeoPoint) {\r\n        return {\r\n            geoPointValue: {\r\n                latitude: value.latitude,\r\n                longitude: value.longitude\r\n            }\r\n        };\r\n    }\r\n    else if (value instanceof Bytes) {\r\n        return { bytesValue: toBytes(context.serializer, value._byteString) };\r\n    }\r\n    else if (value instanceof DocumentReference$1) {\r\n        var thisDb = context.databaseId;\r\n        var otherDb = value.firestore._databaseId;\r\n        if (!otherDb.isEqual(thisDb)) {\r\n            throw context.createError('Document reference is for database ' +\r\n                (otherDb.projectId + \"/\" + otherDb.database + \" but should be \") +\r\n                (\"for database \" + thisDb.projectId + \"/\" + thisDb.database));\r\n        }\r\n        return {\r\n            referenceValue: toResourceName(value.firestore._databaseId || context.databaseId, value._key.path)\r\n        };\r\n    }\r\n    else {\r\n        throw context.createError(\"Unsupported field value: \" + valueDescription(value));\r\n    }\r\n}\r\n/**\r\n * Checks whether an object looks like a JSON object that should be converted\r\n * into a struct. Normal class/prototype instances are considered to look like\r\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\r\n * GeoPoints, etc. are not considered to look like JSON objects since they map\r\n * to specific FieldValue types other than ObjectValue.\r\n */\r\nfunction looksLikeJsonObject(input) {\r\n    return (typeof input === 'object' &&\r\n        input !== null &&\r\n        !(input instanceof Array) &&\r\n        !(input instanceof Date) &&\r\n        !(input instanceof Timestamp) &&\r\n        !(input instanceof GeoPoint) &&\r\n        !(input instanceof Bytes) &&\r\n        !(input instanceof DocumentReference$1) &&\r\n        !(input instanceof FieldValue));\r\n}\r\nfunction validatePlainObject(message, context, input) {\r\n    if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\r\n        var description = valueDescription(input);\r\n        if (description === 'an object') {\r\n            // Massage the error if it was an object.\r\n            throw context.createError(message + ' a custom object');\r\n        }\r\n        else {\r\n            throw context.createError(message + ' ' + description);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\r\n */\r\nfunction fieldPathFromArgument$1(methodName, path, targetDoc) {\r\n    // If required, replace the FieldPath Compat class with with the firestore-exp\r\n    // FieldPath.\r\n    path = util.getModularInstance(path);\r\n    if (path instanceof FieldPath) {\r\n        return path._internalPath;\r\n    }\r\n    else if (typeof path === 'string') {\r\n        return fieldPathFromDotSeparatedString(methodName, path);\r\n    }\r\n    else {\r\n        var message = 'Field path arguments must be of type string or FieldPath.';\r\n        throw createError(message, methodName, \r\n        /* hasConverter= */ false, \r\n        /* path= */ undefined, targetDoc);\r\n    }\r\n}\r\n/**\r\n * Matches any characters in a field path string that are reserved.\r\n */\r\nvar FIELD_PATH_RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\r\n/**\r\n * Wraps fromDotSeparatedString with an error message about the method that\r\n * was thrown.\r\n * @param methodName - The publicly visible method name\r\n * @param path - The dot-separated string form of a field path which will be\r\n * split on dots.\r\n * @param targetDoc - The document against which the field path will be\r\n * evaluated.\r\n */\r\nfunction fieldPathFromDotSeparatedString(methodName, path, targetDoc) {\r\n    var found = path.search(FIELD_PATH_RESERVED);\r\n    if (found >= 0) {\r\n        throw createError(\"Invalid field path (\" + path + \"). Paths must not contain \" +\r\n            \"'~', '*', '/', '[', or ']'\", methodName, \r\n        /* hasConverter= */ false, \r\n        /* path= */ undefined, targetDoc);\r\n    }\r\n    try {\r\n        return new (FieldPath.bind.apply(FieldPath, tslib.__spreadArray([void 0], path.split('.'))))()._internalPath;\r\n    }\r\n    catch (e) {\r\n        throw createError(\"Invalid field path (\" + path + \"). Paths must not be empty, \" +\r\n            \"begin with '.', end with '.', or contain '..'\", methodName, \r\n        /* hasConverter= */ false, \r\n        /* path= */ undefined, targetDoc);\r\n    }\r\n}\r\nfunction createError(reason, methodName, hasConverter, path, targetDoc) {\r\n    var hasPath = path && !path.isEmpty();\r\n    var hasDocument = targetDoc !== undefined;\r\n    var message = \"Function \" + methodName + \"() called with invalid data\";\r\n    if (hasConverter) {\r\n        message += ' (via `toFirestore()`)';\r\n    }\r\n    message += '. ';\r\n    var description = '';\r\n    if (hasPath || hasDocument) {\r\n        description += ' (found';\r\n        if (hasPath) {\r\n            description += \" in field \" + path;\r\n        }\r\n        if (hasDocument) {\r\n            description += \" in document \" + targetDoc;\r\n        }\r\n        description += ')';\r\n    }\r\n    return new FirestoreError(Code.INVALID_ARGUMENT, message + reason + description);\r\n}\r\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\r\nfunction fieldMaskContains(haystack, needle) {\r\n    return haystack.some(function (v) { return v.isEqual(needle); });\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A `DocumentSnapshot` contains data read from a document in your Firestore\r\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\r\n * get a specific field.\r\n *\r\n * For a `DocumentSnapshot` that points to a non-existing document, any data\r\n * access will return 'undefined'. You can use the `exists()` method to\r\n * explicitly verify a document's existence.\r\n */\r\nvar DocumentSnapshot$2 = /** @class */ (function () {\r\n    // Note: This class is stripped down version of the DocumentSnapshot in\r\n    // the legacy SDK. The changes are:\r\n    // - No support for SnapshotMetadata.\r\n    // - No support for SnapshotOptions.\r\n    /** @hideconstructor protected */\r\n    function DocumentSnapshot$2(_firestore, _userDataWriter, _key, _document, _converter) {\r\n        this._firestore = _firestore;\r\n        this._userDataWriter = _userDataWriter;\r\n        this._key = _key;\r\n        this._document = _document;\r\n        this._converter = _converter;\r\n    }\r\n    Object.defineProperty(DocumentSnapshot$2.prototype, \"id\", {\r\n        /** Property of the `DocumentSnapshot` that provides the document's ID. */\r\n        get: function () {\r\n            return this._key.path.lastSegment();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocumentSnapshot$2.prototype, \"ref\", {\r\n        /**\r\n         * The `DocumentReference` for the document included in the `DocumentSnapshot`.\r\n         */\r\n        get: function () {\r\n            return new DocumentReference$1(this._firestore, this._converter, this._key);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Signals whether or not the document at the snapshot's location exists.\r\n     *\r\n     * @returns true if the document exists.\r\n     */\r\n    DocumentSnapshot$2.prototype.exists = function () {\r\n        return this._document !== null;\r\n    };\r\n    /**\r\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\r\n     * the document doesn't exist.\r\n     *\r\n     * @returns An `Object` containing all fields in the document or `undefined`\r\n     * if the document doesn't exist.\r\n     */\r\n    DocumentSnapshot$2.prototype.data = function () {\r\n        if (!this._document) {\r\n            return undefined;\r\n        }\r\n        else if (this._converter) {\r\n            // We only want to use the converter and create a new DocumentSnapshot\r\n            // if a converter has been provided.\r\n            var snapshot = new QueryDocumentSnapshot$2(this._firestore, this._userDataWriter, this._key, this._document, \r\n            /* converter= */ null);\r\n            return this._converter.fromFirestore(snapshot);\r\n        }\r\n        else {\r\n            return this._userDataWriter.convertValue(this._document.data.value);\r\n        }\r\n    };\r\n    /**\r\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\r\n     * document or field doesn't exist.\r\n     *\r\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\r\n     * field.\r\n     * @returns The data at the specified field location or undefined if no such\r\n     * field exists in the document.\r\n     */\r\n    // We are using `any` here to avoid an explicit cast by our users.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    DocumentSnapshot$2.prototype.get = function (fieldPath) {\r\n        if (this._document) {\r\n            var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\r\n            if (value !== null) {\r\n                return this._userDataWriter.convertValue(value);\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    return DocumentSnapshot$2;\r\n}());\r\n/**\r\n * A `QueryDocumentSnapshot` contains data read from a document in your\r\n * Firestore database as part of a query. The document is guaranteed to exist\r\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\r\n * specific field.\r\n *\r\n * A `QueryDocumentSnapshot` offers the same API surface as a\r\n * `DocumentSnapshot`. Since query results contain only existing documents, the\r\n * `exists` property will always be true and `data()` will never return\r\n * 'undefined'.\r\n */\r\nvar QueryDocumentSnapshot$2 = /** @class */ (function (_super) {\r\n    tslib.__extends(QueryDocumentSnapshot$2, _super);\r\n    function QueryDocumentSnapshot$2() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Retrieves all fields in the document as an `Object`.\r\n     *\r\n     * @override\r\n     * @returns An `Object` containing all fields in the document.\r\n     */\r\n    QueryDocumentSnapshot$2.prototype.data = function () {\r\n        return _super.prototype.data.call(this);\r\n    };\r\n    return QueryDocumentSnapshot$2;\r\n}(DocumentSnapshot$2));\r\n/**\r\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\r\n */\r\nfunction fieldPathFromArgument(methodName, arg) {\r\n    if (typeof arg === 'string') {\r\n        return fieldPathFromDotSeparatedString(methodName, arg);\r\n    }\r\n    else if (arg instanceof FieldPath) {\r\n        return arg._internalPath;\r\n    }\r\n    else {\r\n        return arg._delegate._internalPath;\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Metadata about a snapshot, describing the state of the snapshot.\r\n */\r\nvar SnapshotMetadata = /** @class */ (function () {\r\n    /** @hideconstructor */\r\n    function SnapshotMetadata(hasPendingWrites, fromCache) {\r\n        this.hasPendingWrites = hasPendingWrites;\r\n        this.fromCache = fromCache;\r\n    }\r\n    /**\r\n     * Returns true if this `SnapshotMetadata` is equal to the provided one.\r\n     *\r\n     * @param other - The `SnapshotMetadata` to compare against.\r\n     * @returns true if this `SnapshotMetadata` is equal to the provided one.\r\n     */\r\n    SnapshotMetadata.prototype.isEqual = function (other) {\r\n        return (this.hasPendingWrites === other.hasPendingWrites &&\r\n            this.fromCache === other.fromCache);\r\n    };\r\n    return SnapshotMetadata;\r\n}());\r\n/**\r\n * A `DocumentSnapshot` contains data read from a document in your Firestore\r\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\r\n * get a specific field.\r\n *\r\n * For a `DocumentSnapshot` that points to a non-existing document, any data\r\n * access will return 'undefined'. You can use the `exists()` method to\r\n * explicitly verify a document's existence.\r\n */\r\nvar DocumentSnapshot$1 = /** @class */ (function (_super) {\r\n    tslib.__extends(DocumentSnapshot$1, _super);\r\n    /** @hideconstructor protected */\r\n    function DocumentSnapshot$1(_firestore, userDataWriter, key, document, metadata, converter) {\r\n        var _this = _super.call(this, _firestore, userDataWriter, key, document, converter) || this;\r\n        _this._firestore = _firestore;\r\n        _this._firestoreImpl = _firestore;\r\n        _this.metadata = metadata;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Property of the `DocumentSnapshot` that signals whether or not the data\r\n     * exists. True if the document exists.\r\n     */\r\n    DocumentSnapshot$1.prototype.exists = function () {\r\n        return _super.prototype.exists.call(this);\r\n    };\r\n    /**\r\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\r\n     * the document doesn't exist.\r\n     *\r\n     * By default, `FieldValue.serverTimestamp()` values that have not yet been\r\n     * set to their final value will be returned as `null`. You can override\r\n     * this by passing an options object.\r\n     *\r\n     * @param options - An options object to configure how data is retrieved from\r\n     * the snapshot (for example the desired behavior for server timestamps that\r\n     * have not yet been set to their final value).\r\n     * @returns An `Object` containing all fields in the document or `undefined` if\r\n     * the document doesn't exist.\r\n     */\r\n    DocumentSnapshot$1.prototype.data = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (!this._document) {\r\n            return undefined;\r\n        }\r\n        else if (this._converter) {\r\n            // We only want to use the converter and create a new DocumentSnapshot\r\n            // if a converter has been provided.\r\n            var snapshot = new QueryDocumentSnapshot$1(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, \r\n            /* converter= */ null);\r\n            return this._converter.fromFirestore(snapshot, options);\r\n        }\r\n        else {\r\n            return this._userDataWriter.convertValue(this._document.data.value, options.serverTimestamps);\r\n        }\r\n    };\r\n    /**\r\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\r\n     * document or field doesn't exist.\r\n     *\r\n     * By default, a `FieldValue.serverTimestamp()` that has not yet been set to\r\n     * its final value will be returned as `null`. You can override this by\r\n     * passing an options object.\r\n     *\r\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\r\n     * field.\r\n     * @param options - An options object to configure how the field is retrieved\r\n     * from the snapshot (for example the desired behavior for server timestamps\r\n     * that have not yet been set to their final value).\r\n     * @returns The data at the specified field location or undefined if no such\r\n     * field exists in the document.\r\n     */\r\n    // We are using `any` here to avoid an explicit cast by our users.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    DocumentSnapshot$1.prototype.get = function (fieldPath, options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (this._document) {\r\n            var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\r\n            if (value !== null) {\r\n                return this._userDataWriter.convertValue(value, options.serverTimestamps);\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    return DocumentSnapshot$1;\r\n}(DocumentSnapshot$2));\r\n/**\r\n * A `QueryDocumentSnapshot` contains data read from a document in your\r\n * Firestore database as part of a query. The document is guaranteed to exist\r\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\r\n * specific field.\r\n *\r\n * A `QueryDocumentSnapshot` offers the same API surface as a\r\n * `DocumentSnapshot`. Since query results contain only existing documents, the\r\n * `exists` property will always be true and `data()` will never return\r\n * 'undefined'.\r\n */\r\nvar QueryDocumentSnapshot$1 = /** @class */ (function (_super) {\r\n    tslib.__extends(QueryDocumentSnapshot$1, _super);\r\n    function QueryDocumentSnapshot$1() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Retrieves all fields in the document as an `Object`.\r\n     *\r\n     * By default, `FieldValue.serverTimestamp()` values that have not yet been\r\n     * set to their final value will be returned as `null`. You can override\r\n     * this by passing an options object.\r\n     *\r\n     * @override\r\n     * @param options - An options object to configure how data is retrieved from\r\n     * the snapshot (for example the desired behavior for server timestamps that\r\n     * have not yet been set to their final value).\r\n     * @returns An `Object` containing all fields in the document.\r\n     */\r\n    QueryDocumentSnapshot$1.prototype.data = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        return _super.prototype.data.call(this, options);\r\n    };\r\n    return QueryDocumentSnapshot$1;\r\n}(DocumentSnapshot$1));\r\n/**\r\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\r\n * representing the results of a query. The documents can be accessed as an\r\n * array via the `docs` property or enumerated using the `forEach` method. The\r\n * number of documents can be determined via the `empty` and `size`\r\n * properties.\r\n */\r\nvar QuerySnapshot$1 = /** @class */ (function () {\r\n    /** @hideconstructor */\r\n    function QuerySnapshot$1(_firestore, _userDataWriter, query, _snapshot) {\r\n        this._firestore = _firestore;\r\n        this._userDataWriter = _userDataWriter;\r\n        this._snapshot = _snapshot;\r\n        this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);\r\n        this.query = query;\r\n    }\r\n    Object.defineProperty(QuerySnapshot$1.prototype, \"docs\", {\r\n        /** An array of all the documents in the `QuerySnapshot`. */\r\n        get: function () {\r\n            var result = [];\r\n            this.forEach(function (doc) { return result.push(doc); });\r\n            return result;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySnapshot$1.prototype, \"size\", {\r\n        /** The number of documents in the `QuerySnapshot`. */\r\n        get: function () {\r\n            return this._snapshot.docs.size;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySnapshot$1.prototype, \"empty\", {\r\n        /** True if there are no documents in the `QuerySnapshot`. */\r\n        get: function () {\r\n            return this.size === 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Enumerates all of the documents in the `QuerySnapshot`.\r\n     *\r\n     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\r\n     * each document in the snapshot.\r\n     * @param thisArg - The `this` binding for the callback.\r\n     */\r\n    QuerySnapshot$1.prototype.forEach = function (callback, thisArg) {\r\n        var _this = this;\r\n        this._snapshot.docs.forEach(function (doc) {\r\n            callback.call(thisArg, new QueryDocumentSnapshot$1(_this._firestore, _this._userDataWriter, doc.key, doc, new SnapshotMetadata(_this._snapshot.mutatedKeys.has(doc.key), _this._snapshot.fromCache), _this.query.converter));\r\n        });\r\n    };\r\n    /**\r\n     * Returns an array of the documents changes since the last snapshot. If this\r\n     * is the first snapshot, all documents will be in the list as 'added'\r\n     * changes.\r\n     *\r\n     * @param options - `SnapshotListenOptions` that control whether metadata-only\r\n     * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger\r\n     * snapshot events.\r\n     */\r\n    QuerySnapshot$1.prototype.docChanges = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        var includeMetadataChanges = !!options.includeMetadataChanges;\r\n        if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'To include metadata changes with your document changes, you must ' +\r\n                'also pass { includeMetadataChanges:true } to onSnapshot().');\r\n        }\r\n        if (!this._cachedChanges ||\r\n            this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges) {\r\n            this._cachedChanges = changesFromSnapshot(this, includeMetadataChanges);\r\n            this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;\r\n        }\r\n        return this._cachedChanges;\r\n    };\r\n    return QuerySnapshot$1;\r\n}());\r\n/** Calculates the array of DocumentChanges for a given ViewSnapshot. */\r\nfunction changesFromSnapshot(querySnapshot, includeMetadataChanges) {\r\n    if (querySnapshot._snapshot.oldDocs.isEmpty()) {\r\n        var index_1 = 0;\r\n        return querySnapshot._snapshot.docChanges.map(function (change) {\r\n            var doc = new QueryDocumentSnapshot$1(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query.converter);\r\n            return {\r\n                type: 'added',\r\n                doc: doc,\r\n                oldIndex: -1,\r\n                newIndex: index_1++\r\n            };\r\n        });\r\n    }\r\n    else {\r\n        // A DocumentSet that is updated incrementally as changes are applied to use\r\n        // to lookup the index of a document.\r\n        var indexTracker_1 = querySnapshot._snapshot.oldDocs;\r\n        return querySnapshot._snapshot.docChanges\r\n            .filter(function (change) { return includeMetadataChanges || change.type !== 3; } /* Metadata */)\r\n            .map(function (change) {\r\n            var doc = new QueryDocumentSnapshot$1(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query.converter);\r\n            var oldIndex = -1;\r\n            var newIndex = -1;\r\n            if (change.type !== 0 /* Added */) {\r\n                oldIndex = indexTracker_1.indexOf(change.doc.key);\r\n                indexTracker_1 = indexTracker_1.delete(change.doc.key);\r\n            }\r\n            if (change.type !== 1 /* Removed */) {\r\n                indexTracker_1 = indexTracker_1.add(change.doc);\r\n                newIndex = indexTracker_1.indexOf(change.doc.key);\r\n            }\r\n            return {\r\n                type: resultChangeType(change.type),\r\n                doc: doc,\r\n                oldIndex: oldIndex,\r\n                newIndex: newIndex\r\n            };\r\n        });\r\n    }\r\n}\r\nfunction resultChangeType(type) {\r\n    switch (type) {\r\n        case 0 /* Added */:\r\n            return 'added';\r\n        case 2 /* Modified */:\r\n        case 3 /* Metadata */:\r\n            return 'modified';\r\n        case 1 /* Removed */:\r\n            return 'removed';\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\n// TODO(firestoreexp): Add tests for snapshotEqual with different snapshot\r\n// metadata\r\n/**\r\n * Returns true if the provided snapshots are equal.\r\n *\r\n * @param left - A snapshot to compare.\r\n * @param right - A snapshot to compare.\r\n * @returns true if the snapshots are equal.\r\n */\r\nfunction snapshotEqual(left, right) {\r\n    if (left instanceof DocumentSnapshot$1 && right instanceof DocumentSnapshot$1) {\r\n        return (left._firestore === right._firestore &&\r\n            left._key.isEqual(right._key) &&\r\n            (left._document === null\r\n                ? right._document === null\r\n                : left._document.isEqual(right._document)) &&\r\n            left._converter === right._converter);\r\n    }\r\n    else if (left instanceof QuerySnapshot$1 && right instanceof QuerySnapshot$1) {\r\n        return (left._firestore === right._firestore &&\r\n            queryEqual(left.query, right.query) &&\r\n            left.metadata.isEqual(right.metadata) &&\r\n            left._snapshot.isEqual(right._snapshot));\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction validateHasExplicitOrderByForLimitToLast(query) {\r\n    if (hasLimitToLast(query) && query.explicitOrderBy.length === 0) {\r\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'limitToLast() queries require specifying at least one orderBy() clause');\r\n    }\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\r\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\r\n * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nvar QueryConstraint = /** @class */ (function () {\r\n    function QueryConstraint() {\r\n    }\r\n    return QueryConstraint;\r\n}());\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query) {\r\n    var queryConstraints = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        queryConstraints[_i - 1] = arguments[_i];\r\n    }\r\n    for (var _d = 0, queryConstraints_1 = queryConstraints; _d < queryConstraints_1.length; _d++) {\r\n        var constraint = queryConstraints_1[_d];\r\n        query = constraint._apply(query);\r\n    }\r\n    return query;\r\n}\r\nvar QueryFilterConstraint = /** @class */ (function (_super) {\r\n    tslib.__extends(QueryFilterConstraint, _super);\r\n    function QueryFilterConstraint(_field, _op, _value) {\r\n        var _this = _super.call(this) || this;\r\n        _this._field = _field;\r\n        _this._op = _op;\r\n        _this._value = _value;\r\n        _this.type = 'where';\r\n        return _this;\r\n    }\r\n    QueryFilterConstraint.prototype._apply = function (query) {\r\n        var reader = newUserDataReader(query.firestore);\r\n        var filter = newQueryFilter(query._query, 'where', reader, query.firestore._databaseId, this._field, this._op, this._value);\r\n        return new Query$1(query.firestore, query.converter, queryWithAddedFilter(query._query, filter));\r\n    };\r\n    return QueryFilterConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a `QueryConstraint` that enforces that documents must contain the\r\n * specified field and that the value should satisfy the relation constraint\r\n * provided.\r\n *\r\n * @param fieldPath - The path to compare\r\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\r\n *   \"&lt;=\", \"!=\").\r\n * @param value - The value for comparison\r\n * @returns The created `Query`.\r\n */\r\nfunction where(fieldPath, opStr, value) {\r\n    var op = opStr;\r\n    var field = fieldPathFromArgument('where', fieldPath);\r\n    return new QueryFilterConstraint(field, op, value);\r\n}\r\nvar QueryOrderByConstraint = /** @class */ (function (_super) {\r\n    tslib.__extends(QueryOrderByConstraint, _super);\r\n    function QueryOrderByConstraint(_field, _direction) {\r\n        var _this = _super.call(this) || this;\r\n        _this._field = _field;\r\n        _this._direction = _direction;\r\n        _this.type = 'orderBy';\r\n        return _this;\r\n    }\r\n    QueryOrderByConstraint.prototype._apply = function (query) {\r\n        var orderBy = newQueryOrderBy(query._query, this._field, this._direction);\r\n        return new Query$1(query.firestore, query.converter, queryWithAddedOrderBy(query._query, orderBy));\r\n    };\r\n    return QueryOrderByConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a `QueryConstraint` that sorts the query result by the\r\n * specified field, optionally in descending order instead of ascending.\r\n *\r\n * @param fieldPath - The field to sort by.\r\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\r\n * not specified, order will be ascending.\r\n * @returns The created `Query`.\r\n */\r\nfunction orderBy(fieldPath, directionStr) {\r\n    if (directionStr === void 0) { directionStr = 'asc'; }\r\n    var direction = directionStr;\r\n    var path = fieldPathFromArgument('orderBy', fieldPath);\r\n    return new QueryOrderByConstraint(path, direction);\r\n}\r\nvar QueryLimitConstraint = /** @class */ (function (_super) {\r\n    tslib.__extends(QueryLimitConstraint, _super);\r\n    function QueryLimitConstraint(type, _limit, _limitType) {\r\n        var _this = _super.call(this) || this;\r\n        _this.type = type;\r\n        _this._limit = _limit;\r\n        _this._limitType = _limitType;\r\n        return _this;\r\n    }\r\n    QueryLimitConstraint.prototype._apply = function (query) {\r\n        return new Query$1(query.firestore, query.converter, queryWithLimit(query._query, this._limit, this._limitType));\r\n    };\r\n    return QueryLimitConstraint;\r\n}(QueryConstraint));\r\n/**\r\n * Creates a `QueryConstraint` that only returns the first matching documents.\r\n *\r\n * @param limit - The maximum number of items to return.\r\n * @returns The created `Query`.\r\n */\r\nfunction limit(limit) {\r\n    validatePositiveNumber('limit', limit);\r\n    return new QueryLimitConstraint('limit', limit, \"F\" /* First */);\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that only returns the last matching documents.\r\n *\r\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\r\n * otherwise an exception will be thrown during execution.\r\n *\r\n * @param limit - The maximum number of items to return.\r\n * @returns The created `Query`.\r\n */\r\nfunction limitToLast(limit) {\r\n    validatePositiveNumber('limitToLast', limit);\r\n    return new QueryLimitConstraint('limitToLast', limit, \"L\" /* Last */);\r\n}\r\nvar QueryStartAtConstraint = /** @class */ (function (_super) {\r\n    tslib.__extends(QueryStartAtConstraint, _super);\r\n    function QueryStartAtConstraint(type, _docOrFields, _before) {\r\n        var _this = _super.call(this) || this;\r\n        _this.type = type;\r\n        _this._docOrFields = _docOrFields;\r\n        _this._before = _before;\r\n        return _this;\r\n    }\r\n    QueryStartAtConstraint.prototype._apply = function (query) {\r\n        var bound = newQueryBoundFromDocOrFields(query, this.type, this._docOrFields, this._before);\r\n        return new Query$1(query.firestore, query.converter, queryWithStartAt(query._query, bound));\r\n    };\r\n    return QueryStartAtConstraint;\r\n}(QueryConstraint));\r\nfunction startAt() {\r\n    var docOrFields = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        docOrFields[_i] = arguments[_i];\r\n    }\r\n    return new QueryStartAtConstraint('startAt', docOrFields, /*before=*/ true);\r\n}\r\nfunction startAfter() {\r\n    var docOrFields = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        docOrFields[_i] = arguments[_i];\r\n    }\r\n    return new QueryStartAtConstraint('startAfter', docOrFields, \r\n    /*before=*/ false);\r\n}\r\nvar QueryEndAtConstraint = /** @class */ (function (_super) {\r\n    tslib.__extends(QueryEndAtConstraint, _super);\r\n    function QueryEndAtConstraint(type, _docOrFields, _before) {\r\n        var _this = _super.call(this) || this;\r\n        _this.type = type;\r\n        _this._docOrFields = _docOrFields;\r\n        _this._before = _before;\r\n        return _this;\r\n    }\r\n    QueryEndAtConstraint.prototype._apply = function (query) {\r\n        var bound = newQueryBoundFromDocOrFields(query, this.type, this._docOrFields, this._before);\r\n        return new Query$1(query.firestore, query.converter, queryWithEndAt(query._query, bound));\r\n    };\r\n    return QueryEndAtConstraint;\r\n}(QueryConstraint));\r\nfunction endBefore() {\r\n    var docOrFields = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        docOrFields[_i] = arguments[_i];\r\n    }\r\n    return new QueryEndAtConstraint('endBefore', docOrFields, /*before=*/ true);\r\n}\r\nfunction endAt() {\r\n    var docOrFields = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        docOrFields[_i] = arguments[_i];\r\n    }\r\n    return new QueryEndAtConstraint('endAt', docOrFields, /*before=*/ false);\r\n}\r\n/** Helper function to create a bound from a document or fields */\r\nfunction newQueryBoundFromDocOrFields(query, methodName, docOrFields, before) {\r\n    docOrFields[0] = util.getModularInstance(docOrFields[0]);\r\n    if (docOrFields[0] instanceof DocumentSnapshot$2) {\r\n        return newQueryBoundFromDocument(query._query, query.firestore._databaseId, methodName, docOrFields[0]._document, before);\r\n    }\r\n    else {\r\n        var reader = newUserDataReader(query.firestore);\r\n        return newQueryBoundFromFields(query._query, query.firestore._databaseId, reader, methodName, docOrFields, before);\r\n    }\r\n}\r\nfunction newQueryFilter(query, methodName, dataReader, databaseId, fieldPath, op, value) {\r\n    var fieldValue;\r\n    if (fieldPath.isKeyField()) {\r\n        if (op === \"array-contains\" /* ARRAY_CONTAINS */ || op === \"array-contains-any\" /* ARRAY_CONTAINS_ANY */) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. You can't perform '\" + op + \"' \" +\r\n                'queries on FieldPath.documentId().');\r\n        }\r\n        else if (op === \"in\" /* IN */ || op === \"not-in\" /* NOT_IN */) {\r\n            validateDisjunctiveFilterElements(value, op);\r\n            var referenceList = [];\r\n            for (var _i = 0, value_2 = value; _i < value_2.length; _i++) {\r\n                var arrayValue = value_2[_i];\r\n                referenceList.push(parseDocumentIdValue(databaseId, query, arrayValue));\r\n            }\r\n            fieldValue = { arrayValue: { values: referenceList } };\r\n        }\r\n        else {\r\n            fieldValue = parseDocumentIdValue(databaseId, query, value);\r\n        }\r\n    }\r\n    else {\r\n        if (op === \"in\" /* IN */ ||\r\n            op === \"not-in\" /* NOT_IN */ ||\r\n            op === \"array-contains-any\" /* ARRAY_CONTAINS_ANY */) {\r\n            validateDisjunctiveFilterElements(value, op);\r\n        }\r\n        fieldValue = parseQueryValue(dataReader, methodName, value, \r\n        /* allowArrays= */ op === \"in\" /* IN */ || op === \"not-in\" /* NOT_IN */);\r\n    }\r\n    var filter = FieldFilter.create(fieldPath, op, fieldValue);\r\n    validateNewFilter(query, filter);\r\n    return filter;\r\n}\r\nfunction newQueryOrderBy(query, fieldPath, direction) {\r\n    if (query.startAt !== null) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call startAt() or startAfter() before ' +\r\n            'calling orderBy().');\r\n    }\r\n    if (query.endAt !== null) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call endAt() or endBefore() before ' +\r\n            'calling orderBy().');\r\n    }\r\n    var orderBy = new OrderBy(fieldPath, direction);\r\n    validateNewOrderBy(query, orderBy);\r\n    return orderBy;\r\n}\r\n/**\r\n * Create a Bound from a query and a document.\r\n *\r\n * Note that the Bound will always include the key of the document\r\n * and so only the provided document will compare equal to the returned\r\n * position.\r\n *\r\n * Will throw if the document does not contain all fields of the order by\r\n * of the query or if any of the fields in the order by are an uncommitted\r\n * server timestamp.\r\n */\r\nfunction newQueryBoundFromDocument(query, databaseId, methodName, doc, before) {\r\n    if (!doc) {\r\n        throw new FirestoreError(Code.NOT_FOUND, \"Can't use a DocumentSnapshot that doesn't exist for \" +\r\n            (methodName + \"().\"));\r\n    }\r\n    var components = [];\r\n    // Because people expect to continue/end a query at the exact document\r\n    // provided, we need to use the implicit sort order rather than the explicit\r\n    // sort order, because it's guaranteed to contain the document key. That way\r\n    // the position becomes unambiguous and the query continues/ends exactly at\r\n    // the provided document. Without the key (by using the explicit sort\r\n    // orders), multiple documents could match the position, yielding duplicate\r\n    // results.\r\n    for (var _i = 0, _d = queryOrderBy(query); _i < _d.length; _i++) {\r\n        var orderBy_5 = _d[_i];\r\n        if (orderBy_5.field.isKeyField()) {\r\n            components.push(refValue(databaseId, doc.key));\r\n        }\r\n        else {\r\n            var value = doc.data.field(orderBy_5.field);\r\n            if (isServerTimestamp(value)) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a ' +\r\n                    'document for which the field \"' +\r\n                    orderBy_5.field +\r\n                    '\" is an uncommitted server timestamp. (Since the value of ' +\r\n                    'this field is unknown, you cannot start/end a query with it.)');\r\n            }\r\n            else if (value !== null) {\r\n                components.push(value);\r\n            }\r\n            else {\r\n                var field = orderBy_5.field.canonicalString();\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You are trying to start or end a query using a \" +\r\n                    (\"document for which the field '\" + field + \"' (used as the \") +\r\n                    \"orderBy) does not exist.\");\r\n            }\r\n        }\r\n    }\r\n    return new Bound(components, before);\r\n}\r\n/**\r\n * Converts a list of field values to a Bound for the given query.\r\n */\r\nfunction newQueryBoundFromFields(query, databaseId, dataReader, methodName, values, before) {\r\n    // Use explicit order by's because it has to match the query the user made\r\n    var orderBy = query.explicitOrderBy;\r\n    if (values.length > orderBy.length) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Too many arguments provided to \" + methodName + \"(). \" +\r\n            \"The number of arguments must be less than or equal to the \" +\r\n            \"number of orderBy() clauses\");\r\n    }\r\n    var components = [];\r\n    for (var i = 0; i < values.length; i++) {\r\n        var rawValue = values[i];\r\n        var orderByComponent = orderBy[i];\r\n        if (orderByComponent.field.isKeyField()) {\r\n            if (typeof rawValue !== 'string') {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. Expected a string for document ID in \" +\r\n                    (methodName + \"(), but got a \" + typeof rawValue));\r\n            }\r\n            if (!isCollectionGroupQuery(query) && rawValue.indexOf('/') !== -1) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. When querying a collection and ordering by FieldPath.documentId(), \" +\r\n                    (\"the value passed to \" + methodName + \"() must be a plain document ID, but \") +\r\n                    (\"'\" + rawValue + \"' contains a slash.\"));\r\n            }\r\n            var path = query.path.child(ResourcePath.fromString(rawValue));\r\n            if (!DocumentKey.isDocumentKey(path)) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. When querying a collection group and ordering by \" +\r\n                    (\"FieldPath.documentId(), the value passed to \" + methodName + \"() must result in a \") +\r\n                    (\"valid document path, but '\" + path + \"' is not because it contains an odd number \") +\r\n                    \"of segments.\");\r\n            }\r\n            var key = new DocumentKey(path);\r\n            components.push(refValue(databaseId, key));\r\n        }\r\n        else {\r\n            var wrapped = parseQueryValue(dataReader, methodName, rawValue);\r\n            components.push(wrapped);\r\n        }\r\n    }\r\n    return new Bound(components, before);\r\n}\r\n/**\r\n * Parses the given documentIdValue into a ReferenceValue, throwing\r\n * appropriate errors if the value is anything other than a DocumentReference\r\n * or String, or if the string is malformed.\r\n */\r\nfunction parseDocumentIdValue(databaseId, query, documentIdValue) {\r\n    documentIdValue = util.getModularInstance(documentIdValue);\r\n    if (typeof documentIdValue === 'string') {\r\n        if (documentIdValue === '') {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. When querying with FieldPath.documentId(), you ' +\r\n                'must provide a valid document ID, but it was an empty string.');\r\n        }\r\n        if (!isCollectionGroupQuery(query) && documentIdValue.indexOf('/') !== -1) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. When querying a collection by \" +\r\n                \"FieldPath.documentId(), you must provide a plain document ID, but \" +\r\n                (\"'\" + documentIdValue + \"' contains a '/' character.\"));\r\n        }\r\n        var path = query.path.child(ResourcePath.fromString(documentIdValue));\r\n        if (!DocumentKey.isDocumentKey(path)) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. When querying a collection group by \" +\r\n                \"FieldPath.documentId(), the value provided must result in a valid document path, \" +\r\n                (\"but '\" + path + \"' is not because it has an odd number of segments (\" + path.length + \").\"));\r\n        }\r\n        return refValue(databaseId, new DocumentKey(path));\r\n    }\r\n    else if (documentIdValue instanceof DocumentReference$1) {\r\n        return refValue(databaseId, documentIdValue._key);\r\n    }\r\n    else {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. When querying with FieldPath.documentId(), you must provide a valid \" +\r\n            \"string or a DocumentReference, but it was: \" +\r\n            (valueDescription(documentIdValue) + \".\"));\r\n    }\r\n}\r\n/**\r\n * Validates that the value passed into a disjunctive filter satisfies all\r\n * array requirements.\r\n */\r\nfunction validateDisjunctiveFilterElements(value, operator) {\r\n    if (!Array.isArray(value) || value.length === 0) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid Query. A non-empty array is required for ' +\r\n            (\"'\" + operator.toString() + \"' filters.\"));\r\n    }\r\n    if (value.length > 10) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid Query. '\" + operator.toString() + \"' filters support a \" +\r\n            'maximum of 10 elements in the value array.');\r\n    }\r\n}\r\n/**\r\n * Given an operator, returns the set of operators that cannot be used with it.\r\n *\r\n * Operators in a query must adhere to the following set of rules:\r\n * 1. Only one array operator is allowed.\r\n * 2. Only one disjunctive operator is allowed.\r\n * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.\r\n * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.\r\n *\r\n * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY\r\n * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN\r\n */\r\nfunction conflictingOps(op) {\r\n    switch (op) {\r\n        case \"!=\" /* NOT_EQUAL */:\r\n            return [\"!=\" /* NOT_EQUAL */, \"not-in\" /* NOT_IN */];\r\n        case \"array-contains\" /* ARRAY_CONTAINS */:\r\n            return [\r\n                \"array-contains\" /* ARRAY_CONTAINS */,\r\n                \"array-contains-any\" /* ARRAY_CONTAINS_ANY */,\r\n                \"not-in\" /* NOT_IN */\r\n            ];\r\n        case \"in\" /* IN */:\r\n            return [\"array-contains-any\" /* ARRAY_CONTAINS_ANY */, \"in\" /* IN */, \"not-in\" /* NOT_IN */];\r\n        case \"array-contains-any\" /* ARRAY_CONTAINS_ANY */:\r\n            return [\r\n                \"array-contains\" /* ARRAY_CONTAINS */,\r\n                \"array-contains-any\" /* ARRAY_CONTAINS_ANY */,\r\n                \"in\" /* IN */,\r\n                \"not-in\" /* NOT_IN */\r\n            ];\r\n        case \"not-in\" /* NOT_IN */:\r\n            return [\r\n                \"array-contains\" /* ARRAY_CONTAINS */,\r\n                \"array-contains-any\" /* ARRAY_CONTAINS_ANY */,\r\n                \"in\" /* IN */,\r\n                \"not-in\" /* NOT_IN */,\r\n                \"!=\" /* NOT_EQUAL */\r\n            ];\r\n        default:\r\n            return [];\r\n    }\r\n}\r\nfunction validateNewFilter(query, filter) {\r\n    if (filter.isInequality()) {\r\n        var existingField = getInequalityFilterField(query);\r\n        if (existingField !== null && !existingField.isEqual(filter.field)) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +\r\n                ' (<, <=, !=, not-in, >, or >=) must be on the same field. But you have' +\r\n                (\" inequality filters on '\" + existingField.toString() + \"'\") +\r\n                (\" and '\" + filter.field.toString() + \"'\"));\r\n        }\r\n        var firstOrderByField = getFirstOrderByField(query);\r\n        if (firstOrderByField !== null) {\r\n            validateOrderByAndInequalityMatch(query, filter.field, firstOrderByField);\r\n        }\r\n    }\r\n    var conflictingOp = findFilterOperator(query, conflictingOps(filter.op));\r\n    if (conflictingOp !== null) {\r\n        // Special case when it's a duplicate op to give a slightly clearer error message.\r\n        if (conflictingOp === filter.op) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You cannot use more than one ' +\r\n                (\"'\" + filter.op.toString() + \"' filter.\"));\r\n        }\r\n        else {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You cannot use '\" + filter.op.toString() + \"' filters \" +\r\n                (\"with '\" + conflictingOp.toString() + \"' filters.\"));\r\n        }\r\n    }\r\n}\r\nfunction validateNewOrderBy(query, orderBy) {\r\n    if (getFirstOrderByField(query) === null) {\r\n        // This is the first order by. It must match any inequality.\r\n        var inequalityField = getInequalityFilterField(query);\r\n        if (inequalityField !== null) {\r\n            validateOrderByAndInequalityMatch(query, inequalityField, orderBy.field);\r\n        }\r\n    }\r\n}\r\nfunction validateOrderByAndInequalityMatch(baseQuery, inequality, orderBy) {\r\n    if (!orderBy.isEqual(inequality)) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Invalid query. You have a where filter with an inequality \" +\r\n            (\"(<, <=, !=, not-in, >, or >=) on field '\" + inequality.toString() + \"' \") +\r\n            (\"and so you must also use '\" + inequality.toString() + \"' \") +\r\n            \"as your first argument to orderBy(), but your first orderBy() \" +\r\n            (\"is on field '\" + orderBy.toString() + \"' instead.\"));\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Converts Firestore's internal types to the JavaScript types that we expose\r\n * to the user.\r\n *\r\n * @internal\r\n */\r\nvar AbstractUserDataWriter = /** @class */ (function () {\r\n    function AbstractUserDataWriter() {\r\n    }\r\n    AbstractUserDataWriter.prototype.convertValue = function (value, serverTimestampBehavior) {\r\n        if (serverTimestampBehavior === void 0) { serverTimestampBehavior = 'none'; }\r\n        switch (typeOrder(value)) {\r\n            case 0 /* NullValue */:\r\n                return null;\r\n            case 1 /* BooleanValue */:\r\n                return value.booleanValue;\r\n            case 2 /* NumberValue */:\r\n                return normalizeNumber(value.integerValue || value.doubleValue);\r\n            case 3 /* TimestampValue */:\r\n                return this.convertTimestamp(value.timestampValue);\r\n            case 4 /* ServerTimestampValue */:\r\n                return this.convertServerTimestamp(value, serverTimestampBehavior);\r\n            case 5 /* StringValue */:\r\n                return value.stringValue;\r\n            case 6 /* BlobValue */:\r\n                return this.convertBytes(normalizeByteString(value.bytesValue));\r\n            case 7 /* RefValue */:\r\n                return this.convertReference(value.referenceValue);\r\n            case 8 /* GeoPointValue */:\r\n                return this.convertGeoPoint(value.geoPointValue);\r\n            case 9 /* ArrayValue */:\r\n                return this.convertArray(value.arrayValue, serverTimestampBehavior);\r\n            case 10 /* ObjectValue */:\r\n                return this.convertObject(value.mapValue, serverTimestampBehavior);\r\n            default:\r\n                throw fail();\r\n        }\r\n    };\r\n    AbstractUserDataWriter.prototype.convertObject = function (mapValue, serverTimestampBehavior) {\r\n        var _this = this;\r\n        var result = {};\r\n        forEach(mapValue.fields, function (key, value) {\r\n            result[key] = _this.convertValue(value, serverTimestampBehavior);\r\n        });\r\n        return result;\r\n    };\r\n    AbstractUserDataWriter.prototype.convertGeoPoint = function (value) {\r\n        return new GeoPoint(normalizeNumber(value.latitude), normalizeNumber(value.longitude));\r\n    };\r\n    AbstractUserDataWriter.prototype.convertArray = function (arrayValue, serverTimestampBehavior) {\r\n        var _this = this;\r\n        return (arrayValue.values || []).map(function (value) { return _this.convertValue(value, serverTimestampBehavior); });\r\n    };\r\n    AbstractUserDataWriter.prototype.convertServerTimestamp = function (value, serverTimestampBehavior) {\r\n        switch (serverTimestampBehavior) {\r\n            case 'previous':\r\n                var previousValue = getPreviousValue(value);\r\n                if (previousValue == null) {\r\n                    return null;\r\n                }\r\n                return this.convertValue(previousValue, serverTimestampBehavior);\r\n            case 'estimate':\r\n                return this.convertTimestamp(getLocalWriteTime(value));\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n    AbstractUserDataWriter.prototype.convertTimestamp = function (value) {\r\n        var normalizedValue = normalizeTimestamp(value);\r\n        return new Timestamp(normalizedValue.seconds, normalizedValue.nanos);\r\n    };\r\n    AbstractUserDataWriter.prototype.convertDocumentKey = function (name, expectedDatabaseId) {\r\n        var resourcePath = ResourcePath.fromString(name);\r\n        hardAssert(isValidResourceName(resourcePath));\r\n        var databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\r\n        var key = new DocumentKey(resourcePath.popFirst(5));\r\n        if (!databaseId.isEqual(expectedDatabaseId)) {\r\n            // TODO(b/64130202): Somehow support foreign references.\r\n            logError(\"Document \" + key + \" contains a document \" +\r\n                \"reference within a different database (\" +\r\n                (databaseId.projectId + \"/\" + databaseId.database + \") which is not \") +\r\n                \"supported. It will be treated as a reference in the current \" +\r\n                (\"database (\" + expectedDatabaseId.projectId + \"/\" + expectedDatabaseId.database + \") \") +\r\n                \"instead.\");\r\n        }\r\n        return key;\r\n    };\r\n    return AbstractUserDataWriter;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Converts custom model object of type T into DocumentData by applying the\r\n * converter if it exists.\r\n *\r\n * This function is used when converting user objects to DocumentData\r\n * because we want to provide the user with a more specific error message if\r\n * their set() or fails due to invalid data originating from a toFirestore()\r\n * call.\r\n */\r\nfunction applyFirestoreDataConverter(converter, value, options) {\r\n    var convertedValue;\r\n    if (converter) {\r\n        if (options && (options.merge || options.mergeFields)) {\r\n            // Cast to `any` in order to satisfy the union type constraint on\r\n            // toFirestore().\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            convertedValue = converter.toFirestore(value, options);\r\n        }\r\n        else {\r\n            convertedValue = converter.toFirestore(value);\r\n        }\r\n    }\r\n    else {\r\n        convertedValue = value;\r\n    }\r\n    return convertedValue;\r\n}\r\nvar LiteUserDataWriter = /** @class */ (function (_super) {\r\n    tslib.__extends(LiteUserDataWriter, _super);\r\n    function LiteUserDataWriter(firestore) {\r\n        var _this = _super.call(this) || this;\r\n        _this.firestore = firestore;\r\n        return _this;\r\n    }\r\n    LiteUserDataWriter.prototype.convertBytes = function (bytes) {\r\n        return new Bytes(bytes);\r\n    };\r\n    LiteUserDataWriter.prototype.convertReference = function (name) {\r\n        var key = this.convertDocumentKey(name, this.firestore._databaseId);\r\n        return new DocumentReference$1(this.firestore, /* converter= */ null, key);\r\n    };\r\n    return LiteUserDataWriter;\r\n}(AbstractUserDataWriter));\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A write batch, used to perform multiple writes as a single atomic unit.\r\n *\r\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\r\n * provides methods for adding writes to the write batch. None of the writes\r\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\r\n * called.\r\n */\r\nvar WriteBatch$1 = /** @class */ (function () {\r\n    /** @hideconstructor */\r\n    function WriteBatch$1(_firestore, _commitHandler) {\r\n        this._firestore = _firestore;\r\n        this._commitHandler = _commitHandler;\r\n        this._mutations = [];\r\n        this._committed = false;\r\n        this._dataReader = newUserDataReader(_firestore);\r\n    }\r\n    WriteBatch$1.prototype.set = function (documentRef, data, options) {\r\n        this._verifyNotCommitted();\r\n        var ref = validateReference(documentRef, this._firestore);\r\n        var convertedValue = applyFirestoreDataConverter(ref.converter, data, options);\r\n        var parsed = parseSetData(this._dataReader, 'WriteBatch.set', ref._key, convertedValue, ref.converter !== null, options);\r\n        this._mutations.push(parsed.toMutation(ref._key, Precondition.none()));\r\n        return this;\r\n    };\r\n    WriteBatch$1.prototype.update = function (documentRef, fieldOrUpdateData, value) {\r\n        var moreFieldsAndValues = [];\r\n        for (var _i = 3; _i < arguments.length; _i++) {\r\n            moreFieldsAndValues[_i - 3] = arguments[_i];\r\n        }\r\n        this._verifyNotCommitted();\r\n        var ref = validateReference(documentRef, this._firestore);\r\n        // For Compat types, we have to \"extract\" the underlying types before\r\n        // performing validation.\r\n        fieldOrUpdateData = util.getModularInstance(fieldOrUpdateData);\r\n        var parsed;\r\n        if (typeof fieldOrUpdateData === 'string' ||\r\n            fieldOrUpdateData instanceof FieldPath) {\r\n            parsed = parseUpdateVarargs(this._dataReader, 'WriteBatch.update', ref._key, fieldOrUpdateData, value, moreFieldsAndValues);\r\n        }\r\n        else {\r\n            parsed = parseUpdateData(this._dataReader, 'WriteBatch.update', ref._key, fieldOrUpdateData);\r\n        }\r\n        this._mutations.push(parsed.toMutation(ref._key, Precondition.exists(true)));\r\n        return this;\r\n    };\r\n    /**\r\n     * Deletes the document referred to by the provided {@link DocumentReference}.\r\n     *\r\n     * @param documentRef - A reference to the document to be deleted.\r\n     * @returns This `WriteBatch` instance. Used for chaining method calls.\r\n     */\r\n    WriteBatch$1.prototype.delete = function (documentRef) {\r\n        this._verifyNotCommitted();\r\n        var ref = validateReference(documentRef, this._firestore);\r\n        this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.none()));\r\n        return this;\r\n    };\r\n    /**\r\n     * Commits all of the writes in this write batch as a single atomic unit.\r\n     *\r\n     * The result of these writes will only be reflected in document reads that\r\n     * occur after the returned Promise resolves. If the client is offline, the\r\n     * write fails. If you would like to see local modifications or buffer writes\r\n     * until the client is online, use the full Firestore SDK.\r\n     *\r\n     * @returns A Promise resolved once all of the writes in the batch have been\r\n     * successfully written to the backend as an atomic unit (note that it won't\r\n     * resolve while you're offline).\r\n     */\r\n    WriteBatch$1.prototype.commit = function () {\r\n        this._verifyNotCommitted();\r\n        this._committed = true;\r\n        if (this._mutations.length > 0) {\r\n            return this._commitHandler(this._mutations);\r\n        }\r\n        return Promise.resolve();\r\n    };\r\n    WriteBatch$1.prototype._verifyNotCommitted = function () {\r\n        if (this._committed) {\r\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +\r\n                'has been called.');\r\n        }\r\n    };\r\n    return WriteBatch$1;\r\n}());\r\nfunction validateReference(documentRef, firestore) {\r\n    documentRef = util.getModularInstance(documentRef);\r\n    if (documentRef.firestore !== firestore) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\r\n    }\r\n    else {\r\n        return documentRef;\r\n    }\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\r\n// legacy SDK.\r\n/**\r\n * A reference to a transaction.\r\n *\r\n * The `Transaction` object passed to a transaction's `updateFunction` provides\r\n * the methods to read and write data within the transaction context. See\r\n * {@link runTransaction}.\r\n */\r\nvar Transaction$2 = /** @class */ (function () {\r\n    /** @hideconstructor */\r\n    function Transaction$2(_firestore, _transaction) {\r\n        this._firestore = _firestore;\r\n        this._transaction = _transaction;\r\n        this._dataReader = newUserDataReader(_firestore);\r\n    }\r\n    /**\r\n     * Reads the document referenced by the provided {@link DocumentReference}.\r\n     *\r\n     * @param documentRef - A reference to the document to be read.\r\n     * @returns A `DocumentSnapshot` with the read data.\r\n     */\r\n    Transaction$2.prototype.get = function (documentRef) {\r\n        var _this = this;\r\n        var ref = validateReference(documentRef, this._firestore);\r\n        var userDataWriter = new LiteUserDataWriter(this._firestore);\r\n        return this._transaction.lookup([ref._key]).then(function (docs) {\r\n            if (!docs || docs.length !== 1) {\r\n                return fail();\r\n            }\r\n            var doc = docs[0];\r\n            if (doc.isFoundDocument()) {\r\n                return new DocumentSnapshot$2(_this._firestore, userDataWriter, doc.key, doc, ref.converter);\r\n            }\r\n            else if (doc.isNoDocument()) {\r\n                return new DocumentSnapshot$2(_this._firestore, userDataWriter, ref._key, null, ref.converter);\r\n            }\r\n            else {\r\n                throw fail();\r\n            }\r\n        });\r\n    };\r\n    Transaction$2.prototype.set = function (documentRef, value, options) {\r\n        var ref = validateReference(documentRef, this._firestore);\r\n        var convertedValue = applyFirestoreDataConverter(ref.converter, value, options);\r\n        var parsed = parseSetData(this._dataReader, 'Transaction.set', ref._key, convertedValue, ref.converter !== null, options);\r\n        this._transaction.set(ref._key, parsed);\r\n        return this;\r\n    };\r\n    Transaction$2.prototype.update = function (documentRef, fieldOrUpdateData, value) {\r\n        var moreFieldsAndValues = [];\r\n        for (var _i = 3; _i < arguments.length; _i++) {\r\n            moreFieldsAndValues[_i - 3] = arguments[_i];\r\n        }\r\n        var ref = validateReference(documentRef, this._firestore);\r\n        // For Compat types, we have to \"extract\" the underlying types before\r\n        // performing validation.\r\n        fieldOrUpdateData = util.getModularInstance(fieldOrUpdateData);\r\n        var parsed;\r\n        if (typeof fieldOrUpdateData === 'string' ||\r\n            fieldOrUpdateData instanceof FieldPath) {\r\n            parsed = parseUpdateVarargs(this._dataReader, 'Transaction.update', ref._key, fieldOrUpdateData, value, moreFieldsAndValues);\r\n        }\r\n        else {\r\n            parsed = parseUpdateData(this._dataReader, 'Transaction.update', ref._key, fieldOrUpdateData);\r\n        }\r\n        this._transaction.update(ref._key, parsed);\r\n        return this;\r\n    };\r\n    /**\r\n     * Deletes the document referred to by the provided {@link DocumentReference}.\r\n     *\r\n     * @param documentRef - A reference to the document to be deleted.\r\n     * @returns This `Transaction` instance. Used for chaining method calls.\r\n     */\r\n    Transaction$2.prototype.delete = function (documentRef) {\r\n        var ref = validateReference(documentRef, this._firestore);\r\n        this._transaction.delete(ref._key);\r\n        return this;\r\n    };\r\n    return Transaction$2;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isPartialObserver(obj) {\r\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\r\n}\r\n/**\r\n * Returns true if obj is an object and contains at least one of the specified\r\n * methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    var object = obj;\r\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\r\n        var method = methods_1[_i];\r\n        if (method in object && typeof object[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Reads the document referred to by this `DocumentReference`.\r\n *\r\n * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting\r\n * for data from the server, but it may return cached data or fail if you are\r\n * offline and the server cannot be reached. To specify this behavior, invoke\r\n * {@link getDocFromCache} or {@link getDocFromServer}.\r\n *\r\n * @param reference - The reference of the document to fetch.\r\n * @returns A Promise resolved with a `DocumentSnapshot` containing the\r\n * current document contents.\r\n */\r\nfunction getDoc(reference) {\r\n    reference = cast(reference, DocumentReference$1);\r\n    var firestore = cast(reference.firestore, Firestore$1);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientGetDocumentViaSnapshotListener(client, reference._key).then(function (snapshot) { return convertToDocSnapshot(firestore, reference, snapshot); });\r\n}\r\nvar ExpUserDataWriter = /** @class */ (function (_super) {\r\n    tslib.__extends(ExpUserDataWriter, _super);\r\n    function ExpUserDataWriter(firestore) {\r\n        var _this = _super.call(this) || this;\r\n        _this.firestore = firestore;\r\n        return _this;\r\n    }\r\n    ExpUserDataWriter.prototype.convertBytes = function (bytes) {\r\n        return new Bytes(bytes);\r\n    };\r\n    ExpUserDataWriter.prototype.convertReference = function (name) {\r\n        var key = this.convertDocumentKey(name, this.firestore._databaseId);\r\n        return new DocumentReference$1(this.firestore, /* converter= */ null, key);\r\n    };\r\n    return ExpUserDataWriter;\r\n}(AbstractUserDataWriter));\r\n/**\r\n * Reads the document referred to by this `DocumentReference` from cache.\r\n * Returns an error if the document is not currently cached.\r\n *\r\n * @returns A Promise resolved with a `DocumentSnapshot` containing the\r\n * current document contents.\r\n */\r\nfunction getDocFromCache(reference) {\r\n    reference = cast(reference, DocumentReference$1);\r\n    var firestore = cast(reference.firestore, Firestore$1);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    var userDataWriter = new ExpUserDataWriter(firestore);\r\n    return firestoreClientGetDocumentFromLocalCache(client, reference._key).then(function (doc) { return new DocumentSnapshot$1(firestore, userDataWriter, reference._key, doc, new SnapshotMetadata(doc !== null && doc.hasLocalMutations, \r\n    /* fromCache= */ true), reference.converter); });\r\n}\r\n/**\r\n * Reads the document referred to by this `DocumentReference` from the server.\r\n * Returns an error if the network is not available.\r\n *\r\n * @returns A Promise resolved with a `DocumentSnapshot` containing the\r\n * current document contents.\r\n */\r\nfunction getDocFromServer(reference) {\r\n    reference = cast(reference, DocumentReference$1);\r\n    var firestore = cast(reference.firestore, Firestore$1);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientGetDocumentViaSnapshotListener(client, reference._key, {\r\n        source: 'server'\r\n    }).then(function (snapshot) { return convertToDocSnapshot(firestore, reference, snapshot); });\r\n}\r\n/**\r\n * Executes the query and returns the results as a `QuerySnapshot`.\r\n *\r\n * Note: `getDocs()` attempts to provide up-to-date data when possible by\r\n * waiting for data from the server, but it may return cached data or fail if\r\n * you are offline and the server cannot be reached. To specify this behavior,\r\n * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.\r\n *\r\n * @returns A Promise that will be resolved with the results of the query.\r\n */\r\nfunction getDocs(query) {\r\n    query = cast(query, Query$1);\r\n    var firestore = cast(query.firestore, Firestore$1);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    var userDataWriter = new ExpUserDataWriter(firestore);\r\n    validateHasExplicitOrderByForLimitToLast(query._query);\r\n    return firestoreClientGetDocumentsViaSnapshotListener(client, query._query).then(function (snapshot) { return new QuerySnapshot$1(firestore, userDataWriter, query, snapshot); });\r\n}\r\n/**\r\n * Executes the query and returns the results as a `QuerySnapshot` from cache.\r\n * Returns an error if the document is not currently cached.\r\n *\r\n * @returns A Promise that will be resolved with the results of the query.\r\n */\r\nfunction getDocsFromCache(query) {\r\n    query = cast(query, Query$1);\r\n    var firestore = cast(query.firestore, Firestore$1);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    var userDataWriter = new ExpUserDataWriter(firestore);\r\n    return firestoreClientGetDocumentsFromLocalCache(client, query._query).then(function (snapshot) { return new QuerySnapshot$1(firestore, userDataWriter, query, snapshot); });\r\n}\r\n/**\r\n * Executes the query and returns the results as a `QuerySnapshot` from the\r\n * server. Returns an error if the network is not available.\r\n *\r\n * @returns A Promise that will be resolved with the results of the query.\r\n */\r\nfunction getDocsFromServer(query) {\r\n    query = cast(query, Query$1);\r\n    var firestore = cast(query.firestore, Firestore$1);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    var userDataWriter = new ExpUserDataWriter(firestore);\r\n    return firestoreClientGetDocumentsViaSnapshotListener(client, query._query, {\r\n        source: 'server'\r\n    }).then(function (snapshot) { return new QuerySnapshot$1(firestore, userDataWriter, query, snapshot); });\r\n}\r\nfunction setDoc(reference, data, options) {\r\n    reference = cast(reference, DocumentReference$1);\r\n    var firestore = cast(reference.firestore, Firestore$1);\r\n    var convertedValue = applyFirestoreDataConverter(reference.converter, data, options);\r\n    var dataReader = newUserDataReader(firestore);\r\n    var parsed = parseSetData(dataReader, 'setDoc', reference._key, convertedValue, reference.converter !== null, options);\r\n    var mutation = parsed.toMutation(reference._key, Precondition.none());\r\n    return executeWrite(firestore, [mutation]);\r\n}\r\nfunction updateDoc(reference, fieldOrUpdateData, value) {\r\n    var moreFieldsAndValues = [];\r\n    for (var _i = 3; _i < arguments.length; _i++) {\r\n        moreFieldsAndValues[_i - 3] = arguments[_i];\r\n    }\r\n    reference = cast(reference, DocumentReference$1);\r\n    var firestore = cast(reference.firestore, Firestore$1);\r\n    var dataReader = newUserDataReader(firestore);\r\n    // For Compat types, we have to \"extract\" the underlying types before\r\n    // performing validation.\r\n    fieldOrUpdateData = util.getModularInstance(fieldOrUpdateData);\r\n    var parsed;\r\n    if (typeof fieldOrUpdateData === 'string' ||\r\n        fieldOrUpdateData instanceof FieldPath) {\r\n        parsed = parseUpdateVarargs(dataReader, 'updateDoc', reference._key, fieldOrUpdateData, value, moreFieldsAndValues);\r\n    }\r\n    else {\r\n        parsed = parseUpdateData(dataReader, 'updateDoc', reference._key, fieldOrUpdateData);\r\n    }\r\n    var mutation = parsed.toMutation(reference._key, Precondition.exists(true));\r\n    return executeWrite(firestore, [mutation]);\r\n}\r\n/**\r\n * Deletes the document referred to by the specified `DocumentReference`.\r\n *\r\n * @param reference - A reference to the document to delete.\r\n * @returns A Promise resolved once the document has been successfully\r\n * deleted from the backend (note that it won't resolve while you're offline).\r\n */\r\nfunction deleteDoc(reference) {\r\n    var firestore = cast(reference.firestore, Firestore$1);\r\n    var mutations = [new DeleteMutation(reference._key, Precondition.none())];\r\n    return executeWrite(firestore, mutations);\r\n}\r\n/**\r\n * Add a new document to specified `CollectionReference` with the given data,\r\n * assigning it a document ID automatically.\r\n *\r\n * @param reference - A reference to the collection to add this document to.\r\n * @param data - An Object containing the data for the new document.\r\n * @returns A Promise resolved with a `DocumentReference` pointing to the\r\n * newly created document after it has been written to the backend (Note that it\r\n * won't resolve while you're offline).\r\n */\r\nfunction addDoc(reference, data) {\r\n    var firestore = cast(reference.firestore, Firestore$1);\r\n    var docRef = doc(reference);\r\n    var convertedValue = applyFirestoreDataConverter(reference.converter, data);\r\n    var dataReader = newUserDataReader(reference.firestore);\r\n    var parsed = parseSetData(dataReader, 'addDoc', docRef._key, convertedValue, reference.converter !== null, {});\r\n    var mutation = parsed.toMutation(docRef._key, Precondition.exists(false));\r\n    return executeWrite(firestore, [mutation]).then(function () { return docRef; });\r\n}\r\nfunction onSnapshot(reference) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    var _a, _b, _c;\r\n    reference = util.getModularInstance(reference);\r\n    var options = {\r\n        includeMetadataChanges: false\r\n    };\r\n    var currArg = 0;\r\n    if (typeof args[currArg] === 'object' && !isPartialObserver(args[currArg])) {\r\n        options = args[currArg];\r\n        currArg++;\r\n    }\r\n    var internalOptions = {\r\n        includeMetadataChanges: options.includeMetadataChanges\r\n    };\r\n    if (isPartialObserver(args[currArg])) {\r\n        var userObserver = args[currArg];\r\n        args[currArg] = (_a = userObserver.next) === null || _a === void 0 ? void 0 : _a.bind(userObserver);\r\n        args[currArg + 1] = (_b = userObserver.error) === null || _b === void 0 ? void 0 : _b.bind(userObserver);\r\n        args[currArg + 2] = (_c = userObserver.complete) === null || _c === void 0 ? void 0 : _c.bind(userObserver);\r\n    }\r\n    var observer;\r\n    var firestore;\r\n    var internalQuery;\r\n    if (reference instanceof DocumentReference$1) {\r\n        firestore = cast(reference.firestore, Firestore$1);\r\n        internalQuery = newQueryForPath(reference._key.path);\r\n        observer = {\r\n            next: function (snapshot) {\r\n                if (args[currArg]) {\r\n                    args[currArg](convertToDocSnapshot(firestore, reference, snapshot));\r\n                }\r\n            },\r\n            error: args[currArg + 1],\r\n            complete: args[currArg + 2]\r\n        };\r\n    }\r\n    else {\r\n        var query_5 = cast(reference, Query$1);\r\n        firestore = cast(query_5.firestore, Firestore$1);\r\n        internalQuery = query_5._query;\r\n        var userDataWriter_1 = new ExpUserDataWriter(firestore);\r\n        observer = {\r\n            next: function (snapshot) {\r\n                if (args[currArg]) {\r\n                    args[currArg](new QuerySnapshot$1(firestore, userDataWriter_1, query_5, snapshot));\r\n                }\r\n            },\r\n            error: args[currArg + 1],\r\n            complete: args[currArg + 2]\r\n        };\r\n        validateHasExplicitOrderByForLimitToLast(reference._query);\r\n    }\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientListen(client, internalQuery, internalOptions, observer);\r\n}\r\nfunction onSnapshotsInSync(firestore, arg) {\r\n    firestore = cast(firestore, Firestore$1);\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    var observer = isPartialObserver(arg)\r\n        ? arg\r\n        : {\r\n            next: arg\r\n        };\r\n    return firestoreClientAddSnapshotsInSyncListener(client, observer);\r\n}\r\n/**\r\n * Locally writes `mutations` on the async queue.\r\n * @internal\r\n */\r\nfunction executeWrite(firestore, mutations) {\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientWrite(client, mutations);\r\n}\r\n/**\r\n * Converts a ViewSnapshot that contains the single document specified by `ref`\r\n * to a DocumentSnapshot.\r\n */\r\nfunction convertToDocSnapshot(firestore, ref, snapshot) {\r\n    var doc = snapshot.docs.get(ref._key);\r\n    var userDataWriter = new ExpUserDataWriter(firestore);\r\n    return new DocumentSnapshot$1(firestore, userDataWriter, ref._key, doc, new SnapshotMetadata(snapshot.hasPendingWrites, snapshot.fromCache), ref.converter);\r\n}\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A reference to a transaction.\r\n *\r\n * The `Transaction` object passed to a transaction's `updateFunction` provides\r\n * the methods to read and write data within the transaction context. See\r\n * {@link runTransaction}.\r\n */\r\nvar Transaction$1 = /** @class */ (function (_super) {\r\n    tslib.__extends(Transaction$1, _super);\r\n    // This class implements the same logic as the Transaction API in the Lite SDK\r\n    // but is subclassed in order to return its own DocumentSnapshot types.\r\n    /** @hideconstructor */\r\n    function Transaction$1(_firestore, _transaction) {\r\n        var _this = _super.call(this, _firestore, _transaction) || this;\r\n        _this._firestore = _firestore;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Reads the document referenced by the provided {@link DocumentReference}.\r\n     *\r\n     * @param documentRef - A reference to the document to be read.\r\n     * @returns A `DocumentSnapshot` with the read data.\r\n     */\r\n    Transaction$1.prototype.get = function (documentRef) {\r\n        var _this = this;\r\n        var ref = validateReference(documentRef, this._firestore);\r\n        var userDataWriter = new ExpUserDataWriter(this._firestore);\r\n        return _super.prototype.get.call(this, documentRef)\r\n            .then(function (liteDocumentSnapshot) { return new DocumentSnapshot$1(_this._firestore, userDataWriter, ref._key, liteDocumentSnapshot._document, new SnapshotMetadata(\r\n        /* hasPendingWrites= */ false, \r\n        /* fromCache= */ false), ref.converter); });\r\n    };\r\n    return Transaction$1;\r\n}(Transaction$2));\r\n/**\r\n * Executes the given `updateFunction` and then attempts to commit the changes\r\n * applied within the transaction. If any document read within the transaction\r\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\r\n * commit after 5 attempts, the transaction fails.\r\n *\r\n * The maximum number of writes allowed in a single transaction is 500.\r\n *\r\n * @param firestore - A reference to the Firestore database to run this\r\n * transaction against.\r\n * @param updateFunction - The function to execute within the transaction\r\n * context.\r\n * @returns If the transaction completed successfully or was explicitly aborted\r\n * (the `updateFunction` returned a failed promise), the promise returned by the\r\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\r\n * rejected promise with the corresponding failure error is returned.\r\n */\r\nfunction runTransaction(firestore, updateFunction) {\r\n    var client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientTransaction(client, function (internalTransaction) { return updateFunction(new Transaction$1(firestore, internalTransaction)); });\r\n}\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Helper function to assert Uint8Array is available at runtime. */\r\nfunction assertUint8ArrayAvailable() {\r\n    if (typeof Uint8Array === 'undefined') {\r\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');\r\n    }\r\n}\r\n/** Immutable class holding a blob (binary data) */\r\nvar Blob = /** @class */ (function () {\r\n    function Blob(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    Blob.fromBase64String = function (base64) {\r\n        return new Blob(Bytes.fromBase64String(base64));\r\n    };\r\n    Blob.fromUint8Array = function (array) {\r\n        assertUint8ArrayAvailable();\r\n        return new Blob(Bytes.fromUint8Array(array));\r\n    };\r\n    Blob.prototype.toBase64 = function () {\r\n        return this._delegate.toBase64();\r\n    };\r\n    Blob.prototype.toUint8Array = function () {\r\n        assertUint8ArrayAvailable();\r\n        return this._delegate.toUint8Array();\r\n    };\r\n    Blob.prototype.isEqual = function (other) {\r\n        return this._delegate.isEqual(other._delegate);\r\n    };\r\n    Blob.prototype.toString = function () {\r\n        return 'Blob(base64: ' + this.toBase64() + ')';\r\n    };\r\n    return Blob;\r\n}());\r\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The persistence provider included with the full Firestore SDK.\r\n */\r\nvar IndexedDbPersistenceProvider = /** @class */ (function () {\r\n    function IndexedDbPersistenceProvider() {\r\n    }\r\n    IndexedDbPersistenceProvider.prototype.enableIndexedDbPersistence = function (firestore, forceOwnership) {\r\n        return enableIndexedDbPersistence(firestore._delegate, { forceOwnership: forceOwnership });\r\n    };\r\n    IndexedDbPersistenceProvider.prototype.enableMultiTabIndexedDbPersistence = function (firestore) {\r\n        return enableMultiTabIndexedDbPersistence(firestore._delegate);\r\n    };\r\n    IndexedDbPersistenceProvider.prototype.clearIndexedDbPersistence = function (firestore) {\r\n        return clearIndexedDbPersistence(firestore._delegate);\r\n    };\r\n    return IndexedDbPersistenceProvider;\r\n}());\r\n/**\r\n * Compat class for Firestore. Exposes Firestore Legacy API, but delegates\r\n * to the functional API of firestore-exp.\r\n */\r\nvar Firestore = /** @class */ (function () {\r\n    function Firestore(databaseIdOrApp, _delegate, _persistenceProvider) {\r\n        var _this = this;\r\n        this._delegate = _delegate;\r\n        this._persistenceProvider = _persistenceProvider;\r\n        this.INTERNAL = {\r\n            delete: function () { return _this.terminate(); }\r\n        };\r\n        if (!(databaseIdOrApp instanceof DatabaseId)) {\r\n            this._appCompat = databaseIdOrApp;\r\n        }\r\n    }\r\n    Object.defineProperty(Firestore.prototype, \"_databaseId\", {\r\n        get: function () {\r\n            return this._delegate._databaseId;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Firestore.prototype.settings = function (settingsLiteral) {\r\n        var currentSettings = this._delegate._getSettings();\r\n        if (!settingsLiteral.merge &&\r\n            currentSettings.host !== settingsLiteral.host) {\r\n            logWarn('You are overriding the original host. If you did not intend ' +\r\n                'to override your settings, use {merge: true}.');\r\n        }\r\n        if (settingsLiteral.merge) {\r\n            settingsLiteral = Object.assign(Object.assign({}, currentSettings), settingsLiteral);\r\n            // Remove the property from the settings once the merge is completed\r\n            delete settingsLiteral.merge;\r\n        }\r\n        this._delegate._setSettings(settingsLiteral);\r\n    };\r\n    Firestore.prototype.useEmulator = function (host, port, options) {\r\n        if (options === void 0) { options = {}; }\r\n        connectFirestoreEmulator(this._delegate, host, port, options);\r\n    };\r\n    Firestore.prototype.enableNetwork = function () {\r\n        return enableNetwork(this._delegate);\r\n    };\r\n    Firestore.prototype.disableNetwork = function () {\r\n        return disableNetwork(this._delegate);\r\n    };\r\n    Firestore.prototype.enablePersistence = function (settings) {\r\n        var synchronizeTabs = false;\r\n        var experimentalForceOwningTab = false;\r\n        if (settings) {\r\n            synchronizeTabs = !!settings.synchronizeTabs;\r\n            experimentalForceOwningTab = !!settings.experimentalForceOwningTab;\r\n            validateIsNotUsedTogether('synchronizeTabs', synchronizeTabs, 'experimentalForceOwningTab', experimentalForceOwningTab);\r\n        }\r\n        return synchronizeTabs\r\n            ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this)\r\n            : this._persistenceProvider.enableIndexedDbPersistence(this, experimentalForceOwningTab);\r\n    };\r\n    Firestore.prototype.clearPersistence = function () {\r\n        return this._persistenceProvider.clearIndexedDbPersistence(this);\r\n    };\r\n    Firestore.prototype.terminate = function () {\r\n        if (this._appCompat) {\r\n            this._appCompat._removeServiceInstance('firestore');\r\n            this._appCompat._removeServiceInstance('firestore-exp');\r\n        }\r\n        return this._delegate._delete();\r\n    };\r\n    Firestore.prototype.waitForPendingWrites = function () {\r\n        return waitForPendingWrites(this._delegate);\r\n    };\r\n    Firestore.prototype.onSnapshotsInSync = function (arg) {\r\n        return onSnapshotsInSync(this._delegate, arg);\r\n    };\r\n    Object.defineProperty(Firestore.prototype, \"app\", {\r\n        get: function () {\r\n            if (!this._appCompat) {\r\n                throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\r\n                    'not available');\r\n            }\r\n            return this._appCompat;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Firestore.prototype.collection = function (pathString) {\r\n        try {\r\n            return new CollectionReference(this, collection(this._delegate, pathString));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');\r\n        }\r\n    };\r\n    Firestore.prototype.doc = function (pathString) {\r\n        try {\r\n            return new DocumentReference(this, doc(this._delegate, pathString));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');\r\n        }\r\n    };\r\n    Firestore.prototype.collectionGroup = function (collectionId) {\r\n        try {\r\n            return new Query(this, collectionGroup(this._delegate, collectionId));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'collectionGroup()', 'Firestore.collectionGroup()');\r\n        }\r\n    };\r\n    Firestore.prototype.runTransaction = function (updateFunction) {\r\n        var _this = this;\r\n        return runTransaction(this._delegate, function (transaction) { return updateFunction(new Transaction(_this, transaction)); });\r\n    };\r\n    Firestore.prototype.batch = function () {\r\n        var _this = this;\r\n        ensureFirestoreConfigured(this._delegate);\r\n        return new WriteBatch(new WriteBatch$1(this._delegate, function (mutations) { return executeWrite(_this._delegate, mutations); }));\r\n    };\r\n    Firestore.prototype.loadBundle = function (bundleData) {\r\n        throw new FirestoreError(Code.FAILED_PRECONDITION, '\"loadBundle()\" does not exist, have you imported \"firebase/firestore/bundle\"?');\r\n    };\r\n    Firestore.prototype.namedQuery = function (name) {\r\n        throw new FirestoreError(Code.FAILED_PRECONDITION, '\"namedQuery()\" does not exist, have you imported \"firebase/firestore/bundle\"?');\r\n    };\r\n    return Firestore;\r\n}());\r\nvar UserDataWriter = /** @class */ (function (_super) {\r\n    tslib.__extends(UserDataWriter, _super);\r\n    function UserDataWriter(firestore) {\r\n        var _this = _super.call(this) || this;\r\n        _this.firestore = firestore;\r\n        return _this;\r\n    }\r\n    UserDataWriter.prototype.convertBytes = function (bytes) {\r\n        return new Blob(new Bytes(bytes));\r\n    };\r\n    UserDataWriter.prototype.convertReference = function (name) {\r\n        var key = this.convertDocumentKey(name, this.firestore._databaseId);\r\n        return DocumentReference.forKey(key, this.firestore, /* converter= */ null);\r\n    };\r\n    return UserDataWriter;\r\n}(AbstractUserDataWriter));\r\nfunction setLogLevel(level) {\r\n    setLogLevel$1(level);\r\n}\r\n/**\r\n * A reference to a transaction.\r\n */\r\nvar Transaction = /** @class */ (function () {\r\n    function Transaction(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n        this._userDataWriter = new UserDataWriter(_firestore);\r\n    }\r\n    Transaction.prototype.get = function (documentRef) {\r\n        var _this = this;\r\n        var ref = castReference(documentRef);\r\n        return this._delegate\r\n            .get(ref)\r\n            .then(function (result) { return new DocumentSnapshot(_this._firestore, new DocumentSnapshot$1(_this._firestore._delegate, _this._userDataWriter, result._key, result._document, result.metadata, ref.converter)); });\r\n    };\r\n    Transaction.prototype.set = function (documentRef, data, options) {\r\n        var ref = castReference(documentRef);\r\n        if (options) {\r\n            validateSetOptions('Transaction.set', options);\r\n            this._delegate.set(ref, data, options);\r\n        }\r\n        else {\r\n            this._delegate.set(ref, data);\r\n        }\r\n        return this;\r\n    };\r\n    Transaction.prototype.update = function (documentRef, dataOrField, value) {\r\n        var _d;\r\n        var moreFieldsAndValues = [];\r\n        for (var _i = 3; _i < arguments.length; _i++) {\r\n            moreFieldsAndValues[_i - 3] = arguments[_i];\r\n        }\r\n        var ref = castReference(documentRef);\r\n        if (arguments.length === 2) {\r\n            this._delegate.update(ref, dataOrField);\r\n        }\r\n        else {\r\n            (_d = this._delegate).update.apply(_d, tslib.__spreadArray([ref, dataOrField, value], moreFieldsAndValues));\r\n        }\r\n        return this;\r\n    };\r\n    Transaction.prototype.delete = function (documentRef) {\r\n        var ref = castReference(documentRef);\r\n        this._delegate.delete(ref);\r\n        return this;\r\n    };\r\n    return Transaction;\r\n}());\r\nvar WriteBatch = /** @class */ (function () {\r\n    function WriteBatch(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    WriteBatch.prototype.set = function (documentRef, data, options) {\r\n        var ref = castReference(documentRef);\r\n        if (options) {\r\n            validateSetOptions('WriteBatch.set', options);\r\n            this._delegate.set(ref, data, options);\r\n        }\r\n        else {\r\n            this._delegate.set(ref, data);\r\n        }\r\n        return this;\r\n    };\r\n    WriteBatch.prototype.update = function (documentRef, dataOrField, value) {\r\n        var _d;\r\n        var moreFieldsAndValues = [];\r\n        for (var _i = 3; _i < arguments.length; _i++) {\r\n            moreFieldsAndValues[_i - 3] = arguments[_i];\r\n        }\r\n        var ref = castReference(documentRef);\r\n        if (arguments.length === 2) {\r\n            this._delegate.update(ref, dataOrField);\r\n        }\r\n        else {\r\n            (_d = this._delegate).update.apply(_d, tslib.__spreadArray([ref, dataOrField, value], moreFieldsAndValues));\r\n        }\r\n        return this;\r\n    };\r\n    WriteBatch.prototype.delete = function (documentRef) {\r\n        var ref = castReference(documentRef);\r\n        this._delegate.delete(ref);\r\n        return this;\r\n    };\r\n    WriteBatch.prototype.commit = function () {\r\n        return this._delegate.commit();\r\n    };\r\n    return WriteBatch;\r\n}());\r\n/**\r\n * Wraps a `PublicFirestoreDataConverter` translating the types from the\r\n * experimental SDK into corresponding types from the Classic SDK before passing\r\n * them to the wrapped converter.\r\n */\r\nvar FirestoreDataConverter = /** @class */ (function () {\r\n    function FirestoreDataConverter(_firestore, _userDataWriter, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._userDataWriter = _userDataWriter;\r\n        this._delegate = _delegate;\r\n    }\r\n    FirestoreDataConverter.prototype.fromFirestore = function (snapshot, options) {\r\n        var expSnapshot = new QueryDocumentSnapshot$1(this._firestore._delegate, this._userDataWriter, snapshot._key, snapshot._document, snapshot.metadata, \r\n        /* converter= */ null);\r\n        return this._delegate.fromFirestore(new QueryDocumentSnapshot(this._firestore, expSnapshot), options !== null && options !== void 0 ? options : {});\r\n    };\r\n    FirestoreDataConverter.prototype.toFirestore = function (modelObject, options) {\r\n        if (!options) {\r\n            return this._delegate.toFirestore(modelObject);\r\n        }\r\n        else {\r\n            return this._delegate.toFirestore(modelObject, options);\r\n        }\r\n    };\r\n    // Use the same instance of `FirestoreDataConverter` for the given instances\r\n    // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will\r\n    // compare equal for two objects created with the same converter instance.\r\n    FirestoreDataConverter.getInstance = function (firestore, converter) {\r\n        var converterMapByFirestore = FirestoreDataConverter.INSTANCES;\r\n        var untypedConverterByConverter = converterMapByFirestore.get(firestore);\r\n        if (!untypedConverterByConverter) {\r\n            untypedConverterByConverter = new WeakMap();\r\n            converterMapByFirestore.set(firestore, untypedConverterByConverter);\r\n        }\r\n        var instance = untypedConverterByConverter.get(converter);\r\n        if (!instance) {\r\n            instance = new FirestoreDataConverter(firestore, new UserDataWriter(firestore), converter);\r\n            untypedConverterByConverter.set(converter, instance);\r\n        }\r\n        return instance;\r\n    };\r\n    return FirestoreDataConverter;\r\n}());\r\nFirestoreDataConverter.INSTANCES = new WeakMap();\r\n/**\r\n * A reference to a particular document in a collection in the database.\r\n */\r\nvar DocumentReference = /** @class */ (function () {\r\n    function DocumentReference(firestore, _delegate) {\r\n        this.firestore = firestore;\r\n        this._delegate = _delegate;\r\n        this._userDataWriter = new UserDataWriter(firestore);\r\n    }\r\n    DocumentReference.forPath = function (path, firestore, converter) {\r\n        if (path.length % 2 !== 0) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' +\r\n                'references must have an even number of segments, but ' +\r\n                (path.canonicalString() + \" has \" + path.length));\r\n        }\r\n        return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, new DocumentKey(path)));\r\n    };\r\n    DocumentReference.forKey = function (key, firestore, converter) {\r\n        return new DocumentReference(firestore, new DocumentReference$1(firestore._delegate, converter, key));\r\n    };\r\n    Object.defineProperty(DocumentReference.prototype, \"id\", {\r\n        get: function () {\r\n            return this._delegate.id;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocumentReference.prototype, \"parent\", {\r\n        get: function () {\r\n            return new CollectionReference(this.firestore, this._delegate.parent);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocumentReference.prototype, \"path\", {\r\n        get: function () {\r\n            return this._delegate.path;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DocumentReference.prototype.collection = function (pathString) {\r\n        try {\r\n            return new CollectionReference(this.firestore, collection(this._delegate, pathString));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'collection()', 'DocumentReference.collection()');\r\n        }\r\n    };\r\n    DocumentReference.prototype.isEqual = function (other) {\r\n        other = util.getModularInstance(other);\r\n        if (!(other instanceof DocumentReference$1)) {\r\n            return false;\r\n        }\r\n        return refEqual(this._delegate, other);\r\n    };\r\n    DocumentReference.prototype.set = function (value, options) {\r\n        options = validateSetOptions('DocumentReference.set', options);\r\n        try {\r\n            return setDoc(this._delegate, value, options);\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');\r\n        }\r\n    };\r\n    DocumentReference.prototype.update = function (fieldOrUpdateData, value) {\r\n        var moreFieldsAndValues = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            moreFieldsAndValues[_i - 2] = arguments[_i];\r\n        }\r\n        try {\r\n            if (arguments.length === 1) {\r\n                return updateDoc(this._delegate, fieldOrUpdateData);\r\n            }\r\n            else {\r\n                return updateDoc.apply(void 0, tslib.__spreadArray([this._delegate, fieldOrUpdateData, value], moreFieldsAndValues));\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');\r\n        }\r\n    };\r\n    DocumentReference.prototype.delete = function () {\r\n        return deleteDoc(this._delegate);\r\n    };\r\n    DocumentReference.prototype.onSnapshot = function () {\r\n        var _this = this;\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var options = extractSnapshotOptions(args);\r\n        var observer = wrapObserver(args, function (result) { return new DocumentSnapshot(_this.firestore, new DocumentSnapshot$1(_this.firestore._delegate, _this._userDataWriter, result._key, result._document, result.metadata, _this._delegate.converter)); });\r\n        return onSnapshot(this._delegate, options, observer);\r\n    };\r\n    DocumentReference.prototype.get = function (options) {\r\n        var _this = this;\r\n        var snap;\r\n        if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\r\n            snap = getDocFromCache(this._delegate);\r\n        }\r\n        else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\r\n            snap = getDocFromServer(this._delegate);\r\n        }\r\n        else {\r\n            snap = getDoc(this._delegate);\r\n        }\r\n        return snap.then(function (result) { return new DocumentSnapshot(_this.firestore, new DocumentSnapshot$1(_this.firestore._delegate, _this._userDataWriter, result._key, result._document, result.metadata, _this._delegate.converter)); });\r\n    };\r\n    DocumentReference.prototype.withConverter = function (converter) {\r\n        return new DocumentReference(this.firestore, converter\r\n            ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))\r\n            : this._delegate.withConverter(null));\r\n    };\r\n    return DocumentReference;\r\n}());\r\n/**\r\n * Replaces the function name in an error thrown by the firestore-exp API\r\n * with the function names used in the classic API.\r\n */\r\nfunction replaceFunctionName(e, original, updated) {\r\n    e.message = e.message.replace(original, updated);\r\n    return e;\r\n}\r\n/**\r\n * Iterates the list of arguments from an `onSnapshot` call and returns the\r\n * first argument that may be an `SnapshotListenOptions` object. Returns an\r\n * empty object if none is found.\r\n */\r\nfunction extractSnapshotOptions(args) {\r\n    for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {\r\n        var arg = args_1[_i];\r\n        if (typeof arg === 'object' && !isPartialObserver(arg)) {\r\n            return arg;\r\n        }\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Creates an observer that can be passed to the firestore-exp SDK. The\r\n * observer converts all observed values into the format expected by the classic\r\n * SDK.\r\n *\r\n * @param args - The list of arguments from an `onSnapshot` call.\r\n * @param wrapper - The function that converts the firestore-exp type into the\r\n * type used by this shim.\r\n */\r\nfunction wrapObserver(args, wrapper) {\r\n    var _a, _b;\r\n    var userObserver;\r\n    if (isPartialObserver(args[0])) {\r\n        userObserver = args[0];\r\n    }\r\n    else if (isPartialObserver(args[1])) {\r\n        userObserver = args[1];\r\n    }\r\n    else if (typeof args[0] === 'function') {\r\n        userObserver = {\r\n            next: args[0],\r\n            error: args[1],\r\n            complete: args[2]\r\n        };\r\n    }\r\n    else {\r\n        userObserver = {\r\n            next: args[1],\r\n            error: args[2],\r\n            complete: args[3]\r\n        };\r\n    }\r\n    return {\r\n        next: function (val) {\r\n            if (userObserver.next) {\r\n                userObserver.next(wrapper(val));\r\n            }\r\n        },\r\n        error: (_a = userObserver.error) === null || _a === void 0 ? void 0 : _a.bind(userObserver),\r\n        complete: (_b = userObserver.complete) === null || _b === void 0 ? void 0 : _b.bind(userObserver)\r\n    };\r\n}\r\nvar DocumentSnapshot = /** @class */ (function () {\r\n    function DocumentSnapshot(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    Object.defineProperty(DocumentSnapshot.prototype, \"ref\", {\r\n        get: function () {\r\n            return new DocumentReference(this._firestore, this._delegate.ref);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocumentSnapshot.prototype, \"id\", {\r\n        get: function () {\r\n            return this._delegate.id;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocumentSnapshot.prototype, \"metadata\", {\r\n        get: function () {\r\n            return this._delegate.metadata;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocumentSnapshot.prototype, \"exists\", {\r\n        get: function () {\r\n            return this._delegate.exists();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DocumentSnapshot.prototype.data = function (options) {\r\n        return this._delegate.data(options);\r\n    };\r\n    DocumentSnapshot.prototype.get = function (fieldPath, options\r\n    // We are using `any` here to avoid an explicit cast by our users.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ) {\r\n        return this._delegate.get(fieldPath, options);\r\n    };\r\n    DocumentSnapshot.prototype.isEqual = function (other) {\r\n        return snapshotEqual(this._delegate, other._delegate);\r\n    };\r\n    return DocumentSnapshot;\r\n}());\r\nvar QueryDocumentSnapshot = /** @class */ (function (_super) {\r\n    tslib.__extends(QueryDocumentSnapshot, _super);\r\n    function QueryDocumentSnapshot() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    QueryDocumentSnapshot.prototype.data = function (options) {\r\n        var data = this._delegate.data(options);\r\n        return data;\r\n    };\r\n    return QueryDocumentSnapshot;\r\n}(DocumentSnapshot));\r\nvar Query = /** @class */ (function () {\r\n    function Query(firestore, _delegate) {\r\n        this.firestore = firestore;\r\n        this._delegate = _delegate;\r\n        this._userDataWriter = new UserDataWriter(firestore);\r\n    }\r\n    Query.prototype.where = function (fieldPath, opStr, value) {\r\n        try {\r\n            // The \"as string\" cast is a little bit of a hack. `where` accepts the\r\n            // FieldPath Compat type as input, but is not typed as such in order to\r\n            // not expose this via our public typings file.\r\n            return new Query(this.firestore, query(this._delegate, where(fieldPath, opStr, value)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\r\n        }\r\n    };\r\n    Query.prototype.orderBy = function (fieldPath, directionStr) {\r\n        try {\r\n            // The \"as string\" cast is a little bit of a hack. `orderBy` accepts the\r\n            // FieldPath Compat type as input, but is not typed as such in order to\r\n            // not expose this via our public typings file.\r\n            return new Query(this.firestore, query(this._delegate, orderBy(fieldPath, directionStr)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, /(orderBy|where)\\(\\)/, 'Query.$1()');\r\n        }\r\n    };\r\n    Query.prototype.limit = function (n) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, limit(n)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'limit()', 'Query.limit()');\r\n        }\r\n    };\r\n    Query.prototype.limitToLast = function (n) {\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, limitToLast(n)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');\r\n        }\r\n    };\r\n    Query.prototype.startAt = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, startAt.apply(void 0, args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');\r\n        }\r\n    };\r\n    Query.prototype.startAfter = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, startAfter.apply(void 0, args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');\r\n        }\r\n    };\r\n    Query.prototype.endBefore = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, endBefore.apply(void 0, args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');\r\n        }\r\n    };\r\n    Query.prototype.endAt = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        try {\r\n            return new Query(this.firestore, query(this._delegate, endAt.apply(void 0, args)));\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');\r\n        }\r\n    };\r\n    Query.prototype.isEqual = function (other) {\r\n        return queryEqual(this._delegate, other._delegate);\r\n    };\r\n    Query.prototype.get = function (options) {\r\n        var _this = this;\r\n        var query;\r\n        if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {\r\n            query = getDocsFromCache(this._delegate);\r\n        }\r\n        else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {\r\n            query = getDocsFromServer(this._delegate);\r\n        }\r\n        else {\r\n            query = getDocs(this._delegate);\r\n        }\r\n        return query.then(function (result) { return new QuerySnapshot(_this.firestore, new QuerySnapshot$1(_this.firestore._delegate, _this._userDataWriter, _this._delegate, result._snapshot)); });\r\n    };\r\n    Query.prototype.onSnapshot = function () {\r\n        var _this = this;\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        var options = extractSnapshotOptions(args);\r\n        var observer = wrapObserver(args, function (snap) { return new QuerySnapshot(_this.firestore, new QuerySnapshot$1(_this.firestore._delegate, _this._userDataWriter, _this._delegate, snap._snapshot)); });\r\n        return onSnapshot(this._delegate, options, observer);\r\n    };\r\n    Query.prototype.withConverter = function (converter) {\r\n        return new Query(this.firestore, converter\r\n            ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))\r\n            : this._delegate.withConverter(null));\r\n    };\r\n    return Query;\r\n}());\r\nvar DocumentChange = /** @class */ (function () {\r\n    function DocumentChange(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    Object.defineProperty(DocumentChange.prototype, \"type\", {\r\n        get: function () {\r\n            return this._delegate.type;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocumentChange.prototype, \"doc\", {\r\n        get: function () {\r\n            return new QueryDocumentSnapshot(this._firestore, this._delegate.doc);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocumentChange.prototype, \"oldIndex\", {\r\n        get: function () {\r\n            return this._delegate.oldIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DocumentChange.prototype, \"newIndex\", {\r\n        get: function () {\r\n            return this._delegate.newIndex;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return DocumentChange;\r\n}());\r\nvar QuerySnapshot = /** @class */ (function () {\r\n    function QuerySnapshot(_firestore, _delegate) {\r\n        this._firestore = _firestore;\r\n        this._delegate = _delegate;\r\n    }\r\n    Object.defineProperty(QuerySnapshot.prototype, \"query\", {\r\n        get: function () {\r\n            return new Query(this._firestore, this._delegate.query);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySnapshot.prototype, \"metadata\", {\r\n        get: function () {\r\n            return this._delegate.metadata;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySnapshot.prototype, \"size\", {\r\n        get: function () {\r\n            return this._delegate.size;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySnapshot.prototype, \"empty\", {\r\n        get: function () {\r\n            return this._delegate.empty;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySnapshot.prototype, \"docs\", {\r\n        get: function () {\r\n            var _this = this;\r\n            return this._delegate.docs.map(function (doc) { return new QueryDocumentSnapshot(_this._firestore, doc); });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    QuerySnapshot.prototype.docChanges = function (options) {\r\n        var _this = this;\r\n        return this._delegate\r\n            .docChanges(options)\r\n            .map(function (docChange) { return new DocumentChange(_this._firestore, docChange); });\r\n    };\r\n    QuerySnapshot.prototype.forEach = function (callback, thisArg) {\r\n        var _this = this;\r\n        this._delegate.forEach(function (snapshot) {\r\n            callback.call(thisArg, new QueryDocumentSnapshot(_this._firestore, snapshot));\r\n        });\r\n    };\r\n    QuerySnapshot.prototype.isEqual = function (other) {\r\n        return snapshotEqual(this._delegate, other._delegate);\r\n    };\r\n    return QuerySnapshot;\r\n}());\r\nvar CollectionReference = /** @class */ (function (_super) {\r\n    tslib.__extends(CollectionReference, _super);\r\n    function CollectionReference(firestore, _delegate) {\r\n        var _this = _super.call(this, firestore, _delegate) || this;\r\n        _this.firestore = firestore;\r\n        _this._delegate = _delegate;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CollectionReference.prototype, \"id\", {\r\n        get: function () {\r\n            return this._delegate.id;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CollectionReference.prototype, \"path\", {\r\n        get: function () {\r\n            return this._delegate.path;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CollectionReference.prototype, \"parent\", {\r\n        get: function () {\r\n            var docRef = this._delegate.parent;\r\n            return docRef ? new DocumentReference(this.firestore, docRef) : null;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    CollectionReference.prototype.doc = function (documentPath) {\r\n        try {\r\n            if (documentPath === undefined) {\r\n                // Call `doc` without `documentPath` if `documentPath` is `undefined`\r\n                // as `doc` validates the number of arguments to prevent users from\r\n                // accidentally passing `undefined`.\r\n                return new DocumentReference(this.firestore, doc(this._delegate));\r\n            }\r\n            else {\r\n                return new DocumentReference(this.firestore, doc(this._delegate, documentPath));\r\n            }\r\n        }\r\n        catch (e) {\r\n            throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');\r\n        }\r\n    };\r\n    CollectionReference.prototype.add = function (data) {\r\n        var _this = this;\r\n        return addDoc(this._delegate, data).then(function (docRef) { return new DocumentReference(_this.firestore, docRef); });\r\n    };\r\n    CollectionReference.prototype.isEqual = function (other) {\r\n        return refEqual(this._delegate, other._delegate);\r\n    };\r\n    CollectionReference.prototype.withConverter = function (converter) {\r\n        return new CollectionReference(this.firestore, converter\r\n            ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))\r\n            : this._delegate.withConverter(null));\r\n    };\r\n    return CollectionReference;\r\n}(Query));\r\nfunction castReference(documentRef) {\r\n    return cast(documentRef, DocumentReference$1);\r\n}\n\nexports.ArrayRemoveFieldValueImpl = ArrayRemoveFieldValueImpl;\nexports.ArrayUnionFieldValueImpl = ArrayUnionFieldValueImpl;\nexports.Blob = Blob;\nexports.CACHE_SIZE_UNLIMITED = CACHE_SIZE_UNLIMITED;\nexports.CollectionReference = CollectionReference;\nexports.DeleteFieldValueImpl = DeleteFieldValueImpl;\nexports.DocumentReference = DocumentReference;\nexports.DocumentSnapshot = DocumentSnapshot;\nexports.FieldPath = FieldPath;\nexports.FieldPath$1 = FieldPath$1;\nexports.Firestore = Firestore;\nexports.Firestore$1 = Firestore$1;\nexports.GeoPoint = GeoPoint;\nexports.IndexedDbPersistenceProvider = IndexedDbPersistenceProvider;\nexports.NumericIncrementFieldValueImpl = NumericIncrementFieldValueImpl;\nexports.Query = Query;\nexports.QueryDocumentSnapshot = QueryDocumentSnapshot;\nexports.QuerySnapshot = QuerySnapshot;\nexports.ServerTimestampFieldValueImpl = ServerTimestampFieldValueImpl;\nexports.Timestamp = Timestamp;\nexports.Transaction = Transaction;\nexports.WriteBatch = WriteBatch;\nexports.loadBundle = loadBundle;\nexports.namedQuery = namedQuery;\nexports.setLogLevel = setLogLevel;\n//# sourceMappingURL=database-c96156d6-f0f0e10d.js.map\n"]},"metadata":{},"sourceType":"script"}