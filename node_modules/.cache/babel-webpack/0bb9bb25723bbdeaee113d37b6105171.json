{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, RendererFactory2 } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { fromEventPattern } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: lib/angular-favicon.service.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A service to set the favicon.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nlet AngularFaviconService = /*#__PURE__*/(() => {\n  class AngularFaviconService {\n    /**\n     * @param {?} _doc\n     * @param {?} rendererFactory\n     */\n    constructor(_doc, rendererFactory) {\n      this._doc = _doc;\n      this.rendererFactory = rendererFactory;\n      this.darkScheme = '(prefers-color-scheme:dark)';\n      this.prefersColorScheme$ = fromEventPattern(\n      /**\n      * @param {?} handler\n      * @return {?}\n      */\n      handler => window.matchMedia(this.darkScheme).addListener(\n      /** @type {?} */\n      handler)).pipe(pluck('matches'));\n      this.renderer = rendererFactory.createRenderer(null, null);\n    }\n    /**\n     * Get the favicon of the current HTML document.\n     * @return {?}\n     */\n\n\n    getFavicon() {\n      return this._doc.querySelector(\"link[rel*='icon']\");\n    }\n    /**\n     * Set the title of the current HTML document.\n     * @param {?} iconURL - Default favicon URL\n     * @param {?=} altIconURL - Optional, dark theme favicon URL\n     * @return {?}\n     */\n\n\n    setFavicon(iconURL, altIconURL) {\n      /** @type {?} */\n      const link = this.getFavicon() || this.renderer.createElement('link');\n      /** @type {?} */\n\n      let currentLinkHref = iconURL;\n\n      if (altIconURL) {\n        this.subscribeToChangesInTheme(link, iconURL, altIconURL);\n\n        if (window.matchMedia(this.darkScheme).matches) {\n          currentLinkHref = altIconURL;\n        }\n      }\n\n      this.appendLinkTag(link, currentLinkHref);\n    }\n    /**\n     * Subscribe to the theme color changes in browser/OS and apply the appropiate favicon\n     * @private\n     * @param {?} link - DOM element\n     * @param {?} iconURL - Default favicon URL\n     * @param {?} altIconURL - Optional, dark theme favicon URL\n     * @return {?}\n     */\n\n\n    subscribeToChangesInTheme(link, iconURL, altIconURL) {\n      this.subscriptionToColorScheme = this.prefersColorScheme$.subscribe(\n      /**\n      * @param {?} isDarkTheme\n      * @return {?}\n      */\n      isDarkTheme => {\n        if (isDarkTheme) {\n          this.appendLinkTag(link, altIconURL);\n        } else {\n          this.appendLinkTag(link, iconURL);\n        }\n      });\n    }\n    /**\n     * Append new link to HEAD\n     * @private\n     * @param {?} link - DOM element\n     * @param {?} iconURL - favicon URL\n     * @return {?}\n     */\n\n\n    appendLinkTag(link, iconURL) {\n      link.type = 'image/x-icon';\n      link.rel = 'shortcut icon';\n      link.href = iconURL;\n      /** @type {?} */\n\n      const head = this._doc.getElementsByTagName('head')[0];\n\n      this.renderer.appendChild(head, link);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this.subscriptionToColorScheme) {\n        this.subscriptionToColorScheme.unsubscribe();\n      }\n    }\n\n  }\n\n  AngularFaviconService.ɵfac = function AngularFaviconService_Factory(t) {\n    return new (t || AngularFaviconService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2));\n  };\n  /** @nocollapse */\n\n\n  /** @nocollapse */\n  AngularFaviconService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function AngularFaviconService_Factory() {\n      return new AngularFaviconService(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.RendererFactory2));\n    },\n    token: AngularFaviconService,\n    providedIn: \"root\"\n  });\n  return AngularFaviconService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  AngularFaviconService.prototype.renderer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  AngularFaviconService.prototype.darkScheme;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  AngularFaviconService.prototype.subscriptionToColorScheme;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  AngularFaviconService.prototype.prefersColorScheme$;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  AngularFaviconService.prototype._doc;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  AngularFaviconService.prototype.rendererFactory;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: angular-favicon.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { AngularFaviconService }; //# sourceMappingURL=angular-favicon.js.map","map":null,"metadata":{},"sourceType":"module"}