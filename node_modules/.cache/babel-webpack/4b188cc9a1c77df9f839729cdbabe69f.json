{"ast":null,"code":"import _asyncToGenerator from \"/Users/artakoroushnia/Desktop/thred-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { PLATFORM_ID } from '@angular/core';\nimport firebase from 'firebase/app';\nimport { Product } from '../models/product.model';\nimport { Template } from '../models/template.model';\nimport { TemplateSide } from '../models/template-side.model';\nimport { Color } from '../models/color.model';\nimport { Country } from '../models/shipping-country.model';\nimport { Globals } from '../globals';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Blog } from '../models/blog.model';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/fire/auth\";\nexport class LoadService {\n  constructor(platformID, db, auth) {\n    this.platformID = platformID;\n    this.db = db;\n    this.auth = auth;\n  }\n\n  getCountries() {\n    Globals.availableCurrencies = [];\n    let sub = this.db.collection(\"Print_Info\").doc(\"Shipping_Info\").valueChanges().subscribe(docData => {\n      const data = docData;\n      const usShipping = Math.round(data.shipping_rate_us * 100);\n      const caShipping = Math.round(data.shipping_rate_canada * 100);\n      const intlShipping = Math.round(data.shipping_rate_intl * 100);\n      const currencies = data.supportedCurrencies;\n      currencies.forEach(currency => {\n        const name = currency.country;\n        const flag = currency.flag;\n        const currency_name = currency.name;\n        const rate = currency.rate;\n        const is_main_currency = currency.is_main_currency;\n        const symbol = currency.symbol;\n        const name_full = currency.country_full;\n        const country = new Country(name, flag, name_full, currency_name, symbol, rate, is_main_currency, 0);\n\n        if (name == \"CA\") {\n          country.shipping_rate_usd = caShipping;\n        } else if (name == \"US\") {\n          country.shipping_rate_usd = usShipping;\n          Globals.selectedCurrency = country;\n        } else {\n          country.shipping_rate_usd = intlShipping;\n        }\n\n        Globals.availableCurrencies.push(country);\n      });\n      console.log(\"countries loaded\");\n      Globals.availableCurrencies.sort(function (a, b) {\n        if (a.name < b.name) {\n          return -1;\n        }\n\n        if (a.name > b.name) {\n          return 1;\n        }\n\n        return 0;\n      });\n      if (this.myCallback) this.myCallback();\n      if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n    });\n  }\n\n  getUser(username) {\n    console.log(\"starting\");\n    let sub = this.db.collection(\"Users\", ref => ref.where(\"Username\", '==', username)).valueChanges({\n      idField: 'UID'\n    }).subscribe(doc => {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n\n      let docData = doc[0];\n\n      if (docData) {\n        let uid = docData.UID; //UID OF COMMENT IMAGE\n\n        console.log(uid);\n        let dpUID = docData[\"ProfilePicID\"]; //UID OF COMMENT IMAGE\n\n        let username = docData[\"Username\"]; //COMMENTER'S USERNAME\n\n        let fullName = docData[\"Full_Name\"];\n        let bio = docData[\"Bio\"];\n        let notifID = docData[\"Notification ID\"];\n        let userFollowing = (_a = docData[\"Following_List\"]) !== null && _a !== void 0 ? _a : [];\n        let usersBlocking = (_b = docData[\"Users_Blocking\"]) !== null && _b !== void 0 ? _b : [];\n        let followerCount = (_c = docData[\"Followers_Count\"]) !== null && _c !== void 0 ? _c : 0;\n        let followingCount = (_d = docData[\"Following_Count\"]) !== null && _d !== void 0 ? _d : 0;\n        let postCount = (_e = docData[\"Posts_Count\"]) !== null && _e !== void 0 ? _e : 0;\n        let verified = (_f = docData[\"Verified\"]) !== null && _f !== void 0 ? _f : false;\n        let postNotifs = (_g = docData[\"Post_Notifications\"]) !== null && _g !== void 0 ? _g : [];\n        let isPublic = (_h = docData[\"Public\"]) !== null && _h !== void 0 ? _h : true;\n        let slogan = docData[\"Slogan\"];\n        Globals.storeInfo.uid = uid;\n        Globals.storeInfo.dpID = dpUID;\n        Globals.storeInfo.username = username;\n        Globals.storeInfo.fullName = fullName;\n        Globals.storeInfo.bio = bio;\n        Globals.storeInfo.notifID = notifID;\n        Globals.storeInfo.userFollowing = userFollowing;\n        Globals.storeInfo.usersBlocking = usersBlocking;\n        Globals.storeInfo.followerCount = followerCount;\n        Globals.storeInfo.followingCount = followingCount;\n        Globals.storeInfo.postCount = postCount;\n        Globals.storeInfo.verified = verified;\n        Globals.storeInfo.postNotifsList = postNotifs;\n        Globals.storeInfo.isPublic = isPublic;\n        Globals.storeInfo.profileLink = new URL(this.getProfileURL(uid, dpUID));\n        Globals.storeInfo.slogan = slogan;\n        console.log(\"store info loaded\");\n        if (this.myCallback) this.myCallback();\n        if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n      }\n    });\n  }\n\n  getPosts(filterID) {\n    Globals.products = [];\n    const time = firebase.firestore.Timestamp.now();\n    console.log(Globals.storeInfo.uid);\n    var query = this.db.collection(\"Users/\" + Globals.storeInfo.uid + \"/Products\", ref => ref.where(\"Timestamp\", '<=', time).where(\"Has_Picture\", '==', true).where(\"Available\", '==', true).where(\"Public\", '==', true).orderBy(\"Timestamp\", \"desc\"));\n\n    if (filterID) {\n      query = this.db.collection(\"Users/\" + Globals.storeInfo.uid + \"/Products\", ref => ref.where(\"Timestamp\", '<=', time).where(\"Type\", '==', filterID).where(\"Available\", '==', true).where(\"Public\", '==', true).orderBy(\"Timestamp\", \"desc\"));\n    }\n\n    let sub = query.valueChanges().subscribe(docDatas => {\n      docDatas.forEach(doc => {\n        var _a, _b, _c, _d;\n\n        let docData = doc;\n\n        if (docData) {\n          let uid = docData.UID;\n          let productID = docData.Product_ID;\n          let timestamp = docData.Timestamp.toDate();\n          let description = docData.Description;\n          let name = docData.Name;\n          let blurred = docData.Blurred;\n          let templateColor = docData.Template_Color;\n          let likes = docData.Likes;\n          let priceCents = docData.Price_Cents;\n          let comments = docData.Comments;\n          let isPublic = (_a = docData.Public) !== null && _a !== void 0 ? _a : true;\n          let productType = (_b = docData.Type) !== null && _b !== void 0 ? _b : \"ATC1000\";\n          let displaySide = (_c = docData.Side) !== null && _c !== void 0 ? _c : \"front\";\n          let sides = (_d = docData[\"Sides\"]) !== null && _d !== void 0 ? _d : [\"Front\"];\n          let product = new Product(uid, productID, description, productID, timestamp, \"\", blurred, priceCents, name, templateColor, likes, false, comments, true, isPublic, productType, displaySide, sides, this.getURL(uid, productID));\n          Globals.products.push(product);\n        }\n      });\n\n      if (!filterID) {\n        Globals.availableTemplates = this.getTemplatesFiltered();\n      }\n\n      console.log(\"products loaded\");\n      if (this.myCallback) this.myCallback();\n      if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n    });\n  }\n\n  getBlogs(filterID) {\n    Globals.blogs = [];\n    const time = firebase.firestore.Timestamp.now();\n    console.log(Globals.storeInfo.uid);\n    var query = this.db.collection(\"Users/\" + Globals.storeInfo.uid + \"/Blogs\", ref => ref.where(\"Timestamp\", '<=', time).where(\"isAvailable\", '==', true).orderBy(\"Timestamp\", \"desc\"));\n    let sub = query.valueChanges({\n      idField: \"Blog_ID\"\n    }).subscribe(docDatas => {\n      docDatas.forEach(doc => {\n        let docData = doc;\n\n        if (docData) {\n          let uid = docData.UID;\n          let title = docData.Title;\n          let timestamp = docData.Timestamp.toDate();\n          let isAvailable = docData.isAvailable;\n          let blogID = docData.Blog_ID;\n          let blogItems = docData.Blog_Items;\n          let coverURL = docData.Cover_URL;\n          let blog = new Blog(uid, timestamp, \"\", isAvailable, title, blogItems, blogID, coverURL);\n          Globals.blogs.push(blog);\n        }\n      });\n      console.log(\"blogs loaded\");\n      if (this.myCallback) this.myCallback();\n      if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n    });\n  }\n\n  getBlog(blogID) {\n    Globals.selectedBlog = undefined;\n    let sub = this.db.collectionGroup(\"Blogs\", ref => ref.where(\"Blog_ID\", '==', blogID)).valueChanges().subscribe(docDatas => {\n      docDatas.forEach(doc => {\n        const docData = doc;\n\n        if (docData) {\n          let uid = docData.UID;\n          let title = docData.Title;\n          let timestamp = docData.Timestamp.toDate();\n          let isAvailable = docData.isAvailable;\n          let blogID = docData.Blog_ID;\n          let blogItems = docData.Blog_Items;\n          let coverURL = docData.Cover_URL;\n          let blog = new Blog(uid, timestamp, \"\", isAvailable, title, blogItems, blogID, coverURL);\n          Globals.selectedBlog = blog;\n        }\n      });\n      if (this.myCallback) this.myCallback();\n      if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n    });\n  }\n\n  addToCart(mappedData) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      let uid = (_a = yield _this.isLoggedIn()) === null || _a === void 0 ? void 0 : _a.uid;\n      let data = {\n        \"Cart_List\": firebase.firestore.FieldValue.arrayUnion([mappedData])\n      };\n      console.log(uid);\n\n      if (uid) {\n        yield _this.db.collection(\"Users/\" + uid + \"/Cart_Info\").doc(\"Cart_List\").set(data, {\n          merge: true\n        });\n      }\n    })();\n  }\n\n  signOut() {\n    this.auth.signOut(); // Sign Out\n  }\n\n  isLoggedIn() {\n    return this.auth.authState.pipe(first()).toPromise();\n  }\n\n  registerAccount(isGuest, credentials) {\n    if (isGuest) {\n      this.auth.signInAnonymously().then(() => {// Signed in..\n      }).catch(error => {\n        var errorCode = error.code;\n        var errorMessage = error.message;\n      });\n    } else {\n      let username = credentials === null || credentials === void 0 ? void 0 : credentials.username;\n      let password = credentials === null || credentials === void 0 ? void 0 : credentials.password;\n      let email = credentials === null || credentials === void 0 ? void 0 : credentials.email;\n    }\n  }\n\n  authenticated() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const user = yield _this2.isLoggedIn();\n\n      if (user) {\n        return true;\n      } else {\n        return false;\n      }\n    })();\n  }\n\n  getPost(productID) {\n    Globals.selectedProduct = undefined;\n    let sub = this.db.collectionGroup(\"Products\", ref => ref.where(\"Product_ID\", '==', productID)).valueChanges().subscribe(docDatas => {\n      docDatas.forEach(doc => {\n        var _a, _b, _c, _d;\n\n        const docData = doc;\n\n        if (docData) {\n          let uid = docData.UID;\n          let productID = docData.Product_ID;\n          let timestamp = docData.Timestamp.toDate();\n          let description = docData.Description;\n          let name = docData.Name;\n          let blurred = docData.Blurred;\n          let templateColor = docData.Template_Color;\n          let likes = docData.Likes;\n          let priceCents = docData.Price_Cents;\n          let comments = docData.Comments;\n          let isPublic = (_a = docData.Public) !== null && _a !== void 0 ? _a : true;\n          let productType = (_b = docData.Type) !== null && _b !== void 0 ? _b : \"ATC1000\";\n          let displaySide = (_c = docData.Side) !== null && _c !== void 0 ? _c : \"front\";\n          let sides = (_d = docData[\"Sides\"]) !== null && _d !== void 0 ? _d : [\"Front\"];\n          let product = new Product(uid, productID, description, productID, timestamp, \"\", blurred, priceCents, name, templateColor, likes, false, comments, true, isPublic, productType, displaySide, sides, this.getURL(uid, productID));\n          Globals.selectedProduct = product;\n        }\n      });\n      if (this.myCallback) this.myCallback();\n      if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n    });\n  }\n\n  getTemplatesFiltered() {\n    return Globals.templates.filter(template => Globals.products.some(product => product.productType === template.productCode));\n  }\n\n  getURL(uid, productID) {\n    return 'https://firebasestorage.googleapis.com/v0/b/clothingapp-ed125.appspot.com/o/Users%2F' + uid + '%2FProducts%2F' + productID + '%2Flink_' + productID + '.png?alt=media';\n  }\n\n  getProfileURL(uid, dpID) {\n    return 'https://firebasestorage.googleapis.com/v0/b/clothingapp-ed125.appspot.com/o/Users%2F' + uid + '%2Fprofile_pic-' + dpID + '.jpeg?alt=media';\n  }\n\n  getAltURL() {\n    return 'https://firebasestorage.googleapis.com/v0/b/clothingapp-ed125.appspot.com/o/Resources%2Flink_empty.jpeg?alt=media';\n  }\n\n  getTemplate(templateID) {\n    Globals.selectedTemplate = undefined;\n    let sub = this.db.collection(\"Templates\", ref => ref.where(\"Code\", '==', templateID).orderBy(\"index\", \"asc\")).valueChanges({\n      idField: \"TemplateID\"\n    }).subscribe(docDatas => {\n      docDatas.forEach(doc => {\n        var docData = doc;\n\n        if (docData) {\n          let type = doc.TemplateID;\n          let testingAccounts = docData[\"testingAccounts\"];\n          let isAvailable = docData[\"isAvailable\"]; // guard isAvailable ?? false || testingAccounts?.contains(pUserInfo.uid ?? \"\") ?? false else{\n          //     continue\n          //   }\n\n          let display = docData[\"Display_Name\"];\n          let info = docData[\"Info\"];\n          let supportedSides = docData[\"Supported_Sides\"];\n\n          if (!supportedSides || supportedSides.length == 0) {\n            return;\n          }\n\n          let vari = docData[\"Colors\"];\n          let minPrice = docData[\"Min_Price_USD\"];\n          let extra = docData[\"Extra_Cost_USD\"];\n          let code = docData[\"Code\"];\n          let sizes = docData[\"Sizes\"];\n          let category = docData[\"category\"];\n          let has3D = docData[\"has3D\"];\n          let moreInfo = docData[\"More_info\"]; // let discountInfo = docData[\"Discount\"] as Dict<any>\n          // let discountedUsers = discountInfo[\"Artists\"] as Array<string>\n          // let discountedPrice = discountInfo.Minimum_Price_USD as number\n          // let discountCodes = discountInfo.Discount_Codes as Array<Dict<any>>   \n\n          const template = new Template(type, display, info, [], sizes, minPrice, code, category, moreInfo, false, [], extra, has3D);\n          supportedSides.forEach(side => {\n            var _a;\n\n            let name = side[\"Name\"];\n            let height = side[\"HeightCM\"];\n            let width = side[\"WidthCM\"];\n            let widthMultiplier = side[\"WidthMultiplier\"];\n            let centerYConst = side[\"CenterYConst\"];\n            let centerXConst = side[\"CenterXConst\"];\n            let rotation = side[\"Rotation\"];\n            let useReverseAspect = (_a = side[\"useReverseAspect\"]) !== null && _a !== void 0 ? _a : false;\n            let supportedSide = new TemplateSide(name, height, width, widthMultiplier, centerYConst, centerXConst, useReverseAspect, rotation);\n            template.supportedSides.push(supportedSide);\n          });\n          vari.forEach(v => {\n            let code = v[\"Code\"];\n            let display = v[\"Display\"];\n            let img = v[\"IMG\"];\n            let backImg = v[\"IMG_BACK\"];\n            let rgb = v[\"RGB\"];\n            let color = new Color(code, display, rgb, img, backImg);\n            template.colors.push(color);\n          });\n          Globals.selectedTemplate = template;\n        }\n      });\n      console.log(\"templates loaded\");\n      if (this.myCallback) this.myCallback();\n      if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n    });\n  }\n\n  getTemplates() {\n    Globals.templates = [];\n    let sub = this.db.collection(\"Templates\", ref => ref.orderBy(\"index\", \"asc\")).valueChanges({\n      idField: \"TemplateID\"\n    }).subscribe(docDatas => {\n      docDatas.forEach(doc => {\n        var docData = doc;\n\n        if (docData) {\n          let type = doc.TemplateID;\n          let testingAccounts = docData[\"testingAccounts\"];\n          let isAvailable = docData[\"isAvailable\"]; // guard isAvailable ?? false || testingAccounts?.contains(pUserInfo.uid ?? \"\") ?? false else{\n          //     continue\n          //   }\n\n          let display = docData[\"Display_Name\"];\n          let info = docData[\"Info\"];\n          let supportedSides = docData[\"Supported_Sides\"];\n\n          if (!supportedSides || supportedSides.length == 0) {\n            return;\n          }\n\n          let vari = docData[\"Colors\"];\n          let minPrice = docData[\"Min_Price_USD\"];\n          let extra = docData[\"Extra_Cost_USD\"];\n          let code = docData[\"Code\"];\n          let sizes = docData[\"Sizes\"];\n          let category = docData[\"category\"];\n          let has3D = docData[\"has3D\"];\n          let moreInfo = docData[\"More_info\"]; // let discountInfo = docData[\"Discount\"] as Dict<any>\n          // let discountedUsers = discountInfo[\"Artists\"] as Array<string>\n          // let discountedPrice = discountInfo.Minimum_Price_USD as number\n          // let discountCodes = discountInfo.Discount_Codes as Array<Dict<any>>   \n\n          const template = new Template(type, display, info, [], sizes, minPrice, code, category, moreInfo, false, [], extra, has3D);\n          supportedSides.forEach(side => {\n            var _a;\n\n            let name = side[\"Name\"];\n            let height = side[\"HeightCM\"];\n            let width = side[\"WidthCM\"];\n            let widthMultiplier = side[\"WidthMultiplier\"];\n            let centerYConst = side[\"CenterYConst\"];\n            let centerXConst = side[\"CenterXConst\"];\n            let rotation = side[\"Rotation\"];\n            let useReverseAspect = (_a = side[\"useReverseAspect\"]) !== null && _a !== void 0 ? _a : false;\n            let supportedSide = new TemplateSide(name, height, width, widthMultiplier, centerYConst, centerXConst, useReverseAspect, rotation);\n            template.supportedSides.push(supportedSide);\n          });\n          vari.forEach(v => {\n            let code = v[\"Code\"];\n            let display = v[\"Display\"];\n            let img = v[\"IMG\"];\n            let backImg = v[\"IMG_BACK\"];\n            let rgb = v[\"RGB\"];\n            let color = new Color(code, display, rgb, img, backImg);\n            template.colors.push(color);\n          });\n          Globals.templates.push(template);\n        }\n      });\n      console.log(\"templates loaded\");\n      if (this.myCallback) this.myCallback();\n      if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n    });\n  }\n\n}\n\nLoadService.ɵfac = function LoadService_Factory(t) {\n  return new (t || LoadService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth));\n};\n\nLoadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoadService,\n  factory: LoadService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/artakoroushnia/Desktop/thred-web/src/app/services/load.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { AngularFirestore, DocumentData } from '@angular/fire/firestore';\nimport { AngularFireAuth, } from '@angular/fire/auth';\nimport firebase from 'firebase/app';\nimport { Product } from '../models/product.model';\nimport { Template } from '../models/template.model';\nimport { TemplateSide } from '../models/template-side.model';\nimport { Color } from '../models/color.model';\nimport { Country } from '../models/shipping-country.model';\nimport { Globals } from '../globals';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Blog } from '../models/blog.model';\nimport { switchMap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\n\nexport interface Dict<T> {\n  [key: string]: T;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class LoadService {\n\n  constructor(@Inject(PLATFORM_ID) \n  private platformID: Object,\n  private db: AngularFirestore,\n  private auth: AngularFireAuth\n  ) { \n  }\n\n  public myCallback: {\n    (): void;\n  } | undefined;\n\n  getCountries(){\n\n    Globals.availableCurrencies = []\n\n    let sub = this.db.collection(\"Print_Info\").doc(\"Shipping_Info\").valueChanges().subscribe((docData) => {\n\n        const data = docData as DocumentData\n\n        const usShipping = Math.round(data.shipping_rate_us * 100)\n        const caShipping = Math.round(data.shipping_rate_canada * 100)\n        const intlShipping = Math.round(data.shipping_rate_intl * 100)\n\n        const currencies = data.supportedCurrencies as Array<Dict<any>>\n         \n        currencies.forEach((currency) => {\n\n          const name = currency.country\n          const flag = currency.flag\n          const currency_name = currency.name\n          const rate = currency.rate\n          const is_main_currency = currency.is_main_currency\n          const symbol = currency.symbol\n          const name_full = currency.country_full\n\n          const country = new Country(\n            name,\n            flag,\n            name_full,\n            currency_name,\n            symbol,\n            rate,\n            is_main_currency,\n            0\n          )\n\n\n          if (name == \"CA\"){\n            country.shipping_rate_usd = caShipping\n          }\n          else if (name == \"US\"){\n            country.shipping_rate_usd = usShipping\n            Globals.selectedCurrency = country\n          }\n          else{\n            country.shipping_rate_usd = intlShipping\n          }\n\n          Globals.availableCurrencies.push(country)\n\n          \n        })\n\n        console.log(\"countries loaded\")\n\n        Globals.availableCurrencies.sort(function(a, b){\n          if(a.name < b.name) { return -1; }\n          if(a.name > b.name) { return 1; }\n          return 0;\n        })\n        if (this.myCallback)\n          this.myCallback()\n        if (isPlatformBrowser(this.platformID))\n        sub.unsubscribe();\n    })\n  }\n\n  getUser(username: string) {\n    console.log(\"starting\")\n\n    let sub = this.db.collection(\"Users\", ref => ref.where(\"Username\",'==', username)).valueChanges({idField: 'UID'}).subscribe((doc) => {\n    \n        let docData = doc[0] as DocumentData\n\n        if (docData){\n          let uid = docData.UID //UID OF COMMENT IMAGE\n          console.log(uid)\n          let dpUID = docData[\"ProfilePicID\"] as string //UID OF COMMENT IMAGE\n          let username = docData[\"Username\"] as string //COMMENTER'S USERNAME\n          let fullName = docData[\"Full_Name\"] as string\n          let bio = docData[\"Bio\"] as string\n          let notifID = docData[\"Notification ID\"] as string\n          let userFollowing = (docData[\"Following_List\"] as Array<string>) ?? []\n          let usersBlocking = (docData[\"Users_Blocking\"] as Array<string>) ?? []\n          let followerCount = (docData[\"Followers_Count\"] as number) ?? 0\n          let followingCount = (docData[\"Following_Count\"] as number) ?? 0\n          let postCount = (docData[\"Posts_Count\"] as number) ?? 0\n          let verified = docData[\"Verified\"] as boolean ?? false\n          let postNotifs = docData[\"Post_Notifications\"] as Array<string> ?? []\n          let isPublic = docData[\"Public\"] as boolean ?? true\n          let slogan = docData[\"Slogan\"] as string\n\n\n          Globals.storeInfo.uid = uid\n          Globals.storeInfo.dpID = dpUID\n          Globals.storeInfo.username = username\n          Globals.storeInfo.fullName = fullName\n          Globals.storeInfo.bio = bio\n          Globals.storeInfo.notifID = notifID\n          Globals.storeInfo.userFollowing = userFollowing\n          Globals.storeInfo.usersBlocking = usersBlocking\n          Globals.storeInfo.followerCount = followerCount\n          Globals.storeInfo.followingCount = followingCount\n          Globals.storeInfo.postCount = postCount\n          Globals.storeInfo.verified = verified\n          Globals.storeInfo.postNotifsList = postNotifs\n          Globals.storeInfo.isPublic = isPublic\n          Globals.storeInfo.profileLink = new URL(this.getProfileURL(uid, dpUID))\n          Globals.storeInfo.slogan = slogan\n\n          console.log(\"store info loaded\")\n          if (this.myCallback)\n          this.myCallback()\n          if (isPlatformBrowser(this.platformID))\n          sub.unsubscribe();\n        }\n    });\n  }\n  \n  getPosts(filterID?:string){\n\n    Globals.products = []\n\n    const time = firebase.firestore.Timestamp.now()\n\n    console.log(Globals.storeInfo.uid)\n\n    var query = this.db.collection(\"Users/\" + Globals.storeInfo.uid + \"/Products\", ref => ref.where(\"Timestamp\",'<=', time).where(\"Has_Picture\",'==', true).where(\"Available\",'==', true).where(\"Public\",'==', true).orderBy(\"Timestamp\", \"desc\"))\n\n    if (filterID){\n      query = this.db.collection(\"Users/\" + Globals.storeInfo.uid + \"/Products\", ref => ref.where(\"Timestamp\",'<=', time).where(\"Type\",'==', filterID).where(\"Available\",'==', true).where(\"Public\",'==', true).orderBy(\"Timestamp\", \"desc\"))\n    }\n    \n    let sub = query.valueChanges().subscribe((docDatas) => {\n      docDatas.forEach((doc) => {\n  \n        let docData = doc as DocumentData\n  \n        if (docData){\n          let uid = docData.UID as string\n          let productID = docData.Product_ID as string\n          let timestamp = (docData.Timestamp as firebase.firestore.Timestamp).toDate()\n          let description = docData.Description as string\n          let name = docData.Name as string\n  \n          let blurred = docData.Blurred as boolean\n          let templateColor = docData.Template_Color as string\n  \n          let likes = docData.Likes as number\n  \n          let priceCents = docData.Price_Cents as number\n          let comments = docData.Comments as number\n          let isPublic = docData.Public as boolean ?? true\n          let productType = docData.Type as string ?? \"ATC1000\"\n          let displaySide = docData.Side as string ?? \"front\"\n          let sides = docData[\"Sides\"] as Array<string> ?? [\"Front\"]\n  \n\n  \n          let product = new Product(\n            uid, \n            productID, \n            description, \n            productID, \n            timestamp, \n            \"\", \n            blurred, \n            priceCents, \n            name, \n            templateColor, \n            likes, \n            false, \n            comments, \n            true, \n            isPublic, \n            productType, \n            displaySide, \n            sides,\n            this.getURL(uid, productID)\n          )\n\n          Globals.products.push(product);\n        }\n      });\n      if (!filterID){\n        Globals.availableTemplates = this.getTemplatesFiltered()\n      }\n      \n      console.log(\"products loaded\")\n      if (this.myCallback)\n          this.myCallback()\n      if (isPlatformBrowser(this.platformID))\n        sub.unsubscribe();\n    });\n  }\n\n  getBlogs(filterID?:string){\n\n    Globals.blogs = []\n\n    const time = firebase.firestore.Timestamp.now()\n\n    console.log(Globals.storeInfo.uid)\n\n    var query = this.db.collection(\"Users/\" + Globals.storeInfo.uid + \"/Blogs\", ref => ref.where(\"Timestamp\",'<=', time).where(\"isAvailable\",'==', true).orderBy(\"Timestamp\", \"desc\"))\n    \n    let sub = query.valueChanges({idField : \"Blog_ID\"}).subscribe((docDatas) => {\n      docDatas.forEach((doc) => {\n  \n        let docData = doc as DocumentData\n  \n        if (docData){\n          let uid = docData.UID as string\n          let title = docData.Title as string\n          let timestamp = (docData.Timestamp as firebase.firestore.Timestamp).toDate()\n          let isAvailable = docData.isAvailable as boolean\n          let blogID = docData.Blog_ID as string\n          let blogItems = docData.Blog_Items as Array<Dict<any>>\n          let coverURL = docData.Cover_URL as string\n\n\n          let blog = new Blog(uid, timestamp, \"\", isAvailable, title, blogItems, blogID, coverURL)\n\n          Globals.blogs.push(blog);\n        }\n      });\n      \n      console.log(\"blogs loaded\")\n      if (this.myCallback)\n          this.myCallback()\n      if (isPlatformBrowser(this.platformID))\n        sub.unsubscribe();\n    });\n  }\n\n  getBlog(blogID: string){\n  \n    Globals.selectedBlog = undefined\n\n\n    let sub = this.db.collectionGroup(\"Blogs\", ref => ref.where(\"Blog_ID\",'==', blogID)).valueChanges().subscribe((docDatas) => {\n  \n      docDatas.forEach((doc) => {\n        const docData = doc as DocumentData\n        if (docData){\n          let uid = docData.UID as string\n          let title = docData.Title as string\n          let timestamp = (docData.Timestamp as firebase.firestore.Timestamp).toDate()\n          let isAvailable = docData.isAvailable as boolean\n          let blogID = docData.Blog_ID as string\n          let blogItems = docData.Blog_Items as Array<Dict<any>>\n          let coverURL = docData.Cover_URL as string\n\n\n          let blog = new Blog(uid, timestamp, \"\", isAvailable, title, blogItems, blogID, coverURL)\n\n          Globals.selectedBlog = blog;\n        }\n      })\n      if (this.myCallback) \n      this.myCallback()\n      if (isPlatformBrowser(this.platformID))\n      sub.unsubscribe();\n    });\n  }\n\n  async addToCart(mappedData: Array<Dict<any>>){\n\n    let uid = (await this.isLoggedIn())?.uid\n\n    let data = {\n      \"Cart_List\" : firebase.firestore.FieldValue.arrayUnion([mappedData])\n    }\n\n    console.log(uid)\n\n    if (uid){\n      await this.db.collection(\"Users/\" + uid + \"/Cart_Info\").doc(\"Cart_List\").set(data, {merge : true})\n    }\n  }\n\n  signOut(){\n\n    this.auth.signOut()\n\n    // Sign Out\n  }\n\n  isLoggedIn() {\n    return this.auth.authState.pipe(first()).toPromise();\n  }\n\n  registerAccount(isGuest: boolean, credentials?: Dict<string>){\n\n\n    if (isGuest){\n      this.auth.signInAnonymously().then(() => {\n        // Signed in..\n    \n        }).catch((error) => {\n          var errorCode = error.code;\n          var errorMessage = error.message;\n        });\n    }\n    else{\n\n      let username = credentials?.username\n      let password = credentials?.password\n      let email = credentials?.email\n\n      \n    }\n  }\n\n  async authenticated(){\n    const user = await this.isLoggedIn()\n    if (user) {\n      return true\n    } else {\n      return false\n   }\n  }\n\n  getPost(productID: string){\n  \n    Globals.selectedProduct = undefined\n\n    let sub = this.db.collectionGroup(\"Products\", ref => ref.where(\"Product_ID\",'==', productID)).valueChanges().subscribe((docDatas) => {\n  \n      docDatas.forEach((doc) => {\n        const docData = doc as DocumentData\n        if (docData){\n          let uid = docData.UID as string\n          let productID = docData.Product_ID as string\n          let timestamp = (docData.Timestamp as firebase.firestore.Timestamp).toDate()\n          let description = docData.Description as string\n          let name = docData.Name as string\n  \n          let blurred = docData.Blurred as boolean\n          let templateColor = docData.Template_Color as string\n  \n          let likes = docData.Likes as number\n  \n          let priceCents = docData.Price_Cents as number\n          let comments = docData.Comments as number\n          let isPublic = docData.Public as boolean ?? true\n          let productType = docData.Type as string ?? \"ATC1000\"\n          let displaySide = docData.Side as string ?? \"front\"\n          let sides = docData[\"Sides\"] as Array<string> ?? [\"Front\"]\n  \n          let product = new Product(\n            uid, \n            productID, \n            description, \n            productID, \n            timestamp, \n            \"\", \n            blurred, \n            priceCents, \n            name, \n            templateColor, \n            likes, \n            false, \n            comments, \n            true, \n            isPublic, \n            productType, \n            displaySide, \n            sides,\n            this.getURL(uid, productID)\n          )\n          Globals.selectedProduct = product;\n        }\n      })\n      if (this.myCallback) \n      this.myCallback()\n      if (isPlatformBrowser(this.platformID))\n      sub.unsubscribe();\n    });\n  }\n  \n  getTemplatesFiltered(){\n\n    return Globals.templates.filter(\n      template => Globals.products.some(product => product.productType === template.productCode));\n  }\n  \n  getURL(uid: string, productID: string){\n      return 'https://firebasestorage.googleapis.com/v0/b/clothingapp-ed125.appspot.com/o/Users%2F' + uid + '%2FProducts%2F' + productID + '%2Flink_' + productID + '.png?alt=media'\n  }\n\n  getProfileURL(uid: string, dpID: string){\n    return 'https://firebasestorage.googleapis.com/v0/b/clothingapp-ed125.appspot.com/o/Users%2F' + uid + '%2Fprofile_pic-' + dpID + '.jpeg?alt=media'\n  }\n  \n  getAltURL(){\n    return 'https://firebasestorage.googleapis.com/v0/b/clothingapp-ed125.appspot.com/o/Resources%2Flink_empty.jpeg?alt=media'\n  }\n\n  getTemplate(templateID: string){\n\n    Globals.selectedTemplate = undefined\n\n    let sub = this.db.collection(\"Templates\", ref => ref.where(\"Code\",'==', templateID).orderBy(\"index\", \"asc\")).valueChanges({idField : \"TemplateID\"}).subscribe((docDatas) => {\n\n      docDatas.forEach((doc) => {\n  \n        var docData = doc as DocumentData\n  \n        if (docData){\n          let type = doc.TemplateID\n          let testingAccounts = docData[\"testingAccounts\"] as Array<string>\n          let isAvailable = docData[\"isAvailable\"] as boolean\n\n          // guard isAvailable ?? false || testingAccounts?.contains(pUserInfo.uid ?? \"\") ?? false else{\n              \n          //     continue\n          //   }\n          \n          let display = docData[\"Display_Name\"] as string\n          let info = docData[\"Info\"] as string\n          let supportedSides = docData[\"Supported_Sides\"] as Array<Dict<any>>\n          \n          if (!supportedSides || supportedSides.length == 0){\n            return\n          }\n\n          let vari = docData[\"Colors\"] as Array<Dict<any>>\n          \n          let minPrice = docData[\"Min_Price_USD\"] as number\n          let extra = docData[\"Extra_Cost_USD\"] as number\n          let code = docData[\"Code\"] as string\n          let sizes = docData[\"Sizes\"] as Array<string>\n          let category = docData[\"category\"] as string\n          let has3D = docData[\"has3D\"] as boolean\n\n          let moreInfo = (docData[\"More_info\"] as string)\n          // let discountInfo = docData[\"Discount\"] as Dict<any>\n          // let discountedUsers = discountInfo[\"Artists\"] as Array<string>\n          // let discountedPrice = discountInfo.Minimum_Price_USD as number\n          // let discountCodes = discountInfo.Discount_Codes as Array<Dict<any>>   \n          \n          const template = new Template(\n            type,\n            display,\n            info,\n            [],\n            sizes,\n            minPrice,\n            code,\n            category,\n            moreInfo,\n            false,\n            [],\n            extra,\n            has3D,\n          );\n\n          supportedSides.forEach((side) => {\n            let name = side[\"Name\"] as string\n            let height = side[\"HeightCM\"] as number\n            let width = side[\"WidthCM\"] as number\n            let widthMultiplier = side[\"WidthMultiplier\"] as number\n            let centerYConst = side[\"CenterYConst\"] as number\n            let centerXConst = side[\"CenterXConst\"] as number\n            let rotation = side[\"Rotation\"] as number\n            let useReverseAspect = side[\"useReverseAspect\"] as boolean ?? false\n            \n            let supportedSide = new TemplateSide(\n              name,\n              height,\n              width,\n              widthMultiplier,\n              centerYConst,\n              centerXConst,\n              useReverseAspect,\n              rotation\n            )\n            template.supportedSides.push(supportedSide)\n          })\n\n          vari.forEach((v) => {\n            let code = v[\"Code\"] as string\n            let display = v[\"Display\"] as string\n            let img = v[\"IMG\"] as Blob\n            let backImg = v[\"IMG_BACK\"] as Blob\n            let rgb = v[\"RGB\"] as Array<number>\n            let color = new Color(\n              code,\n              display,\n              rgb,\n              img,\n              backImg\n            )\n            template.colors.push(color)\n          })\n          Globals.selectedTemplate = template\n        }\n      });\n      console.log(\"templates loaded\")\n      if (this.myCallback)\n          this.myCallback()\n          if (isPlatformBrowser(this.platformID))\n          sub.unsubscribe();\n      });\n  }\n\n\n  getTemplates(){\n\n    Globals.templates = []\n\n    let sub = this.db.collection(\"Templates\", ref => ref.orderBy(\"index\", \"asc\")).valueChanges({idField : \"TemplateID\"}).subscribe((docDatas) => {\n\n      docDatas.forEach((doc) => {\n  \n        var docData = doc as DocumentData\n  \n        if (docData){\n          let type = doc.TemplateID\n          let testingAccounts = docData[\"testingAccounts\"] as Array<string>\n          let isAvailable = docData[\"isAvailable\"] as boolean\n\n          // guard isAvailable ?? false || testingAccounts?.contains(pUserInfo.uid ?? \"\") ?? false else{\n              \n          //     continue\n          //   }\n          \n          let display = docData[\"Display_Name\"] as string\n          let info = docData[\"Info\"] as string\n          let supportedSides = docData[\"Supported_Sides\"] as Array<Dict<any>>\n          \n          if (!supportedSides || supportedSides.length == 0){\n            return\n          }\n\n          let vari = docData[\"Colors\"] as Array<Dict<any>>\n          \n          let minPrice = docData[\"Min_Price_USD\"] as number\n          let extra = docData[\"Extra_Cost_USD\"] as number\n          let code = docData[\"Code\"] as string\n          let sizes = docData[\"Sizes\"] as Array<string>\n          let category = docData[\"category\"] as string\n          let has3D = docData[\"has3D\"] as boolean\n\n          let moreInfo = (docData[\"More_info\"] as string)\n          // let discountInfo = docData[\"Discount\"] as Dict<any>\n          // let discountedUsers = discountInfo[\"Artists\"] as Array<string>\n          // let discountedPrice = discountInfo.Minimum_Price_USD as number\n          // let discountCodes = discountInfo.Discount_Codes as Array<Dict<any>>   \n          \n          const template = new Template(\n            type,\n            display,\n            info,\n            [],\n            sizes,\n            minPrice,\n            code,\n            category,\n            moreInfo,\n            false,\n            [],\n            extra,\n            has3D,\n          );\n\n          supportedSides.forEach((side) => {\n            let name = side[\"Name\"] as string\n            let height = side[\"HeightCM\"] as number\n            let width = side[\"WidthCM\"] as number\n            let widthMultiplier = side[\"WidthMultiplier\"] as number\n            let centerYConst = side[\"CenterYConst\"] as number\n            let centerXConst = side[\"CenterXConst\"] as number\n            let rotation = side[\"Rotation\"] as number\n            let useReverseAspect = side[\"useReverseAspect\"] as boolean ?? false\n            \n            let supportedSide = new TemplateSide(\n              name,\n              height,\n              width,\n              widthMultiplier,\n              centerYConst,\n              centerXConst,\n              useReverseAspect,\n              rotation\n            )\n            template.supportedSides.push(supportedSide)\n          })\n\n          vari.forEach((v) => {\n            let code = v[\"Code\"] as string\n            let display = v[\"Display\"] as string\n            let img = v[\"IMG\"] as Blob\n            let backImg = v[\"IMG_BACK\"] as Blob\n            let rgb = v[\"RGB\"] as Array<number>\n            let color = new Color(\n              code,\n              display,\n              rgb,\n              img,\n              backImg\n            )\n            template.colors.push(color)\n          })\n          Globals.templates.push(template)\n        }\n      });\n      console.log(\"templates loaded\")\n      if (this.myCallback)\n        this.myCallback()\n        if (isPlatformBrowser(this.platformID))\n        sub.unsubscribe();\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}