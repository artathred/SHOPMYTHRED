{"ast":null,"code":"import _asyncToGenerator from \"/Users/artakoroushnia/Desktop/thred-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { PLATFORM_ID } from '@angular/core';\nimport firebase from 'firebase/app';\nimport { Product } from '../models/product.model';\nimport { Template } from '../models/template.model';\nimport { TemplateSide } from '../models/template-side.model';\nimport { Color } from '../models/color.model';\nimport { Country } from '../models/shipping-country.model';\nimport { Globals } from '../globals';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Blog } from '../models/blog.model';\nimport { first } from 'rxjs/operators';\nimport { ProductInCart } from '../models/product-in-cart.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/fire/auth\";\nexport let LoadService = /*#__PURE__*/(() => {\n  class LoadService {\n    constructor(platformID, db, auth) {\n      this.platformID = platformID;\n      this.db = db;\n      this.auth = auth;\n    }\n\n    getCountries() {\n      Globals.availableCurrencies = [];\n      let sub = this.db.collection(\"Print_Info\").doc(\"Shipping_Info\").valueChanges().subscribe(docData => {\n        const data = docData;\n        const usShipping = Math.round(data.shipping_rate_us * 100);\n        const caShipping = Math.round(data.shipping_rate_canada * 100);\n        const intlShipping = Math.round(data.shipping_rate_intl * 100);\n        const currencies = data.supportedCurrencies;\n        currencies.forEach(currency => {\n          const name = currency.country;\n          const flag = currency.flag;\n          const currency_name = currency.name;\n          const rate = currency.rate;\n          const is_main_currency = currency.is_main_currency;\n          const symbol = currency.symbol;\n          const name_full = currency.country_full;\n          const country = new Country(name, flag, name_full, currency_name, symbol, rate, is_main_currency, 0);\n\n          if (name == \"CA\") {\n            country.shipping_rate_usd = caShipping;\n          } else if (name == \"US\") {\n            country.shipping_rate_usd = usShipping;\n            Globals.selectedCurrency = country;\n          } else {\n            country.shipping_rate_usd = intlShipping;\n          }\n\n          Globals.availableCurrencies.push(country);\n        });\n        console.log(\"countries loaded\");\n        Globals.availableCurrencies.sort(function (a, b) {\n          if (a.name < b.name) {\n            return -1;\n          }\n\n          if (a.name > b.name) {\n            return 1;\n          }\n\n          return 0;\n        });\n        if (this.myCallback) this.myCallback();\n        if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n      });\n    }\n\n    getUser(username) {\n      console.log(\"starting\");\n      let sub = this.db.collection(\"Users\", ref => ref.where(\"Username\", '==', username)).valueChanges({\n        idField: 'UID'\n      }).subscribe(doc => {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n\n        let docData = doc[0];\n\n        if (docData) {\n          let uid = docData.UID; //UID OF COMMENT IMAGE\n\n          console.log(uid);\n          let dpUID = docData[\"ProfilePicID\"]; //UID OF COMMENT IMAGE\n\n          let username = docData[\"Username\"]; //COMMENTER'S USERNAME\n\n          let fullName = docData[\"Full_Name\"];\n          let bio = docData[\"Bio\"];\n          let notifID = docData[\"Notification ID\"];\n          let userFollowing = (_a = docData[\"Following_List\"]) !== null && _a !== void 0 ? _a : [];\n          let usersBlocking = (_b = docData[\"Users_Blocking\"]) !== null && _b !== void 0 ? _b : [];\n          let followerCount = (_c = docData[\"Followers_Count\"]) !== null && _c !== void 0 ? _c : 0;\n          let followingCount = (_d = docData[\"Following_Count\"]) !== null && _d !== void 0 ? _d : 0;\n          let postCount = (_e = docData[\"Posts_Count\"]) !== null && _e !== void 0 ? _e : 0;\n          let verified = (_f = docData[\"Verified\"]) !== null && _f !== void 0 ? _f : false;\n          let postNotifs = (_g = docData[\"Post_Notifications\"]) !== null && _g !== void 0 ? _g : [];\n          let isPublic = (_h = docData[\"Public\"]) !== null && _h !== void 0 ? _h : true;\n          let slogan = docData[\"Slogan\"];\n          Globals.storeInfo.uid = uid;\n          Globals.storeInfo.dpID = dpUID;\n          Globals.storeInfo.username = username;\n          Globals.storeInfo.fullName = fullName;\n          Globals.storeInfo.bio = bio;\n          Globals.storeInfo.notifID = notifID;\n          Globals.storeInfo.userFollowing = userFollowing;\n          Globals.storeInfo.usersBlocking = usersBlocking;\n          Globals.storeInfo.followerCount = followerCount;\n          Globals.storeInfo.followingCount = followingCount;\n          Globals.storeInfo.postCount = postCount;\n          Globals.storeInfo.verified = verified;\n          Globals.storeInfo.postNotifsList = postNotifs;\n          Globals.storeInfo.isPublic = isPublic;\n          Globals.storeInfo.profileLink = new URL(this.getProfileURL(uid, dpUID));\n          Globals.storeInfo.slogan = slogan;\n          console.log(\"store info loaded\");\n          if (this.myCallback) this.myCallback();\n          if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n        }\n      });\n    }\n\n    getPosts(filterID) {\n      Globals.products = [];\n      const time = firebase.firestore.Timestamp.now();\n      console.log(Globals.storeInfo.uid);\n      var query = this.db.collection(\"Users/\" + Globals.storeInfo.uid + \"/Products\", ref => ref.where(\"Timestamp\", '<=', time).where(\"Has_Picture\", '==', true).where(\"Available\", '==', true).where(\"Public\", '==', true).orderBy(\"Timestamp\", \"desc\"));\n\n      if (filterID) {\n        query = this.db.collection(\"Users/\" + Globals.storeInfo.uid + \"/Products\", ref => ref.where(\"Timestamp\", '<=', time).where(\"Type\", '==', filterID).where(\"Available\", '==', true).where(\"Public\", '==', true).orderBy(\"Timestamp\", \"desc\"));\n      }\n\n      let sub = query.valueChanges().subscribe(docDatas => {\n        docDatas.forEach(doc => {\n          var _a, _b, _c, _d;\n\n          let docData = doc;\n\n          if (docData) {\n            let uid = docData.UID;\n            let productID = docData.Product_ID;\n            let timestamp = docData.Timestamp.toDate();\n            let description = docData.Description;\n            let name = docData.Name;\n            let blurred = docData.Blurred;\n            let templateColor = docData.Template_Color;\n            let likes = docData.Likes;\n            let priceCents = docData.Price_Cents;\n            let comments = docData.Comments;\n            let isPublic = (_a = docData.Public) !== null && _a !== void 0 ? _a : true;\n            let productType = (_b = docData.Type) !== null && _b !== void 0 ? _b : \"ATC1000\";\n            let displaySide = (_c = docData.Side) !== null && _c !== void 0 ? _c : \"front\";\n            let sides = (_d = docData[\"Sides\"]) !== null && _d !== void 0 ? _d : [\"Front\"];\n            let product = new Product(uid, productID, description, productID, timestamp, \"\", blurred, priceCents, name, templateColor, likes, false, comments, true, isPublic, productType, displaySide, sides, this.getURL(uid, productID));\n            Globals.products.push(product);\n          }\n        });\n\n        if (!filterID) {\n          Globals.availableTemplates = this.getTemplatesFiltered();\n        }\n\n        console.log(\"products loaded\");\n        if (this.myCallback) this.myCallback();\n        if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n      });\n    }\n\n    getBlogs(filterID) {\n      Globals.blogs = [];\n      const time = firebase.firestore.Timestamp.now();\n      console.log(Globals.storeInfo.uid);\n      var query = this.db.collection(\"Users/\" + Globals.storeInfo.uid + \"/Blogs\", ref => ref.where(\"Timestamp\", '<=', time).where(\"isAvailable\", '==', true).orderBy(\"Timestamp\", \"desc\"));\n      let sub = query.valueChanges({\n        idField: \"Blog_ID\"\n      }).subscribe(docDatas => {\n        docDatas.forEach(doc => {\n          let docData = doc;\n\n          if (docData) {\n            let uid = docData.UID;\n            let title = docData.Title;\n            let timestamp = docData.Timestamp.toDate();\n            let isAvailable = docData.isAvailable;\n            let blogID = docData.Blog_ID;\n            let blogItems = docData.Blog_Items;\n            let coverURL = docData.Cover_URL;\n            let blog = new Blog(uid, timestamp, \"\", isAvailable, title, blogItems, blogID, coverURL);\n            Globals.blogs.push(blog);\n          }\n        });\n        console.log(\"blogs loaded\");\n        if (this.myCallback) this.myCallback();\n        if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n      });\n    }\n\n    getBlog(blogID) {\n      let sub = this.db.collectionGroup(\"Blogs\", ref => ref.where(\"Blog_ID\", '==', blogID)).valueChanges().subscribe(docDatas => {\n        Globals.selectedBlog = undefined;\n        docDatas.forEach(doc => {\n          const docData = doc;\n\n          if (docData) {\n            let uid = docData.UID;\n            let title = docData.Title;\n            let timestamp = docData.Timestamp.toDate();\n            let isAvailable = docData.isAvailable;\n            let blogID = docData.Blog_ID;\n            let blogItems = docData.Blog_Items;\n            let coverURL = docData.Cover_URL;\n            let blog = new Blog(uid, timestamp, \"\", isAvailable, title, blogItems, blogID, coverURL);\n            Globals.selectedBlog = blog;\n          }\n        });\n        if (this.myCallback) this.myCallback();\n        if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n      });\n    }\n\n    addToCart(mappedData) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        var _a;\n\n        let uid = (_a = yield _this.isLoggedIn()) === null || _a === void 0 ? void 0 : _a.uid;\n        console.log(uid);\n        let data = {\n          \"Cart_List\": firebase.firestore.FieldValue.arrayUnion(mappedData)\n        };\n        const storeUID = Globals.storeInfo.uid;\n\n        if (!storeUID) {\n          return;\n        }\n\n        if (uid) {\n          yield _this.db.collection(\"Users/\" + uid + \"/Cart_Info\").doc(\"Cart_List_\" + storeUID).set(data, {\n            merge: true\n          });\n        }\n      })();\n    }\n\n    changeCart(mappedData) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        var _a;\n\n        let uid = (_a = yield _this2.isLoggedIn()) === null || _a === void 0 ? void 0 : _a.uid;\n        console.log(uid);\n        let data = {\n          \"Cart_List\": mappedData\n        };\n        const storeUID = Globals.storeInfo.uid;\n\n        if (!storeUID) {\n          return;\n        }\n\n        if (uid) {\n          yield _this2.db.collection(\"Users/\" + uid + \"/Cart_Info\").doc(\"Cart_List_\" + storeUID).set(data);\n        }\n      })();\n    }\n\n    signOut() {\n      this.auth.signOut(); // Sign Out\n    }\n\n    isLoggedIn() {\n      return this.auth.authState.pipe(first()).toPromise();\n    }\n\n    registerAccount(isGuest, credentials) {\n      if (isGuest) {\n        this.auth.signInAnonymously().then(() => {\n          // Signed in..\n          if (this.myCallback) this.myCallback();\n        }).catch(error => {\n          var errorCode = error.code;\n          var errorMessage = error.message;\n        });\n      } else {\n        let username = credentials === null || credentials === void 0 ? void 0 : credentials.username;\n        let password = credentials === null || credentials === void 0 ? void 0 : credentials.password;\n        let email = credentials === null || credentials === void 0 ? void 0 : credentials.email; ///\n\n        if (this.myCallback) this.myCallback();\n      }\n    }\n\n    authenticated() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        const user = yield _this3.isLoggedIn();\n\n        if (user) {\n          return true;\n        } else {\n          return false;\n        }\n      })();\n    }\n\n    getCart() {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        const uid = (yield _this4.isLoggedIn()).uid;\n        const storeUID = Globals.storeInfo.uid;\n\n        if (!storeUID) {\n          return;\n        }\n\n        console.log(uid);\n\n        let sub = _this4.db.collection(\"Users/\" + uid + \"/Cart_Info\").doc(\"Cart_List_\" + storeUID).valueChanges().subscribe(doc => {\n          Globals.cart = [];\n          const docData = doc;\n\n          if (docData) {\n            let cartList = docData.Cart_List;\n            cartList.forEach((productInCart, i) => {\n              var _a;\n\n              let uid = productInCart.UID;\n              let size = productInCart.Size;\n              let qty = productInCart.Qty;\n              let timestamp = productInCart.Timestamp.toDate();\n              let productID = productInCart.Post_ID;\n              let product = new Product(uid, productID, undefined, productID, timestamp, undefined, undefined, undefined, undefined, undefined, undefined, false, undefined, true, undefined, undefined, undefined, [], _this4.getURL(uid, productID));\n              let productCart = new ProductInCart(product, size, qty, false, timestamp, \"\", undefined);\n              (_a = Globals.cart) === null || _a === void 0 ? void 0 : _a.push(productCart);\n              console.log(i);\n\n              _this4.getPost(productID, true, i);\n            });\n          }\n\n          if (_this4.myCallback) _this4.myCallback();\n          if (isPlatformBrowser(_this4.platformID)) sub.unsubscribe();\n        });\n      })();\n    }\n\n    getPost(productID, forCart, cartIndex) {\n      let sub = this.db.collectionGroup(\"Products\", ref => ref.where(\"Product_ID\", '==', productID)).valueChanges().subscribe(docDatas => {\n        docDatas.forEach(doc => {\n          var _a, _b, _c, _d;\n\n          const docData = doc;\n\n          if (docData) {\n            let uid = docData.UID;\n            let productID = docData.Product_ID;\n            let timestamp = docData.Timestamp.toDate();\n            let description = docData.Description;\n            let name = docData.Name;\n            let blurred = docData.Blurred;\n            let templateColor = docData.Template_Color;\n            let likes = docData.Likes;\n            let priceCents = docData.Price_Cents;\n            let comments = docData.Comments;\n            let isPublic = (_a = docData.Public) !== null && _a !== void 0 ? _a : true;\n            let productType = (_b = docData.Type) !== null && _b !== void 0 ? _b : \"ATC1000\";\n            let displaySide = (_c = docData.Side) !== null && _c !== void 0 ? _c : \"front\";\n            let sides = (_d = docData[\"Sides\"]) !== null && _d !== void 0 ? _d : [\"Front\"];\n            let product = new Product(uid, productID, description, productID, timestamp, \"\", blurred, priceCents, name, templateColor, likes, false, comments, true, isPublic, productType, displaySide, sides, this.getURL(uid, productID));\n\n            if (forCart !== null && forCart !== void 0 ? forCart : false) {\n              Globals.cart[cartIndex].product = product;\n            } else {\n              Globals.selectedProduct = undefined;\n              Globals.selectedProduct = product;\n              if (this.myCallback) this.myCallback();\n            }\n          }\n        });\n        if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n      });\n    }\n\n    getTemplatesFiltered() {\n      return Globals.templates.filter(template => Globals.products.some(product => product.productType === template.productCode));\n    }\n\n    getURL(uid, productID) {\n      return 'https://firebasestorage.googleapis.com/v0/b/clothingapp-ed125.appspot.com/o/Users%2F' + uid + '%2FProducts%2F' + productID + '%2Flink_' + productID + '.png?alt=media';\n    }\n\n    getProfileURL(uid, dpID) {\n      return 'https://firebasestorage.googleapis.com/v0/b/clothingapp-ed125.appspot.com/o/Users%2F' + uid + '%2Fprofile_pic-' + dpID + '.jpeg?alt=media';\n    }\n\n    getAltURL() {\n      return 'https://firebasestorage.googleapis.com/v0/b/clothingapp-ed125.appspot.com/o/Resources%2Flink_empty.jpeg?alt=media';\n    }\n\n    getTemplate(templateID) {\n      Globals.selectedTemplate = undefined;\n      let sub = this.db.collection(\"Templates\", ref => ref.where(\"Code\", '==', templateID).orderBy(\"index\", \"asc\")).valueChanges({\n        idField: \"TemplateID\"\n      }).subscribe(docDatas => {\n        docDatas.forEach(doc => {\n          var docData = doc;\n\n          if (docData) {\n            let type = doc.TemplateID;\n            let testingAccounts = docData[\"testingAccounts\"];\n            let isAvailable = docData[\"isAvailable\"]; // guard isAvailable ?? false || testingAccounts?.contains(pUserInfo.uid ?? \"\") ?? false else{\n            //     continue\n            //   }\n\n            let display = docData[\"Display_Name\"];\n            let info = docData[\"Info\"];\n            let supportedSides = docData[\"Supported_Sides\"];\n\n            if (!supportedSides || supportedSides.length == 0) {\n              return;\n            }\n\n            let vari = docData[\"Colors\"];\n            let minPrice = docData[\"Min_Price_USD\"];\n            let extra = docData[\"Extra_Cost_USD\"];\n            let code = docData[\"Code\"];\n            let sizes = docData[\"Sizes\"];\n            let category = docData[\"category\"];\n            let has3D = docData[\"has3D\"];\n            let moreInfo = docData[\"More_info\"]; // let discountInfo = docData[\"Discount\"] as Dict<any>\n            // let discountedUsers = discountInfo[\"Artists\"] as Array<string>\n            // let discountedPrice = discountInfo.Minimum_Price_USD as number\n            // let discountCodes = discountInfo.Discount_Codes as Array<Dict<any>>   \n\n            const template = new Template(type, display, info, [], sizes, minPrice, code, category, moreInfo, false, [], extra, has3D);\n            supportedSides.forEach(side => {\n              var _a;\n\n              let name = side[\"Name\"];\n              let height = side[\"HeightCM\"];\n              let width = side[\"WidthCM\"];\n              let widthMultiplier = side[\"WidthMultiplier\"];\n              let centerYConst = side[\"CenterYConst\"];\n              let centerXConst = side[\"CenterXConst\"];\n              let rotation = side[\"Rotation\"];\n              let useReverseAspect = (_a = side[\"useReverseAspect\"]) !== null && _a !== void 0 ? _a : false;\n              let supportedSide = new TemplateSide(name, height, width, widthMultiplier, centerYConst, centerXConst, useReverseAspect, rotation);\n              template.supportedSides.push(supportedSide);\n            });\n            vari.forEach(v => {\n              let code = v[\"Code\"];\n              let display = v[\"Display\"];\n              let img = v[\"IMG\"];\n              let backImg = v[\"IMG_BACK\"];\n              let rgb = v[\"RGB\"];\n              let color = new Color(code, display, rgb, img, backImg);\n              template.colors.push(color);\n            });\n            Globals.selectedTemplate = template;\n          }\n        });\n        console.log(\"templates loaded\");\n        if (this.myCallback) this.myCallback();\n        if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n      });\n    }\n\n    getTemplates() {\n      Globals.templates = [];\n      let sub = this.db.collection(\"Templates\", ref => ref.orderBy(\"index\", \"asc\")).valueChanges({\n        idField: \"TemplateID\"\n      }).subscribe(docDatas => {\n        docDatas.forEach(doc => {\n          var docData = doc;\n\n          if (docData) {\n            let type = doc.TemplateID;\n            let testingAccounts = docData[\"testingAccounts\"];\n            let isAvailable = docData[\"isAvailable\"]; // guard isAvailable ?? false || testingAccounts?.contains(pUserInfo.uid ?? \"\") ?? false else{\n            //     continue\n            //   }\n\n            let display = docData[\"Display_Name\"];\n            let info = docData[\"Info\"];\n            let supportedSides = docData[\"Supported_Sides\"];\n\n            if (!supportedSides || supportedSides.length == 0) {\n              return;\n            }\n\n            let vari = docData[\"Colors\"];\n            let minPrice = docData[\"Min_Price_USD\"];\n            let extra = docData[\"Extra_Cost_USD\"];\n            let code = docData[\"Code\"];\n            let sizes = docData[\"Sizes\"];\n            let category = docData[\"category\"];\n            let has3D = docData[\"has3D\"];\n            let moreInfo = docData[\"More_info\"]; // let discountInfo = docData[\"Discount\"] as Dict<any>\n            // let discountedUsers = discountInfo[\"Artists\"] as Array<string>\n            // let discountedPrice = discountInfo.Minimum_Price_USD as number\n            // let discountCodes = discountInfo.Discount_Codes as Array<Dict<any>>   \n\n            const template = new Template(type, display, info, [], sizes, minPrice, code, category, moreInfo, false, [], extra, has3D);\n            supportedSides.forEach(side => {\n              var _a;\n\n              let name = side[\"Name\"];\n              let height = side[\"HeightCM\"];\n              let width = side[\"WidthCM\"];\n              let widthMultiplier = side[\"WidthMultiplier\"];\n              let centerYConst = side[\"CenterYConst\"];\n              let centerXConst = side[\"CenterXConst\"];\n              let rotation = side[\"Rotation\"];\n              let useReverseAspect = (_a = side[\"useReverseAspect\"]) !== null && _a !== void 0 ? _a : false;\n              let supportedSide = new TemplateSide(name, height, width, widthMultiplier, centerYConst, centerXConst, useReverseAspect, rotation);\n              template.supportedSides.push(supportedSide);\n            });\n            vari.forEach(v => {\n              let code = v[\"Code\"];\n              let display = v[\"Display\"];\n              let img = v[\"IMG\"];\n              let backImg = v[\"IMG_BACK\"];\n              let rgb = v[\"RGB\"];\n              let color = new Color(code, display, rgb, img, backImg);\n              template.colors.push(color);\n            });\n            Globals.templates.push(template);\n          }\n        });\n        console.log(\"templates loaded\");\n        if (this.myCallback) this.myCallback();\n        if (isPlatformBrowser(this.platformID)) sub.unsubscribe();\n      });\n    }\n\n  }\n\n  LoadService.ɵfac = function LoadService_Factory(t) {\n    return new (t || LoadService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth));\n  };\n\n  LoadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoadService,\n    factory: LoadService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoadService;\n})();","map":null,"metadata":{},"sourceType":"module"}