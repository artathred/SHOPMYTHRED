{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar _asyncToGenerator = require(\"/Users/artakoroushnia/Desktop/thred-web/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CallCredentialsFilterFactory = exports.CallCredentialsFilter = void 0;\n\nconst filter_1 = require(\"./filter\");\n\nconst constants_1 = require(\"./constants\");\n\nconst uri_parser_1 = require(\"./uri-parser\");\n\nclass CallCredentialsFilter extends filter_1.BaseFilter {\n  constructor(channel, stream) {\n    var _a, _b;\n\n    super();\n    this.channel = channel;\n    this.stream = stream;\n    this.channel = channel;\n    this.stream = stream;\n    const splitPath = stream.getMethod().split('/');\n    let serviceName = '';\n    /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n     * by '/', the first item should be empty and the second should be the\n     * service name */\n\n    if (splitPath.length >= 2) {\n      serviceName = splitPath[1];\n    }\n\n    const hostname = (_b = (_a = uri_parser_1.splitHostPort(stream.getHost())) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : 'localhost';\n    /* Currently, call credentials are only allowed on HTTPS connections, so we\n     * can assume that the scheme is \"https\" */\n\n    this.serviceUrl = `https://${hostname}/${serviceName}`;\n  }\n\n  sendMetadata(metadata) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const credentials = _this.stream.getCredentials();\n\n      const credsMetadata = credentials.generateMetadata({\n        service_url: _this.serviceUrl\n      });\n      const resultMetadata = yield metadata;\n\n      try {\n        resultMetadata.merge(yield credsMetadata);\n      } catch (error) {\n        _this.stream.cancelWithStatus(constants_1.Status.UNAUTHENTICATED, `Failed to retrieve auth metadata with error: ${error.message}`);\n\n        return Promise.reject('Failed to retrieve auth metadata');\n      }\n\n      if (resultMetadata.get('authorization').length > 1) {\n        _this.stream.cancelWithStatus(constants_1.Status.INTERNAL, '\"authorization\" metadata cannot have multiple values');\n\n        return Promise.reject('\"authorization\" metadata cannot have multiple values');\n      }\n\n      return resultMetadata;\n    })();\n  }\n\n}\n\nexports.CallCredentialsFilter = CallCredentialsFilter;\n\nclass CallCredentialsFilterFactory {\n  constructor(channel) {\n    this.channel = channel;\n    this.channel = channel;\n  }\n\n  createFilter(callStream) {\n    return new CallCredentialsFilter(this.channel, callStream);\n  }\n\n}\n\nexports.CallCredentialsFilterFactory = CallCredentialsFilterFactory; //# sourceMappingURL=call-credentials-filter.js.map","map":{"version":3,"sources":["/Users/artakoroushnia/Desktop/thred-web/node_modules/@grpc/grpc-js/build/src/call-credentials-filter.js"],"names":["Object","defineProperty","exports","value","CallCredentialsFilterFactory","CallCredentialsFilter","filter_1","require","constants_1","uri_parser_1","BaseFilter","constructor","channel","stream","_a","_b","splitPath","getMethod","split","serviceName","length","hostname","splitHostPort","getHost","host","serviceUrl","sendMetadata","metadata","credentials","getCredentials","credsMetadata","generateMetadata","service_url","resultMetadata","merge","error","cancelWithStatus","Status","UNAUTHENTICATED","message","Promise","reject","get","INTERNAL","createFilter","callStream"],"mappings":"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","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CallCredentialsFilterFactory = exports.CallCredentialsFilter = void 0;\nconst filter_1 = require(\"./filter\");\nconst constants_1 = require(\"./constants\");\nconst uri_parser_1 = require(\"./uri-parser\");\nclass CallCredentialsFilter extends filter_1.BaseFilter {\n    constructor(channel, stream) {\n        var _a, _b;\n        super();\n        this.channel = channel;\n        this.stream = stream;\n        this.channel = channel;\n        this.stream = stream;\n        const splitPath = stream.getMethod().split('/');\n        let serviceName = '';\n        /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n         * by '/', the first item should be empty and the second should be the\n         * service name */\n        if (splitPath.length >= 2) {\n            serviceName = splitPath[1];\n        }\n        const hostname = (_b = (_a = uri_parser_1.splitHostPort(stream.getHost())) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : 'localhost';\n        /* Currently, call credentials are only allowed on HTTPS connections, so we\n         * can assume that the scheme is \"https\" */\n        this.serviceUrl = `https://${hostname}/${serviceName}`;\n    }\n    async sendMetadata(metadata) {\n        const credentials = this.stream.getCredentials();\n        const credsMetadata = credentials.generateMetadata({\n            service_url: this.serviceUrl,\n        });\n        const resultMetadata = await metadata;\n        try {\n            resultMetadata.merge(await credsMetadata);\n        }\n        catch (error) {\n            this.stream.cancelWithStatus(constants_1.Status.UNAUTHENTICATED, `Failed to retrieve auth metadata with error: ${error.message}`);\n            return Promise.reject('Failed to retrieve auth metadata');\n        }\n        if (resultMetadata.get('authorization').length > 1) {\n            this.stream.cancelWithStatus(constants_1.Status.INTERNAL, '\"authorization\" metadata cannot have multiple values');\n            return Promise.reject('\"authorization\" metadata cannot have multiple values');\n        }\n        return resultMetadata;\n    }\n}\nexports.CallCredentialsFilter = CallCredentialsFilter;\nclass CallCredentialsFilterFactory {\n    constructor(channel) {\n        this.channel = channel;\n        this.channel = channel;\n    }\n    createFilter(callStream) {\n        return new CallCredentialsFilter(this.channel, callStream);\n    }\n}\nexports.CallCredentialsFilterFactory = CallCredentialsFilterFactory;\n//# sourceMappingURL=call-credentials-filter.js.map"]},"metadata":{},"sourceType":"script"}