{"ast":null,"code":"import { ViewEncapsulation, Injectable, RendererFactory2, Inject, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Title, Meta } from '@angular/platform-browser';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nlet MetafrenzyService = /*#__PURE__*/(() => {\n  class MetafrenzyService {\n    constructor(title, meta, rendererFactory, document) {\n      this.title = title;\n      this.meta = meta;\n      this.rendererFactory = rendererFactory;\n      this.document = document;\n    }\n\n    setTitle(title) {\n      this.title.setTitle(title);\n    }\n\n    getTitle() {\n      return this.title.getTitle();\n    }\n\n    setMetaTag(name, content) {\n      const metaDefinition = {};\n\n      if (name.lastIndexOf('og:', 0) === 0) {\n        metaDefinition['property'] = name;\n      } else {\n        metaDefinition['name'] = name;\n      }\n\n      metaDefinition['content'] = content;\n      this.meta.updateTag(metaDefinition);\n    }\n\n    getMetaTag(selector, returnElement) {\n      const tag = this.meta.getTag(selector);\n\n      if (!tag) {\n        return '';\n      }\n\n      return returnElement === true ? tag : tag.content;\n    }\n\n    removeMetaTag(selector) {\n      if (selector instanceof HTMLMetaElement) {\n        this.meta.removeTagElement(selector);\n      } else {\n        this.meta.removeTag(selector);\n      }\n    }\n\n    setMetaCharsetTag(value) {\n      this.meta.updateTag({\n        charset: value\n      }, 'charset');\n    }\n\n    removeLinkTags(shouldRemoveLinkTagCb) {\n      const links = this.document.head.getElementsByTagName('link');\n      const toRemove = [];\n\n      for (let i = 0; i < links.length; i++) {\n        if (shouldRemoveLinkTagCb(links[i])) {\n          toRemove.push(links[i]);\n        }\n      }\n\n      toRemove.forEach(el => el.remove());\n    }\n\n    setLinkTag(tag) {\n      try {\n        const renderer = this.rendererFactory.createRenderer(this.document, {\n          id: '-1',\n          encapsulation: ViewEncapsulation.None,\n          styles: [],\n          data: {}\n        });\n        const link = renderer.createElement('link');\n        const head = this.document.head;\n        Object.keys(tag).forEach(property => {\n          return renderer.setAttribute(link, property, String(tag[property]));\n        });\n        this.removeLinkTags(el => {\n          if (el.getAttribute('name') !== null && el.getAttribute('name') === link.getAttribute('name') || el.getAttribute('rel') !== null && el.getAttribute('rel') === link.getAttribute('rel') && link.getAttribute('rel') !== 'stylesheet' && link.getAttribute('rel') !== 'alternate') {\n            return true;\n          }\n\n          return false;\n        });\n        renderer.appendChild(head, link);\n      } catch (e) {}\n    }\n\n    setAllTitleTags(title) {\n      this.setTitle(title);\n      this.setMetaTag('og:title', title);\n    }\n\n    setAllDescriptionTags(description) {\n      this.setMetaTag('description', description);\n      this.setMetaTag('og:description', description);\n    }\n\n    setCanonical(href) {\n      this.setLinkTag({\n        rel: 'canonical',\n        href\n      });\n    }\n\n    removeCanonical() {\n      this.removeLinkTags(el => el.getAttribute('rel') === 'canonical');\n    }\n\n    setRobots(content) {\n      this.setLinkTag({\n        rel: 'robots',\n        content\n      });\n    }\n\n    setOpenGraph(og) {\n      Object.keys(og).forEach(name => {\n        this.setMetaTag('og:' + name, String(og[name]));\n      });\n    }\n\n    setTags(tags) {\n      if (tags.hasOwnProperty('title') && tags.title) {\n        this.setAllTitleTags(tags.title);\n      }\n\n      if (tags.hasOwnProperty('description') && tags.description) {\n        this.setAllDescriptionTags(tags.description);\n      }\n\n      if (tags.hasOwnProperty('url') && tags.url) {\n        this.setMetaTag('og:url', tags.url);\n        this.setCanonical(tags.url);\n      }\n\n      if (tags.hasOwnProperty('image') && tags.image) {\n        this.setMetaTag('og:image:url', tags.image);\n      }\n\n      if (tags.hasOwnProperty('robots') && tags.robots) {\n        this.setRobots(tags.robots);\n      }\n    }\n\n  }\n\n  MetafrenzyService.ɵfac = function MetafrenzyService_Factory(t) {\n    return new (t || MetafrenzyService)(ɵngcc0.ɵɵinject(ɵngcc1.Title), ɵngcc0.ɵɵinject(ɵngcc1.Meta), ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  MetafrenzyService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MetafrenzyService,\n    factory: MetafrenzyService.ɵfac\n  });\n  return MetafrenzyService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MetafrenzyGuard = /*#__PURE__*/(() => {\n  class MetafrenzyGuard {\n    constructor(metafrenzyService) {\n      this.metafrenzyService = metafrenzyService;\n    }\n\n    canActivate(next, state) {\n      const metaTags = next && next.data && next.data.metafrenzy ? next.data.metafrenzy : null;\n\n      if (metaTags) {\n        for (const key in metaTags) {\n          if (!metaTags.hasOwnProperty(key)) {\n            continue;\n          }\n\n          const value = metaTags[key];\n\n          if (key === 'title') {\n            this.metafrenzyService.setTitle(value);\n          } else if (key === 'tags') {\n            value.forEach(tag => {\n              if ('name' in tag && 'content' in tag) {\n                this.metafrenzyService.setMetaTag(tag.name, tag.content);\n              }\n            });\n          } else if (key === 'links') {\n            value.forEach(link => {\n              this.metafrenzyService.setLinkTag(link);\n            });\n          }\n        }\n      }\n\n      return true;\n    }\n\n    canActivateChild(next, state) {\n      return this.canActivate(next, state);\n    }\n\n  }\n\n  MetafrenzyGuard.ɵfac = function MetafrenzyGuard_Factory(t) {\n    return new (t || MetafrenzyGuard)(ɵngcc0.ɵɵinject(MetafrenzyService));\n  };\n\n  MetafrenzyGuard.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MetafrenzyGuard,\n    factory: MetafrenzyGuard.ɵfac\n  });\n  return MetafrenzyGuard;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MetafrenzyModule = /*#__PURE__*/(() => {\n  class MetafrenzyModule {\n    static forRoot() {\n      return {\n        ngModule: MetafrenzyModule,\n        providers: [MetafrenzyService, MetafrenzyGuard]\n      };\n    }\n\n  }\n\n  MetafrenzyModule.ɵfac = function MetafrenzyModule_Factory(t) {\n    return new (t || MetafrenzyModule)();\n  };\n\n  MetafrenzyModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MetafrenzyModule\n  });\n  MetafrenzyModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return MetafrenzyModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MetafrenzyModule, {\n    imports: function () {\n      return [CommonModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MetafrenzyGuard, MetafrenzyModule, MetafrenzyService }; //# sourceMappingURL=ngx-metafrenzy.js.map","map":null,"metadata":{},"sourceType":"module"}