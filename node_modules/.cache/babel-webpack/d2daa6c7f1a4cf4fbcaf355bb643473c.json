{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar _asyncToGenerator = require(\"/Users/artakoroushnia/Desktop/thred-web/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CallCredentials = void 0;\n\nconst metadata_1 = require(\"./metadata\");\n\nfunction isCurrentOauth2Client(client) {\n  return 'getRequestHeaders' in client && typeof client.getRequestHeaders === 'function';\n}\n/**\n * A class that represents a generic method of adding authentication-related\n * metadata on a per-request basis.\n */\n\n\nclass CallCredentials {\n  /**\n   * Creates a new CallCredentials object from a given function that generates\n   * Metadata objects.\n   * @param metadataGenerator A function that accepts a set of options, and\n   * generates a Metadata object based on these options, which is passed back\n   * to the caller via a supplied (err, metadata) callback.\n   */\n  static createFromMetadataGenerator(metadataGenerator) {\n    return new SingleCallCredentials(metadataGenerator);\n  }\n  /**\n   * Create a gRPC credential from a Google credential object.\n   * @param googleCredentials The authentication client to use.\n   * @return The resulting CallCredentials object.\n   */\n\n\n  static createFromGoogleCredential(googleCredentials) {\n    return CallCredentials.createFromMetadataGenerator((options, callback) => {\n      let getHeaders;\n\n      if (isCurrentOauth2Client(googleCredentials)) {\n        getHeaders = googleCredentials.getRequestHeaders(options.service_url);\n      } else {\n        getHeaders = new Promise((resolve, reject) => {\n          googleCredentials.getRequestMetadata(options.service_url, (err, headers) => {\n            if (err) {\n              reject(err);\n              return;\n            }\n\n            resolve(headers);\n          });\n        });\n      }\n\n      getHeaders.then(headers => {\n        const metadata = new metadata_1.Metadata();\n\n        for (const key of Object.keys(headers)) {\n          metadata.add(key, headers[key]);\n        }\n\n        callback(null, metadata);\n      }, err => {\n        callback(err);\n      });\n    });\n  }\n\n  static createEmpty() {\n    return new EmptyCallCredentials();\n  }\n\n}\n\nexports.CallCredentials = CallCredentials;\n\nclass ComposedCallCredentials extends CallCredentials {\n  constructor(creds) {\n    super();\n    this.creds = creds;\n  }\n\n  generateMetadata(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const base = new metadata_1.Metadata();\n      const generated = yield Promise.all(_this.creds.map(cred => cred.generateMetadata(options)));\n\n      for (const gen of generated) {\n        base.merge(gen);\n      }\n\n      return base;\n    })();\n  }\n\n  compose(other) {\n    return new ComposedCallCredentials(this.creds.concat([other]));\n  }\n\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof ComposedCallCredentials) {\n      return this.creds.every((value, index) => value._equals(other.creds[index]));\n    } else {\n      return false;\n    }\n  }\n\n}\n\nclass SingleCallCredentials extends CallCredentials {\n  constructor(metadataGenerator) {\n    super();\n    this.metadataGenerator = metadataGenerator;\n  }\n\n  generateMetadata(options) {\n    return new Promise((resolve, reject) => {\n      this.metadataGenerator(options, (err, metadata) => {\n        if (metadata !== undefined) {\n          resolve(metadata);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  compose(other) {\n    return new ComposedCallCredentials([this, other]);\n  }\n\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof SingleCallCredentials) {\n      return this.metadataGenerator === other.metadataGenerator;\n    } else {\n      return false;\n    }\n  }\n\n}\n\nclass EmptyCallCredentials extends CallCredentials {\n  generateMetadata(options) {\n    return Promise.resolve(new metadata_1.Metadata());\n  }\n\n  compose(other) {\n    return other;\n  }\n\n  _equals(other) {\n    return other instanceof EmptyCallCredentials;\n  }\n\n} //# sourceMappingURL=call-credentials.js.map","map":{"version":3,"sources":["/Users/artakoroushnia/Desktop/thred-web/node_modules/@grpc/grpc-js/build/src/call-credentials.js"],"names":["Object","defineProperty","exports","value","CallCredentials","metadata_1","require","isCurrentOauth2Client","client","getRequestHeaders","createFromMetadataGenerator","metadataGenerator","SingleCallCredentials","createFromGoogleCredential","googleCredentials","options","callback","getHeaders","service_url","Promise","resolve","reject","getRequestMetadata","err","headers","then","metadata","Metadata","key","keys","add","createEmpty","EmptyCallCredentials","ComposedCallCredentials","constructor","creds","generateMetadata","base","generated","all","map","cred","gen","merge","compose","other","concat","_equals","every","index","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CallCredentials = void 0;\nconst metadata_1 = require(\"./metadata\");\nfunction isCurrentOauth2Client(client) {\n    return ('getRequestHeaders' in client &&\n        typeof client.getRequestHeaders === 'function');\n}\n/**\n * A class that represents a generic method of adding authentication-related\n * metadata on a per-request basis.\n */\nclass CallCredentials {\n    /**\n     * Creates a new CallCredentials object from a given function that generates\n     * Metadata objects.\n     * @param metadataGenerator A function that accepts a set of options, and\n     * generates a Metadata object based on these options, which is passed back\n     * to the caller via a supplied (err, metadata) callback.\n     */\n    static createFromMetadataGenerator(metadataGenerator) {\n        return new SingleCallCredentials(metadataGenerator);\n    }\n    /**\n     * Create a gRPC credential from a Google credential object.\n     * @param googleCredentials The authentication client to use.\n     * @return The resulting CallCredentials object.\n     */\n    static createFromGoogleCredential(googleCredentials) {\n        return CallCredentials.createFromMetadataGenerator((options, callback) => {\n            let getHeaders;\n            if (isCurrentOauth2Client(googleCredentials)) {\n                getHeaders = googleCredentials.getRequestHeaders(options.service_url);\n            }\n            else {\n                getHeaders = new Promise((resolve, reject) => {\n                    googleCredentials.getRequestMetadata(options.service_url, (err, headers) => {\n                        if (err) {\n                            reject(err);\n                            return;\n                        }\n                        resolve(headers);\n                    });\n                });\n            }\n            getHeaders.then((headers) => {\n                const metadata = new metadata_1.Metadata();\n                for (const key of Object.keys(headers)) {\n                    metadata.add(key, headers[key]);\n                }\n                callback(null, metadata);\n            }, (err) => {\n                callback(err);\n            });\n        });\n    }\n    static createEmpty() {\n        return new EmptyCallCredentials();\n    }\n}\nexports.CallCredentials = CallCredentials;\nclass ComposedCallCredentials extends CallCredentials {\n    constructor(creds) {\n        super();\n        this.creds = creds;\n    }\n    async generateMetadata(options) {\n        const base = new metadata_1.Metadata();\n        const generated = await Promise.all(this.creds.map((cred) => cred.generateMetadata(options)));\n        for (const gen of generated) {\n            base.merge(gen);\n        }\n        return base;\n    }\n    compose(other) {\n        return new ComposedCallCredentials(this.creds.concat([other]));\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ComposedCallCredentials) {\n            return this.creds.every((value, index) => value._equals(other.creds[index]));\n        }\n        else {\n            return false;\n        }\n    }\n}\nclass SingleCallCredentials extends CallCredentials {\n    constructor(metadataGenerator) {\n        super();\n        this.metadataGenerator = metadataGenerator;\n    }\n    generateMetadata(options) {\n        return new Promise((resolve, reject) => {\n            this.metadataGenerator(options, (err, metadata) => {\n                if (metadata !== undefined) {\n                    resolve(metadata);\n                }\n                else {\n                    reject(err);\n                }\n            });\n        });\n    }\n    compose(other) {\n        return new ComposedCallCredentials([this, other]);\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof SingleCallCredentials) {\n            return this.metadataGenerator === other.metadataGenerator;\n        }\n        else {\n            return false;\n        }\n    }\n}\nclass EmptyCallCredentials extends CallCredentials {\n    generateMetadata(options) {\n        return Promise.resolve(new metadata_1.Metadata());\n    }\n    compose(other) {\n        return other;\n    }\n    _equals(other) {\n        return other instanceof EmptyCallCredentials;\n    }\n}\n//# sourceMappingURL=call-credentials.js.map"]},"metadata":{},"sourceType":"script"}