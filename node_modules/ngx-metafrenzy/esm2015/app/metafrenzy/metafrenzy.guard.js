import { Injectable } from '@angular/core';
import { MetafrenzyService } from './metafrenzy.service';
export class MetafrenzyGuard {
    constructor(metafrenzyService) {
        this.metafrenzyService = metafrenzyService;
    }
    canActivate(next, state) {
        const metaTags = (next && next.data && next.data.metafrenzy) ? next.data.metafrenzy : null;
        if (metaTags) {
            for (const key in metaTags) {
                if (!metaTags.hasOwnProperty(key)) {
                    continue;
                }
                const value = metaTags[key];
                if (key === 'title') {
                    this.metafrenzyService.setTitle(value);
                }
                else if (key === 'tags') {
                    value.forEach((tag) => {
                        if ('name' in tag && 'content' in tag) {
                            this.metafrenzyService.setMetaTag(tag.name, tag.content);
                        }
                    });
                }
                else if (key === 'links') {
                    value.forEach((link) => {
                        this.metafrenzyService.setLinkTag(link);
                    });
                }
            }
        }
        return true;
    }
    canActivateChild(next, state) {
        return this.canActivate(next, state);
    }
}
MetafrenzyGuard.decorators = [
    { type: Injectable }
];
MetafrenzyGuard.ctorParameters = () => [
    { type: MetafrenzyService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWZyZW56eS5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcHAvbWV0YWZyZW56eS9tZXRhZnJlbnp5Lmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFrQixNQUFNLHNCQUFzQixDQUFDO0FBR3pFLE1BQU0sT0FBTyxlQUFlO0lBQ3hCLFlBQTZCLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO0lBQUcsQ0FBQztJQUVyRSxXQUFXLENBQ1AsSUFBNEIsRUFDNUIsS0FBMEI7UUFFMUIsTUFBTSxRQUFRLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRTNGLElBQUksUUFBUSxFQUFFO1lBQ1YsS0FBSyxNQUFNLEdBQUcsSUFBSSxRQUFRLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUMvQixTQUFTO2lCQUNaO2dCQUVELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFFNUIsSUFBSSxHQUFHLEtBQUssT0FBTyxFQUFFO29CQUNqQixJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUMxQztxQkFBTSxJQUFJLEdBQUcsS0FBSyxNQUFNLEVBQUU7b0JBQ3ZCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTt3QkFDdkIsSUFBSSxNQUFNLElBQUksR0FBRyxJQUFJLFNBQVMsSUFBSSxHQUFHLEVBQUU7NEJBQ25DLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7eUJBQzVEO29CQUNMLENBQUMsQ0FBQyxDQUFDO2lCQUNOO3FCQUFNLElBQUksR0FBRyxLQUFLLE9BQU8sRUFBRTtvQkFDeEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQW9CLEVBQUUsRUFBRTt3QkFDbkMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDNUMsQ0FBQyxDQUFDLENBQUM7aUJBQ047YUFDSjtTQUNKO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELGdCQUFnQixDQUNaLElBQTRCLEVBQzVCLEtBQTBCO1FBRTFCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQzs7O1lBMUNKLFVBQVU7OztZQUZGLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ2FuQWN0aXZhdGUsIENhbkFjdGl2YXRlQ2hpbGQsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIFJvdXRlclN0YXRlU25hcHNob3QgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBNZXRhZnJlbnp5U2VydmljZSwgTGlua0RlZmluaXRpb24gfSBmcm9tICcuL21ldGFmcmVuenkuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBNZXRhZnJlbnp5R3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSwgQ2FuQWN0aXZhdGVDaGlsZCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG1ldGFmcmVuenlTZXJ2aWNlOiBNZXRhZnJlbnp5U2VydmljZSkge31cclxuXHJcbiAgICBjYW5BY3RpdmF0ZShcclxuICAgICAgICBuZXh0OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxyXG4gICAgICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogT2JzZXJ2YWJsZTxib29sZWFuPiB8IFByb21pc2U8Ym9vbGVhbj4gfCBib29sZWFuIHtcclxuXHJcbiAgICAgICAgY29uc3QgbWV0YVRhZ3MgPSAobmV4dCAmJiBuZXh0LmRhdGEgJiYgbmV4dC5kYXRhLm1ldGFmcmVuenkpID8gbmV4dC5kYXRhLm1ldGFmcmVuenkgOiBudWxsO1xyXG5cclxuICAgICAgICBpZiAobWV0YVRhZ3MpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbWV0YVRhZ3MpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbWV0YVRhZ3MuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbWV0YVRhZ3Nba2V5XTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAndGl0bGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZnJlbnp5U2VydmljZS5zZXRUaXRsZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3RhZ3MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuZm9yRWFjaCgodGFnOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCduYW1lJyBpbiB0YWcgJiYgJ2NvbnRlbnQnIGluIHRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZnJlbnp5U2VydmljZS5zZXRNZXRhVGFnKHRhZy5uYW1lLCB0YWcuY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnbGlua3MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuZm9yRWFjaCgobGluazogTGlua0RlZmluaXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZnJlbnp5U2VydmljZS5zZXRMaW5rVGFnKGxpbmspO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5BY3RpdmF0ZUNoaWxkKFxyXG4gICAgICAgIG5leHQ6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXHJcbiAgICAgICAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgUHJvbWlzZTxib29sZWFuPiB8IGJvb2xlYW4ge1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5jYW5BY3RpdmF0ZShuZXh0LCBzdGF0ZSk7XHJcbiAgICB9XHJcbn1cclxuIl19