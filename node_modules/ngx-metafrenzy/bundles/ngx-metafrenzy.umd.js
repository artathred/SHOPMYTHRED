(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('ngx-metafrenzy', ['exports', '@angular/core', '@angular/common', '@angular/platform-browser'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-metafrenzy'] = {}, global.ng.core, global.ng.common, global.ng.platformBrowser));
}(this, (function (exports, core, common, platformBrowser) { 'use strict';

    var MetafrenzyService = /** @class */ (function () {
        function MetafrenzyService(title, meta, rendererFactory, document) {
            this.title = title;
            this.meta = meta;
            this.rendererFactory = rendererFactory;
            this.document = document;
        }
        MetafrenzyService.prototype.setTitle = function (title) {
            this.title.setTitle(title);
        };
        MetafrenzyService.prototype.getTitle = function () {
            return this.title.getTitle();
        };
        MetafrenzyService.prototype.setMetaTag = function (name, content) {
            var metaDefinition = {};
            if (name.lastIndexOf('og:', 0) === 0) {
                metaDefinition['property'] = name;
            }
            else {
                metaDefinition['name'] = name;
            }
            metaDefinition['content'] = content;
            this.meta.updateTag(metaDefinition);
        };
        MetafrenzyService.prototype.getMetaTag = function (selector, returnElement) {
            var tag = this.meta.getTag(selector);
            if (!tag) {
                return '';
            }
            return returnElement === true ? tag : tag.content;
        };
        MetafrenzyService.prototype.removeMetaTag = function (selector) {
            if (selector instanceof HTMLMetaElement) {
                this.meta.removeTagElement(selector);
            }
            else {
                this.meta.removeTag(selector);
            }
        };
        MetafrenzyService.prototype.setMetaCharsetTag = function (value) {
            this.meta.updateTag({
                charset: value
            }, 'charset');
        };
        MetafrenzyService.prototype.removeLinkTags = function (shouldRemoveLinkTagCb) {
            var links = this.document.head.getElementsByTagName('link');
            var toRemove = [];
            for (var i = 0; i < links.length; i++) {
                if (shouldRemoveLinkTagCb(links[i])) {
                    toRemove.push(links[i]);
                }
            }
            toRemove.forEach(function (el) { return el.remove(); });
        };
        MetafrenzyService.prototype.setLinkTag = function (tag) {
            try {
                var renderer_1 = this.rendererFactory.createRenderer(this.document, {
                    id: '-1',
                    encapsulation: core.ViewEncapsulation.None,
                    styles: [],
                    data: {}
                });
                var link_1 = renderer_1.createElement('link');
                var head = this.document.head;
                Object.keys(tag).forEach(function (property) {
                    return renderer_1.setAttribute(link_1, property, String(tag[property]));
                });
                this.removeLinkTags(function (el) {
                    if ((el.getAttribute('name') !== null &&
                        el.getAttribute('name') === link_1.getAttribute('name')) ||
                        (el.getAttribute('rel') !== null &&
                            el.getAttribute('rel') === link_1.getAttribute('rel') &&
                            link_1.getAttribute('rel') !== 'stylesheet' &&
                            link_1.getAttribute('rel') !== 'alternate')) {
                        return true;
                    }
                    return false;
                });
                renderer_1.appendChild(head, link_1);
            }
            catch (e) { }
        };
        MetafrenzyService.prototype.setAllTitleTags = function (title) {
            this.setTitle(title);
            this.setMetaTag('og:title', title);
        };
        MetafrenzyService.prototype.setAllDescriptionTags = function (description) {
            this.setMetaTag('description', description);
            this.setMetaTag('og:description', description);
        };
        MetafrenzyService.prototype.setCanonical = function (href) {
            this.setLinkTag({
                rel: 'canonical',
                href: href
            });
        };
        MetafrenzyService.prototype.removeCanonical = function () {
            this.removeLinkTags(function (el) { return el.getAttribute('rel') === 'canonical'; });
        };
        MetafrenzyService.prototype.setRobots = function (content) {
            this.setLinkTag({
                rel: 'robots',
                content: content
            });
        };
        MetafrenzyService.prototype.setOpenGraph = function (og) {
            var _this = this;
            Object.keys(og).forEach(function (name) {
                _this.setMetaTag('og:' + name, String(og[name]));
            });
        };
        MetafrenzyService.prototype.setTags = function (tags) {
            if (tags.hasOwnProperty('title') && tags.title) {
                this.setAllTitleTags(tags.title);
            }
            if (tags.hasOwnProperty('description') && tags.description) {
                this.setAllDescriptionTags(tags.description);
            }
            if (tags.hasOwnProperty('url') && tags.url) {
                this.setMetaTag('og:url', tags.url);
                this.setCanonical(tags.url);
            }
            if (tags.hasOwnProperty('image') && tags.image) {
                this.setMetaTag('og:image:url', tags.image);
            }
            if (tags.hasOwnProperty('robots') && tags.robots) {
                this.setRobots(tags.robots);
            }
        };
        return MetafrenzyService;
    }());
    MetafrenzyService.decorators = [
        { type: core.Injectable }
    ];
    MetafrenzyService.ctorParameters = function () { return [
        { type: platformBrowser.Title },
        { type: platformBrowser.Meta },
        { type: core.RendererFactory2 },
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
    ]; };

    var MetafrenzyGuard = /** @class */ (function () {
        function MetafrenzyGuard(metafrenzyService) {
            this.metafrenzyService = metafrenzyService;
        }
        MetafrenzyGuard.prototype.canActivate = function (next, state) {
            var _this = this;
            var metaTags = (next && next.data && next.data.metafrenzy) ? next.data.metafrenzy : null;
            if (metaTags) {
                for (var key in metaTags) {
                    if (!metaTags.hasOwnProperty(key)) {
                        continue;
                    }
                    var value = metaTags[key];
                    if (key === 'title') {
                        this.metafrenzyService.setTitle(value);
                    }
                    else if (key === 'tags') {
                        value.forEach(function (tag) {
                            if ('name' in tag && 'content' in tag) {
                                _this.metafrenzyService.setMetaTag(tag.name, tag.content);
                            }
                        });
                    }
                    else if (key === 'links') {
                        value.forEach(function (link) {
                            _this.metafrenzyService.setLinkTag(link);
                        });
                    }
                }
            }
            return true;
        };
        MetafrenzyGuard.prototype.canActivateChild = function (next, state) {
            return this.canActivate(next, state);
        };
        return MetafrenzyGuard;
    }());
    MetafrenzyGuard.decorators = [
        { type: core.Injectable }
    ];
    MetafrenzyGuard.ctorParameters = function () { return [
        { type: MetafrenzyService }
    ]; };

    var MetafrenzyModule = /** @class */ (function () {
        function MetafrenzyModule() {
        }
        MetafrenzyModule.forRoot = function () {
            return {
                ngModule: MetafrenzyModule,
                providers: [
                    MetafrenzyService,
                    MetafrenzyGuard
                ]
            };
        };
        return MetafrenzyModule;
    }());
    MetafrenzyModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MetafrenzyGuard = MetafrenzyGuard;
    exports.MetafrenzyModule = MetafrenzyModule;
    exports.MetafrenzyService = MetafrenzyService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-metafrenzy.umd.js.map
