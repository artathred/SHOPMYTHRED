{"version":3,"file":"ngx-metafrenzy.js","sources":["../../src/app/metafrenzy/metafrenzy.service.ts","../../src/app/metafrenzy/metafrenzy.guard.ts","../../src/app/metafrenzy/metafrenzy.module.ts","../../src/ngx-metafrenzy.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, RendererFactory2, Inject, ViewEncapsulation } from '@angular/core';\r\nimport { Meta, Title } from '@angular/platform-browser';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\nexport interface LinkDefinition {\r\n    charset?: string;\r\n    crossorigin?: string;\r\n    href?: string;\r\n    hreflang?: string;\r\n    media?: string;\r\n    rel?: string;\r\n    rev?: string;\r\n    sizes?: string;\r\n    target?: string;\r\n    type?: string;\r\n    [prop: string]: string | undefined;\r\n}\r\n\r\nexport interface OpenGraph {\r\n    title?: string;\r\n    description?: string;\r\n    type?: string;\r\n    url?: string;\r\n    image?: string;\r\n    site_name?: string;\r\n    [prop: string]: string | undefined;\r\n}\r\n\r\nexport interface Tags {\r\n    title?: string;\r\n    description?: string;\r\n    url?: string;\r\n    robots?: Robots;\r\n    image?: string;\r\n}\r\n\r\nexport type Robots =\r\n    'index,follow' | 'index,nofollow' | 'noindex,nofollow' | 'noindex,follow' |\r\n    'index, follow' | 'index, nofollow' | 'noindex, nofollow' | 'noindex, follow';\r\n\r\n@Injectable()\r\nexport class MetafrenzyService {\r\n\r\n    constructor(\r\n        private readonly title: Title,\r\n        private readonly meta: Meta,\r\n        private readonly rendererFactory: RendererFactory2,\r\n        @Inject(DOCUMENT) private document: any\r\n    ) {}\r\n\r\n    setTitle(title: string) {\r\n        this.title.setTitle(title);\r\n    }\r\n\r\n    getTitle(): string {\r\n        return this.title.getTitle();\r\n    }\r\n\r\n    setMetaTag(name: string, content: string) {\r\n        const metaDefinition: any = {};\r\n\r\n        if (name.lastIndexOf('og:', 0) === 0) {\r\n            metaDefinition['property'] = name;\r\n        } else {\r\n            metaDefinition['name'] = name;\r\n        }\r\n\r\n        metaDefinition['content'] = content;\r\n\r\n        this.meta.updateTag(metaDefinition);\r\n    }\r\n\r\n    getMetaTag(selector: string, returnElement?: boolean): string|HTMLMetaElement {\r\n        const tag = this.meta.getTag(selector);\r\n        if (!tag) {\r\n            return '';\r\n        }\r\n\r\n        return returnElement === true ? tag : tag.content;\r\n    }\r\n\r\n    removeMetaTag(selector: string|HTMLMetaElement) {\r\n        if (selector instanceof HTMLMetaElement) {\r\n            this.meta.removeTagElement(selector);\r\n        } else {\r\n            this.meta.removeTag(selector);\r\n        }\r\n    }\r\n\r\n    setMetaCharsetTag(value: string) {\r\n        this.meta.updateTag({\r\n            charset: value\r\n        }, 'charset');\r\n    }\r\n\r\n    removeLinkTags(shouldRemoveLinkTagCb: (linkTag: HTMLLinkElement) => boolean) {\r\n        const links: HTMLCollectionOf<HTMLLinkElement> = this.document.head.getElementsByTagName('link');\r\n\r\n        const toRemove: HTMLLinkElement[] = [];\r\n\r\n        for (let i = 0; i < links.length; i++) {\r\n            if (shouldRemoveLinkTagCb(links[i])) {\r\n                toRemove.push(links[i]);\r\n            }\r\n        }\r\n\r\n        toRemove.forEach(el => el.remove());\r\n    }\r\n\r\n    setLinkTag(tag: LinkDefinition) {\r\n        try {\r\n            const renderer = this.rendererFactory.createRenderer(this.document, {\r\n                id: '-1',\r\n                encapsulation: ViewEncapsulation.None,\r\n                styles: [],\r\n                data: {}\r\n            });\r\n\r\n            const link = renderer.createElement('link');\r\n            const head = this.document.head;\r\n\r\n            Object.keys(tag).forEach((property: string) => {\r\n                return renderer.setAttribute(link, property, String(tag[property]));\r\n            });\r\n\r\n            this.removeLinkTags(el => {\r\n                if (\r\n                    (el.getAttribute('name') !== null &&\r\n                        el.getAttribute('name') === link.getAttribute('name')) ||\r\n                    (el.getAttribute('rel') !== null &&\r\n                        el.getAttribute('rel') === link.getAttribute('rel') &&\r\n                        link.getAttribute('rel') !== 'stylesheet' &&\r\n                        link.getAttribute('rel') !== 'alternate')\r\n                ) {\r\n                  return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            renderer.appendChild(head, link);\r\n        } catch (e) {}\r\n    }\r\n\r\n    setAllTitleTags(title: string) {\r\n        this.setTitle(title);\r\n        this.setMetaTag('og:title', title);\r\n    }\r\n\r\n    setAllDescriptionTags(description: string) {\r\n        this.setMetaTag('description', description);\r\n        this.setMetaTag('og:description', description);\r\n    }\r\n\r\n    setCanonical(href: string) {\r\n        this.setLinkTag({\r\n            rel: 'canonical',\r\n            href\r\n        });\r\n    }\r\n\r\n    removeCanonical() {\r\n      this.removeLinkTags(el => el.getAttribute('rel') === 'canonical');\r\n    }\r\n\r\n    setRobots(content: Robots) {\r\n        this.setLinkTag({\r\n            rel: 'robots',\r\n            content\r\n        });\r\n    }\r\n\r\n    setOpenGraph(og: OpenGraph) {\r\n        Object.keys(og).forEach((name: string) => {\r\n            this.setMetaTag('og:' + name, String(og[name]));\r\n        });\r\n    }\r\n\r\n    setTags(tags: Tags) {\r\n        if (tags.hasOwnProperty('title') && tags.title) {\r\n            this.setAllTitleTags(tags.title);\r\n        }\r\n\r\n        if (tags.hasOwnProperty('description') && tags.description) {\r\n            this.setAllDescriptionTags(tags.description);\r\n        }\r\n\r\n        if (tags.hasOwnProperty('url') && tags.url) {\r\n            this.setMetaTag('og:url', tags.url);\r\n            this.setCanonical(tags.url);\r\n        }\r\n\r\n        if (tags.hasOwnProperty('image') && tags.image) {\r\n            this.setMetaTag('og:image:url', tags.image);\r\n        }\r\n\r\n        if (tags.hasOwnProperty('robots') && tags.robots) {\r\n            this.setRobots(tags.robots);\r\n        }\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { MetafrenzyService, LinkDefinition } from './metafrenzy.service';\r\n\r\n@Injectable()\r\nexport class MetafrenzyGuard implements CanActivate, CanActivateChild {\r\n    constructor(private readonly metafrenzyService: MetafrenzyService) {}\r\n\r\n    canActivate(\r\n        next: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n\r\n        const metaTags = (next && next.data && next.data.metafrenzy) ? next.data.metafrenzy : null;\r\n\r\n        if (metaTags) {\r\n            for (const key in metaTags) {\r\n                if (!metaTags.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n\r\n                const value = metaTags[key];\r\n\r\n                if (key === 'title') {\r\n                    this.metafrenzyService.setTitle(value);\r\n                } else if (key === 'tags') {\r\n                    value.forEach((tag: any) => {\r\n                        if ('name' in tag && 'content' in tag) {\r\n                            this.metafrenzyService.setMetaTag(tag.name, tag.content);\r\n                        }\r\n                    });\r\n                } else if (key === 'links') {\r\n                    value.forEach((link: LinkDefinition) => {\r\n                        this.metafrenzyService.setLinkTag(link);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    canActivateChild(\r\n        next: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n\r\n        return this.canActivate(next, state);\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MetafrenzyService } from './metafrenzy.service';\r\nimport { MetafrenzyGuard } from './metafrenzy.guard';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ]\r\n})\r\nexport class MetafrenzyModule {\r\n    static forRoot(): ModuleWithProviders<MetafrenzyModule> {\r\n        return {\r\n            ngModule: MetafrenzyModule,\r\n            providers: [\r\n                MetafrenzyService,\r\n                MetafrenzyGuard\r\n            ]\r\n        };\r\n    }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}