/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/prerender/worker", ["require", "exports", "@nguniversal/common/engine", "fs", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.render = exports.setup = void 0;
    const engine_1 = require("@nguniversal/common/engine");
    const fs = require("fs");
    const path = require("path");
    let workerArgs;
    let inlineCriticalCssProcessor;
    function setup(options) {
        workerArgs = options;
        if (workerArgs.inlineCriticalCss) {
            inlineCriticalCssProcessor = new engine_1.ÉµInlineCriticalCssProcessor({
                deployUrl: workerArgs.deployUrl,
                minify: workerArgs.minifyCss,
            });
        }
    }
    exports.setup = setup;
    /**
     * Renders each route in routes and writes them to <outputPath>/<route>/index.html.
     */
    function render(outputPath, serverBundlePath, route) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = {};
            const browserIndexOutputPath = path.join(outputPath, workerArgs.indexFile);
            const outputFolderPath = path.join(outputPath, route);
            const outputIndexPath = path.join(outputFolderPath, 'index.html');
            const { renderModule, AppServerModule } = yield __syncRequire ? Promise.resolve().then(() => require(serverBundlePath)) : new Promise((resolve_1, reject_1) => { require([serverBundlePath], resolve_1, reject_1); });
            const browserIndexInputPath = path.join(outputPath, workerArgs.indexFile);
            let indexHtml = yield fs.promises.readFile(browserIndexInputPath, 'utf8');
            indexHtml = indexHtml.replace('</html>', '<!-- This page was prerendered with Angular Universal -->\n</html>');
            if (workerArgs.inlineCriticalCss) {
                // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64
                indexHtml = indexHtml.replace(/ media=\"print\" onload=\"this\.media='all'"><noscript><link .+?><\/noscript>/g, '>');
            }
            let html = yield renderModule(AppServerModule, {
                document: indexHtml,
                url: route,
            });
            if (inlineCriticalCssProcessor) {
                const { content, warnings, errors } = yield inlineCriticalCssProcessor.process(html, {
                    outputPath,
                });
                result.errors = errors;
                result.warnings = warnings;
                html = content;
            }
            // This case happens when we are prerendering "/".
            if (browserIndexOutputPath === outputIndexPath) {
                const browserIndexOutputPathOriginal = path.join(outputPath, 'index.original.html');
                fs.renameSync(browserIndexOutputPath, browserIndexOutputPathOriginal);
            }
            fs.mkdirSync(outputFolderPath, { recursive: true });
            fs.writeFileSync(outputIndexPath, html);
            return result;
        });
    }
    exports.render = render;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9idWlsZGVycy9zcmMvcHJlcmVuZGVyL3dvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBRUgsdURBQXVHO0lBQ3ZHLHlCQUF5QjtJQUN6Qiw2QkFBNkI7SUFjN0IsSUFBSSxVQUEyQixDQUFDO0lBQ2hDLElBQUksMEJBQWtFLENBQUM7SUFFdkUsU0FBZ0IsS0FBSyxDQUFDLE9BQXdCO1FBQzVDLFVBQVUsR0FBRyxPQUFPLENBQUM7UUFDckIsSUFBSSxVQUFVLENBQUMsaUJBQWlCLEVBQUU7WUFDaEMsMEJBQTBCLEdBQUcsSUFBSSxvQ0FBMEIsQ0FBQztnQkFDMUQsU0FBUyxFQUFFLFVBQVUsQ0FBQyxTQUFTO2dCQUMvQixNQUFNLEVBQUUsVUFBVSxDQUFDLFNBQVM7YUFDN0IsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBUkQsc0JBUUM7SUFFRDs7T0FFRztJQUNILFNBQXNCLE1BQU0sQ0FDMUIsVUFBa0IsRUFDbEIsZ0JBQXdCLEVBQ3hCLEtBQWE7O1lBRWIsTUFBTSxNQUFNLEdBQUcsRUFBa0IsQ0FBQztZQUNsQyxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMzRSxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3RELE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFFbEUsTUFBTSxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsR0FBRywyREFBYSxnQkFBZ0IscURBQWhCLGdCQUFnQiwyQkFBQyxDQUFDO1lBRXpFLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzFFLElBQUksU0FBUyxHQUFHLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDMUUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQzNCLFNBQVMsRUFDVCxvRUFBb0UsQ0FDckUsQ0FBQztZQUNGLElBQUksVUFBVSxDQUFDLGlCQUFpQixFQUFFO2dCQUNoQyx3RUFBd0U7Z0JBQ3hFLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUMzQixnRkFBZ0YsRUFDaEYsR0FBRyxDQUNKLENBQUM7YUFDSDtZQUVELElBQUksSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLGVBQWUsRUFBRTtnQkFDN0MsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLEdBQUcsRUFBRSxLQUFLO2FBQ1gsQ0FBQyxDQUFDO1lBRUgsSUFBSSwwQkFBMEIsRUFBRTtnQkFDOUIsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSwwQkFBMEIsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO29CQUNuRixVQUFVO2lCQUNYLENBQUMsQ0FBQztnQkFDSCxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztnQkFDdkIsTUFBTSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7Z0JBQzNCLElBQUksR0FBRyxPQUFPLENBQUM7YUFDaEI7WUFFRCxrREFBa0Q7WUFDbEQsSUFBSSxzQkFBc0IsS0FBSyxlQUFlLEVBQUU7Z0JBQzlDLE1BQU0sOEJBQThCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUscUJBQXFCLENBQUMsQ0FBQztnQkFDcEYsRUFBRSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO2FBQ3ZFO1lBRUQsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3BELEVBQUUsQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBRXhDLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7S0FBQTtJQWxERCx3QkFrREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgybVJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvciBhcyBJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvciB9IGZyb20gJ0BuZ3VuaXZlcnNhbC9jb21tb24vZW5naW5lJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgV29ya2VyU2V0dXBBcmdzIHtcbiAgaW5kZXhGaWxlOiBzdHJpbmc7XG4gIGRlcGxveVVybDogc3RyaW5nO1xuICBpbmxpbmVDcml0aWNhbENzczogYm9vbGVhbjtcbiAgbWluaWZ5Q3NzOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlbmRlclJlc3VsdCB7XG4gIGVycm9ycz86IHN0cmluZ1tdO1xuICB3YXJuaW5ncz86IHN0cmluZ1tdO1xufVxuXG5sZXQgd29ya2VyQXJnczogV29ya2VyU2V0dXBBcmdzO1xubGV0IGlubGluZUNyaXRpY2FsQ3NzUHJvY2Vzc29yOiBJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvciB8IHVuZGVmaW5lZDtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwKG9wdGlvbnM6IFdvcmtlclNldHVwQXJncyk6IHZvaWQge1xuICB3b3JrZXJBcmdzID0gb3B0aW9ucztcbiAgaWYgKHdvcmtlckFyZ3MuaW5saW5lQ3JpdGljYWxDc3MpIHtcbiAgICBpbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvciA9IG5ldyBJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3Nvcih7XG4gICAgICBkZXBsb3lVcmw6IHdvcmtlckFyZ3MuZGVwbG95VXJsLFxuICAgICAgbWluaWZ5OiB3b3JrZXJBcmdzLm1pbmlmeUNzcyxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbmRlcnMgZWFjaCByb3V0ZSBpbiByb3V0ZXMgYW5kIHdyaXRlcyB0aGVtIHRvIDxvdXRwdXRQYXRoPi88cm91dGU+L2luZGV4Lmh0bWwuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXIoXG4gIG91dHB1dFBhdGg6IHN0cmluZyxcbiAgc2VydmVyQnVuZGxlUGF0aDogc3RyaW5nLFxuICByb3V0ZTogc3RyaW5nLFxuKTogUHJvbWlzZTxSZW5kZXJSZXN1bHQ+IHtcbiAgY29uc3QgcmVzdWx0ID0ge30gYXMgUmVuZGVyUmVzdWx0O1xuICBjb25zdCBicm93c2VySW5kZXhPdXRwdXRQYXRoID0gcGF0aC5qb2luKG91dHB1dFBhdGgsIHdvcmtlckFyZ3MuaW5kZXhGaWxlKTtcbiAgY29uc3Qgb3V0cHV0Rm9sZGVyUGF0aCA9IHBhdGguam9pbihvdXRwdXRQYXRoLCByb3V0ZSk7XG4gIGNvbnN0IG91dHB1dEluZGV4UGF0aCA9IHBhdGguam9pbihvdXRwdXRGb2xkZXJQYXRoLCAnaW5kZXguaHRtbCcpO1xuXG4gIGNvbnN0IHsgcmVuZGVyTW9kdWxlLCBBcHBTZXJ2ZXJNb2R1bGUgfSA9IGF3YWl0IGltcG9ydChzZXJ2ZXJCdW5kbGVQYXRoKTtcblxuICBjb25zdCBicm93c2VySW5kZXhJbnB1dFBhdGggPSBwYXRoLmpvaW4ob3V0cHV0UGF0aCwgd29ya2VyQXJncy5pbmRleEZpbGUpO1xuICBsZXQgaW5kZXhIdG1sID0gYXdhaXQgZnMucHJvbWlzZXMucmVhZEZpbGUoYnJvd3NlckluZGV4SW5wdXRQYXRoLCAndXRmOCcpO1xuICBpbmRleEh0bWwgPSBpbmRleEh0bWwucmVwbGFjZShcbiAgICAnPC9odG1sPicsXG4gICAgJzwhLS0gVGhpcyBwYWdlIHdhcyBwcmVyZW5kZXJlZCB3aXRoIEFuZ3VsYXIgVW5pdmVyc2FsIC0tPlxcbjwvaHRtbD4nLFxuICApO1xuICBpZiAod29ya2VyQXJncy5pbmxpbmVDcml0aWNhbENzcykge1xuICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9Hb29nbGVDaHJvbWVMYWJzL2NyaXR0ZXJzL2lzc3Vlcy82NFxuICAgIGluZGV4SHRtbCA9IGluZGV4SHRtbC5yZXBsYWNlKFxuICAgICAgLyBtZWRpYT1cXFwicHJpbnRcXFwiIG9ubG9hZD1cXFwidGhpc1xcLm1lZGlhPSdhbGwnXCI+PG5vc2NyaXB0PjxsaW5rIC4rPz48XFwvbm9zY3JpcHQ+L2csXG4gICAgICAnPicsXG4gICAgKTtcbiAgfVxuXG4gIGxldCBodG1sID0gYXdhaXQgcmVuZGVyTW9kdWxlKEFwcFNlcnZlck1vZHVsZSwge1xuICAgIGRvY3VtZW50OiBpbmRleEh0bWwsXG4gICAgdXJsOiByb3V0ZSxcbiAgfSk7XG5cbiAgaWYgKGlubGluZUNyaXRpY2FsQ3NzUHJvY2Vzc29yKSB7XG4gICAgY29uc3QgeyBjb250ZW50LCB3YXJuaW5ncywgZXJyb3JzIH0gPSBhd2FpdCBpbmxpbmVDcml0aWNhbENzc1Byb2Nlc3Nvci5wcm9jZXNzKGh0bWwsIHtcbiAgICAgIG91dHB1dFBhdGgsXG4gICAgfSk7XG4gICAgcmVzdWx0LmVycm9ycyA9IGVycm9ycztcbiAgICByZXN1bHQud2FybmluZ3MgPSB3YXJuaW5ncztcbiAgICBodG1sID0gY29udGVudDtcbiAgfVxuXG4gIC8vIFRoaXMgY2FzZSBoYXBwZW5zIHdoZW4gd2UgYXJlIHByZXJlbmRlcmluZyBcIi9cIi5cbiAgaWYgKGJyb3dzZXJJbmRleE91dHB1dFBhdGggPT09IG91dHB1dEluZGV4UGF0aCkge1xuICAgIGNvbnN0IGJyb3dzZXJJbmRleE91dHB1dFBhdGhPcmlnaW5hbCA9IHBhdGguam9pbihvdXRwdXRQYXRoLCAnaW5kZXgub3JpZ2luYWwuaHRtbCcpO1xuICAgIGZzLnJlbmFtZVN5bmMoYnJvd3NlckluZGV4T3V0cHV0UGF0aCwgYnJvd3NlckluZGV4T3V0cHV0UGF0aE9yaWdpbmFsKTtcbiAgfVxuXG4gIGZzLm1rZGlyU3luYyhvdXRwdXRGb2xkZXJQYXRoLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgZnMud3JpdGVGaWxlU3luYyhvdXRwdXRJbmRleFBhdGgsIGh0bWwpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iXX0=