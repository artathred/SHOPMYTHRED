/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ÉµInlineCriticalCssProcessor as InlineCriticalCssProcessor } from '@nguniversal/common/engine';
import * as fs from 'fs';
import * as path from 'path';
let workerArgs;
let inlineCriticalCssProcessor;
export function setup(options) {
    workerArgs = options;
    if (workerArgs.inlineCriticalCss) {
        inlineCriticalCssProcessor = new InlineCriticalCssProcessor({
            deployUrl: workerArgs.deployUrl,
            minify: workerArgs.minifyCss,
        });
    }
}
/**
 * Renders each route in routes and writes them to <outputPath>/<route>/index.html.
 */
export function render(outputPath, serverBundlePath, route) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = {};
        const browserIndexOutputPath = path.join(outputPath, workerArgs.indexFile);
        const outputFolderPath = path.join(outputPath, route);
        const outputIndexPath = path.join(outputFolderPath, 'index.html');
        const { renderModule, AppServerModule } = yield import(serverBundlePath);
        const browserIndexInputPath = path.join(outputPath, workerArgs.indexFile);
        let indexHtml = yield fs.promises.readFile(browserIndexInputPath, 'utf8');
        indexHtml = indexHtml.replace('</html>', '<!-- This page was prerendered with Angular Universal -->\n</html>');
        if (workerArgs.inlineCriticalCss) {
            // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64
            indexHtml = indexHtml.replace(/ media=\"print\" onload=\"this\.media='all'"><noscript><link .+?><\/noscript>/g, '>');
        }
        let html = yield renderModule(AppServerModule, {
            document: indexHtml,
            url: route,
        });
        if (inlineCriticalCssProcessor) {
            const { content, warnings, errors } = yield inlineCriticalCssProcessor.process(html, {
                outputPath,
            });
            result.errors = errors;
            result.warnings = warnings;
            html = content;
        }
        // This case happens when we are prerendering "/".
        if (browserIndexOutputPath === outputIndexPath) {
            const browserIndexOutputPathOriginal = path.join(outputPath, 'index.original.html');
            fs.renameSync(browserIndexOutputPath, browserIndexOutputPathOriginal);
        }
        fs.mkdirSync(outputFolderPath, { recursive: true });
        fs.writeFileSync(outputIndexPath, html);
        return result;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9idWlsZGVycy9zcmMvcHJlcmVuZGVyL3dvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7QUFFSCxPQUFPLEVBQUUsMkJBQTJCLElBQUksMEJBQTBCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN2RyxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUN6QixPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQWM3QixJQUFJLFVBQTJCLENBQUM7QUFDaEMsSUFBSSwwQkFBa0UsQ0FBQztBQUV2RSxNQUFNLFVBQVUsS0FBSyxDQUFDLE9BQXdCO0lBQzVDLFVBQVUsR0FBRyxPQUFPLENBQUM7SUFDckIsSUFBSSxVQUFVLENBQUMsaUJBQWlCLEVBQUU7UUFDaEMsMEJBQTBCLEdBQUcsSUFBSSwwQkFBMEIsQ0FBQztZQUMxRCxTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQVM7WUFDL0IsTUFBTSxFQUFFLFVBQVUsQ0FBQyxTQUFTO1NBQzdCLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFnQixNQUFNLENBQzFCLFVBQWtCLEVBQ2xCLGdCQUF3QixFQUN4QixLQUFhOztRQUViLE1BQU0sTUFBTSxHQUFHLEVBQWtCLENBQUM7UUFDbEMsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0UsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0RCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRWxFLE1BQU0sRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUV6RSxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxRSxJQUFJLFNBQVMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFFLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUMzQixTQUFTLEVBQ1Qsb0VBQW9FLENBQ3JFLENBQUM7UUFDRixJQUFJLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRTtZQUNoQyx3RUFBd0U7WUFDeEUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQzNCLGdGQUFnRixFQUNoRixHQUFHLENBQ0osQ0FBQztTQUNIO1FBRUQsSUFBSSxJQUFJLEdBQUcsTUFBTSxZQUFZLENBQUMsZUFBZSxFQUFFO1lBQzdDLFFBQVEsRUFBRSxTQUFTO1lBQ25CLEdBQUcsRUFBRSxLQUFLO1NBQ1gsQ0FBQyxDQUFDO1FBRUgsSUFBSSwwQkFBMEIsRUFBRTtZQUM5QixNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7Z0JBQ25GLFVBQVU7YUFDWCxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUN2QixNQUFNLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztZQUMzQixJQUFJLEdBQUcsT0FBTyxDQUFDO1NBQ2hCO1FBRUQsa0RBQWtEO1FBQ2xELElBQUksc0JBQXNCLEtBQUssZUFBZSxFQUFFO1lBQzlDLE1BQU0sOEJBQThCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUscUJBQXFCLENBQUMsQ0FBQztZQUNwRixFQUFFLENBQUMsVUFBVSxDQUFDLHNCQUFzQixFQUFFLDhCQUE4QixDQUFDLENBQUM7U0FDdkU7UUFFRCxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDcEQsRUFBRSxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IMm1SW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzb3IgYXMgSW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzb3IgfSBmcm9tICdAbmd1bml2ZXJzYWwvY29tbW9uL2VuZ2luZSc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdvcmtlclNldHVwQXJncyB7XG4gIGluZGV4RmlsZTogc3RyaW5nO1xuICBkZXBsb3lVcmw6IHN0cmluZztcbiAgaW5saW5lQ3JpdGljYWxDc3M6IGJvb2xlYW47XG4gIG1pbmlmeUNzczogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZW5kZXJSZXN1bHQge1xuICBlcnJvcnM/OiBzdHJpbmdbXTtcbiAgd2FybmluZ3M/OiBzdHJpbmdbXTtcbn1cblxubGV0IHdvcmtlckFyZ3M6IFdvcmtlclNldHVwQXJncztcbmxldCBpbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvcjogSW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzb3IgfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cChvcHRpb25zOiBXb3JrZXJTZXR1cEFyZ3MpOiB2b2lkIHtcbiAgd29ya2VyQXJncyA9IG9wdGlvbnM7XG4gIGlmICh3b3JrZXJBcmdzLmlubGluZUNyaXRpY2FsQ3NzKSB7XG4gICAgaW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzb3IgPSBuZXcgSW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzb3Ioe1xuICAgICAgZGVwbG95VXJsOiB3b3JrZXJBcmdzLmRlcGxveVVybCxcbiAgICAgIG1pbmlmeTogd29ya2VyQXJncy5taW5pZnlDc3MsXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW5kZXJzIGVhY2ggcm91dGUgaW4gcm91dGVzIGFuZCB3cml0ZXMgdGhlbSB0byA8b3V0cHV0UGF0aD4vPHJvdXRlPi9pbmRleC5odG1sLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVuZGVyKFxuICBvdXRwdXRQYXRoOiBzdHJpbmcsXG4gIHNlcnZlckJ1bmRsZVBhdGg6IHN0cmluZyxcbiAgcm91dGU6IHN0cmluZyxcbik6IFByb21pc2U8UmVuZGVyUmVzdWx0PiB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9IGFzIFJlbmRlclJlc3VsdDtcbiAgY29uc3QgYnJvd3NlckluZGV4T3V0cHV0UGF0aCA9IHBhdGguam9pbihvdXRwdXRQYXRoLCB3b3JrZXJBcmdzLmluZGV4RmlsZSk7XG4gIGNvbnN0IG91dHB1dEZvbGRlclBhdGggPSBwYXRoLmpvaW4ob3V0cHV0UGF0aCwgcm91dGUpO1xuICBjb25zdCBvdXRwdXRJbmRleFBhdGggPSBwYXRoLmpvaW4ob3V0cHV0Rm9sZGVyUGF0aCwgJ2luZGV4Lmh0bWwnKTtcblxuICBjb25zdCB7IHJlbmRlck1vZHVsZSwgQXBwU2VydmVyTW9kdWxlIH0gPSBhd2FpdCBpbXBvcnQoc2VydmVyQnVuZGxlUGF0aCk7XG5cbiAgY29uc3QgYnJvd3NlckluZGV4SW5wdXRQYXRoID0gcGF0aC5qb2luKG91dHB1dFBhdGgsIHdvcmtlckFyZ3MuaW5kZXhGaWxlKTtcbiAgbGV0IGluZGV4SHRtbCA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKGJyb3dzZXJJbmRleElucHV0UGF0aCwgJ3V0ZjgnKTtcbiAgaW5kZXhIdG1sID0gaW5kZXhIdG1sLnJlcGxhY2UoXG4gICAgJzwvaHRtbD4nLFxuICAgICc8IS0tIFRoaXMgcGFnZSB3YXMgcHJlcmVuZGVyZWQgd2l0aCBBbmd1bGFyIFVuaXZlcnNhbCAtLT5cXG48L2h0bWw+JyxcbiAgKTtcbiAgaWYgKHdvcmtlckFyZ3MuaW5saW5lQ3JpdGljYWxDc3MpIHtcbiAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vR29vZ2xlQ2hyb21lTGFicy9jcml0dGVycy9pc3N1ZXMvNjRcbiAgICBpbmRleEh0bWwgPSBpbmRleEh0bWwucmVwbGFjZShcbiAgICAgIC8gbWVkaWE9XFxcInByaW50XFxcIiBvbmxvYWQ9XFxcInRoaXNcXC5tZWRpYT0nYWxsJ1wiPjxub3NjcmlwdD48bGluayAuKz8+PFxcL25vc2NyaXB0Pi9nLFxuICAgICAgJz4nLFxuICAgICk7XG4gIH1cblxuICBsZXQgaHRtbCA9IGF3YWl0IHJlbmRlck1vZHVsZShBcHBTZXJ2ZXJNb2R1bGUsIHtcbiAgICBkb2N1bWVudDogaW5kZXhIdG1sLFxuICAgIHVybDogcm91dGUsXG4gIH0pO1xuXG4gIGlmIChpbmxpbmVDcml0aWNhbENzc1Byb2Nlc3Nvcikge1xuICAgIGNvbnN0IHsgY29udGVudCwgd2FybmluZ3MsIGVycm9ycyB9ID0gYXdhaXQgaW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzb3IucHJvY2VzcyhodG1sLCB7XG4gICAgICBvdXRwdXRQYXRoLFxuICAgIH0pO1xuICAgIHJlc3VsdC5lcnJvcnMgPSBlcnJvcnM7XG4gICAgcmVzdWx0Lndhcm5pbmdzID0gd2FybmluZ3M7XG4gICAgaHRtbCA9IGNvbnRlbnQ7XG4gIH1cblxuICAvLyBUaGlzIGNhc2UgaGFwcGVucyB3aGVuIHdlIGFyZSBwcmVyZW5kZXJpbmcgXCIvXCIuXG4gIGlmIChicm93c2VySW5kZXhPdXRwdXRQYXRoID09PSBvdXRwdXRJbmRleFBhdGgpIHtcbiAgICBjb25zdCBicm93c2VySW5kZXhPdXRwdXRQYXRoT3JpZ2luYWwgPSBwYXRoLmpvaW4ob3V0cHV0UGF0aCwgJ2luZGV4Lm9yaWdpbmFsLmh0bWwnKTtcbiAgICBmcy5yZW5hbWVTeW5jKGJyb3dzZXJJbmRleE91dHB1dFBhdGgsIGJyb3dzZXJJbmRleE91dHB1dFBhdGhPcmlnaW5hbCk7XG4gIH1cblxuICBmcy5ta2RpclN5bmMob3V0cHV0Rm9sZGVyUGF0aCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gIGZzLndyaXRlRmlsZVN5bmMob3V0cHV0SW5kZXhQYXRoLCBodG1sKTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuIl19